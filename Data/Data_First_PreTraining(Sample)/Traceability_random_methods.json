[
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Calculate square root METHOD: public double sqrt(double number) {return Math.sqrt(number);}",
        "output": "Yes, the requirement is linked with the sqrt method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Concatenate strings METHOD: public String concat(String str1, String str2) {return str1 + str2;}",
        "output": "Yes, the requirement is linked with the concat method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Find the maximum of two numbers METHOD: public int max(int num1, int num2) {return num1 > num2 ? num1 : num2;}",
        "output": "Yes, the requirement is linked with the max method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Sort an array METHOD: public void sortArray(int[] arr) {Arrays.sort(arr);}",
        "output": "Yes, the requirement is linked with the sortArray method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Convert temperature from Celsius to Fahrenheit METHOD: public double celsiusToFahrenheit(double celsius) {return (celsius * 9/5) + 32;}",
        "output": "Yes, the requirement is linked with the celsiusToFahrenheit method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Check if a number is prime METHOD: public boolean isPrime(int number) { /* Prime checking logic */ }",
        "output": "Yes, the requirement is linked with the isPrime method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Reverse a string METHOD: public String reverseString(String str) { /* Reversing logic */ }",
        "output": "Yes, the requirement is linked with the reverseString method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Calculate factorial METHOD: public int factorial(int n) { /* Factorial logic */ }",
        "output": "Yes, the requirement is linked with the factorial method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Convert miles to kilometers METHOD: public double milesToKilometers(double miles) {return miles * 1.60934;}",
        "output": "Yes, the requirement is linked with the milesToKilometers method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Generate random number METHOD: public int randomInt(int min, int max) { /* Random number generation logic */ }",
        "output": "Yes, the requirement is linked with the randomInt method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Validate user login METHOD: public boolean validateUser(String username, String password) { return username.equals('admin') && password.equals('password'); }",
        "output": "Yes, the requirement is linked with the validateUser method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Process payment METHOD: public void processPayment(double amount) { System.out.println('Processing payment of ' + amount); }",
        "output": "Yes, the requirement is linked with the processPayment method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Display user profile METHOD: public String getUserProfile(int userId) { return 'User Profile for ID: ' + userId; }",
        "output": "Yes, the requirement is linked with the getUserProfile method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Log user activity METHOD: public void logActivity(String activity) { System.out.println('Logging activity: ' + activity); }",
        "output": "Yes, the requirement is linked with the logActivity method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Send email notification METHOD: public void sendEmail(String address, String message) { System.out.println('Sending email to ' + address + ': ' + message); }",
        "output": "Yes, the requirement is linked with the sendEmail method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Generate report METHOD: public Report generateReport(Date startDate, Date endDate) { return new Report(startDate, endDate); }",
        "output": "Yes, the requirement is linked with the generateReport method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Update user settings METHOD: public void updateUserSettings(int userId, Settings settings) { System.out.println('Updating settings for user ' + userId); }",
        "output": "Yes, the requirement is linked with the updateUserSettings method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Encrypt data METHOD: public String encryptData(String data) { return 'EncryptedData'; }",
        "output": "Yes, the requirement is linked with the encryptData method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Calculate tax METHOD: public double calculateTax(double income) { return income * 0.2; }",
        "output": "Yes, the requirement is linked with the calculateTax method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Resize image METHOD: public Image resizeImage(Image image, int width, int height) { return new Image(width, height); }",
        "output": "Yes, the requirement is linked with the resizeImage method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Archive documents METHOD: public void archiveDocuments(List<Document> documents) { System.out.println('Archiving ' + documents.size() + ' documents'); }",
        "output": "Yes, the requirement is linked with the archiveDocuments method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Calculate interest rate METHOD: public double calculateInterest(double principal, double rate, int time) { return principal * rate * time / 100; }",
        "output": "Yes, the requirement is linked with the calculateInterest method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Check inventory levels METHOD: public int checkInventory(String productID) { return 100; /* Assuming constant inventory level for simplicity */ }",
        "output": "Yes, the requirement is linked with the checkInventory method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Sync data with cloud METHOD: public void syncWithCloud(Server server) { System.out.println('Syncing data with server ' + server.getName()); }",
        "output": "Yes, the requirement is linked with the syncWithCloud method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Manage user sessions METHOD: public void manageSessions(User user) { System.out.println('Managing session for user ' + user.getName()); }",
        "output": "Yes, the requirement is linked with the manageSessions method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Track order delivery METHOD: public String trackOrder(String orderId) { return 'Order ' + orderId + ' is on the way'; }",
        "output": "Yes, the requirement is linked with the trackOrder method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Filter search results METHOD: public List<Result> filterResults(String query, FilterOptions options) { return new ArrayList<>(); /* Returning empty list for simplicity */ }",
        "output": "Yes, the requirement is linked with the filterResults method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Schedule appointments METHOD: public void scheduleAppointment(Date date, Client client) { System.out.println('Scheduling appointment for ' + client.getName() + ' on ' + date.toString()); }",
        "output": "Yes, the requirement is linked with the scheduleAppointment method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Monitor system health METHOD: public SystemStatus monitorSystem() { return new SystemStatus('OK', new Date()); }",
        "output": "Yes, the requirement is linked with the monitorSystem method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Optimize database queries METHOD: public QueryResult optimizeQuery(DatabaseQuery query) { return new QueryResult(); /* Returning default result for simplicity */ }",
        "output": "Yes, the requirement is linked with the optimizeQuery method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Auto-generate passwords METHOD: public String generatePassword() { return UUID.randomUUID().toString().substring(0, 8); }",
        "output": "Yes, the requirement is linked with the generatePassword method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Validate credit card METHOD: public boolean validateCard(String cardNumber) { return cardNumber.length() == 16 && cardNumber.matches('[0-9]+'); }",
        "output": "Yes, the requirement is linked with the validateCard method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Calculate shipping costs METHOD: public double calculateShipping(double weight, String destination) { return weight * 0.5; /* Simplified calculation */ }",
        "output": "Yes, the requirement is linked with the calculateShipping method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Monitor network traffic METHOD: public void monitorTraffic(Network network) { System.out.println('Monitoring traffic on ' + network.getName()); }",
        "output": "Yes, the requirement is linked with the monitorTraffic method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Analyze sales data METHOD: public AnalysisResult analyzeSales(List<Sale> sales) { return new AnalysisResult(); /* Simplified analysis */ }",
        "output": "Yes, the requirement is linked with the analyzeSales method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Create user accounts METHOD: public User createUser(String name, String email) { return new User(name, email); }",
        "output": "Yes, the requirement is linked with the createUser method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Backup system data METHOD: public void backupData(SystemData data) { System.out.println('Backing up data'); }",
        "output": "Yes, the requirement is linked with the backupData method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Optimize image loading METHOD: public Image optimizeLoading(String imageUrl) { return new Image(imageUrl, true); /* Simplified loading */ }",
        "output": "Yes, the requirement is linked with the optimizeLoading method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Predict weather patterns METHOD: public WeatherPrediction predictWeather(Location location) { return new WeatherPrediction(); /* Simplified prediction */ }",
        "output": "Yes, the requirement is linked with the predictWeather method."
    },
    {
        "instruction": "Check if the requirement is linked to the method",
        "input": "REQUIREMENT: Stream video content METHOD: public StreamResult streamVideo(String videoId) { return new StreamResult(videoId, true); /* Simplified streaming */ }",
        "output": "Yes, the requirement is linked with the streamVideo method."
    }
]