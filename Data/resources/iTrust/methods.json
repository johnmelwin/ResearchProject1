[{"id":1, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilder.-init-", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilder.-init-()", "classid":1, "classname":"edu.ncsu.csc.itrust.BeanBuilder", "shortclassname":"BeanBuilder", "method":"BeanBuilder() {\r\n}"},
 {"id":2, "methodname":"build(java.util.Map,java.lang.Object)", "methodnamerefined":"build", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilder.build", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilder.build(java.util.Map,java.lang.Object)", "classid":1, "classname":"edu.ncsu.csc.itrust.BeanBuilder", "shortclassname":"BeanBuilder", "method":"/**\r\n * The code here is not obvious, but this method should not need rewriting unless a bug is found\r\n *\r\n * @param map\r\n * \t\t-\r\n * \t\ttypically a request.getParameterMap; also can be a HashMap\r\n * @param bean\r\n * \t\t-\r\n * \t\tan instantiated bean to be loaded. Loaded bean is returned.\r\n * @return a loaded \"bean\"\r\n * @throws Exception\r\n * \t\t-\r\n * \t\tSeveral exceptions are thrown here, so promotion seemed fitting\r\n */\r\n// this warning is only suppressed because Map isnt parameterized (old JSP)\r\npublic T build(Map map, T bean) throws Exception {\r\n    // JavaBeans should not have overloaded methods, according to their API\r\n    // (a stupid limitation!)\r\n    // Nevertheless, we should check for it\r\n    checkOverloadedMethods(bean);\r\n    // Use an introspector to find all of the getXXX or setXXX, we only want\r\n    // the setXXX\r\n    PropertyDescriptor[] propertyDescriptors = Introspector.getBeanInfo(bean.getClass()).getPropertyDescriptors();\r\n    for (PropertyDescriptor descriptor : propertyDescriptors) {\r\n        // if object is null, either it was ignored or empty - just go with\r\n        // beans default\r\n        String[] value = ((String[]) (map.get(descriptor.getName())));\r\n        Method writeMethod = descriptor.getWriteMethod();\r\n        if (((!(\"class\".equals(descriptor.getName()))) && (value != null)) && (writeMethod != null)) {\r\n            // descriptors name is the name of your property; like\r\n            // firstName\r\n            // only take the first string\r\n            try {\r\n                // Skip the setters for enumerations\r\n                if ((writeMethod.getParameterTypes()[0].getEnumConstants()) == null)\r\n                    writeMethod.invoke(bean, new Object[]{ value[0] });\r\n\r\n            } catch (IllegalArgumentException e) {\r\n                // Throw a more informative exception\r\n                throw new IllegalArgumentException((((((e.getMessage()) + \" with \") + (writeMethod.getName())) + \" and \") + (value[0])));\r\n            }\r\n        }\r\n    }\r\n    return bean;\r\n}"},
 {"id":3, "methodname":"checkOverloadedMethods(java.lang.Object)", "methodnamerefined":"checkOverloadedMethods", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilder.checkOverloadedMethods", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilder.checkOverloadedMethods(java.lang.Object)", "classid":1, "classname":"edu.ncsu.csc.itrust.BeanBuilder", "shortclassname":"BeanBuilder", "method":"/**\r\n * Checks for overloaded methods\r\n *\r\n * @param bean\r\n * \t\titem to check\r\n */\r\nprivate void checkOverloadedMethods(T bean) {\r\n    Method[] methods = bean.getClass().getDeclaredMethods();\r\n    HashMap<String, String> nameMap = new HashMap<String, String>(methods.length);\r\n    for (Method method : methods) {\r\n        if ((nameMap.get(method.getName())) != null)\r\n            throw new IllegalArgumentException((((bean.getClass().getName()) + \" should not have any overloaded methods, like \") + (method.getName())));\r\n\r\n        // allow an equals, compareTo override\r\n        if (!((\"equals\".equals(method.getName())) || (\"compareTo\".equals(method.getName()))))\r\n            nameMap.put(method.getName(), \"exists\");\r\n\r\n    }\r\n}"},
 {"id":4, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilderTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilderTest.-init-()", "classid":2, "classname":"edu.ncsu.csc.itrust.BeanBuilderTest", "shortclassname":"BeanBuilderTest", "method":"BeanBuilderTest() {\r\n}"},
 {"id":5, "methodname":"testEmptyPatientDateOfBirth()", "methodnamerefined":"testEmptyPatientDateOfBirth", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilderTest.testEmptyPatientDateOfBirth", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilderTest.testEmptyPatientDateOfBirth()", "classid":2, "classname":"edu.ncsu.csc.itrust.BeanBuilderTest", "shortclassname":"BeanBuilderTest", "method":"public void testEmptyPatientDateOfBirth() throws Exception {\r\n    assertEquals(\"empty patient bean\", new PatientBean().getDateOfBirthStr(), new BeanBuilder<PatientBean>().build(new HashMap<String, String>(), new PatientBean()).getDateOfBirthStr());\r\n}"},
 {"id":6, "methodname":"testEqualsOkayToBeOverloaded()", "methodnamerefined":"testEqualsOkayToBeOverloaded", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilderTest.testEqualsOkayToBeOverloaded", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilderTest.testEqualsOkayToBeOverloaded()", "classid":2, "classname":"edu.ncsu.csc.itrust.BeanBuilderTest", "shortclassname":"BeanBuilderTest", "method":"public void testEqualsOkayToBeOverloaded() throws Exception {\r\n    HashMap<String, Object> map = new HashMap<String, Object>();\r\n    map.put(\"thing\", new String[]{ \"test text\" });\r\n    OkayBean ok = new BeanBuilder<OkayBean>().build(map, new OkayBean());\r\n    assertEquals(\"test text\", ok.getThing());\r\n}"},
 {"id":7, "methodname":"testNotOverloaded()", "methodnamerefined":"testNotOverloaded", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilderTest.testNotOverloaded", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilderTest.testNotOverloaded()", "classid":2, "classname":"edu.ncsu.csc.itrust.BeanBuilderTest", "shortclassname":"BeanBuilderTest", "method":"public void testNotOverloaded() throws Exception {\r\n    try {\r\n        HashMap<String, Object> map = new HashMap<String, Object>();\r\n        map.put(\"thing\", new String[]{ \"5\" });\r\n        new BeanBuilder<BadBean>().build(map, new BadBean());\r\n        fail(\"exception should have been thrown\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(\"edu.ncsu.csc.itrust.testutils.BadBean should not have any overloaded methods, like setThing\", e.getMessage());\r\n    }\r\n}"},
 {"id":8, "methodname":"testOkayBean1()", "methodnamerefined":"testOkayBean1", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilderTest.testOkayBean1", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilderTest.testOkayBean1()", "classid":2, "classname":"edu.ncsu.csc.itrust.BeanBuilderTest", "shortclassname":"BeanBuilderTest", "method":"public void testOkayBean1() throws Exception {\r\n    OkayBean ok = new OkayBean();\r\n    assertFalse(ok.equals(\"\"));\r\n    OkayBean ok2 = new OkayBean();\r\n    assertTrue(ok.equals(ok2));\r\n    assertEquals(42, ok.hashCode());\r\n}"},
 {"id":9, "methodname":"testOverloadedConstructor()", "methodnamerefined":"testOverloadedConstructor", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilderTest.testOverloadedConstructor", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilderTest.testOverloadedConstructor()", "classid":2, "classname":"edu.ncsu.csc.itrust.BeanBuilderTest", "shortclassname":"BeanBuilderTest", "method":"public void testOverloadedConstructor() throws Exception {\r\n    HashMap<String, Object> map = new HashMap<String, Object>();\r\n    map.put(\"description\", new String[]{ \"test text\" });\r\n    DiagnosisBean diag = new BeanBuilder<DiagnosisBean>().build(map, new DiagnosisBean());\r\n    assertEquals(\"test text\", diag.getDescription());\r\n}"},
 {"id":10, "methodname":"testPartialPatient()", "methodnamerefined":"testPartialPatient", "methodabbreviation":"edu.ncsu.csc.itrust.BeanBuilderTest.testPartialPatient", "fullmethod":"edu.ncsu.csc.itrust.BeanBuilderTest.testPartialPatient()", "classid":2, "classname":"edu.ncsu.csc.itrust.BeanBuilderTest", "shortclassname":"BeanBuilderTest", "method":"// just testing the building process - test the bean validation elsewhere!\r\npublic void testPartialPatient() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Bob\");\r\n    p.setDateOfBirthStr(\"10/10/1950\");\r\n    p.setPhone(\"85\");\r\n    Map<String, Object> m = new HashMap<String, Object>();\r\n    m.put(\"firstName\", new String[]{ \"Bob\" });\r\n    m.put(\"dateOfBirthStr\", new String[]{ \"10/10/1950\" });\r\n    m.put(\"phone\", new String[]{ \"85\" });\r\n    PatientBean builtBean = new BeanBuilder<PatientBean>().build(m, new PatientBean());\r\n    assertEquals(\"correctly built patient bean from hashmap\", p.getFirstName(), builtBean.getFirstName());\r\n    assertEquals(\"correctly built patient bean from hashmap\", p.getDateOfBirthStr(), builtBean.getDateOfBirthStr());\r\n    assertEquals(\"correctly built patient bean from hashmap\", p.getPhone(), builtBean.getPhone());\r\n    assertEquals(\"correctly built patient bean from hashmap\", p.getLastName(), builtBean.getLastName());\r\n}"},
 {"id":11, "methodname":"-init-(java.io.InputStream)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParser.-init-", "fullmethod":"edu.ncsu.csc.itrust.CSVParser.-init-(java.io.InputStream)", "classid":3, "classname":"edu.ncsu.csc.itrust.CSVParser", "shortclassname":"CSVParser", "method":"/**\r\n * Main method used to manually test functionality.\r\n *\r\n * @param args\r\n * \t\t\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws CSVFormatException\r\n * \t\t\r\n */\r\n/* public static void main(String args[]) throws FileNotFoundException, CSVFormatException{\nCSVParser parser=new CSVParser(new File(\"/home/michael/Source/workspace/iTrust/testing-files/sample_patientupload/HCPPatientUploadValidData.csv\"));\nfor(int i=0;i<parser.getHeader().size();i++){\nSystem.out.println(parser.getHeader().get(i));\n}\n}\n */\r\n/**\r\n * Constructor taking a File object (for debugging purposes)\r\n *\r\n * @param csvfile\r\n * \t\tThe CSV file to parse.\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws CSVFormatException\r\n * \t\t\r\n */\r\n/* CSVParser(File csvfile) throws FileNotFoundException, CSVFormatException{\nScanner CSVScanner = new Scanner(csvfile);\nparseCSV(CSVScanner);\n}\n */\r\n/**\r\n * Constructor taking an InputStream\r\n *\r\n * @param csvstream\r\n * \t\t\r\n * @throws CSVFormatException\r\n * \t\t\r\n */\r\npublic CSVParser(InputStream csvstream) throws CSVFormatException {\r\n    Scanner CSVScanner = new Scanner(new InputStreamReader(csvstream));\r\n    parseCSV(CSVScanner);\r\n}"},
 {"id":12, "methodname":"-init-(java.util.Scanner)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParser.-init-", "fullmethod":"edu.ncsu.csc.itrust.CSVParser.-init-(java.util.Scanner)", "classid":3, "classname":"edu.ncsu.csc.itrust.CSVParser", "shortclassname":"CSVParser", "method":"/**\r\n * Constructor taking an already-prepared Scanner\r\n * (For testing purposes)\r\n *\r\n * @param csvstream\r\n * \t\t\r\n * @throws CSVFormatException\r\n * \t\t\r\n */\r\nCSVParser(Scanner CSVScanner) throws CSVFormatException {\r\n    parseCSV(CSVScanner);\r\n}"},
 {"id":13, "methodname":"getData()", "methodnamerefined":"getData", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParser.getData", "fullmethod":"edu.ncsu.csc.itrust.CSVParser.getData()", "classid":3, "classname":"edu.ncsu.csc.itrust.CSVParser", "shortclassname":"CSVParser", "method":"/**\r\n * Returns the ArrayList of ArrayLists of Strings containing the CSV data fields\r\n *\r\n * @return ArrayList of ArrayLists Strings containing CSV data fields\r\n */\r\npublic ArrayList<ArrayList<String>> getData() {\r\n    return CSVData;\r\n}"},
 {"id":14, "methodname":"getErrors()", "methodnamerefined":"getErrors", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParser.getErrors", "fullmethod":"edu.ncsu.csc.itrust.CSVParser.getErrors()", "classid":3, "classname":"edu.ncsu.csc.itrust.CSVParser", "shortclassname":"CSVParser", "method":"/**\r\n * Returns the ErrorList of errors accumulated while parsing CSV\r\n *\r\n * @return ErrorList of errors accumulated while parsing CSV\r\n */\r\npublic ErrorList getErrors() {\r\n    return errors;\r\n}"},
 {"id":15, "methodname":"getHeader()", "methodnamerefined":"getHeader", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParser.getHeader", "fullmethod":"edu.ncsu.csc.itrust.CSVParser.getHeader()", "classid":3, "classname":"edu.ncsu.csc.itrust.CSVParser", "shortclassname":"CSVParser", "method":"/**\r\n * Returns the ArrayList of Strings containing the CSV header fields\r\n *\r\n * @return ArrayList of Strings containing CSV header fields\r\n */\r\npublic ArrayList<String> getHeader() {\r\n    return CSVHeader;\r\n}"},
 {"id":16, "methodname":"parseCSV(java.util.Scanner)", "methodnamerefined":"parseCSV", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParser.parseCSV", "fullmethod":"edu.ncsu.csc.itrust.CSVParser.parseCSV(java.util.Scanner)", "classid":3, "classname":"edu.ncsu.csc.itrust.CSVParser", "shortclassname":"CSVParser", "method":"/**\r\n * Parses the CSV file line-by-line.\r\n *\r\n * @param CSVScanner\r\n * \t\tA scanner to a CSV stream.\r\n * @throws CSVFormatException\r\n * \t\t\r\n */\r\nprivate void parseCSV(Scanner CSVScanner) throws CSVFormatException {\r\n    String currentLine;\r\n    ArrayList<String> parsedLine = null;\r\n    // The number of fields (columns) in the CSV file as determined by the number of headers\r\n    int numFields = 0;\r\n    // The current line number being processed (Used to report the line number of errors)\r\n    int currentLineNumber = 1;\r\n    // Attempt to read the first line (the header) from the file\r\n    if (CSVScanner.hasNextLine()) {\r\n        currentLine = CSVScanner.nextLine();\r\n        CSVHeader = parseCSVLine(currentLine);\r\n        numFields = CSVHeader.size();\r\n        // If it does not exist (or if the file isnt a text file at all), the entire process fails\r\n    } else {\r\n        throw new CSVFormatException(\"File is not valid CSV file.\");\r\n    }\r\n    // Read the file line-by-line and call the line parser for each line\r\n    while (CSVScanner.hasNextLine()) {\r\n        currentLineNumber++;\r\n        currentLine = CSVScanner.nextLine();\r\n        try {\r\n            parsedLine = parseCSVLine(currentLine);\r\n            // If the line doesnt have the right number of fields, it is ignored\r\n            if ((parsedLine.size()) == numFields) {\r\n                CSVData.add(parsedLine);\r\n            } else {\r\n                errors.addIfNotNull((\"Field number mismatch on line \" + currentLineNumber));\r\n            }\r\n            // If the line is otherwise invalid, it is also ignored\r\n        } catch (CSVFormatException e) {\r\n            errors.addIfNotNull((((e.getMessage()) + \" on line \") + currentLineNumber));\r\n        }\r\n    } \r\n}"},
 {"id":17, "methodname":"parseCSVLine(java.lang.String)", "methodnamerefined":"parseCSVLine", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParser.parseCSVLine", "fullmethod":"edu.ncsu.csc.itrust.CSVParser.parseCSVLine(java.lang.String)", "classid":3, "classname":"edu.ncsu.csc.itrust.CSVParser", "shortclassname":"CSVParser", "method":"/**\r\n * Parses the passed line character-by-character\r\n *\r\n * @param line\r\n * \t\tLine from the CSV file to parse\r\n * @return ArrayList of Strings, each containing the data from one field\r\n * @throws CSVFormatException\r\n * \t\t\r\n */\r\nprivate ArrayList<String> parseCSVLine(String line) throws CSVFormatException {\r\n    // Contains the fields from each line parsed\r\n    ArrayList<String> aLine = new ArrayList<String>();\r\n    // Contains the data from the current field being read\r\n    String currentField = \"\";\r\n    // Contains the status of whether or not the parser is inside a quoted area\r\n    // Used to handle commas and other special characters within the field.\r\n    boolean insideQuotes = false;\r\n    // Read the line character-by-character\r\n    for (int i = 0; i < (line.length()); i++) {\r\n        // Comma denotes the end of the current field unless it is quoted\r\n        if (((line.charAt(i)) == ,) && (!insideQuotes)) {\r\n            aLine.add(currentField);\r\n            currentField = \"\";\r\n            // If the field is not ending\r\n        } else {\r\n            // If the character is a \", ignore it and flip the quote status\r\n            if ((line.charAt(i)) == \") {\r\n                insideQuotes = !insideQuotes;\r\n                // Otherwise, add the character to the string\r\n            } else {\r\n                currentField = currentField + (line.substring(i, (i + 1)));\r\n            }\r\n        }\r\n    }\r\n    // If the line parser ends while still inside a quoted section, the input line was invalid\r\n    if (insideQuotes) {\r\n        throw new CSVFormatException(\"Line ended while inside quotes\");\r\n    }\r\n    // Grab text from last field too, since the last field does not end with a comma\r\n    aLine.add(currentField);\r\n    return aLine;\r\n}"},
 {"id":18, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParserTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.CSVParserTest.-init-()", "classid":4, "classname":"edu.ncsu.csc.itrust.CSVParserTest", "shortclassname":"CSVParserTest", "method":"CSVParserTest() {\r\n}"},
 {"id":19, "methodname":"testCSVCommaInField()", "methodnamerefined":"testCSVCommaInField", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParserTest.testCSVCommaInField", "fullmethod":"edu.ncsu.csc.itrust.CSVParserTest.testCSVCommaInField()", "classid":4, "classname":"edu.ncsu.csc.itrust.CSVParserTest", "shortclassname":"CSVParserTest", "method":"public void testCSVCommaInField() {\r\n    Scanner CSVHeader = new Scanner(\"\"test,1\",\"test,2\",\"test,3\"\");\r\n    CSVParser test = null;\r\n    try {\r\n        test = new CSVParser(CSVHeader);\r\n    } catch (Exception e) {\r\n        assertTrue(false);\r\n    }\r\n    ArrayList<String> header = test.getHeader();\r\n    assertEquals(3, header.size());\r\n    assertEquals(\"test,1\", header.get(0));\r\n    assertEquals(\"test,2\", header.get(1));\r\n    assertEquals(\"test,3\", header.get(2));\r\n    assertFalse(test.getErrors().hasErrors());\r\n}"},
 {"id":20, "methodname":"testCSVEndsWhileInQuote()", "methodnamerefined":"testCSVEndsWhileInQuote", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParserTest.testCSVEndsWhileInQuote", "fullmethod":"edu.ncsu.csc.itrust.CSVParserTest.testCSVEndsWhileInQuote()", "classid":4, "classname":"edu.ncsu.csc.itrust.CSVParserTest", "shortclassname":"CSVParserTest", "method":"public void testCSVEndsWhileInQuote() {\r\n    Scanner CSVHeader = new Scanner(\"test1,test2,test3\ntesting,testing,\"123\");\r\n    CSVParser test = null;\r\n    try {\r\n        test = new CSVParser(CSVHeader);\r\n    } catch (Exception e) {\r\n        assertTrue(false);\r\n    }\r\n    ArrayList<ArrayList<String>> data = test.getData();\r\n    assertEquals(0, data.size());\r\n    assertEquals(\"[Line ended while inside quotes on line 2]\", test.getErrors().toString());\r\n}"},
 {"id":21, "methodname":"testCSVParseData()", "methodnamerefined":"testCSVParseData", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParserTest.testCSVParseData", "fullmethod":"edu.ncsu.csc.itrust.CSVParserTest.testCSVParseData()", "classid":4, "classname":"edu.ncsu.csc.itrust.CSVParserTest", "shortclassname":"CSVParserTest", "method":"public void testCSVParseData() {\r\n    Scanner CSVHeader = new Scanner(\"test1,test2,test3\ntesting,testing,123\");\r\n    CSVParser test = null;\r\n    try {\r\n        test = new CSVParser(CSVHeader);\r\n    } catch (Exception e) {\r\n        assertTrue(false);\r\n    }\r\n    ArrayList<ArrayList<String>> data = test.getData();\r\n    assertEquals(1, data.size());\r\n    assertEquals(3, data.get(0).size());\r\n    assertEquals(\"testing\", data.get(0).get(0));\r\n    assertEquals(\"testing\", data.get(0).get(1));\r\n    assertEquals(\"123\", data.get(0).get(2));\r\n    assertFalse(test.getErrors().hasErrors());\r\n}"},
 {"id":22, "methodname":"testCSVParseHeader()", "methodnamerefined":"testCSVParseHeader", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParserTest.testCSVParseHeader", "fullmethod":"edu.ncsu.csc.itrust.CSVParserTest.testCSVParseHeader()", "classid":4, "classname":"edu.ncsu.csc.itrust.CSVParserTest", "shortclassname":"CSVParserTest", "method":"public void testCSVParseHeader() {\r\n    Scanner CSVHeader = new Scanner(\"test1,test2,test3\");\r\n    CSVParser test = null;\r\n    try {\r\n        test = new CSVParser(CSVHeader);\r\n    } catch (Exception e) {\r\n        assertTrue(false);\r\n    }\r\n    ArrayList<String> header = test.getHeader();\r\n    assertEquals(3, header.size());\r\n    assertEquals(\"test1\", header.get(0));\r\n    assertEquals(\"test2\", header.get(1));\r\n    assertEquals(\"test3\", header.get(2));\r\n    assertFalse(test.getErrors().hasErrors());\r\n}"},
 {"id":23, "methodname":"testEmptyCSV()", "methodnamerefined":"testEmptyCSV", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParserTest.testEmptyCSV", "fullmethod":"edu.ncsu.csc.itrust.CSVParserTest.testEmptyCSV()", "classid":4, "classname":"edu.ncsu.csc.itrust.CSVParserTest", "shortclassname":"CSVParserTest", "method":"public void testEmptyCSV() {\r\n    Scanner CSVHeader = new Scanner(\"\");\r\n    CSVParser test = null;\r\n    try {\r\n        test = new CSVParser(CSVHeader);\r\n    } catch (CSVFormatException e) {\r\n        // CSVFormatException is good here\r\n        return;\r\n    } catch (Exception e) {\r\n        // Other exceptions are bad\r\n        assertTrue(false);\r\n    }\r\n}"},
 {"id":24, "methodname":"testWrongNumberFields()", "methodnamerefined":"testWrongNumberFields", "methodabbreviation":"edu.ncsu.csc.itrust.CSVParserTest.testWrongNumberFields", "fullmethod":"edu.ncsu.csc.itrust.CSVParserTest.testWrongNumberFields()", "classid":4, "classname":"edu.ncsu.csc.itrust.CSVParserTest", "shortclassname":"CSVParserTest", "method":"public void testWrongNumberFields() {\r\n    Scanner CSVHeader = new Scanner(\"test1,test2,test3\ntesting,123\");\r\n    CSVParser test = null;\r\n    try {\r\n        test = new CSVParser(CSVHeader);\r\n    } catch (Exception e) {\r\n        assertTrue(false);\r\n    }\r\n    ArrayList<ArrayList<String>> data = test.getData();\r\n    assertEquals(0, data.size());\r\n    assertTrue(test.getErrors().hasErrors());\r\n    assertEquals(\"[Field number mismatch on line 2]\", test.getErrors().toString());\r\n}"},
 {"id":25, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.DBBuilder.-init-", "fullmethod":"edu.ncsu.csc.itrust.DBBuilder.-init-()", "classid":5, "classname":"edu.ncsu.csc.itrust.DBBuilder", "shortclassname":"DBBuilder", "method":"public DBBuilder() {\r\n    factory = TestDAOFactory.getTestInstance();\r\n}"},
 {"id":26, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.DBBuilder.-init-", "fullmethod":"edu.ncsu.csc.itrust.DBBuilder.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":5, "classname":"edu.ncsu.csc.itrust.DBBuilder", "shortclassname":"DBBuilder", "method":"public DBBuilder(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":27, "methodname":"createTables()", "methodnamerefined":"createTables", "methodabbreviation":"edu.ncsu.csc.itrust.DBBuilder.createTables", "fullmethod":"edu.ncsu.csc.itrust.DBBuilder.createTables()", "classid":5, "classname":"edu.ncsu.csc.itrust.DBBuilder", "shortclassname":"DBBuilder", "method":"public void createTables() throws FileNotFoundException, IOException, SQLException {\r\n    List<String> queries = SQLFileCache.getInstance().getQueries(\"sql/createTables.sql\");\r\n    executeSQL(queries);\r\n    System.out.println(\"Tables created.\");\r\n}"},
 {"id":28, "methodname":"dropTables()", "methodnamerefined":"dropTables", "methodabbreviation":"edu.ncsu.csc.itrust.DBBuilder.dropTables", "fullmethod":"edu.ncsu.csc.itrust.DBBuilder.dropTables()", "classid":5, "classname":"edu.ncsu.csc.itrust.DBBuilder", "shortclassname":"DBBuilder", "method":"public void dropTables() throws FileNotFoundException, IOException, SQLException {\r\n    List<String> queries = SQLFileCache.getInstance().getQueries(\"sql/dropTables.sql\");\r\n    executeSQL(queries);\r\n    System.out.println(\"Tables dropped.\");\r\n}"},
 {"id":29, "methodname":"executeSQL(java.util.List)", "methodnamerefined":"executeSQL", "methodabbreviation":"edu.ncsu.csc.itrust.DBBuilder.executeSQL", "fullmethod":"edu.ncsu.csc.itrust.DBBuilder.executeSQL(java.util.List)", "classid":5, "classname":"edu.ncsu.csc.itrust.DBBuilder", "shortclassname":"DBBuilder", "method":"public void executeSQL(List<String> queries) throws SQLException {\r\n    Connection conn = factory.getConnection();\r\n    long start = System.currentTimeMillis();\r\n    for (String sql : queries) {\r\n        System.out.println((\"Executing: \" + sql));\r\n        // System.out.println(\"\"\" + sql.replace(\"\"\", \"\\\") + \"\",\");\r\n        (DBBuilder.numExecuted)++;\r\n        Statement stmt = conn.createStatement();\r\n        try {\r\n            stmt.execute(sql);\r\n        } catch (SQLException e) {\r\n            throw new SQLException((((e.getMessage()) + \" from executing: \") + sql), e.getSQLState(), e.getErrorCode());\r\n        } finally {\r\n            stmt.close();\r\n        }\r\n    }\r\n    DBBuilder.queryTimeTaken += (System.currentTimeMillis()) - start;\r\n    System.out.println(((((\"Queries executed: \" + (DBBuilder.numExecuted)) + \"\nTime executing queries: \") + (DBBuilder.queryTimeTaken)) + \"ms\"));\r\n    conn.close();\r\n}"},
 {"id":30, "methodname":"executeSQLFile(java.lang.String)", "methodnamerefined":"executeSQLFile", "methodabbreviation":"edu.ncsu.csc.itrust.DBBuilder.executeSQLFile", "fullmethod":"edu.ncsu.csc.itrust.DBBuilder.executeSQLFile(java.lang.String)", "classid":5, "classname":"edu.ncsu.csc.itrust.DBBuilder", "shortclassname":"DBBuilder", "method":"public void executeSQLFile(String filepath) throws FileNotFoundException, IOException, SQLException {\r\n    executeSQL(SQLFileCache.getInstance().getQueries(filepath));\r\n}"},
 {"id":31, "methodname":"main(java.lang.String[])", "methodnamerefined":"main", "methodabbreviation":"edu.ncsu.csc.itrust.DBBuilder.main", "fullmethod":"edu.ncsu.csc.itrust.DBBuilder.main(java.lang.String[])", "classid":5, "classname":"edu.ncsu.csc.itrust.DBBuilder", "shortclassname":"DBBuilder", "method":"public static void main(String[] args) throws Exception {\r\n    DBBuilder.rebuildAll();\r\n}"},
 {"id":32, "methodname":"rebuildAll()", "methodnamerefined":"rebuildAll", "methodabbreviation":"edu.ncsu.csc.itrust.DBBuilder.rebuildAll", "fullmethod":"edu.ncsu.csc.itrust.DBBuilder.rebuildAll()", "classid":5, "classname":"edu.ncsu.csc.itrust.DBBuilder", "shortclassname":"DBBuilder", "method":"public static void rebuildAll() throws FileNotFoundException, IOException, SQLException {\r\n    DBBuilder dbBuilder = new DBBuilder(TestDAOFactory.getTestInstance());\r\n    dbBuilder.dropTables();\r\n    dbBuilder.createTables();\r\n    System.out.println(\"Operation Completed\");\r\n}"},
 {"id":33, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.DBUtil.-init-", "fullmethod":"edu.ncsu.csc.itrust.DBUtil.-init-()", "classid":6, "classname":"edu.ncsu.csc.itrust.DBUtil", "shortclassname":"DBUtil", "method":"DBUtil() {\r\n}"},
 {"id":34, "methodname":"canObtainProductionInstance()", "methodnamerefined":"canObtainProductionInstance", "methodabbreviation":"edu.ncsu.csc.itrust.DBUtil.canObtainProductionInstance", "fullmethod":"edu.ncsu.csc.itrust.DBUtil.canObtainProductionInstance()", "classid":6, "classname":"edu.ncsu.csc.itrust.DBUtil", "shortclassname":"DBUtil", "method":"/**\r\n * Used to check if we can actually obtain a connection.\r\n *\r\n * @return \r\n */\r\npublic static boolean canObtainProductionInstance() {\r\n    try {\r\n        DAOFactory.getProductionInstance().getConnection().close();\r\n        return true;\r\n    } catch (SQLException e) {\r\n        System.out.println(e);\r\n        return false;\r\n    }\r\n}"},
 {"id":35, "methodname":"closeConnection(java.sql.Connection,java.sql.PreparedStatement)", "methodnamerefined":"closeConnection", "methodabbreviation":"edu.ncsu.csc.itrust.DBUtil.closeConnection", "fullmethod":"edu.ncsu.csc.itrust.DBUtil.closeConnection(java.sql.Connection,java.sql.PreparedStatement)", "classid":6, "classname":"edu.ncsu.csc.itrust.DBUtil", "shortclassname":"DBUtil", "method":"/**\r\n * Close the prepared statement and the connection in a proper way\r\n *\r\n * @param conn\r\n * \t\t\r\n * @param ps\r\n * \t\t\r\n */\r\npublic static void closeConnection(Connection conn, PreparedStatement ps) {\r\n    try {\r\n        if (ps != null)\r\n            ps.close();\r\n\r\n        if (conn != null)\r\n            conn.close();\r\n\r\n    } catch (SQLException e) {\r\n        System.err.println(\"Error closing connections\");\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":36, "methodname":"getLastInsert(java.sql.Connection)", "methodnamerefined":"getLastInsert", "methodabbreviation":"edu.ncsu.csc.itrust.DBUtil.getLastInsert", "fullmethod":"edu.ncsu.csc.itrust.DBUtil.getLastInsert(java.sql.Connection)", "classid":6, "classname":"edu.ncsu.csc.itrust.DBUtil", "shortclassname":"DBUtil", "method":"/**\r\n * Returns the last ID that was generated for an auto-increment column. Please note that this does NOT\r\n * cause transaction problems! last_insert_id() returns the last generated ID on a per-connection basis.\r\n * See the MySQL documentation at the following location to confirm this:\r\n * {@link http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html}\r\n *\r\n * Dont believe me? see {@link AutoIncrementTest}\r\n *\r\n * @param conn\r\n * \t\t\r\n * @return last generated id\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic static long getLastInsert(Connection conn) throws SQLException {\r\n    ResultSet rs = conn.createStatement().executeQuery(\"SELECT LAST_INSERT_ID()\");\r\n    rs.next();\r\n    return rs.getLong(1);\r\n}"},
 {"id":37, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtil.-init-", "fullmethod":"edu.ncsu.csc.itrust.DateUtil.-init-()", "classid":7, "classname":"edu.ncsu.csc.itrust.DateUtil", "shortclassname":"DateUtil", "method":"DateUtil() {\r\n}"},
 {"id":38, "methodname":"currentlyInMonthRange(int,int)", "methodnamerefined":"currentlyInMonthRange", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtil.currentlyInMonthRange", "fullmethod":"edu.ncsu.csc.itrust.DateUtil.currentlyInMonthRange(int,int)", "classid":7, "classname":"edu.ncsu.csc.itrust.DateUtil", "shortclassname":"DateUtil", "method":"/**\r\n * Same as isInMonthRange but uses the current date as the date value.\r\n *\r\n * @see DateUtil#isInMonthRange(Date, int, int)\r\n * @param firstMonth\r\n * \t\t\r\n * @param secondMonth\r\n * \t\t\r\n * @return \r\n */\r\npublic static boolean currentlyInMonthRange(int firstMonth, int secondMonth) {\r\n    return DateUtil.isInMonthRange(new Date(), firstMonth, secondMonth);\r\n}"},
 {"id":39, "methodname":"getDateXDaysAgoFromNow(int)", "methodnamerefined":"getDateXDaysAgoFromNow", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtil.getDateXDaysAgoFromNow", "fullmethod":"edu.ncsu.csc.itrust.DateUtil.getDateXDaysAgoFromNow(int)", "classid":7, "classname":"edu.ncsu.csc.itrust.DateUtil", "shortclassname":"DateUtil", "method":"/**\r\n * Returns the date a certain number of days ago\r\n *\r\n * @param days\r\n * \t\thow many days ago\r\n * @return the date it was however many days ago\r\n */\r\npublic static Date getDateXDaysAgoFromNow(int days) {\r\n    Calendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.DAY_OF_YEAR, (-days));\r\n    return cal.getTime();\r\n}"},
 {"id":40, "methodname":"getDateXyearsAgoFromNow(int)", "methodnamerefined":"getDateXyearsAgoFromNow", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtil.getDateXyearsAgoFromNow", "fullmethod":"edu.ncsu.csc.itrust.DateUtil.getDateXyearsAgoFromNow(int)", "classid":7, "classname":"edu.ncsu.csc.itrust.DateUtil", "shortclassname":"DateUtil", "method":"/**\r\n * Returns the date a certain number of years ago\r\n *\r\n * @param years\r\n * \t\thow many years ago\r\n * @return the date it was however many years ago\r\n */\r\npublic static Date getDateXyearsAgoFromNow(int years) {\r\n    Calendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-years));\r\n    return cal.getTime();\r\n}"},
 {"id":41, "methodname":"getSQLdateXDaysAgoFromNow(int)", "methodnamerefined":"getSQLdateXDaysAgoFromNow", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtil.getSQLdateXDaysAgoFromNow", "fullmethod":"edu.ncsu.csc.itrust.DateUtil.getSQLdateXDaysAgoFromNow(int)", "classid":7, "classname":"edu.ncsu.csc.itrust.DateUtil", "shortclassname":"DateUtil", "method":"/**\r\n * Returns the date a certain number of days ago\r\n *\r\n * @param days\r\n * \t\thow many days ago\r\n * @return the date it was however many days ago\r\n */\r\npublic static Date getSQLdateXDaysAgoFromNow(int days) {\r\n    return new Date(DateUtil.getDateXDaysAgoFromNow(days).getTime());\r\n}"},
 {"id":42, "methodname":"getSQLdateXyearsAgoFromNow(int)", "methodnamerefined":"getSQLdateXyearsAgoFromNow", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtil.getSQLdateXyearsAgoFromNow", "fullmethod":"edu.ncsu.csc.itrust.DateUtil.getSQLdateXyearsAgoFromNow(int)", "classid":7, "classname":"edu.ncsu.csc.itrust.DateUtil", "shortclassname":"DateUtil", "method":"/**\r\n * Returns the date a certain number of years ago\r\n *\r\n * @param years\r\n * \t\thow many years ago\r\n * @return the date it was however many years ago\r\n */\r\npublic static Date getSQLdateXyearsAgoFromNow(int years) {\r\n    return new Date(DateUtil.getDateXyearsAgoFromNow(years).getTime());\r\n}"},
 {"id":43, "methodname":"isInMonthRange(java.util.Date,int,int)", "methodnamerefined":"isInMonthRange", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtil.isInMonthRange", "fullmethod":"edu.ncsu.csc.itrust.DateUtil.isInMonthRange(java.util.Date,int,int)", "classid":7, "classname":"edu.ncsu.csc.itrust.DateUtil", "shortclassname":"DateUtil", "method":"/**\r\n * Checks to see if a given date is within a range of months <strong>INCLUSIVELY</strong>, agnostic of\r\n * the year. <br />\r\n * <br />\r\n *\r\n * The range \"wraps\" so that if the first month is after the second month, then the definition of \"is in\r\n * month range\" is:<br />\r\n * the date falls outside of secondMonth, firstMonth, but including secondMonth and firstMonth.\r\n *\r\n * Modular arithmetic is used to adjust month values into the valid range.\r\n *\r\n * @param date\r\n * \t\t\r\n * @param firstMonth\r\n * \t\t\r\n * @param secondMonth\r\n * \t\t\r\n * @return \r\n */\r\npublic static boolean isInMonthRange(Date date, int firstMonth, int secondMonth) {\r\n    Calendar cal = new GregorianCalendar();\r\n    cal.setTime(date);\r\n    firstMonth %= 12;\r\n    secondMonth %= 12;\r\n    if (secondMonth >= firstMonth) {\r\n        return ((cal.get(Calendar.MONTH)) >= firstMonth) && ((cal.get(Calendar.MONTH)) <= secondMonth);\r\n    }\r\n    return ((cal.get(Calendar.MONTH)) >= firstMonth) || ((cal.get(Calendar.MONTH)) <= secondMonth);\r\n}"},
 {"id":44, "methodname":"setSQLMonthRange(java.sql.Date,int,int,java.sql.Date,int,int)", "methodnamerefined":"setSQLMonthRange", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtil.setSQLMonthRange", "fullmethod":"edu.ncsu.csc.itrust.DateUtil.setSQLMonthRange(java.sql.Date,int,int,java.sql.Date,int,int)", "classid":7, "classname":"edu.ncsu.csc.itrust.DateUtil", "shortclassname":"DateUtil", "method":"/**\r\n * <!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of\r\n * month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM\r\n * &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; -\r\n * yearsAgo2/monthValue2/&lt;last day of month2&gt;\r\n *\r\n * @param month1\r\n * \t\tFirst sql.Date object to be set\r\n * @param monthValue1\r\n * \t\t\r\n * @param yearsAgo1\r\n * \t\t\r\n * @param month2\r\n * \t\tSecond sql.Date object to be set\r\n * @param monthValue2\r\n * \t\t\r\n * @param yearsAgo2\r\n * \t\t\r\n */\r\npublic static void setSQLMonthRange(Date month1, int monthValue1, int yearsAgo1, Date month2, int monthValue2, int yearsAgo2) {\r\n    GregorianCalendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-yearsAgo1));\r\n    cal.set(Calendar.MONTH, monthValue1);\r\n    cal.set(Calendar.DAY_OF_MONTH, 1);\r\n    month1.setTime(cal.getTimeInMillis());\r\n    cal.add(Calendar.YEAR, yearsAgo1);\r\n    cal.add(Calendar.YEAR, (-yearsAgo2));\r\n    cal.set(Calendar.MONTH, monthValue2);\r\n    cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));\r\n    month2.setTime(cal.getTimeInMillis());\r\n}"},
 {"id":45, "methodname":"yearsAgo(long)", "methodnamerefined":"yearsAgo", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtil.yearsAgo", "fullmethod":"edu.ncsu.csc.itrust.DateUtil.yearsAgo(long)", "classid":7, "classname":"edu.ncsu.csc.itrust.DateUtil", "shortclassname":"DateUtil", "method":"/**\r\n * Returns a MM/dd/yyyy format of the date for the given years ago\r\n *\r\n * @param years\r\n * \t\t\r\n * @return \r\n */\r\npublic static String yearsAgo(long years) {\r\n    long time = System.currentTimeMillis();\r\n    return new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date((time - (years * (DateUtil.YEAR_IN_MS)))));\r\n}"},
 {"id":46, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtilTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.DateUtilTest.-init-()", "classid":8, "classname":"edu.ncsu.csc.itrust.DateUtilTest", "shortclassname":"DateUtilTest", "method":"DateUtilTest() {\r\n}"},
 {"id":47, "methodname":"testSetSQLMonthRange0()", "methodnamerefined":"testSetSQLMonthRange0", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtilTest.testSetSQLMonthRange0", "fullmethod":"edu.ncsu.csc.itrust.DateUtilTest.testSetSQLMonthRange0()", "classid":8, "classname":"edu.ncsu.csc.itrust.DateUtilTest", "shortclassname":"DateUtilTest", "method":"public void testSetSQLMonthRange0() {\r\n    Date month1 = new Date(0L);\r\n    Date month2 = new Date(0L);\r\n    int year1 = new GregorianCalendar().get(Calendar.YEAR);\r\n    DateUtil.setSQLMonthRange(month1, 8, 0, month2, 11, 0);\r\n    int year2 = new GregorianCalendar().get(Calendar.YEAR);\r\n    if (year1 != year2)\r\n        DateUtil.setSQLMonthRange(month1, 8, 0, month2, 11, 0);\r\n\r\n    GregorianCalendar cal = new GregorianCalendar();\r\n    cal.setTime(month1);\r\n    assertEquals(cal.get(Calendar.YEAR), year2);\r\n    assertEquals(cal.get(Calendar.MONTH), 8);\r\n    assertEquals(cal.get(Calendar.DAY_OF_MONTH), 1);\r\n    cal.setTime(month2);\r\n    assertEquals(cal.get(Calendar.YEAR), year2);\r\n    assertEquals(cal.get(Calendar.MONTH), 11);\r\n    assertEquals(cal.get(Calendar.DAY_OF_MONTH), 31);\r\n}"},
 {"id":48, "methodname":"testSetSQLMonthRange1()", "methodnamerefined":"testSetSQLMonthRange1", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtilTest.testSetSQLMonthRange1", "fullmethod":"edu.ncsu.csc.itrust.DateUtilTest.testSetSQLMonthRange1()", "classid":8, "classname":"edu.ncsu.csc.itrust.DateUtilTest", "shortclassname":"DateUtilTest", "method":"public void testSetSQLMonthRange1() {\r\n    Date month1 = new Date(0L);\r\n    Date month2 = new Date(0L);\r\n    int year1 = new GregorianCalendar().get(Calendar.YEAR);\r\n    DateUtil.setSQLMonthRange(month1, 8, 1, month2, 11, 1);\r\n    int year2 = new GregorianCalendar().get(Calendar.YEAR);\r\n    if (year1 != year2)\r\n        DateUtil.setSQLMonthRange(month1, 8, 1, month2, 11, 1);\r\n\r\n    GregorianCalendar cal = new GregorianCalendar();\r\n    cal.setTime(month1);\r\n    assertEquals(cal.get(Calendar.YEAR), (year2 - 1));\r\n    assertEquals(cal.get(Calendar.MONTH), 8);\r\n    assertEquals(cal.get(Calendar.DAY_OF_MONTH), 1);\r\n    cal.setTime(month2);\r\n    assertEquals(cal.get(Calendar.YEAR), (year2 - 1));\r\n    assertEquals(cal.get(Calendar.MONTH), 11);\r\n    assertEquals(cal.get(Calendar.DAY_OF_MONTH), 31);\r\n}"},
 {"id":49, "methodname":"testYearsAgo()", "methodnamerefined":"testYearsAgo", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtilTest.testYearsAgo", "fullmethod":"edu.ncsu.csc.itrust.DateUtilTest.testYearsAgo()", "classid":8, "classname":"edu.ncsu.csc.itrust.DateUtilTest", "shortclassname":"DateUtilTest", "method":"public void testYearsAgo() throws Exception {\r\n    int yearsAgo = 50;\r\n    SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy\");\r\n    String year = \"\" + ((Integer.valueOf(formatter.format(new Date()))) - yearsAgo);\r\n    assertEquals(year, DateUtil.yearsAgo(yearsAgo).split(\"/\")[2]);\r\n}"},
 {"id":50, "methodname":"testYearsFromNow()", "methodnamerefined":"testYearsFromNow", "methodabbreviation":"edu.ncsu.csc.itrust.DateUtilTest.testYearsFromNow", "fullmethod":"edu.ncsu.csc.itrust.DateUtilTest.testYearsFromNow()", "classid":8, "classname":"edu.ncsu.csc.itrust.DateUtilTest", "shortclassname":"DateUtilTest", "method":"public void testYearsFromNow() throws Exception {\r\n    // This test is intended to test the logic of the conversion java.util.Date to the java.sql.Date\r\n    // Along with the intent of \"years ago\".\r\n    // This test no longer tests the arithmetic of adding/subtracting years, we assume Java got that right\r\n    Calendar cal = new GregorianCalendar();\r\n    cal.add(Calendar.YEAR, (-2));\r\n    Long twoYearsAgo = cal.getTimeInMillis();\r\n    assertEquals(\"Date should be within 5s: \", twoYearsAgo, DateUtil.getSQLdateXyearsAgoFromNow(2).getTime(), 5000);\r\n}"},
 {"id":51, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.EmailUtil.-init-", "fullmethod":"edu.ncsu.csc.itrust.EmailUtil.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":9, "classname":"edu.ncsu.csc.itrust.EmailUtil", "shortclassname":"EmailUtil", "method":"public EmailUtil(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":52, "methodname":"sendEmail(edu.ncsu.csc.itrust.beans.Email)", "methodnamerefined":"sendEmail", "methodabbreviation":"edu.ncsu.csc.itrust.EmailUtil.sendEmail", "fullmethod":"edu.ncsu.csc.itrust.EmailUtil.sendEmail(edu.ncsu.csc.itrust.beans.Email)", "classid":9, "classname":"edu.ncsu.csc.itrust.EmailUtil", "shortclassname":"EmailUtil", "method":"// DO NOT SEND REAL EMAILS!!!!!\r\n// Sending emails - even to a throwaway account, is a waste of bandwidth and looks very suspicious.\r\n// If you want to know how to send emails from Java, just Google it on your own time.\r\npublic void sendEmail(Email email) throws DBException {\r\n    factory.getFakeEmailDAO().sendEmailRecord(email);\r\n}"},
 {"id":53, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.EmailUtilTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.EmailUtilTest.-init-()", "classid":10, "classname":"edu.ncsu.csc.itrust.EmailUtilTest", "shortclassname":"EmailUtilTest", "method":"EmailUtilTest() {\r\n}"},
 {"id":54, "methodname":"testSendEmail()", "methodnamerefined":"testSendEmail", "methodabbreviation":"edu.ncsu.csc.itrust.EmailUtilTest.testSendEmail", "fullmethod":"edu.ncsu.csc.itrust.EmailUtilTest.testSendEmail()", "classid":10, "classname":"edu.ncsu.csc.itrust.EmailUtilTest", "shortclassname":"EmailUtilTest", "method":"public void testSendEmail() throws Exception {\r\n    // Note: this test can be deleted once you switch to a \"real\" email util\r\n    try {\r\n        new EmailUtil(EvilDAOFactory.getEvilInstance()).sendEmail(null);\r\n        fail(\"Exception should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":55, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.ErrorListTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.ErrorListTest.-init-()", "classid":11, "classname":"edu.ncsu.csc.itrust.ErrorListTest", "shortclassname":"ErrorListTest", "method":"ErrorListTest() {\r\n}"},
 {"id":56, "methodname":"testToString()", "methodnamerefined":"testToString", "methodabbreviation":"edu.ncsu.csc.itrust.ErrorListTest.testToString", "fullmethod":"edu.ncsu.csc.itrust.ErrorListTest.testToString()", "classid":11, "classname":"edu.ncsu.csc.itrust.ErrorListTest", "shortclassname":"ErrorListTest", "method":"public void testToString() throws Exception {\r\n    ErrorList errorList = new ErrorList();\r\n    // test add if not null\r\n    errorList.addIfNotNull(\"a\");\r\n    errorList.addIfNotNull(\"\");\r\n    errorList.addIfNotNull(\"b\");\r\n    errorList.addIfNotNull(null);\r\n    String toString = \"[\";\r\n    // test iterator too\r\n    for (String str : errorList) {\r\n        toString += str + \", \";\r\n    }\r\n    toString = (toString.substring(0, ((toString.length()) - 2))) + \"]\";\r\n    assertEquals(toString, errorList.toString());\r\n}"},
 {"id":57, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.HtmlEncoder.-init-", "fullmethod":"edu.ncsu.csc.itrust.HtmlEncoder.-init-()", "classid":12, "classname":"edu.ncsu.csc.itrust.HtmlEncoder", "shortclassname":"HtmlEncoder", "method":"HtmlEncoder() {\r\n}"},
 {"id":58, "methodname":"URLOnSite(java.lang.String)", "methodnamerefined":"URLOnSite", "methodabbreviation":"edu.ncsu.csc.itrust.HtmlEncoder.URLOnSite", "fullmethod":"edu.ncsu.csc.itrust.HtmlEncoder.URLOnSite(java.lang.String)", "classid":12, "classname":"edu.ncsu.csc.itrust.HtmlEncoder", "shortclassname":"HtmlEncoder", "method":"/**\r\n * Checks URL\r\n *\r\n * @param input\r\n * \t\tURL to check\r\n * @return false if the input contains http://, true otherwise\r\n */\r\npublic static boolean URLOnSite(String input) {\r\n    return !(input.contains(\"http://\"));\r\n}"},
 {"id":59, "methodname":"encode(java.lang.String)", "methodnamerefined":"encode", "methodabbreviation":"edu.ncsu.csc.itrust.HtmlEncoder.encode", "fullmethod":"edu.ncsu.csc.itrust.HtmlEncoder.encode(java.lang.String)", "classid":12, "classname":"edu.ncsu.csc.itrust.HtmlEncoder", "shortclassname":"HtmlEncoder", "method":"/**\r\n * Escapes a few key HTML characters\r\n *\r\n * @param input\r\n * \t\tString to check and escape\r\n * @return \r\n */\r\npublic static String encode(String input) {\r\n    if (input == null)\r\n        return input;\r\n\r\n    String str = input.replaceAll(\"<\", \"&lt;\");\r\n    str = str.replaceAll(\">\", \"&gt;\");\r\n    str = str.replaceAll(\"\n\", \"<br />\");\r\n    return str;\r\n}"},
 {"id":60, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.HtmlEncoderTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.HtmlEncoderTest.-init-()", "classid":13, "classname":"edu.ncsu.csc.itrust.HtmlEncoderTest", "shortclassname":"HtmlEncoderTest", "method":"HtmlEncoderTest() {\r\n}"},
 {"id":61, "methodname":"testEscapeCharacters()", "methodnamerefined":"testEscapeCharacters", "methodabbreviation":"edu.ncsu.csc.itrust.HtmlEncoderTest.testEscapeCharacters", "fullmethod":"edu.ncsu.csc.itrust.HtmlEncoderTest.testEscapeCharacters()", "classid":13, "classname":"edu.ncsu.csc.itrust.HtmlEncoderTest", "shortclassname":"HtmlEncoderTest", "method":"public void testEscapeCharacters() throws Exception {\r\n    assertEquals(\"&lt;tag&gt;\", HtmlEncoder.encode(\"<tag>\"));\r\n    assertEquals(\"&lt;tag&gt;&lt;/tag&gt;\", HtmlEncoder.encode(\"<tag></tag>\"));\r\n    assertEquals(\"<br />\", HtmlEncoder.encode(\"\n\"));\r\n    assertEquals(\"&lt;&lt;tag&gt;&gt;\"Lots of text!\"&lt;&lt;/tag&gt;&gt;\", HtmlEncoder.encode(\"<<tag>>\"Lots of text!\"<</tag>>\"));\r\n}"},
 {"id":62, "methodname":"testOffSite()", "methodnamerefined":"testOffSite", "methodabbreviation":"edu.ncsu.csc.itrust.HtmlEncoderTest.testOffSite", "fullmethod":"edu.ncsu.csc.itrust.HtmlEncoderTest.testOffSite()", "classid":13, "classname":"edu.ncsu.csc.itrust.HtmlEncoderTest", "shortclassname":"HtmlEncoderTest", "method":"public void testOffSite() {\r\n    assertFalse(HtmlEncoder.URLOnSite(\"http://www.google.com\"));\r\n}"},
 {"id":63, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.Localization.-init-", "fullmethod":"edu.ncsu.csc.itrust.Localization.-init-()", "classid":14, "classname":"edu.ncsu.csc.itrust.Localization", "shortclassname":"Localization", "method":"public Localization() {\r\n    currentLocale = new Locale(\"en\", \"US\");\r\n}"},
 {"id":64, "methodname":"getCurrentLocale()", "methodnamerefined":"getCurrentLocale", "methodabbreviation":"edu.ncsu.csc.itrust.Localization.getCurrentLocale", "fullmethod":"edu.ncsu.csc.itrust.Localization.getCurrentLocale()", "classid":14, "classname":"edu.ncsu.csc.itrust.Localization", "shortclassname":"Localization", "method":"/**\r\n * Returns the current locale\r\n *\r\n * @return the current locale\r\n */\r\npublic Locale getCurrentLocale() {\r\n    return currentLocale;\r\n}"},
 {"id":65, "methodname":"instance()", "methodnamerefined":"instance", "methodabbreviation":"edu.ncsu.csc.itrust.Localization.instance", "fullmethod":"edu.ncsu.csc.itrust.Localization.instance()", "classid":14, "classname":"edu.ncsu.csc.itrust.Localization", "shortclassname":"Localization", "method":"/**\r\n * singleton method, may want to make this thread safe, as far as I know\r\n * iTrust doesnt do any multithreading though...\r\n *\r\n * @return Localization instance\r\n */\r\npublic static Localization instance() {\r\n    if ((Localization.currentInstance) == null) {\r\n        Localization.currentInstance = new Localization();\r\n    }\r\n    return Localization.currentInstance;\r\n}"},
 {"id":66, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.LocalizationTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.LocalizationTest.-init-()", "classid":15, "classname":"edu.ncsu.csc.itrust.LocalizationTest", "shortclassname":"LocalizationTest", "method":"LocalizationTest() {\r\n}"},
 {"id":67, "methodname":"testLocalization()", "methodnamerefined":"testLocalization", "methodabbreviation":"edu.ncsu.csc.itrust.LocalizationTest.testLocalization", "fullmethod":"edu.ncsu.csc.itrust.LocalizationTest.testLocalization()", "classid":15, "classname":"edu.ncsu.csc.itrust.LocalizationTest", "shortclassname":"LocalizationTest", "method":"public void testLocalization() {\r\n    Locale l = Localization.instance().getCurrentLocale();\r\n    assert l != null;\r\n}"},
 {"id":68, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.Messages.-init-", "fullmethod":"edu.ncsu.csc.itrust.Messages.-init-()", "classid":16, "classname":"edu.ncsu.csc.itrust.Messages", "shortclassname":"Messages", "method":"Messages() {\r\n}"},
 {"id":69, "methodname":"getString(java.lang.String)", "methodnamerefined":"getString", "methodabbreviation":"edu.ncsu.csc.itrust.Messages.getString", "fullmethod":"edu.ncsu.csc.itrust.Messages.getString(java.lang.String)", "classid":16, "classname":"edu.ncsu.csc.itrust.Messages", "shortclassname":"Messages", "method":"public static String getString(String key) {\r\n    try {\r\n        return Messages.RESOURCE_BUNDLE.getString(key);\r\n    } catch (MissingResourceException e) {\r\n        return (! + key) + !;\r\n    }\r\n}"},
 {"id":70, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.MessagesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.MessagesTest.-init-()", "classid":17, "classname":"edu.ncsu.csc.itrust.MessagesTest", "shortclassname":"MessagesTest", "method":"MessagesTest() {\r\n}"},
 {"id":71, "methodname":"testGetString()", "methodnamerefined":"testGetString", "methodabbreviation":"edu.ncsu.csc.itrust.MessagesTest.testGetString", "fullmethod":"edu.ncsu.csc.itrust.MessagesTest.testGetString()", "classid":17, "classname":"edu.ncsu.csc.itrust.MessagesTest", "shortclassname":"MessagesTest", "method":"public void testGetString() {\r\n    assertEquals(\"Requested\", Messages.getString(\"ReportRequestBean.requested\"));\r\n    assertEquals(\"!50000!\", Messages.getString(\"50000\"));\r\n}"},
 {"id":72, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.ParameterUtil.-init-", "fullmethod":"edu.ncsu.csc.itrust.ParameterUtil.-init-()", "classid":18, "classname":"edu.ncsu.csc.itrust.ParameterUtil", "shortclassname":"ParameterUtil", "method":"ParameterUtil() {\r\n}"},
 {"id":73, "methodname":"convertMap(java.util.Map)", "methodnamerefined":"convertMap", "methodabbreviation":"edu.ncsu.csc.itrust.ParameterUtil.convertMap", "fullmethod":"edu.ncsu.csc.itrust.ParameterUtil.convertMap(java.util.Map)", "classid":18, "classname":"edu.ncsu.csc.itrust.ParameterUtil", "shortclassname":"ParameterUtil", "method":"/**\r\n * Provides a utility method that converts the \"Map\" from the JSP container to a type-checked hashmap\r\n *\r\n * @param params\r\n * \t\tMap to convert\r\n * @return converted Map\r\n */\r\npublic static HashMap<String, String> convertMap(Map params) {\r\n    HashMap<String, String> myMap = new HashMap<String, String>();\r\n    for (Object key : params.keySet()) {\r\n        String[] value = ((String[]) (params.get(key)));\r\n        if (value != null)\r\n            myMap.put(key.toString(), value[0]);\r\n        else\r\n            myMap.put(key.toString(), null);\r\n\r\n    }\r\n    return myMap;\r\n}"},
 {"id":74, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.ParameterUtilTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.ParameterUtilTest.-init-()", "classid":19, "classname":"edu.ncsu.csc.itrust.ParameterUtilTest", "shortclassname":"ParameterUtilTest", "method":"ParameterUtilTest() {\r\n}"},
 {"id":75, "methodname":"testConvertMap()", "methodnamerefined":"testConvertMap", "methodabbreviation":"edu.ncsu.csc.itrust.ParameterUtilTest.testConvertMap", "fullmethod":"edu.ncsu.csc.itrust.ParameterUtilTest.testConvertMap()", "classid":19, "classname":"edu.ncsu.csc.itrust.ParameterUtilTest", "shortclassname":"ParameterUtilTest", "method":"@SuppressWarnings(\"unchecked\")\r\npublic void testConvertMap() throws Exception {\r\n    Map paramMap = new HashMap();\r\n    paramMap.put(\"param1\", new String[]{ \"a\" });\r\n    paramMap.put(\"param2\", new String[]{ null });\r\n    paramMap.put(\"param3\", null);\r\n    HashMap<String, String> convertedMap = ParameterUtil.convertMap(paramMap);\r\n    assertEquals(3, convertedMap.entrySet().size());\r\n    assertEquals(\"a\", convertedMap.get(\"param1\"));\r\n    assertNull(convertedMap.get(\"param2\"));\r\n    assertNull(convertedMap.get(\"param3\"));\r\n}"},
 {"id":76, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.RandomPassword.-init-", "fullmethod":"edu.ncsu.csc.itrust.RandomPassword.-init-()", "classid":20, "classname":"edu.ncsu.csc.itrust.RandomPassword", "shortclassname":"RandomPassword", "method":"RandomPassword() {\r\n}"},
 {"id":77, "methodname":"getRandomPassword()", "methodnamerefined":"getRandomPassword", "methodabbreviation":"edu.ncsu.csc.itrust.RandomPassword.getRandomPassword", "fullmethod":"edu.ncsu.csc.itrust.RandomPassword.getRandomPassword()", "classid":20, "classname":"edu.ncsu.csc.itrust.RandomPassword", "shortclassname":"RandomPassword", "method":"/**\r\n * Returns a string of random characters\r\n *\r\n * @return a string of random characters\r\n */\r\npublic static String getRandomPassword() {\r\n    String str = \"\";\r\n    for (int i = 0; i < 10; i++) {\r\n        str += ((char) ((RandomPassword.rand.nextInt(26)) + a));\r\n    }\r\n    return str;\r\n}"},
 {"id":78, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.XmlGenerator.-init-", "fullmethod":"edu.ncsu.csc.itrust.XmlGenerator.-init-()", "classid":21, "classname":"edu.ncsu.csc.itrust.XmlGenerator", "shortclassname":"XmlGenerator", "method":"XmlGenerator() {\r\n}"},
 {"id":79, "methodname":"generateXml(java.util.ArrayList,java.util.ArrayList)", "methodnamerefined":"generateXml", "methodabbreviation":"edu.ncsu.csc.itrust.XmlGenerator.generateXml", "fullmethod":"edu.ncsu.csc.itrust.XmlGenerator.generateXml(java.util.ArrayList,java.util.ArrayList)", "classid":21, "classname":"edu.ncsu.csc.itrust.XmlGenerator", "shortclassname":"XmlGenerator", "method":"/* public XmlGenerator(){\n\n\n}\n */\r\n/**\r\n * generateXml converts the headers and data into a xml file\r\n *\r\n * @param headers\r\n * \t\t- Column names\r\n * @param Data\r\n * \t\t- Data for columns\r\n * @return - Xml document\r\n */\r\npublic static Document generateXml(ArrayList<String> headers, ArrayList<ArrayList<String>> Data) {\r\n    Document report;\r\n    try {\r\n        // sorced from http://stackoverflow.com/questions/8865099/xml-file-generator-in-java\r\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n        DocumentBuilder builder = factory.newDocumentBuilder();\r\n        // new document\r\n        report = builder.newDocument();\r\n        // head element\r\n        Element head = report.createElement(\"PatientReport\");\r\n        report.appendChild(head);\r\n        // assumed has document builder and factory\r\n        // for each top level element\r\n        for (int x = 0; x < (Data.size()); x++) {\r\n            // makes format <Patient name=\"blah\" age=\"xx\" birthdate=\"\"/> etc...\r\n            Element patient = report.createElement(\"Patient\");\r\n            for (int y = 0; (y < (Data.get(x).size())) && (y < (headers.size())); y++) {\r\n                patient.setAttribute(XmlGenerator.parse(headers.get(y)), XmlGenerator.parse(Data.get(x).get(y)));\r\n            }\r\n            head.appendChild(patient);\r\n        }\r\n        // for each first level element, loop through second level and\r\n    } catch (ParserConfigurationException e) {\r\n        // TODO log error\r\n        return null;\r\n    }\r\n    return report;\r\n}"},
 {"id":80, "methodname":"parse(java.lang.String)", "methodnamerefined":"parse", "methodabbreviation":"edu.ncsu.csc.itrust.XmlGenerator.parse", "fullmethod":"edu.ncsu.csc.itrust.XmlGenerator.parse(java.lang.String)", "classid":21, "classname":"edu.ncsu.csc.itrust.XmlGenerator", "shortclassname":"XmlGenerator", "method":"/**\r\n * Parses the string for a xml compliant one\r\n *\r\n * @param s\r\n * \t\t- The string to be fixed\r\n * @return - The xml compliant string\r\n */\r\nprivate static String parse(String s) {\r\n    return s.replaceAll(\" \", \"_\").replaceAll(\"#\", \"NUMBER\").replaceAll(\"\", \"\");\r\n}"},
 {"id":81, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.XmlGeneratorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.XmlGeneratorTest.-init-()", "classid":22, "classname":"edu.ncsu.csc.itrust.XmlGeneratorTest", "shortclassname":"XmlGeneratorTest", "method":"XmlGeneratorTest() {\r\n}"},
 {"id":82, "methodname":"testXmlEmpty()", "methodnamerefined":"testXmlEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.XmlGeneratorTest.testXmlEmpty", "fullmethod":"edu.ncsu.csc.itrust.XmlGeneratorTest.testXmlEmpty()", "classid":22, "classname":"edu.ncsu.csc.itrust.XmlGeneratorTest", "shortclassname":"XmlGeneratorTest", "method":"public void testXmlEmpty() {\r\n    ArrayList<ArrayList<String>> testdata = new ArrayList<ArrayList<String>>();\r\n    ArrayList<String> headers = new ArrayList<String>();\r\n    Document emptyDoc = XmlGenerator.generateXml(headers, testdata);\r\n    NodeList list = emptyDoc.getChildNodes();\r\n    assertEquals(list.getLength(), 1);\r\n    assertEquals(list.item(0).getNodeName(), \"PatientReport\");\r\n}"},
 {"id":83, "methodname":"testtwoPatient()", "methodnamerefined":"testtwoPatient", "methodabbreviation":"edu.ncsu.csc.itrust.XmlGeneratorTest.testtwoPatient", "fullmethod":"edu.ncsu.csc.itrust.XmlGeneratorTest.testtwoPatient()", "classid":22, "classname":"edu.ncsu.csc.itrust.XmlGeneratorTest", "shortclassname":"XmlGeneratorTest", "method":"public void testtwoPatient() {\r\n    ArrayList<ArrayList<String>> testdata = new ArrayList<ArrayList<String>>();\r\n    ArrayList<String> headers = new ArrayList<String>();\r\n    // set up test headers\r\n    headers.add(\"Name\");\r\n    headers.add(\"Age\");\r\n    headers.add(\"sex\");\r\n    // set up test patient\r\n    ArrayList<String> patient1 = new ArrayList<String>();\r\n    patient1.add(\"bob joe\");// test space to _\r\n\r\n    patient1.add(\"23\");\r\n    patient1.add(\"Male\");\r\n    testdata.add(patient1);\r\n    ArrayList<String> patient2 = new ArrayList<String>();\r\n    patient2.add(\"william\");// test space to _\r\n\r\n    patient2.add(\"21\");\r\n    patient2.add(\"Male\");\r\n    testdata.add(patient2);\r\n    Document two = XmlGenerator.generateXml(headers, testdata);\r\n    Node head = two.getFirstChild();// document\r\n\r\n    System.out.println(head.getNodeName());\r\n    NodeList list = head.getChildNodes();\r\n    System.out.println(((((list.getLength()) + \" \") + (list.item(0).getNodeName())) + \" \"));\r\n    assertEquals(2, list.getLength());\r\n    assertEquals(\"Patient\", list.item(0).getNodeName());\r\n    assertEquals(\"PatientReport\", head.getNodeName());\r\n}"},
 {"id":84, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":23, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedAction", "shortclassname":"ActivityFeedAction", "method":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving the logs.\r\n */\r\npublic ActivityFeedAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}"},
 {"id":85, "methodname":"getMessageAsSentence(java.lang.String,java.sql.Timestamp,edu.ncsu.csc.itrust.enums.TransactionType)", "methodnamerefined":"getMessageAsSentence", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedAction.getMessageAsSentence", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedAction.getMessageAsSentence(java.lang.String,java.sql.Timestamp,edu.ncsu.csc.itrust.enums.TransactionType)", "classid":23, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedAction", "shortclassname":"ActivityFeedAction", "method":"/**\r\n * Pulls Action Phrase from the associated TransactionType Enum\r\n * Forms an English sentence with actor, action, and timestamp.\r\n *\r\n * @param actor\r\n * \t\t\r\n * @param timestamp\r\n * \t\t\r\n * @param code\r\n * \t\t\r\n * @return \r\n */\r\npublic String getMessageAsSentence(String actor, Timestamp timestamp, TransactionType code) {\r\n    String result = actor + \" \";\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if (((code.getCode()) == (type.getCode())) && (type.isPatientViewable()))\r\n            result += type.getActionPhrase();\r\n\r\n    }\r\n    SimpleDateFormat formatter = new SimpleDateFormat(\"h:mma.\");\r\n    switch (ActivityFeedAction.recent(new Date(timestamp.getTime()))) {\r\n        case 0 :\r\n            result += \" today\";\r\n            break;\r\n        case 1 :\r\n            result += \" yesterday\";\r\n            break;\r\n        case 2 :\r\n            DateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            result += \" on \" + (sdf.format(new Date(timestamp.getTime())));\r\n            break;\r\n    }\r\n    result += \" at \" + (formatter.format(timestamp));\r\n    return replaceNameWithYou(result);\r\n}"},
 {"id":86, "methodname":"getTransactions(java.util.Date,int)", "methodnamerefined":"getTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedAction.getTransactions", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedAction.getTransactions(java.util.Date,int)", "classid":23, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedAction", "shortclassname":"ActivityFeedAction", "method":"/**\r\n * Returns a list of TransactionBeans between the two dates passed as params\r\n *\r\n * @param n\r\n * \t\tNumber of \"pages\" of 20 log entries to retrieve.\r\n * @return list of 20*n TransactionBeans\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<TransactionBean> getTransactions(Date time, int n) throws DBException, FormValidationException {\r\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(loggedInMID);\r\n    // user has either 0 or 1 DLHCPs. Get one if exists so it can be filtered from results\r\n    long dlhcpID = -1;\r\n    if (!(dlhcps.isEmpty()))\r\n        dlhcpID = dlhcps.get(0).getMID();\r\n\r\n    List<TransactionBean> fullList = transDAO.getTransactionsAffecting(loggedInMID, dlhcpID, time, ((20 * n) + 1));\r\n    return fullList;\r\n}"},
 {"id":87, "methodname":"recent(java.util.Date)", "methodnamerefined":"recent", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedAction.recent", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedAction.recent(java.util.Date)", "classid":23, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedAction", "shortclassname":"ActivityFeedAction", "method":"/**\r\n * Returns an indicator of the number of days between the current date and the date passed\r\n * as a parameter. Returns 0 if the dates are on the same day, 1 if the date passed in is\r\n * \"yesterday\", 2 otherwise.\r\n *\r\n * @param d1\r\n * \t\tFirst date\r\n * @param d2\r\n * \t\tSecond date\r\n * @return 0, 1, or 2, depending on the difference in the dates.\r\n */\r\npublic static int recent(Date d) {\r\n    int oneDay = ((24 * 60) * 60) * 1000;\r\n    DateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    Date rightNow = new Date();\r\n    if (sdf.format(rightNow).equals(sdf.format(d)))\r\n        return 0;\r\n\r\n    d.setTime(((d.getTime()) + oneDay));\r\n    if (sdf.format(rightNow).equals(sdf.format(d)))\r\n        return 1;\r\n\r\n    return 2;\r\n}"},
 {"id":88, "methodname":"replaceNameWithYou(java.lang.String)", "methodnamerefined":"replaceNameWithYou", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedAction.replaceNameWithYou", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedAction.replaceNameWithYou(java.lang.String)", "classid":23, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedAction", "shortclassname":"ActivityFeedAction", "method":"private String replaceNameWithYou(String activity) {\r\n    try {\r\n        return activity.replace(authDAO.getUserName(loggedInMID), \"You\");\r\n    } catch (Exception e) {\r\n        return activity;\r\n    }\r\n}"},
 {"id":89, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.-init-()", "classid":24, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest", "shortclassname":"ActivityFeedActionTest", "method":"ActivityFeedActionTest() {\r\n}"},
 {"id":90, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.setUp()", "classid":24, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest", "shortclassname":"ActivityFeedActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.action = new ActivityFeedAction(factory, mid);\r\n}"},
 {"id":91, "methodname":"testGetMessageAsSentence()", "methodnamerefined":"testGetMessageAsSentence", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.testGetMessageAsSentence", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.testGetMessageAsSentence()", "classid":24, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest", "shortclassname":"ActivityFeedActionTest", "method":"public void testGetMessageAsSentence() {\r\n    Date dNow = new Date();\r\n    Timestamp tsNow = new Timestamp(dNow.getTime());\r\n    Timestamp tsYesterday = new Timestamp(((dNow.getTime()) - (((1000 * 60) * 60) * 24)));\r\n    Timestamp tsLongAgo = new Timestamp(((dNow.getTime()) - ((((1000 * 60) * 60) * 24) * 10)));\r\n    new SimpleDateFormat();\r\n    String msg;\r\n    msg = action.getMessageAsSentence(\"\", tsNow, TransactionType.PATIENT_CREATE);\r\n    assertTrue(msg.contains(TransactionType.PATIENT_CREATE.getActionPhrase()));\r\n    msg = action.getMessageAsSentence(\"\", tsNow, TransactionType.PATIENT_DISABLE);\r\n    assertTrue(msg.contains(TransactionType.PATIENT_DISABLE.getActionPhrase()));\r\n    msg = action.getMessageAsSentence(\"\", tsNow, TransactionType.DEMOGRAPHICS_VIEW);\r\n    assertTrue(msg.contains(TransactionType.DEMOGRAPHICS_VIEW.getActionPhrase()));\r\n    msg = action.getMessageAsSentence(\"\", tsYesterday, TransactionType.DEMOGRAPHICS_EDIT);\r\n    assertTrue(msg.contains(TransactionType.DEMOGRAPHICS_EDIT.getActionPhrase()));\r\n    msg = action.getMessageAsSentence(\"\", tsYesterday, TransactionType.PATIENT_HEALTH_INFORMATION_EDIT);\r\n    assertTrue(msg.contains(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT.getActionPhrase()));\r\n    msg = action.getMessageAsSentence(\"\", tsLongAgo, TransactionType.PATIENT_HEALTH_INFORMATION_VIEW);\r\n    assertTrue(msg.contains(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW.getActionPhrase()));\r\n    msg = action.getMessageAsSentence(\"\", tsLongAgo, TransactionType.OFFICE_VISIT_VIEW);\r\n    assertTrue(msg.contains(TransactionType.OFFICE_VISIT_VIEW.getActionPhrase()));\r\n}"},
 {"id":92, "methodname":"testGetTransactions()", "methodnamerefined":"testGetTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.testGetTransactions", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.testGetTransactions()", "classid":24, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest", "shortclassname":"ActivityFeedActionTest", "method":"public void testGetTransactions() throws FormValidationException, SQLException {\r\n    try {\r\n        List<TransactionBean> beans = action.getTransactions(new Date(), 1);\r\n        assertTrue(((beans.size()) < 20));\r\n    } catch (DBException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":93, "methodname":"testHiddenActivityFromDLHCP()", "methodnamerefined":"testHiddenActivityFromDLHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.testHiddenActivityFromDLHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest.testHiddenActivityFromDLHCP()", "classid":24, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedActionTest", "shortclassname":"ActivityFeedActionTest", "method":"/**\r\n * Verifies that certain transactions from the DLHCP are hidden in the activity feed per use case 43.\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testHiddenActivityFromDLHCP() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    action = new ActivityFeedAction(TestDAOFactory.getTestInstance(), 2L);\r\n    List<TransactionBean> accesses = action.getTransactions(new Date(), 1);\r\n    for (TransactionBean tb : accesses)\r\n        if (((tb.getRole()) != null) && (tb.getRole().equals(\"DLHCP\"))) {\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.DEMOGRAPHICS_VIEW)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.DEMOGRAPHICS_EDIT)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.OFFICE_VISIT_CREATE)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.OFFICE_VISIT_EDIT)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.OFFICE_VISIT_VIEW)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.RISK_FACTOR_VIEW)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.PATIENT_HEALTH_INFORMATION_EDIT)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.PATIENT_HEALTH_INFORMATION_VIEW)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.PRESCRIPTION_REPORT_VIEW)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.COMPREHENSIVE_REPORT_ADD)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.COMPREHENSIVE_REPORT_VIEW)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.LAB_PROCEDURE_ADD)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.LAB_PROCEDURE_EDIT)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.LAB_PROCEDURE_REMOVE)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.PRESCRIPTION_ADD)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.PRESCRIPTION_EDIT)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.PATIENT_REMINDERS_VIEW)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.EMERGENCY_REPORT_CREATE)));\r\n            assertFalse(((tb.getTransactionType()) == (TransactionType.EMERGENCY_REPORT_VIEW)));\r\n        }\r\n\r\n}"},
 {"id":94, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":25, "classname":"edu.ncsu.csc.itrust.action.AddApptAction", "shortclassname":"AddApptAction", "method":"public AddApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}"},
 {"id":95, "methodname":"addAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "methodnamerefined":"addAppt", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptAction.addAppt", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptAction.addAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "classid":25, "classname":"edu.ncsu.csc.itrust.action.AddApptAction", "shortclassname":"AddApptAction", "method":"public String addAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis()))) {\r\n        return (\"The scheduled date of this Appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n    }\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.scheduleAppt(appt);\r\n        return (((\"Success: \" + (appt.getApptType())) + \" for \") + (appt.getDate())) + \" added\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":96, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptActionTest.-init-()", "classid":26, "classname":"edu.ncsu.csc.itrust.action.AddApptActionTest", "shortclassname":"AddApptActionTest", "method":"AddApptActionTest() {\r\n}"},
 {"id":97, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptActionTest.setUp()", "classid":26, "classname":"edu.ncsu.csc.itrust.action.AddApptActionTest", "shortclassname":"AddApptActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.action = new AddApptAction(this.factory, this.hcpId);\r\n}"},
 {"id":98, "methodname":"testAddAppt()", "methodnamerefined":"testAddAppt", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptActionTest.testAddAppt", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptActionTest.testAddAppt()", "classid":26, "classname":"edu.ncsu.csc.itrust.action.AddApptActionTest", "shortclassname":"AddApptActionTest", "method":"public void testAddAppt() throws FormValidationException, SQLException {\r\n    ApptBean b = new ApptBean();\r\n    b.setApptType(\"General Checkup\");\r\n    b.setHcp(hcpId);\r\n    b.setPatient(mid);\r\n    b.setDate(new Timestamp(((System.currentTimeMillis()) + ((10 * 60) * 1000))));\r\n    b.setComment(null);\r\n    assertTrue(action.addAppt(b, true).startsWith(\"Success\"));\r\n}"},
 {"id":99, "methodname":"testAddAppt2()", "methodnamerefined":"testAddAppt2", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptActionTest.testAddAppt2", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptActionTest.testAddAppt2()", "classid":26, "classname":"edu.ncsu.csc.itrust.action.AddApptActionTest", "shortclassname":"AddApptActionTest", "method":"public void testAddAppt2() throws FormValidationException, SQLException {\r\n    ApptBean b = new ApptBean();\r\n    b.setApptType(\"General Checkup\");\r\n    b.setHcp(hcpId);\r\n    b.setPatient(mid);\r\n    Timestamp t = new Timestamp(((System.currentTimeMillis()) - ((10 * 60) * 1000)));\r\n    b.setDate(t);\r\n    b.setComment(\"Test Appiontment\");\r\n    assertEquals(((\"The scheduled date of this Appointment (\" + t) + \") has already passed.\"), action.addAppt(b, true));\r\n}"},
 {"id":100, "methodname":"testAddConflicts()", "methodnamerefined":"testAddConflicts", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptActionTest.testAddConflicts", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptActionTest.testAddConflicts()", "classid":26, "classname":"edu.ncsu.csc.itrust.action.AddApptActionTest", "shortclassname":"AddApptActionTest", "method":"public void testAddConflicts() throws FormValidationException, FileNotFoundException, IOException, SQLException {\r\n    gen.clearAllTables();\r\n    gen.appointmentType();\r\n    ApptBean a = new ApptBean();\r\n    a.setApptType(\"General Checkup\");\r\n    a.setHcp(hcpId);\r\n    a.setPatient(mid);\r\n    Timestamp t = new Timestamp(((System.currentTimeMillis()) + ((10 * 60) * 1000)));\r\n    a.setDate(t);\r\n    a.setComment(\"Test Appiontment\");\r\n    ApptBean b = new ApptBean();\r\n    b.setApptType(\"General Checkup\");\r\n    b.setHcp(hcpId);\r\n    b.setPatient(mid);\r\n    Timestamp t2 = new Timestamp(((System.currentTimeMillis()) + ((20 * 60) * 1000)));\r\n    b.setDate(t2);\r\n    b.setComment(\"Test Appiontment\");\r\n    String resultA = action.addAppt(a, false);\r\n    String resultB = action.addAppt(b, false);\r\n    assertTrue(resultA.contains(\"Success\"));\r\n    assertTrue(resultB.contains(\"conflict\"));\r\n}"},
 {"id":101, "methodname":"testGetConflicts()", "methodnamerefined":"testGetConflicts", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptActionTest.testGetConflicts", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptActionTest.testGetConflicts()", "classid":26, "classname":"edu.ncsu.csc.itrust.action.AddApptActionTest", "shortclassname":"AddApptActionTest", "method":"public void testGetConflicts() throws FormValidationException, FileNotFoundException, IOException, SQLException {\r\n    gen.clearAllTables();\r\n    gen.appointmentType();\r\n    ApptBean a = new ApptBean();\r\n    a.setApptType(\"General Checkup\");\r\n    a.setHcp(hcpId);\r\n    a.setPatient(mid);\r\n    Timestamp t = new Timestamp(((System.currentTimeMillis()) + ((10 * 60) * 1000)));\r\n    a.setDate(t);\r\n    a.setComment(\"Test Appiontment\");\r\n    ApptBean b = new ApptBean();\r\n    b.setApptType(\"General Checkup\");\r\n    b.setHcp(hcpId);\r\n    b.setPatient(mid);\r\n    Timestamp t2 = new Timestamp(((System.currentTimeMillis()) + ((20 * 60) * 1000)));\r\n    b.setDate(t2);\r\n    b.setComment(\"Test Appiontment\");\r\n    action.addAppt(a, true);\r\n    action.addAppt(b, true);\r\n    List<ApptBean> conflicts = action.getAllConflicts(hcpId);\r\n    assertEquals(2, conflicts.size());\r\n    List<ApptBean> conflictForA;\r\n    conflictForA = action.getConflictsForAppt(hcpId, a);\r\n    assertEquals(2, conflictForA.size());\r\n}"},
 {"id":102, "methodname":"testGetName()", "methodnamerefined":"testGetName", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptActionTest.testGetName", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptActionTest.testGetName()", "classid":26, "classname":"edu.ncsu.csc.itrust.action.AddApptActionTest", "shortclassname":"AddApptActionTest", "method":"public void testGetName() throws iTrustException {\r\n    assertEquals(\"Kelly Doctor\", action.getName(hcpId));\r\n}"},
 {"id":103, "methodname":"testGetName2()", "methodnamerefined":"testGetName2", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptActionTest.testGetName2", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptActionTest.testGetName2()", "classid":26, "classname":"edu.ncsu.csc.itrust.action.AddApptActionTest", "shortclassname":"AddApptActionTest", "method":"public void testGetName2() throws iTrustException {\r\n    assertEquals(\"Random Person\", action.getName(mid));\r\n}"},
 {"id":104, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptRequestAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptRequestAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":27, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestAction", "shortclassname":"AddApptRequestAction", "method":"public AddApptRequestAction(DAOFactory factory) {\r\n    aDAO = factory.getApptDAO();\r\n    arDAO = factory.getApptRequestDAO();\r\n    atDAO = factory.getApptTypeDAO();\r\n}"},
 {"id":105, "methodname":"addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)", "methodnamerefined":"addApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptRequestAction.addApptRequest", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptRequestAction.addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)", "classid":27, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestAction", "shortclassname":"AddApptRequestAction", "method":"public String addApptRequest(ApptRequestBean bean) throws SQLException {\r\n    List<ApptBean> conflicts = aDAO.getAllHCPConflictsForAppt(bean.getRequestedAppt().getHcp(), bean.getRequestedAppt());\r\n    if ((conflicts != null) && (!(conflicts.isEmpty()))) {\r\n        return \"The appointment you requested conflicts with other existing appointments.\";\r\n    }\r\n    arDAO.addApptRequest(bean);\r\n    return \"Your appointment request has been saved and is pending.\";\r\n}"},
 {"id":106, "methodname":"endTime(edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"endTime", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptRequestAction.endTime", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptRequestAction.endTime(edu.ncsu.csc.itrust.beans.ApptBean)", "classid":27, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestAction", "shortclassname":"AddApptRequestAction", "method":"private Timestamp endTime(ApptBean bean) throws SQLException {\r\n    Timestamp d = new Timestamp(bean.getDate().getTime());\r\n    ApptTypeBean type = atDAO.getApptType(bean.getApptType());\r\n    d.setTime(((d.getTime()) + (((type.getDuration()) * 60) * 1000)));\r\n    return d;\r\n}"},
 {"id":107, "methodname":"getNextAvailableAppts(int,edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"getNextAvailableAppts", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptRequestAction.getNextAvailableAppts", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptRequestAction.getNextAvailableAppts(int,edu.ncsu.csc.itrust.beans.ApptBean)", "classid":27, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestAction", "shortclassname":"AddApptRequestAction", "method":"public List<ApptBean> getNextAvailableAppts(int num, ApptBean bean) throws SQLException {\r\n    List<ApptBean> appts = new ArrayList<ApptBean>(num);\r\n    for (int i = 0; i < num; i++) {\r\n        ApptBean b = new ApptBean();\r\n        b.setApptType(bean.getApptType());\r\n        b.setHcp(bean.getHcp());\r\n        b.setPatient(bean.getPatient());\r\n        b.setDate(new Timestamp(bean.getDate().getTime()));\r\n        List<ApptBean> conflicts = null;\r\n        do {\r\n            conflicts = aDAO.getAllHCPConflictsForAppt(b.getHcp(), b);\r\n            if ((conflicts != null) && (!(conflicts.isEmpty()))) {\r\n                ApptBean lastConflict = conflicts.get(((conflicts.size()) - 1));\r\n                Timestamp afterConflict = endTime(lastConflict);\r\n                b.setDate(afterConflict);\r\n            }\r\n        } while ((conflicts != null) && (!(conflicts.isEmpty())) );\r\n        appts.add(b);\r\n        Timestamp nextTime = endTime(b);\r\n        bean.setDate(nextTime);\r\n    }\r\n    return appts;\r\n}"},
 {"id":108, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest.-init-()", "classid":28, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest", "shortclassname":"AddApptRequestActionTest", "method":"AddApptRequestActionTest() {\r\n}"},
 {"id":109, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest.setUp()", "classid":28, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest", "shortclassname":"AddApptRequestActionTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.apptRequestConflicts();\r\n    action = new AddApptRequestAction(TestDAOFactory.getTestInstance());\r\n}"},
 {"id":110, "methodname":"testAddApptRequest()", "methodnamerefined":"testAddApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest.testAddApptRequest", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest.testAddApptRequest()", "classid":28, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest", "shortclassname":"AddApptRequestActionTest", "method":"public void testAddApptRequest() throws Exception {\r\n    ApptBean b = new ApptBean();\r\n    b.setApptType(\"General Checkup\");\r\n    b.setHcp(9000000010L);\r\n    b.setPatient(2L);\r\n    String time = \"01:45 PM\";\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat fo = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 7);\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    time = ((fo.format(cal.getTime())) + \" \") + time;\r\n    fo = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    Date d = fo.parse(time);\r\n    b.setDate(new Timestamp(d.getTime()));\r\n    ApptRequestBean req = new ApptRequestBean();\r\n    req.setRequestedAppt(b);\r\n    String expected = \"The appointment you requested conflicts with other existing appointments.\";\r\n    assertEquals(expected, action.addApptRequest(req));\r\n    expected = \"Your appointment request has been saved and is pending.\";\r\n    cal.set(2012, 7, 20, 18, 45, 0);\r\n    req.getRequestedAppt().setDate(new Timestamp(cal.getTimeInMillis()));\r\n    assertEquals(expected, action.addApptRequest(req));\r\n}"},
 {"id":111, "methodname":"testGetNextAvailableAppts()", "methodnamerefined":"testGetNextAvailableAppts", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest.testGetNextAvailableAppts", "fullmethod":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest.testGetNextAvailableAppts()", "classid":28, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestActionTest", "shortclassname":"AddApptRequestActionTest", "method":"public void testGetNextAvailableAppts() throws SQLException, ParseException {\r\n    ApptBean b = new ApptBean();\r\n    b.setApptType(\"General Checkup\");\r\n    b.setHcp(9000000000L);\r\n    b.setPatient(2L);\r\n    String time = \"01:45 PM\";\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat fo = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 7);\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    time = ((fo.format(cal.getTime())) + \" \") + time;\r\n    fo = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    Date d = fo.parse(time);\r\n    b.setDate(new Timestamp(d.getTime()));\r\n    List<ApptBean> next = action.getNextAvailableAppts(3, b);\r\n    assertEquals(3, next.size());\r\n    cal.clear();\r\n    time = \"03:30 PM\";\r\n    cal = Calendar.getInstance();\r\n    fo = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 7);\r\n    sdf = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    time = ((fo.format(cal.getTime())) + \" \") + time;\r\n    fo = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    d = fo.parse(time);\r\n    cal.clear(Calendar.MILLISECOND);\r\n    Timestamp e1 = new Timestamp(d.getTime());\r\n    cal.clear();\r\n    time = \"05:30 PM\";\r\n    cal = Calendar.getInstance();\r\n    fo = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 7);\r\n    sdf = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    time = ((fo.format(cal.getTime())) + \" \") + time;\r\n    fo = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    d = fo.parse(time);\r\n    cal.clear(Calendar.MILLISECOND);\r\n    Timestamp e2 = new Timestamp(d.getTime());\r\n    cal.clear();\r\n    time = \"06:15 PM\";\r\n    cal = Calendar.getInstance();\r\n    fo = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 7);\r\n    sdf = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    time = ((fo.format(cal.getTime())) + \" \") + time;\r\n    fo = new SimpleDateFormat(\"MM/dd/yyyy hh:mm aa\");\r\n    d = fo.parse(time);\r\n    cal.clear(Calendar.MILLISECOND);\r\n    Timestamp e3 = new Timestamp(d.getTime());\r\n    assertEquals(e1, next.get(0).getDate());\r\n    assertEquals(e2, next.get(1).getDate());\r\n    assertEquals(e3, next.get(2).getDate());\r\n}"},
 {"id":112, "methodname":"-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "classid":32, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction", "shortclassname":"AddDrugListAction", "method":"public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":113, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListAction.-init-()", "classid":32, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction", "shortclassname":"AddDrugListAction", "method":"SkipDuplicateDrugStrategy() {\r\n}"},
 {"id":114, "methodname":"LoadFile(java.io.InputStream)", "methodnamerefined":"LoadFile", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListAction.LoadFile", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListAction.LoadFile(java.io.InputStream)", "classid":32, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction", "shortclassname":"AddDrugListAction", "method":"/**\r\n * Loads the given file input stream into the drug database.\r\n *\r\n * @param fileContent\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void LoadFile(InputStream fileContent) throws DBException, IOException {\r\n    strategy.LoadFile(fileContent, factory, loggingAction, loggedInMID);\r\n}"},
 {"id":115, "methodname":"LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "methodnamerefined":"LoadFile", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "classid":29, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy", "shortclassname":"AddDrugListAction$DrugStrategy", "method":"void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException;"},
 {"id":116, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.-init-()", "classid":30, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy", "shortclassname":"AddDrugListAction$OverwriteDuplicateDrugStrategy", "method":"OverwriteDuplicateDrugStrategy() {\r\n}"},
 {"id":117, "methodname":"LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "methodnamerefined":"LoadFile", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "classid":30, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy", "shortclassname":"AddDrugListAction$OverwriteDuplicateDrugStrategy", "method":"public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"\t\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // Overwrite duplicate entries\r\n            ndcodesDAO.updateCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_EDIT, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        }\r\n    } \r\n}"},
 {"id":118, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.-init-()", "classid":31, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy", "shortclassname":"AddDrugListAction$SkipDuplicateDrugStrategy", "method":"SkipDuplicateDrugStrategy() {\r\n}"},
 {"id":119, "methodname":"LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "methodnamerefined":"LoadFile", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "classid":31, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy", "shortclassname":"AddDrugListAction$SkipDuplicateDrugStrategy", "method":"public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"\t\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, ((\"\" + (bean.getNDCode())) + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // We just want to skip duplicate-entries. Let it pass.\r\n        }\r\n    } \r\n}"},
 {"id":120, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListActionTest.-init-()", "classid":33, "classname":"edu.ncsu.csc.itrust.action.AddDrugListActionTest", "shortclassname":"AddDrugListActionTest", "method":"public AddDrugListActionTest() {\r\n    gen = new TestDataGenerator();\r\n}"},
 {"id":121, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListActionTest.setUp()", "classid":33, "classname":"edu.ncsu.csc.itrust.action.AddDrugListActionTest", "shortclassname":"AddDrugListActionTest", "method":"/**\r\n * Sets up defaults\r\n */\r\n@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":122, "methodname":"testLoadFile()", "methodnamerefined":"testLoadFile", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListActionTest.testLoadFile", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListActionTest.testLoadFile()", "classid":33, "classname":"edu.ncsu.csc.itrust.action.AddDrugListActionTest", "shortclassname":"AddDrugListActionTest", "method":"public void testLoadFile() throws Exception {\r\n    InputStream is = new ByteArrayInputStream(inputDrugs1.getBytes());\r\n    action = new AddDrugListAction(new AddDrugListAction.SkipDuplicateDrugStrategy(), factory, new EventLoggingAction(factory), 9000000001L);\r\n    action.LoadFile(is);\r\n    NDCodesDAO ndCodesDAO = factory.getNDCodesDAO();\r\n    assertEquals(4, ndCodesDAO.getAllNDCodes().size());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"05730150\"));\r\n    assertEquals(\"ADVIL\", ndCodesDAO.getNDCode(\"05730150\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"50458513\"));\r\n    assertEquals(\"TYLENOL with Codeine\", ndCodesDAO.getNDCode(\"50458513\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"10544591\"));\r\n    assertEquals(\"OxyContin\", ndCodesDAO.getNDCode(\"10544591\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"115237197\"));\r\n    assertEquals(\"Claritin\", ndCodesDAO.getNDCode(\"115237197\").getDescription());\r\n}"},
 {"id":123, "methodname":"testRenameDrugs()", "methodnamerefined":"testRenameDrugs", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddDrugListActionTest.testRenameDrugs", "fullmethod":"edu.ncsu.csc.itrust.action.AddDrugListActionTest.testRenameDrugs()", "classid":33, "classname":"edu.ncsu.csc.itrust.action.AddDrugListActionTest", "shortclassname":"AddDrugListActionTest", "method":"public void testRenameDrugs() throws Exception {\r\n    InputStream is = new ByteArrayInputStream(inputDrugs1.getBytes());\r\n    action = new AddDrugListAction(new AddDrugListAction.SkipDuplicateDrugStrategy(), factory, new EventLoggingAction(factory), 9000000001L);\r\n    action.LoadFile(is);\r\n    NDCodesDAO ndCodesDAO = factory.getNDCodesDAO();\r\n    assertEquals(4, ndCodesDAO.getAllNDCodes().size());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"05730150\"));\r\n    assertEquals(\"ADVIL\", ndCodesDAO.getNDCode(\"05730150\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"50458513\"));\r\n    assertEquals(\"TYLENOL with Codeine\", ndCodesDAO.getNDCode(\"50458513\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"10544591\"));\r\n    assertEquals(\"OxyContin\", ndCodesDAO.getNDCode(\"10544591\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"115237197\"));\r\n    assertEquals(\"Claritin\", ndCodesDAO.getNDCode(\"115237197\").getDescription());\r\n    is = new ByteArrayInputStream(inputDrugs2.getBytes());\r\n    action = new AddDrugListAction(new AddDrugListAction.OverwriteDuplicateDrugStrategy(), factory, new EventLoggingAction(factory), 9000000001L);\r\n    action.LoadFile(is);\r\n    assertEquals(5, ndCodesDAO.getAllNDCodes().size());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"05730150\"));\r\n    assertEquals(\"New Advil\", ndCodesDAO.getNDCode(\"05730150\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"50458513\"));\r\n    assertEquals(\"TYLENOL with Codeine\", ndCodesDAO.getNDCode(\"50458513\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"10544591\"));\r\n    assertEquals(\"OxyContin\", ndCodesDAO.getNDCode(\"10544591\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"115237197\"));\r\n    assertEquals(\"Totally Legal Drug\", ndCodesDAO.getNDCode(\"115237197\").getDescription());\r\n    assertNotNull(ndCodesDAO.getNDCode(\"05740230\"));\r\n    assertEquals(\"New Drug\", ndCodesDAO.getNDCode(\"05740230\").getDescription());\r\n}"},
 {"id":124, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddERespAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddERespAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":34, "classname":"edu.ncsu.csc.itrust.action.AddERespAction", "shortclassname":"AddERespAction", "method":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddERespAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":125, "methodname":"add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddERespAction.add", "fullmethod":"edu.ncsu.csc.itrust.action.AddERespAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":34, "classname":"edu.ncsu.csc.itrust.action.AddERespAction", "shortclassname":"AddERespAction", "method":"/**\r\n * Adds the new user.  Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.ER);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.ER, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":126, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddERespActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddERespActionTest.-init-()", "classid":35, "classname":"edu.ncsu.csc.itrust.action.AddERespActionTest", "shortclassname":"AddERespActionTest", "method":"AddERespActionTest() {\r\n}"},
 {"id":127, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddERespActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddERespActionTest.setUp()", "classid":35, "classname":"edu.ncsu.csc.itrust.action.AddERespActionTest", "shortclassname":"AddERespActionTest", "method":"/**\r\n * Sets up defaults\r\n */\r\n@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    action = new AddERespAction(factory, 9000000000L);\r\n}"},
 {"id":128, "methodname":"testAddER()", "methodnamerefined":"testAddER", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddERespActionTest.testAddER", "fullmethod":"edu.ncsu.csc.itrust.action.AddERespActionTest.testAddER()", "classid":35, "classname":"edu.ncsu.csc.itrust.action.AddERespActionTest", "shortclassname":"AddERespActionTest", "method":"/**\r\n * Tests adding a new ER\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddER() throws Exception {\r\n    gen.clearAllTables();\r\n    PersonnelBean person = new PersonnelBean();\r\n    person.setRole(Role.ER);\r\n    person.setFirstName(\"Para\");\r\n    person.setLastName(\"Medic\");\r\n    person.setEmail(\"Paramedic@itrust.com\");\r\n    long newMID = action.add(person);\r\n    assertEquals(person.getMID(), newMID);\r\n}"},
 {"id":129, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddHCPAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":36, "classname":"edu.ncsu.csc.itrust.action.AddHCPAction", "shortclassname":"AddHCPAction", "method":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":130, "methodname":"add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddHCPAction.add", "fullmethod":"edu.ncsu.csc.itrust.action.AddHCPAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":36, "classname":"edu.ncsu.csc.itrust.action.AddHCPAction", "shortclassname":"AddHCPAction", "method":"/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.HCP);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.HCP, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":131, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddHCPActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddHCPActionTest.-init-()", "classid":37, "classname":"edu.ncsu.csc.itrust.action.AddHCPActionTest", "shortclassname":"AddHCPActionTest", "method":"AddHCPActionTest() {\r\n}"},
 {"id":132, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddHCPActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddHCPActionTest.setUp()", "classid":37, "classname":"edu.ncsu.csc.itrust.action.AddHCPActionTest", "shortclassname":"AddHCPActionTest", "method":"/**\r\n * Sets up defaults\r\n */\r\n@Override\r\nprotected void setUp() throws Exception {\r\n    // Step 0. Initialize the mocks and other necessary objects.\r\n    super.initMocks();\r\n    // Step 1. Initialize any other classes we need.\r\n    personnel = new PersonnelBean();\r\n    personnel.setFirstName(\"Cosmo\");\r\n    personnel.setLastName(\"Kramer\");\r\n    personnel.setEmail(\"cosmo@kramer.com\");\r\n    personnel.setRole(Role.HCP);\r\n}"},
 {"id":133, "methodname":"testAddHCP()", "methodnamerefined":"testAddHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddHCPActionTest.testAddHCP", "fullmethod":"edu.ncsu.csc.itrust.action.AddHCPActionTest.testAddHCP()", "classid":37, "classname":"edu.ncsu.csc.itrust.action.AddHCPActionTest", "shortclassname":"AddHCPActionTest", "method":"/**\r\n * Tests adding a new HCP\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddHCP() throws Exception {\r\n    // Step 2. For each test, set up the expectations of what will be called (started in initMocks)\r\n    expect(ActionTestWithMocks.personnelDAO.addEmptyPersonnel(Role.HCP)).andReturn(56L).once();\r\n    ActionTestWithMocks.personnelDAO.editPersonnel(personnel);\r\n    expectLastCall().once();\r\n    // Step 3. Exit recording mode, go into playback mode\r\n    ActionTestWithMocks.control.replay();// Dont forget this!\r\n\r\n    // Step 3. Actually run the method under test, checking its return value\r\n    action = new AddHCPAction(ActionTestWithMocks.factory, 9000000000L);// this lines needs to be AFTER the replay()\r\n\r\n    long newMID = action.add(personnel);\r\n    assertEquals(56L, newMID);\r\n    // Step 4. Verify the mocks were hit as you expected\r\n    ActionTestWithMocks.control.verify();// Dont forget this!\r\n\r\n}"},
 {"id":134, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddLTAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":38, "classname":"edu.ncsu.csc.itrust.action.AddLTAction", "shortclassname":"AddLTAction", "method":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n */\r\npublic AddLTAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":135, "methodname":"add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddLTAction.add", "fullmethod":"edu.ncsu.csc.itrust.action.AddLTAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":38, "classname":"edu.ncsu.csc.itrust.action.AddLTAction", "shortclassname":"AddLTAction", "method":"/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.LT);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.LT, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":136, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddLTActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddLTActionTest.-init-()", "classid":39, "classname":"edu.ncsu.csc.itrust.action.AddLTActionTest", "shortclassname":"AddLTActionTest", "method":"AddLTActionTest() {\r\n}"},
 {"id":137, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddLTActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddLTActionTest.setUp()", "classid":39, "classname":"edu.ncsu.csc.itrust.action.AddLTActionTest", "shortclassname":"AddLTActionTest", "method":"/**\r\n * Sets up defaults\r\n */\r\n@Override\r\nprotected void setUp() throws Exception {\r\n    // Step 0. Initialize the mocks and other necessary objects.\r\n    super.initMocks();\r\n    // Step 1. Initialize any other classes we need.\r\n    personnel = new PersonnelBean();\r\n    personnel.setFirstName(\"Cosmo\");\r\n    personnel.setLastName(\"Kramer\");\r\n    personnel.setEmail(\"cosmo@kramer.com\");\r\n    personnel.setRole(Role.LT);\r\n}"},
 {"id":138, "methodname":"testAddLT()", "methodnamerefined":"testAddLT", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddLTActionTest.testAddLT", "fullmethod":"edu.ncsu.csc.itrust.action.AddLTActionTest.testAddLT()", "classid":39, "classname":"edu.ncsu.csc.itrust.action.AddLTActionTest", "shortclassname":"AddLTActionTest", "method":"/**\r\n * Tests adding a new LT\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddLT() throws Exception {\r\n    // Step 2. For each test, set up the expectations of what will be called (started in initMocks)\r\n    expect(ActionTestWithMocks.personnelDAO.addEmptyPersonnel(Role.LT)).andReturn(5000000001L).once();\r\n    ActionTestWithMocks.personnelDAO.editPersonnel(personnel);\r\n    expectLastCall().once();\r\n    // Step 3. Exit recording mode, go into playback mode\r\n    ActionTestWithMocks.control.replay();// Dont forget this!\r\n\r\n    // Step 3. Actually run the method under test, checking its return value\r\n    action = new AddLTAction(ActionTestWithMocks.factory, 5000000002L);// this lines needs to be AFTER the replay()\r\n\r\n    long newMID = action.add(personnel);\r\n    assertEquals(5000000001L, newMID);\r\n    // Step 4. Verify the mocks were hit as you expected\r\n    ActionTestWithMocks.control.verify();// Dont forget this!\r\n\r\n}"},
 {"id":139, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "classid":40, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction", "shortclassname":"AddOfficeVisitAction", "method":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param pidString\r\n * \t\tPatient ID to be validated by the superclass, {@link PatientBaseAction}\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic AddOfficeVisitAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.factory = factory;\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n}"},
 {"id":140, "methodname":"addEmptyOfficeVisit(long)", "methodnamerefined":"addEmptyOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction.addEmptyOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction.addEmptyOfficeVisit(long)", "classid":40, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction", "shortclassname":"AddOfficeVisitAction", "method":"/**\r\n * Adds an empty office visit\r\n *\r\n * @param loggedInMID\r\n * \t\tFor logging purposes\r\n * @return Office visit ID (primary key) of the new office visit\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long addEmptyOfficeVisit(long loggedInMID) throws DBException {\r\n    OfficeVisitBean ov = new OfficeVisitBean();\r\n    ov.setHcpID(loggedInMID);\r\n    ov.setPatientID(pid);\r\n    long visitID = ovDAO.add(ov);\r\n    return visitID;\r\n}"},
 {"id":141, "methodname":"getAllOfficeVisits()", "methodnamerefined":"getAllOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction.getAllOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction.getAllOfficeVisits()", "classid":40, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction", "shortclassname":"AddOfficeVisitAction", "method":"/**\r\n * Lists all office visits for a particular patient, regardless of who originally documented the office\r\n * visit.\r\n *\r\n * @return List of office visits,\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisits() throws iTrustException {\r\n    return ovDAO.getAllOfficeVisits(pid);\r\n}"},
 {"id":142, "methodname":"getUserName()", "methodnamerefined":"getUserName", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction.getUserName", "fullmethod":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction.getUserName()", "classid":40, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction", "shortclassname":"AddOfficeVisitAction", "method":"/**\r\n * Returns the full name of the patient with this MID\r\n *\r\n * @return name in the form of a string\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getUserName() throws DBException, iTrustException {\r\n    return factory.getAuthDAO().getUserName(pid);\r\n}"},
 {"id":143, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.-init-()", "classid":41, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest", "shortclassname":"AddOfficeVisitActionTest", "method":"AddOfficeVisitActionTest() {\r\n}"},
 {"id":144, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.setUp()", "classid":41, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest", "shortclassname":"AddOfficeVisitActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    action = new AddOfficeVisitAction(factory, \"1\");\r\n}"},
 {"id":145, "methodname":"testAddEmpty()", "methodnamerefined":"testAddEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.testAddEmpty", "fullmethod":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.testAddEmpty()", "classid":41, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest", "shortclassname":"AddOfficeVisitActionTest", "method":"public void testAddEmpty() throws Exception {\r\n    long hcpID = 9000000000L;\r\n    long ovID = action.addEmptyOfficeVisit(hcpID);\r\n    OfficeVisitBean ov = factory.getOfficeVisitDAO().getOfficeVisit(ovID);\r\n    assertEquals(hcpID, ov.getHcpID());\r\n    assertEquals(1, ov.getPatientID());\r\n    assertEquals(new OfficeVisitBean().getVisitDateStr(), ov.getVisitDateStr());\r\n}"},
 {"id":146, "methodname":"testGetOfficeVisits()", "methodnamerefined":"testGetOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.testGetOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.testGetOfficeVisits()", "classid":41, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest", "shortclassname":"AddOfficeVisitActionTest", "method":"public void testGetOfficeVisits() throws Exception {\r\n    List<OfficeVisitBean> ovs = factory.getOfficeVisitDAO().getAllOfficeVisits(1);\r\n    List<OfficeVisitBean> actualOvs = action.getAllOfficeVisits();\r\n    assertEquals(ovs.size(), actualOvs.size());\r\n    for (int i = 0; i < (ovs.size()); i++) {\r\n        assertEquals(ovs.get(i).getID(), actualOvs.get(i).getID());\r\n    }\r\n}"},
 {"id":147, "methodname":"testGetUserName()", "methodnamerefined":"testGetUserName", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.testGetUserName", "fullmethod":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest.testGetUserName()", "classid":41, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitActionTest", "shortclassname":"AddOfficeVisitActionTest", "method":"public void testGetUserName() throws Exception {\r\n    assertEquals(\"Random Person\", action.getUserName());\r\n}"},
 {"id":148, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPHAAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddPHAAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":42, "classname":"edu.ncsu.csc.itrust.action.AddPHAAction", "shortclassname":"AddPHAAction", "method":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddPHAAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":149, "methodname":"add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPHAAction.add", "fullmethod":"edu.ncsu.csc.itrust.action.AddPHAAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":42, "classname":"edu.ncsu.csc.itrust.action.AddPHAAction", "shortclassname":"AddPHAAction", "method":"/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.PHA);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.PHA, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":150, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPHAActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddPHAActionTest.-init-()", "classid":43, "classname":"edu.ncsu.csc.itrust.action.AddPHAActionTest", "shortclassname":"AddPHAActionTest", "method":"AddPHAActionTest() {\r\n}"},
 {"id":151, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPHAActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddPHAActionTest.setUp()", "classid":43, "classname":"edu.ncsu.csc.itrust.action.AddPHAActionTest", "shortclassname":"AddPHAActionTest", "method":"/**\r\n * Sets up defaults\r\n */\r\n@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    personnel = new PersonnelBean();\r\n    personnel.setFirstName(\"Bob\");\r\n    personnel.setLastName(\"Blah\");\r\n    personnel.setEmail(\"bobblah@blarg.com\");\r\n    personnel.setRole(Role.PHA);\r\n}"},
 {"id":152, "methodname":"testAddPHA()", "methodnamerefined":"testAddPHA", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPHAActionTest.testAddPHA", "fullmethod":"edu.ncsu.csc.itrust.action.AddPHAActionTest.testAddPHA()", "classid":43, "classname":"edu.ncsu.csc.itrust.action.AddPHAActionTest", "shortclassname":"AddPHAActionTest", "method":"/**\r\n * Tests adding a new PHA\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddPHA() throws Exception {\r\n    AddPHAAction action = new AddPHAAction(factory, 7000000000L);\r\n    long newMID = action.add(personnel);\r\n    assertEquals(7000000000L, newMID);\r\n}"},
 {"id":153, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":44, "classname":"edu.ncsu.csc.itrust.action.AddPatientAction", "shortclassname":"AddPatientAction", "method":"/**\r\n * Just the factory and logged in MID\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param loggedInMID\r\n * \t\t\r\n */\r\npublic AddPatientAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":154, "methodname":"addPatient(edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"addPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientAction.addPatient", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientAction.addPatient(edu.ncsu.csc.itrust.beans.PatientBean)", "classid":44, "classname":"edu.ncsu.csc.itrust.action.AddPatientAction", "shortclassname":"AddPatientAction", "method":"/**\r\n * Creates a new patient, returns the new MID. Adds a new user to the table along with a random password.\r\n *\r\n * @return the new MID of the patient\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic long addPatient(PatientBean p) throws DBException, FormValidationException {\r\n    new AddPatientValidator().validate(p);\r\n    long newMID = patientDAO.addEmptyPatient();\r\n    p.setMID(newMID);\r\n    String pwd = authDAO.addUser(newMID, Role.PATIENT, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    patientDAO.editPatient(p, loggedInMID);\r\n    return newMID;\r\n}"},
 {"id":155, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientActionTest.-init-()", "classid":45, "classname":"edu.ncsu.csc.itrust.action.AddPatientActionTest", "shortclassname":"AddPatientActionTest", "method":"AddPatientActionTest() {\r\n}"},
 {"id":156, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientActionTest.setUp()", "classid":45, "classname":"edu.ncsu.csc.itrust.action.AddPatientActionTest", "shortclassname":"AddPatientActionTest", "method":"/**\r\n * Sets up defaults\r\n */\r\n@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.transactionLog();\r\n    gen.hcp0();\r\n    action = new AddPatientAction(factory, 9000000000L);\r\n}"},
 {"id":157, "methodname":"testAddPatient()", "methodnamerefined":"testAddPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientActionTest.testAddPatient", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientActionTest.testAddPatient()", "classid":45, "classname":"edu.ncsu.csc.itrust.action.AddPatientActionTest", "shortclassname":"AddPatientActionTest", "method":"/**\r\n * Tests adding a new patient\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddPatient() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Cosmo\");\r\n    p.setLastName(\"Kramer\");\r\n    p.setEmail(\"cosmo@kramer.com\");\r\n    long newMID = action.addPatient(p);\r\n    assertEquals(p.getMID(), newMID);\r\n}"},
 {"id":158, "methodname":"-init-(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileAction.-init-(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":46, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileAction", "shortclassname":"AddPatientFileAction", "method":"/**\r\n * Accepts the DAO factory and the CSV stream from the view and parses it.\r\n *\r\n * @param factory\r\n * \t\tThe DAO factory\r\n * @param loggedInMID\r\n * \t\tThe MID of the HCP\r\n * @param CSVStream\r\n * \t\tThe CSV stream uploaded by the user\r\n * @throws CSVFormatException\r\n * \t\t\r\n * @throws AddPatientFileExceptionTest\r\n * \t\t\r\n */\r\npublic AddPatientFileAction(InputStream CSVStream, DAOFactory factory, long loggedInMID) throws AddPatientFileException, CSVFormatException {\r\n    if (factory != null) {\r\n        this.patientDAO = factory.getPatientDAO();\r\n        this.loggedInMID = loggedInMID;\r\n        this.authDAO = factory.getAuthDAO();\r\n    }\r\n    CSVParser parser = new CSVParser(CSVStream);\r\n    CSVHeader = parser.getHeader();\r\n    CSVData = parser.getData();\r\n    errors = parser.getErrors();\r\n    buildMappings(CSVHeader);\r\n    try {\r\n        createPatients();\r\n    } catch (DBException e) {\r\n        throw new AddPatientFileException(\"Database error while adding new patients!\");\r\n    }\r\n}"},
 {"id":159, "methodname":"buildMappings(java.util.ArrayList)", "methodnamerefined":"buildMappings", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileAction.buildMappings", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileAction.buildMappings(java.util.ArrayList)", "classid":46, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileAction", "shortclassname":"AddPatientFileAction", "method":"/**\r\n * Builds the mappings between the local arrays and the CSV file\r\n * Also checks for missing required, duplicate, and invalid fields\r\n *\r\n * @param CSVHeader\r\n * \t\t\r\n * @throws AddPatientFileExceptionTest\r\n * \t\t\r\n */\r\nprivate void buildMappings(ArrayList<String> CSVHeader) throws AddPatientFileException {\r\n    boolean valid;\r\n    for (int i = 0; i < (CSVHeader.size()); i++) {\r\n        valid = false;\r\n        for (int j = 0; j < (requiredFields.length); j++) {\r\n            if (CSVHeader.get(i).equalsIgnoreCase(requiredFields[j])) {\r\n                if ((requiredFieldsMapping[j]) == null) {\r\n                    valid = true;\r\n                    requiredFieldsMapping[j] = i;\r\n                } else {\r\n                    throw new AddPatientFileException(((\"Duplicate field \"\" + (CSVHeader.get(i))) + \"\"!\"));\r\n                }\r\n            }\r\n        }\r\n        for (int j = 0; j < (validFields.length); j++) {\r\n            if (CSVHeader.get(i).equalsIgnoreCase(validFields[j])) {\r\n                if ((validFieldsMapping[j]) == null) {\r\n                    valid = true;\r\n                    validFieldsMapping[j] = i;\r\n                } else {\r\n                    throw new AddPatientFileException(((\"Duplicate field \"\" + (CSVHeader.get(i))) + \"\"!\"));\r\n                }\r\n            }\r\n        }\r\n        if (valid == false) {\r\n            throw new AddPatientFileException(((\"Field \"\" + (CSVHeader.get(i))) + \"\" is invalid!\"));\r\n        }\r\n    }\r\n    for (int i = 0; i < (requiredFieldsMapping.length); i++) {\r\n        if ((requiredFieldsMapping[i]) == null) {\r\n            throw new AddPatientFileException(((\"Required field \"\" + (requiredFields[i])) + \"\" is missing!\"));\r\n        }\r\n    }\r\n}"},
 {"id":160, "methodname":"createPatients()", "methodnamerefined":"createPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileAction.createPatients", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileAction.createPatients()", "classid":46, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileAction", "shortclassname":"AddPatientFileAction", "method":"/**\r\n * Creates the patients and adds them to the DB\r\n *\r\n * @throws DBException\r\n * \t\t\r\n * @throws AddPatientFileExceptionTest\r\n * \t\t\r\n */\r\nprivate void createPatients() throws AddPatientFileException, DBException {\r\n    for (int i = 0; i < (CSVData.size()); i++) {\r\n        PatientBean temp = new PatientBean();\r\n        temp.setFirstName(CSVData.get(i).get(requiredFieldsMapping[Arrays.asList(requiredFields).indexOf(\"firstName\")]));\r\n        temp.setLastName(CSVData.get(i).get(requiredFieldsMapping[Arrays.asList(requiredFields).indexOf(\"lastName\")]));\r\n        temp.setEmail(CSVData.get(i).get(requiredFieldsMapping[Arrays.asList(requiredFields).indexOf(\"email\")]));\r\n        try {\r\n            temp.setStreetAddress1(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"streetAddress1\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            temp.setStreetAddress2(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"streetAddress2\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            temp.setCity(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"city\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            temp.setState(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"state\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            temp.setZip(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"zip\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            temp.setPhone(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"phone\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            temp.setMotherMID(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"motherMID\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            temp.setFatherMID(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"fatherMID\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            temp.setCreditCardType(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"creditCardType\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            temp.setCreditCardNumber(CSVData.get(i).get(validFieldsMapping[Arrays.asList(validFields).indexOf(\"creditCardNumber\")]));\r\n        } catch (NullPointerException e) {\r\n        }\r\n        try {\r\n            new AddPatientValidator().validate(temp);\r\n            new PatientValidator().validate(temp);\r\n            if ((patientDAO) != null) {\r\n                long newMID = patientDAO.addEmptyPatient();\r\n                temp.setMID(newMID);\r\n                String pwd = authDAO.addUser(newMID, Role.PATIENT, RandomPassword.getRandomPassword());\r\n                temp.setPassword(pwd);\r\n                patientDAO.editPatient(temp, loggedInMID);\r\n            }\r\n            patients.add(temp);\r\n        } catch (FormValidationException e) {\r\n            for (int j = 0; j < (e.getErrorList().size()); j++) {\r\n                System.out.println(e.getErrorList().get(j));\r\n            }\r\n            errors.addIfNotNull(((((\"Input validation failed for patient \"\" + (temp.getFirstName())) + \" \") + (temp.getLastName())) + \"\"!\"));\r\n        }\r\n    }\r\n}"},
 {"id":161, "methodname":"getErrors()", "methodnamerefined":"getErrors", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileAction.getErrors", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileAction.getErrors()", "classid":46, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileAction", "shortclassname":"AddPatientFileAction", "method":"/**\r\n * Gets the error list\r\n *\r\n * @return ErrorList All errors encountered while parsing\r\n */\r\npublic ErrorList getErrors() {\r\n    return errors;\r\n}"},
 {"id":162, "methodname":"getPatients()", "methodnamerefined":"getPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileAction.getPatients", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileAction.getPatients()", "classid":46, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileAction", "shortclassname":"AddPatientFileAction", "method":"/**\r\n * Gets the patient list\r\n *\r\n * @return ArrayList<PatientBean> The patients from the parsed file\r\n */\r\npublic ArrayList<PatientBean> getPatients() {\r\n    return patients;\r\n}"},
 {"id":163, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.-init-()", "classid":47, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest", "shortclassname":"AddPatientFileActionTest", "method":"AddPatientFileActionTest() {\r\n}"},
 {"id":164, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.setUp()", "classid":47, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest", "shortclassname":"AddPatientFileActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":165, "methodname":"testDuplicateField()", "methodnamerefined":"testDuplicateField", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testDuplicateField", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testDuplicateField()", "classid":47, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest", "shortclassname":"AddPatientFileActionTest", "method":"public void testDuplicateField() throws AddPatientFileException, CSVFormatException, FileNotFoundException {\r\n    DAOFactory prodDAO = DAOFactory.getProductionInstance();\r\n    AuthDAO authDAO = prodDAO.getAuthDAO();\r\n    InputStream testFile = new FileInputStream(\"testing-files/sample_patientupload/HCPPatientUploadDuplicateField.csv\");\r\n    try {\r\n        AddPatientFileAction apfa = new AddPatientFileAction(testFile, null, 0);\r\n    } catch (AddPatientFileException e) {\r\n        return;\r\n    }\r\n    assertTrue(false);\r\n}"},
 {"id":166, "methodname":"testInvalidData()", "methodnamerefined":"testInvalidData", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testInvalidData", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testInvalidData()", "classid":47, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest", "shortclassname":"AddPatientFileActionTest", "method":"public void testInvalidData() throws AddPatientFileException, CSVFormatException, FileNotFoundException {\r\n    DAOFactory prodDAO = DAOFactory.getProductionInstance();\r\n    AuthDAO authDAO = prodDAO.getAuthDAO();\r\n    InputStream testFile = new FileInputStream(\"testing-files/sample_patientupload/HCPPatientUploadInvalidData.csv\");\r\n    AddPatientFileAction apfa = new AddPatientFileAction(testFile, null, 0);\r\n    assertEquals(1, apfa.getPatients().size());\r\n    assertTrue(apfa.getErrors().hasErrors());\r\n}"},
 {"id":167, "methodname":"testInvalidHeader()", "methodnamerefined":"testInvalidHeader", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testInvalidHeader", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testInvalidHeader()", "classid":47, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest", "shortclassname":"AddPatientFileActionTest", "method":"public void testInvalidHeader() throws AddPatientFileException, CSVFormatException, FileNotFoundException {\r\n    DAOFactory prodDAO = DAOFactory.getProductionInstance();\r\n    AuthDAO authDAO = prodDAO.getAuthDAO();\r\n    InputStream testFile = new FileInputStream(\"testing-files/sample_patientupload/HCPPatientUploadInvalidField.csv\");\r\n    try {\r\n        AddPatientFileAction apfa = new AddPatientFileAction(testFile, null, 0);\r\n    } catch (AddPatientFileException e) {\r\n        return;\r\n    }\r\n    assertTrue(false);\r\n}"},
 {"id":168, "methodname":"testRequiredFieldMissing()", "methodnamerefined":"testRequiredFieldMissing", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testRequiredFieldMissing", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testRequiredFieldMissing()", "classid":47, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest", "shortclassname":"AddPatientFileActionTest", "method":"public void testRequiredFieldMissing() throws AddPatientFileException, CSVFormatException, FileNotFoundException {\r\n    DAOFactory prodDAO = DAOFactory.getProductionInstance();\r\n    AuthDAO authDAO = prodDAO.getAuthDAO();\r\n    InputStream testFile = new FileInputStream(\"testing-files/sample_patientupload/HCPPatientUploadRequiredFieldMissing.csv\");\r\n    try {\r\n        AddPatientFileAction apfa = new AddPatientFileAction(testFile, null, 0);\r\n    } catch (AddPatientFileException e) {\r\n        return;\r\n    }\r\n    assertTrue(false);\r\n}"},
 {"id":169, "methodname":"testValidData()", "methodnamerefined":"testValidData", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testValidData", "fullmethod":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest.testValidData()", "classid":47, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileActionTest", "shortclassname":"AddPatientFileActionTest", "method":"public void testValidData() throws AddPatientFileException, CSVFormatException, FileNotFoundException {\r\n    DAOFactory prodDAO = DAOFactory.getProductionInstance();\r\n    AuthDAO authDAO = prodDAO.getAuthDAO();\r\n    InputStream testFile = new FileInputStream(\"testing-files/sample_patientupload/HCPPatientUploadValidData.csv\");\r\n    AddPatientFileAction apfa = new AddPatientFileAction(testFile, null, 0);\r\n    assertEquals(3, apfa.getPatients().size());\r\n    assertFalse(apfa.getErrors().hasErrors());\r\n}"},
 {"id":170, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,long)", "classid":48, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction", "shortclassname":"AddRemoteMonitoringDataAction", "method":"/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person recording the patients data.\r\n * @param patientMID\r\n * \t\tThe MID of the patient\r\n */\r\npublic AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientMID = patientMID;\r\n}"},
 {"id":171, "methodname":"addRemoteMonitoringData(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)", "methodnamerefined":"addRemoteMonitoringData", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.addRemoteMonitoringData", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.addRemoteMonitoringData(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)", "classid":48, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction", "shortclassname":"AddRemoteMonitoringDataAction", "method":"/**\r\n * Adds a patients telemedicine data to the database.\r\n *\r\n * @param weight\r\n * \t\t\r\n * @param pedometerReading\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void addRemoteMonitoringData(RemoteMonitoringDataBean rmdBean) throws DBException, FormValidationException, iTrustException {\r\n    validator.validate(rmdBean);\r\n    String role;\r\n    if ((loggedInMID) == (patientMID)) {\r\n        role = \"self-reported\";\r\n    } else\r\n        if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")) {\r\n            role = \"case-manager\";\r\n        } else {\r\n            role = \"patient representative\";\r\n        }\r\n\r\n    // Store in DB\r\n    rmDAO.storePatientData(patientMID, rmdBean, role, loggedInMID);\r\n}"},
 {"id":172, "methodname":"getPatientName(long)", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.getPatientName(long)", "classid":48, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction", "shortclassname":"AddRemoteMonitoringDataAction", "method":"/**\r\n * returns the patient name\r\n *\r\n * @return patient name\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(long pid) throws DBException, iTrustException {\r\n    return authDAO.getUserName(pid);\r\n}"},
 {"id":173, "methodname":"getTelemedicineBean(long)", "methodnamerefined":"getTelemedicineBean", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.getTelemedicineBean", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.getTelemedicineBean(long)", "classid":48, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction", "shortclassname":"AddRemoteMonitoringDataAction", "method":"public List<TelemedicineBean> getTelemedicineBean(long patientMID) throws DBException {\r\n    return rmDAO.getTelemedicineBean(patientMID);\r\n}"},
 {"id":174, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.-init-()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"AddRemoteMonitoringDataActionTest() {\r\n}"},
 {"id":175, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.setUp()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    action = new AddRemoteMonitoringDataAction(TestDAOFactory.getTestInstance(), 1, 1);\r\n}"},
 {"id":176, "methodname":"testAddBadRemoteMonitoringData()", "methodnamerefined":"testAddBadRemoteMonitoringData", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddBadRemoteMonitoringData", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddBadRemoteMonitoringData()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddBadRemoteMonitoringData() throws Exception {\r\n    RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n    try {\r\n        b.setSystolicBloodPressure(39);\r\n        b.setDiastolicBloodPressure(100);\r\n        action.addRemoteMonitoringData(b);\r\n        fail();\r\n    } catch (FormValidationException e) {\r\n    }\r\n    try {\r\n        b = new RemoteMonitoringDataBean();\r\n        b.setSystolicBloodPressure(240);\r\n        b.setDiastolicBloodPressure(151);\r\n        b.setGlucoseLevel(100);\r\n        action.addRemoteMonitoringData(b);\r\n        fail();\r\n    } catch (FormValidationException e) {\r\n    }\r\n    try {\r\n        b = new RemoteMonitoringDataBean();\r\n        b.setSystolicBloodPressure(40);\r\n        b.setDiastolicBloodPressure(150);\r\n        b.setGlucoseLevel(1000);\r\n        action.addRemoteMonitoringData(b);\r\n        fail();\r\n    } catch (FormValidationException e) {\r\n    }\r\n    try {\r\n        b = new RemoteMonitoringDataBean();\r\n        b.setSystolicBloodPressure((-5));\r\n        b.setDiastolicBloodPressure(20);\r\n        b.setGlucoseLevel(0);\r\n        action.addRemoteMonitoringData(b);\r\n        fail();\r\n    } catch (FormValidationException e) {\r\n    }\r\n    b = new RemoteMonitoringDataBean();\r\n    b.setSystolicBloodPressure(100);\r\n    b.setDiastolicBloodPressure(80);\r\n    b.setGlucoseLevel(100);\r\n    for (int i = 0; i < 10; i++)\r\n        action.addRemoteMonitoringData(b);\r\n\r\n    try {\r\n        b = new RemoteMonitoringDataBean();\r\n        b.setSystolicBloodPressure(100);\r\n        b.setDiastolicBloodPressure(80);\r\n        b.setGlucoseLevel(100);\r\n        action.addRemoteMonitoringData(b);\r\n        fail();// Should throw an exception - 11 entries.\r\n\r\n    } catch (iTrustException e) {\r\n        String s = e.getMessage();\r\n        assertTrue(s.startsWith(\"Patient \"));\r\n        assertTrue(s.endsWith(\" entries for today cannot exceed 10.\"));\r\n    }\r\n    try {\r\n        b = new RemoteMonitoringDataBean();\r\n        b.setWeight(122);\r\n        b.setPedometerReading(1233);\r\n        action.addRemoteMonitoringData(b);\r\n        action.addRemoteMonitoringData(b);\r\n        fail();// Should throw an exception - 2 entries\r\n\r\n    } catch (iTrustException e) {\r\n        String s = e.getMessage();\r\n        assertTrue(s.startsWith(\"Patient \"));\r\n        assertTrue(s.endsWith(\" entries for today cannot exceed 1.\"));\r\n    }\r\n}"},
 {"id":177, "methodname":"testAddBadRemoteMonitoringGlucoseLevelData()", "methodnamerefined":"testAddBadRemoteMonitoringGlucoseLevelData", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddBadRemoteMonitoringGlucoseLevelData", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddBadRemoteMonitoringGlucoseLevelData()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddBadRemoteMonitoringGlucoseLevelData() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setGlucoseLevel(100);\r\n        for (int i = 0; i < 12; i++)\r\n            action.addRemoteMonitoringData(b);\r\n\r\n        fail();\r\n    } catch (iTrustException e) {\r\n        // String s = e.getMessage();\r\n        // assertTrue(s.startsWith(\"Patient \"));\r\n        // assertTrue(s.endsWith(\" entries for today cannot exceed 10.\"));\r\n        assertEquals(\"Patient glucose level entries for today cannot exceed 10.\", e.getMessage());\r\n    }\r\n}"},
 {"id":178, "methodname":"testAddBadRemoteMonitoringPedometerReadingData()", "methodnamerefined":"testAddBadRemoteMonitoringPedometerReadingData", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddBadRemoteMonitoringPedometerReadingData", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddBadRemoteMonitoringPedometerReadingData()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddBadRemoteMonitoringPedometerReadingData() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setPedometerReading(100);\r\n        action.addRemoteMonitoringData(b);\r\n        action.addRemoteMonitoringData(b);\r\n        fail();\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Patient pedometer reading entries for today cannot exceed 1.\", e.getMessage());\r\n    }\r\n}"},
 {"id":179, "methodname":"testAddBadRemoteMonitoringWeightData()", "methodnamerefined":"testAddBadRemoteMonitoringWeightData", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddBadRemoteMonitoringWeightData", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddBadRemoteMonitoringWeightData()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddBadRemoteMonitoringWeightData() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setWeight(100);\r\n        action.addRemoteMonitoringData(b);\r\n        action.addRemoteMonitoringData(b);\r\n        fail();\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Patient weight entries for today cannot exceed 1.\", e.getMessage());\r\n    }\r\n}"},
 {"id":180, "methodname":"testAddRemoteMonitoringData()", "methodnamerefined":"testAddRemoteMonitoringData", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringData", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringData()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringData() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setGlucoseLevel(80);\r\n        b.setSystolicBloodPressure(80);\r\n        b.setDiastolicBloodPressure(80);\r\n        action.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":181, "methodname":"testAddRemoteMonitoringDataBloodPressureOnly()", "methodnamerefined":"testAddRemoteMonitoringDataBloodPressureOnly", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataBloodPressureOnly", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataBloodPressureOnly()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringDataBloodPressureOnly() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setSystolicBloodPressure(100);\r\n        b.setDiastolicBloodPressure(80);\r\n        action.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":182, "methodname":"testAddRemoteMonitoringDataBloodPressureOnlyUAP()", "methodnamerefined":"testAddRemoteMonitoringDataBloodPressureOnlyUAP", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataBloodPressureOnlyUAP", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataBloodPressureOnlyUAP()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringDataBloodPressureOnlyUAP() throws Exception {\r\n    gen.uap1();\r\n    gen.remoteMonitoringUAP();\r\n    AddRemoteMonitoringDataAction actionUAP = new AddRemoteMonitoringDataAction(TestDAOFactory.getTestInstance(), Long.parseLong(\"8000000009\"), 2);\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setSystolicBloodPressure(100);\r\n        b.setDiastolicBloodPressure(80);\r\n        actionUAP.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":183, "methodname":"testAddRemoteMonitoringDataGlucoseOnly()", "methodnamerefined":"testAddRemoteMonitoringDataGlucoseOnly", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataGlucoseOnly", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataGlucoseOnly()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringDataGlucoseOnly() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setGlucoseLevel(80);\r\n        action.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":184, "methodname":"testAddRemoteMonitoringDataGlucoseOnlyUAP()", "methodnamerefined":"testAddRemoteMonitoringDataGlucoseOnlyUAP", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataGlucoseOnlyUAP", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataGlucoseOnlyUAP()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringDataGlucoseOnlyUAP() throws Exception {\r\n    gen.uap1();\r\n    gen.remoteMonitoringUAP();\r\n    AddRemoteMonitoringDataAction actionUAP = new AddRemoteMonitoringDataAction(TestDAOFactory.getTestInstance(), Long.parseLong(\"8000000009\"), 2);\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setGlucoseLevel(80);\r\n        actionUAP.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":185, "methodname":"testAddRemoteMonitoringDataUAP()", "methodnamerefined":"testAddRemoteMonitoringDataUAP", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataUAP", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringDataUAP()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringDataUAP() throws Exception {\r\n    gen.uap1();\r\n    gen.remoteMonitoringUAP();\r\n    AddRemoteMonitoringDataAction actionUAP = new AddRemoteMonitoringDataAction(TestDAOFactory.getTestInstance(), Long.parseLong(\"8000000009\"), 2);\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setGlucoseLevel(80);\r\n        b.setSystolicBloodPressure(80);\r\n        b.setDiastolicBloodPressure(80);\r\n        actionUAP.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":186, "methodname":"testAddRemoteMonitoringExternalDataOnly()", "methodnamerefined":"testAddRemoteMonitoringExternalDataOnly", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringExternalDataOnly", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringExternalDataOnly()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringExternalDataOnly() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setWeight(122);\r\n        b.setPedometerReading(1234);\r\n        action.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":187, "methodname":"testAddRemoteMonitoringHeightWeightDataOnly()", "methodnamerefined":"testAddRemoteMonitoringHeightWeightDataOnly", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringHeightWeightDataOnly", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringHeightWeightDataOnly()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringHeightWeightDataOnly() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setHeight(155.2F);\r\n        b.setWeight(140.0F);\r\n        action.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":188, "methodname":"testAddRemoteMonitoringPedometerReadingDataOnly()", "methodnamerefined":"testAddRemoteMonitoringPedometerReadingDataOnly", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringPedometerReadingDataOnly", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringPedometerReadingDataOnly()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringPedometerReadingDataOnly() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setPedometerReading(1234);\r\n        action.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":189, "methodname":"testAddRemoteMonitoringWeightDataOnly()", "methodnamerefined":"testAddRemoteMonitoringWeightDataOnly", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringWeightDataOnly", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testAddRemoteMonitoringWeightDataOnly()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testAddRemoteMonitoringWeightDataOnly() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setWeight(100);\r\n        action.addRemoteMonitoringData(b);\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":190, "methodname":"testRepresentativeReportStatus()", "methodnamerefined":"testRepresentativeReportStatus", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testRepresentativeReportStatus", "fullmethod":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest.testRepresentativeReportStatus()", "classid":49, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataActionTest", "shortclassname":"AddRemoteMonitoringDataActionTest", "method":"public void testRepresentativeReportStatus() throws Exception {\r\n    action = new AddRemoteMonitoringDataAction(TestDAOFactory.getTestInstance(), 2, 1);\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setPedometerReading(100);\r\n        action.addRemoteMonitoringData(b);\r\n    } catch (iTrustException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":191, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddUAPAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":50, "classname":"edu.ncsu.csc.itrust.action.AddUAPAction", "shortclassname":"AddUAPAction", "method":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddUAPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":192, "methodname":"add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddUAPAction.add", "fullmethod":"edu.ncsu.csc.itrust.action.AddUAPAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":50, "classname":"edu.ncsu.csc.itrust.action.AddUAPAction", "shortclassname":"AddUAPAction", "method":"/**\r\n * Adds the new user.  Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.UAP);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.UAP, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":193, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddUAPActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.AddUAPActionTest.-init-()", "classid":51, "classname":"edu.ncsu.csc.itrust.action.AddUAPActionTest", "shortclassname":"AddUAPActionTest", "method":"AddUAPActionTest() {\r\n}"},
 {"id":194, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddUAPActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.AddUAPActionTest.setUp()", "classid":51, "classname":"edu.ncsu.csc.itrust.action.AddUAPActionTest", "shortclassname":"AddUAPActionTest", "method":"/**\r\n * Sets up defaults\r\n */\r\n@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    action = new AddUAPAction(factory, 9000000000L);\r\n}"},
 {"id":195, "methodname":"testAddUAP()", "methodnamerefined":"testAddUAP", "methodabbreviation":"edu.ncsu.csc.itrust.action.AddUAPActionTest.testAddUAP", "fullmethod":"edu.ncsu.csc.itrust.action.AddUAPActionTest.testAddUAP()", "classid":51, "classname":"edu.ncsu.csc.itrust.action.AddUAPActionTest", "shortclassname":"AddUAPActionTest", "method":"/**\r\n * Tests adding a new UAP\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddUAP() throws Exception {\r\n    PersonnelBean p = new PersonnelBean();\r\n    p.setFirstName(\"Cosmo\");\r\n    p.setLastName(\"Kramer\");\r\n    p.setEmail(\"cosmo@kramer.com\");\r\n    long newMID = action.add(p);\r\n    assertEquals(p.getMID(), newMID);\r\n}"},
 {"id":196, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ApptAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":52, "classname":"edu.ncsu.csc.itrust.action.ApptAction", "shortclassname":"ApptAction", "method":"public ApptAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptDAO = factory.getApptDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":197, "methodname":"getAllConflicts(long)", "methodnamerefined":"getAllConflicts", "methodabbreviation":"edu.ncsu.csc.itrust.action.ApptAction.getAllConflicts", "fullmethod":"edu.ncsu.csc.itrust.action.ApptAction.getAllConflicts(long)", "classid":52, "classname":"edu.ncsu.csc.itrust.action.ApptAction", "shortclassname":"ApptAction", "method":"/**\r\n * returns a list of appointments that conflict for a given patient/hcp\r\n *\r\n * @param mid\r\n * \t\tthe MID of the user\r\n * @return list of apptBeans\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<ApptBean> getAllConflicts(long mid) throws SQLException {\r\n    if (mid < 7000000000L)\r\n        return apptDAO.getAllConflictsForPatient(mid);\r\n    else\r\n        return apptDAO.getAllConflictsForDoctor(mid);\r\n\r\n}"},
 {"id":198, "methodname":"getConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"getConflictsForAppt", "methodabbreviation":"edu.ncsu.csc.itrust.action.ApptAction.getConflictsForAppt", "fullmethod":"edu.ncsu.csc.itrust.action.ApptAction.getConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)", "classid":52, "classname":"edu.ncsu.csc.itrust.action.ApptAction", "shortclassname":"ApptAction", "method":"/**\r\n * Driver method to get all appointment conflicts, used in jsp files\r\n *\r\n * @param mid\r\n * \t\t\r\n * @param appt\r\n * \t\t\r\n * @return \r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<ApptBean> getConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    return apptDAO.getAllHCPConflictsForAppt(mid, appt);\r\n}"},
 {"id":199, "methodname":"getName(long)", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ApptAction.getName", "fullmethod":"edu.ncsu.csc.itrust.action.ApptAction.getName(long)", "classid":52, "classname":"edu.ncsu.csc.itrust.action.ApptAction", "shortclassname":"ApptAction", "method":"/**\r\n * Gets a userss name from their MID\r\n *\r\n * @param mid\r\n * \t\tthe MID of the user\r\n * @return the users name\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getName(long mid) throws iTrustException {\r\n    if (mid < 7000000000L)\r\n        return patientDAO.getName(mid);\r\n    else\r\n        return personnelDAO.getName(mid);\r\n\r\n}"},
 {"id":200, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ApptBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ApptBeanTest.-init-()", "classid":53, "classname":"edu.ncsu.csc.itrust.action.ApptBeanTest", "shortclassname":"ApptBeanTest", "method":"ApptBeanTest() {\r\n}"},
 {"id":201, "methodname":"testApptEquals()", "methodnamerefined":"testApptEquals", "methodabbreviation":"edu.ncsu.csc.itrust.action.ApptBeanTest.testApptEquals", "fullmethod":"edu.ncsu.csc.itrust.action.ApptBeanTest.testApptEquals()", "classid":53, "classname":"edu.ncsu.csc.itrust.action.ApptBeanTest", "shortclassname":"ApptBeanTest", "method":"public void testApptEquals() {\r\n    ApptBean b = new ApptBean();\r\n    b.setApptID(3);\r\n    ApptBean a = new ApptBean();\r\n    a.setApptID(3);\r\n    assertTrue(a.equals(b));\r\n}"},
 {"id":202, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":54, "classname":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction", "shortclassname":"ChangeSessionTimeoutAction", "method":"/**\r\n * Sets up defualts.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @author Andy Meneely\r\n */\r\npublic ChangeSessionTimeoutAction(DAOFactory factory) {\r\n    this.accessDAO = factory.getAccessDAO();\r\n}"},
 {"id":203, "methodname":"changeSessionTimeout(java.lang.String)", "methodnamerefined":"changeSessionTimeout", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.changeSessionTimeout", "fullmethod":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.changeSessionTimeout(java.lang.String)", "classid":54, "classname":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction", "shortclassname":"ChangeSessionTimeoutAction", "method":"/**\r\n * Changes the session timeout, the complicated logic of this is somewhat regrettably in the DAO,\r\n * {@link AccessDAO}\r\n *\r\n * @param minuteString\r\n * \t\tPass the number of minutes in the form of a string, greater than 0.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @author Andy Meneely\r\n */\r\npublic void changeSessionTimeout(String minuteString) throws DBException, FormValidationException {\r\n    try {\r\n        Integer minutes = Integer.valueOf(minuteString);\r\n        if (minutes < 1)\r\n            throw new FormValidationException(\"Must be a number greater than 0\");\r\n\r\n        accessDAO.setSessionTimeoutMins(minutes);\r\n    } catch (NumberFormatException e) {\r\n        throw new FormValidationException(\"That is not a number\");\r\n    }\r\n}"},
 {"id":204, "methodname":"getSessionTimeout()", "methodnamerefined":"getSessionTimeout", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.getSessionTimeout", "fullmethod":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.getSessionTimeout()", "classid":54, "classname":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction", "shortclassname":"ChangeSessionTimeoutAction", "method":"/**\r\n * Returns the current session timeout in minutes, as reflected in the database\r\n *\r\n * @return the number of minutes it would take for an inactive session to timeout\r\n * @throws DBException\r\n * \t\t\r\n * @author Andy Meneely\r\n */\r\npublic int getSessionTimeout() throws DBException {\r\n    return accessDAO.getSessionTimeoutMins();\r\n}"},
 {"id":205, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest.-init-()", "classid":55, "classname":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest", "shortclassname":"ChangeSessionTimeoutActionTest", "method":"ChangeSessionTimeoutActionTest() {\r\n}"},
 {"id":206, "methodname":"testBadNumber()", "methodnamerefined":"testBadNumber", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest.testBadNumber", "fullmethod":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest.testBadNumber()", "classid":55, "classname":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest", "shortclassname":"ChangeSessionTimeoutActionTest", "method":"public void testBadNumber() throws Exception {\r\n    try {\r\n        action.changeSessionTimeout(\"0\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Must be a number greater than 0\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":207, "methodname":"testFullChange()", "methodnamerefined":"testFullChange", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest.testFullChange", "fullmethod":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest.testFullChange()", "classid":55, "classname":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest", "shortclassname":"ChangeSessionTimeoutActionTest", "method":"public void testFullChange() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.timeout();\r\n    assertEquals(20, action.getSessionTimeout());\r\n    action.changeSessionTimeout(\"21\");\r\n    assertEquals(21, action.getSessionTimeout());\r\n}"},
 {"id":208, "methodname":"testNotANumber()", "methodnamerefined":"testNotANumber", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest.testNotANumber", "fullmethod":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest.testNotANumber()", "classid":55, "classname":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutActionTest", "shortclassname":"ChangeSessionTimeoutActionTest", "method":"public void testNotANumber() throws Exception {\r\n    try {\r\n        action.changeSessionTimeout(\"a\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"That is not a number\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":209, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":56, "classname":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction", "shortclassname":"ChronicDiseaseRiskAction", "method":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param loggedInMID\r\n * \t\t\r\n * @param pidString\r\n * \t\tThe patient ID to be validated and used\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws NoHealthRecordsException\r\n * \t\tThis is thrown if a patient is added without any health records to be checked. Try to avoid\r\n * \t\thaving this exception be thrown in a normal flow of events.\r\n * @author Andy Meneely\r\n */\r\npublic ChronicDiseaseRiskAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\r\n}"},
 {"id":210, "methodname":"getDiseasesAtRisk()", "methodnamerefined":"getDiseasesAtRisk", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.getDiseasesAtRisk", "fullmethod":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.getDiseasesAtRisk()", "classid":56, "classname":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction", "shortclassname":"ChronicDiseaseRiskAction", "method":"/**\r\n * Returns the risks for which this patient is at risk for. All logic has been passed to\r\n * {@link ChronicDiseaseMediator} and the subclasses of {@link RiskChecker}.\r\n *\r\n * @return List of risks\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @author Andy Meneely\r\n */\r\npublic List<RiskChecker> getDiseasesAtRisk() throws DBException, iTrustException {\r\n    return diseaseMediator.getDiseaseAtRisk();\r\n}"},
 {"id":211, "methodname":"getPatientID()", "methodnamerefined":"getPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.getPatientID", "fullmethod":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.getPatientID()", "classid":56, "classname":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction", "shortclassname":"ChronicDiseaseRiskAction", "method":"/**\r\n * Returns the ID of the patient to be checked.\r\n *\r\n * @return patient ID whose risk we are checking\r\n * @author Andy Meneely\r\n */\r\npublic long getPatientID() {\r\n    return pid;\r\n}"},
 {"id":212, "methodname":"getUserName()", "methodnamerefined":"getUserName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.getUserName", "fullmethod":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.getUserName()", "classid":56, "classname":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction", "shortclassname":"ChronicDiseaseRiskAction", "method":"/**\r\n * Gives the full name of the patient\r\n *\r\n * @return Full name of the patient who we are checking\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n * @author Andy Meneely\r\n */\r\npublic String getUserName() throws DBException, iTrustException {\r\n    return authDAO.getUserName(pid);\r\n}"},
 {"id":213, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskActionTest.-init-()", "classid":57, "classname":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskActionTest", "shortclassname":"ChronicDiseaseRiskActionTest", "method":"ChronicDiseaseRiskActionTest() {\r\n}"},
 {"id":214, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskActionTest.setUp()", "classid":57, "classname":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskActionTest", "shortclassname":"ChronicDiseaseRiskActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n}"},
 {"id":215, "methodname":"testGetPatient2()", "methodnamerefined":"testGetPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskActionTest.testGetPatient2", "fullmethod":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskActionTest.testGetPatient2()", "classid":57, "classname":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskActionTest", "shortclassname":"ChronicDiseaseRiskActionTest", "method":"public void testGetPatient2() throws Exception {\r\n    ChronicDiseaseRiskAction action = new ChronicDiseaseRiskAction(factory, 2L, \"2\");\r\n    assertEquals(2L, action.getPatientID());\r\n    assertEquals(\"Andy Programmer\", action.getUserName());\r\n    List<RiskChecker> atRisk = action.getDiseasesAtRisk();\r\n    assertEquals(2, atRisk.size());\r\n    // The test for the Chronic Disease mediator will assert the rest of these\r\n}"},
 {"id":216, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":58, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPAction", "shortclassname":"DeclareHCPAction", "method":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAO factory to be used for generating the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThis patient\r\n * @author Andy Meneely\r\n */\r\npublic DeclareHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":217, "methodname":"declareHCP(java.lang.String)", "methodnamerefined":"declareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPAction.declareHCP", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPAction.declareHCP(java.lang.String)", "classid":58, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPAction", "shortclassname":"DeclareHCPAction", "method":"/**\r\n * Validate an HCPs MID and declare them, if possible\r\n *\r\n * @param hcpStr\r\n * \t\tThe MID of an HCP to declare\r\n * @return A status message,\r\n * @throws iTrustException\r\n * \t\t\r\n * @author Andy Meneely\r\n */\r\npublic String declareHCP(String hcpStr) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(hcpStr);\r\n        if ((authDAO.getUserRole(hcpID)) != (Role.HCP))\r\n            throw new iTrustException(\"This user is not a licensed healthcare professional!\");\r\n\r\n        boolean confirm = patientDAO.declareHCP(loggedInMID, hcpID);\r\n        if (confirm) {\r\n            return \"HCP successfully declared\";\r\n        } else\r\n            return \"HCP not declared\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}"},
 {"id":218, "methodname":"getDeclaredHCPS()", "methodnamerefined":"getDeclaredHCPS", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPAction.getDeclaredHCPS", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPAction.getDeclaredHCPS()", "classid":58, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPAction", "shortclassname":"DeclareHCPAction", "method":"/**\r\n * Lists the declared HCPs for this current patient\r\n *\r\n * @return Returns a list of the declared HCPs\r\n * @throws iTrustException\r\n * \t\t\r\n * @author Andy Meneely\r\n */\r\npublic List<PersonnelBean> getDeclaredHCPS() throws iTrustException {\r\n    return patientDAO.getDeclaredHCPs(loggedInMID);\r\n}"},
 {"id":219, "methodname":"undeclareHCP(java.lang.String)", "methodnamerefined":"undeclareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPAction.undeclareHCP", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPAction.undeclareHCP(java.lang.String)", "classid":58, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPAction", "shortclassname":"DeclareHCPAction", "method":"/**\r\n * Validate an HCPs MID and undeclare them, if possible\r\n *\r\n * @param input\r\n * \t\tThe MID of an HCP to undeclare\r\n * @return \r\n * @throws iTrustException\r\n * \t\t\r\n * @author Andy Meneely\r\n */\r\npublic String undeclareHCP(String input) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(input);\r\n        boolean confirm = patientDAO.undeclareHCP(loggedInMID, hcpID);\r\n        if (confirm) {\r\n            return \"HCP successfully undeclared\";\r\n        } else\r\n            return \"HCP not undeclared\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}"},
 {"id":220, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest.-init-()", "classid":59, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest", "shortclassname":"DeclareHCPActionExceptionTest", "method":"DeclareHCPActionExceptionTest() {\r\n}"},
 {"id":221, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest.setUp()", "classid":59, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest", "shortclassname":"DeclareHCPActionExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    action = new DeclareHCPAction(EvilDAOFactory.getEvilInstance(), 2L);\r\n}"},
 {"id":222, "methodname":"testDeclareMalformed()", "methodnamerefined":"testDeclareMalformed", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest.testDeclareMalformed", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest.testDeclareMalformed()", "classid":59, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest", "shortclassname":"DeclareHCPActionExceptionTest", "method":"public void testDeclareMalformed() throws Exception {\r\n    try {\r\n        action.declareHCP(\"not a number\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"HCPs MID not a number\", e.getMessage());\r\n    }\r\n}"},
 {"id":223, "methodname":"testUnDeclareMalformed()", "methodnamerefined":"testUnDeclareMalformed", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest.testUnDeclareMalformed", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest.testUnDeclareMalformed()", "classid":59, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionExceptionTest", "shortclassname":"DeclareHCPActionExceptionTest", "method":"public void testUnDeclareMalformed() throws Exception {\r\n    try {\r\n        action.undeclareHCP(\"not a number\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"HCPs MID not a number\", e.getMessage());\r\n    }\r\n}"},
 {"id":224, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.-init-()", "classid":60, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest", "shortclassname":"DeclareHCPActionTest", "method":"DeclareHCPActionTest() {\r\n}"},
 {"id":225, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.setUp()", "classid":60, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest", "shortclassname":"DeclareHCPActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.hcp0();\r\n    gen.hcp3();\r\n    action = new DeclareHCPAction(factory, 2L);\r\n}"},
 {"id":226, "methodname":"testDeclareAdmin()", "methodnamerefined":"testDeclareAdmin", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testDeclareAdmin", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testDeclareAdmin()", "classid":60, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest", "shortclassname":"DeclareHCPActionTest", "method":"public void testDeclareAdmin() throws Exception {\r\n    gen.admin1();\r\n    try {\r\n        action.declareHCP(\"9000000001\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"This user is not a licensed healthcare professional!\", e.getMessage());\r\n    }\r\n}"},
 {"id":227, "methodname":"testDeclareAlreadyDeclared()", "methodnamerefined":"testDeclareAlreadyDeclared", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testDeclareAlreadyDeclared", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testDeclareAlreadyDeclared()", "classid":60, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest", "shortclassname":"DeclareHCPActionTest", "method":"public void testDeclareAlreadyDeclared() throws Exception {\r\n    try {\r\n        action.declareHCP(\"9000000003\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"HCP 9000000003 has already been declared for patient 2\", e.getMessage());\r\n    }\r\n    List<PersonnelBean> decs = action.getDeclaredHCPS();\r\n    assertEquals(1, decs.size());\r\n    assertEquals(9000000003L, decs.get(0).getMID());\r\n    // Assert the transaction\r\n    List<TransactionBean> transList = factory.getTransactionDAO().getAllTransactions();\r\n    assertEquals(0, transList.size());\r\n}"},
 {"id":228, "methodname":"testDeclareNormal()", "methodnamerefined":"testDeclareNormal", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testDeclareNormal", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testDeclareNormal()", "classid":60, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest", "shortclassname":"DeclareHCPActionTest", "method":"public void testDeclareNormal() throws Exception {\r\n    assertEquals(\"HCP successfully declared\", action.declareHCP(\"9000000000\"));\r\n    List<PersonnelBean> decs = action.getDeclaredHCPS();\r\n    assertEquals(2, decs.size());\r\n    assertEquals(9000000000L, decs.get(0).getMID());\r\n}"},
 {"id":229, "methodname":"testGetDeclared()", "methodnamerefined":"testGetDeclared", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testGetDeclared", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testGetDeclared()", "classid":60, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest", "shortclassname":"DeclareHCPActionTest", "method":"public void testGetDeclared() throws Exception {\r\n    List<PersonnelBean> decs = action.getDeclaredHCPS();\r\n    assertEquals(1, decs.size());\r\n    assertEquals(9000000003L, decs.get(0).getMID());\r\n}"},
 {"id":230, "methodname":"testUnDeclareNormal()", "methodnamerefined":"testUnDeclareNormal", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testUnDeclareNormal", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testUnDeclareNormal()", "classid":60, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest", "shortclassname":"DeclareHCPActionTest", "method":"public void testUnDeclareNormal() throws Exception {\r\n    assertEquals(\"HCP successfully undeclared\", action.undeclareHCP(\"9000000003\"));\r\n    List<PersonnelBean> decs = action.getDeclaredHCPS();\r\n    assertEquals(0, decs.size());\r\n}"},
 {"id":231, "methodname":"testUnDeclareNotDeclared()", "methodnamerefined":"testUnDeclareNotDeclared", "methodabbreviation":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testUnDeclareNotDeclared", "fullmethod":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest.testUnDeclareNotDeclared()", "classid":60, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPActionTest", "shortclassname":"DeclareHCPActionTest", "method":"public void testUnDeclareNotDeclared() throws Exception {\r\n    assertEquals(\"HCP not undeclared\", action.undeclareHCP(\"9000000000\"));\r\n    List<PersonnelBean> decs = action.getDeclaredHCPS();\r\n    assertEquals(1, decs.size());\r\n    // Assert the transaction\r\n    List<TransactionBean> transList = factory.getTransactionDAO().getAllTransactions();\r\n    assertEquals(0, transList.size());\r\n}"},
 {"id":232, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":61, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionAction", "shortclassname":"DrugInteractionAction", "method":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAO factory to be used for generating the DAOs for this action.\r\n */\r\npublic DrugInteractionAction(DAOFactory factory, long loggedInMID) {\r\n    this.drugDAO = factory.getDrugInteractionDAO();\r\n    this.validator = new DrugInteractionValidator();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":233, "methodname":"deleteInteraction(java.lang.String,java.lang.String)", "methodnamerefined":"deleteInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionAction.deleteInteraction", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionAction.deleteInteraction(java.lang.String,java.lang.String)", "classid":61, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionAction", "shortclassname":"DrugInteractionAction", "method":"/**\r\n * Method to delete an interaction\r\n *\r\n * @param firstDrug\r\n * \t\t\r\n * @param secondDrug\r\n * \t\t\r\n * @return \r\n */\r\npublic String deleteInteraction(String firstDrug, String secondDrug) throws FormValidationException, iTrustException {\r\n    DrugInteractionBean drugInt = new DrugInteractionBean();\r\n    drugInt.setFirstDrug(firstDrug);\r\n    drugInt.setSecondDrug(secondDrug);\r\n    drugInt.setDescription(\"blank\");\r\n    try {\r\n        validator.validate(drugInt);\r\n        if (drugDAO.deleteInteraction(firstDrug, secondDrug)) {\r\n            return \"Interaction deleted successfully\";\r\n        } else {\r\n            return \"Interaction could not be deleted\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n}"},
 {"id":234, "methodname":"getInteractions(java.lang.String)", "methodnamerefined":"getInteractions", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionAction.getInteractions", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionAction.getInteractions(java.lang.String)", "classid":61, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionAction", "shortclassname":"DrugInteractionAction", "method":"/**\r\n * Method to return a list of drug interactions for a given drug\r\n *\r\n * @param drugCode\r\n * \t\t- The ND Code of the drug\r\n * @return \r\n */\r\npublic List<DrugInteractionBean> getInteractions(String drugCode) throws iTrustException {\r\n    try {\r\n        return drugDAO.getInteractions(drugCode);\r\n    } catch (DBException e) {\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n}"},
 {"id":235, "methodname":"reportInteraction(java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"reportInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionAction.reportInteraction", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionAction.reportInteraction(java.lang.String,java.lang.String,java.lang.String)", "classid":61, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionAction", "shortclassname":"DrugInteractionAction", "method":"/**\r\n * Method to report an interaction\r\n *\r\n * @param firstDrug\r\n * \t\t\r\n * @param secondDrug\r\n * \t\t\r\n * @param description\r\n * \t\t\r\n * @return \r\n */\r\npublic String reportInteraction(String firstDrug, String secondDrug, String description) throws FormValidationException, iTrustException {\r\n    if (firstDrug.equals(secondDrug)) {\r\n        return \"Interactions can only be recorded between two different drugs\";\r\n    }\r\n    DrugInteractionBean drugInt = new DrugInteractionBean();\r\n    drugInt.setFirstDrug(firstDrug);\r\n    drugInt.setSecondDrug(secondDrug);\r\n    drugInt.setDescription(description);\r\n    try {\r\n        validator.validate(drugInt);\r\n        if (drugDAO.reportInteraction(firstDrug, secondDrug, description)) {\r\n            return \"Interaction recorded successfully\";\r\n        } else {\r\n            return \"Interaction could not be added\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":236, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.-init-()", "classid":62, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest", "shortclassname":"DrugInteractionActionTest", "method":"DrugInteractionActionTest() {\r\n}"},
 {"id":237, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.setUp()", "classid":62, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest", "shortclassname":"DrugInteractionActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    action = new DrugInteractionAction(factory, 9000000001L);\r\n}"},
 {"id":238, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.tearDown()", "classid":62, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest", "shortclassname":"DrugInteractionActionTest", "method":"@Override\r\nprotected void tearDown() throws Exception {\r\n    super.tearDown();\r\n}"},
 {"id":239, "methodname":"testDeleteInteraction()", "methodnamerefined":"testDeleteInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testDeleteInteraction", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testDeleteInteraction()", "classid":62, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest", "shortclassname":"DrugInteractionActionTest", "method":"public void testDeleteInteraction() throws Exception {\r\n    gen.drugInteractions();\r\n    String response = action.deleteInteraction(\"009042407\", \"548680955\");\r\n    assertSame(response, \"Interaction deleted successfully\");\r\n}"},
 {"id":240, "methodname":"testEvilDAOFactory()", "methodnamerefined":"testEvilDAOFactory", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testEvilDAOFactory", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testEvilDAOFactory()", "classid":62, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest", "shortclassname":"DrugInteractionActionTest", "method":"public void testEvilDAOFactory() throws Exception {\r\n    DrugInteractionAction actionEvil = new DrugInteractionAction(evilFactory, 9000000001L);\r\n    gen.drugInteractions();\r\n    try {\r\n        actionEvil.deleteInteraction(\"009042407\", \"548680955\");\r\n        fail();\r\n    } catch (iTrustException e) {\r\n        assertSame((\"A database exception has occurred. Please see the log in the \" + \"console for stacktrace\"), e.getMessage());\r\n    }\r\n}"},
 {"id":241, "methodname":"testGetInteractions()", "methodnamerefined":"testGetInteractions", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testGetInteractions", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testGetInteractions()", "classid":62, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest", "shortclassname":"DrugInteractionActionTest", "method":"public void testGetInteractions() throws Exception {\r\n    gen.drugInteractions();\r\n    List<DrugInteractionBean> beans = action.getInteractions(\"009042407\");\r\n    assertEquals(beans.size(), 1);\r\n    assertTrue(beans.get(0).getDescription().equals(\"May increase the risk of pseudotumor cerebri, or benign intracranial hypertension.\"));\r\n    assertTrue(beans.get(0).getFirstDrug().equals(\"009042407\"));\r\n    assertTrue(beans.get(0).getSecondDrug().equals(\"548680955\"));\r\n}"},
 {"id":242, "methodname":"testGetInteractions2()", "methodnamerefined":"testGetInteractions2", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testGetInteractions2", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testGetInteractions2()", "classid":62, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest", "shortclassname":"DrugInteractionActionTest", "method":"public void testGetInteractions2() throws Exception {\r\n    gen.standardData();\r\n    action.reportInteraction(\"009042407\", \"081096\", \"Tetra and Aspirin\");\r\n    action.reportInteraction(\"009042407\", \"647641512\", \"Tetra and Prio\");\r\n    action.reportInteraction(\"548684985\", \"647641512\", \"Cital and Prio\");\r\n    List<DrugInteractionBean> beans = action.getInteractions(\"647641512\");\r\n    assertEquals(beans.size(), 2);\r\n    assertTrue(beans.get(0).getDescription().equals(\"Tetra and Prio\"));\r\n    assertTrue(beans.get(0).getFirstDrug().equals(\"009042407\"));\r\n    assertTrue(beans.get(0).getSecondDrug().equals(\"647641512\"));\r\n    assertTrue(beans.get(1).getDescription().equals(\"Cital and Prio\"));\r\n    assertTrue(beans.get(1).getFirstDrug().equals(\"548684985\"));\r\n    assertTrue(beans.get(1).getSecondDrug().equals(\"647641512\"));\r\n}"},
 {"id":243, "methodname":"testReportAlreadyAdded()", "methodnamerefined":"testReportAlreadyAdded", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testReportAlreadyAdded", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testReportAlreadyAdded()", "classid":62, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest", "shortclassname":"DrugInteractionActionTest", "method":"public void testReportAlreadyAdded() throws Exception {\r\n    gen.ndCodes();\r\n    try {\r\n        String response = action.reportInteraction(\"548684985\", \"081096\", \"May potentiate the risk of bleeding in patients.\");\r\n        assertSame(response, \"Interaction recorded successfully\");\r\n        action.reportInteraction(\"548684985\", \"081096\", \"May possibly potentiate the risk of bleeding in patients.\");\r\n    } catch (iTrustException e) {\r\n        assertSame(e.getMessage(), \"Error: Interaction between these drugs already exists.\");\r\n    }\r\n}"},
 {"id":244, "methodname":"testReportInteraction()", "methodnamerefined":"testReportInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testReportInteraction", "fullmethod":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest.testReportInteraction()", "classid":62, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionActionTest", "shortclassname":"DrugInteractionActionTest", "method":"public void testReportInteraction() throws Exception {\r\n    gen.ndCodes();\r\n    String response = action.reportInteraction(\"548684985\", \"081096\", \"May potentiate the risk of bleeding in patients.\");\r\n    assertSame(response, \"Interaction recorded successfully\");\r\n}"},
 {"id":245, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":63, "classname":"edu.ncsu.csc.itrust.action.EditApptAction", "shortclassname":"EditApptAction", "method":"public EditApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}"},
 {"id":246, "methodname":"editAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "methodnamerefined":"editAppt", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptAction.editAppt", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptAction.editAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "classid":63, "classname":"edu.ncsu.csc.itrust.action.EditApptAction", "shortclassname":"EditApptAction", "method":"/**\r\n * Updates an existing appointment\r\n *\r\n * @param appt\r\n * \t\tAppointment Bean containing the updated information\r\n * @return Message to be displayed\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic String editAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis())))\r\n        return (\"The scheduled date of this appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.editAppt(appt);\r\n        return \"Success: Appointment changed\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":247, "methodname":"getAppt(int)", "methodnamerefined":"getAppt", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptAction.getAppt", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptAction.getAppt(int)", "classid":63, "classname":"edu.ncsu.csc.itrust.action.EditApptAction", "shortclassname":"EditApptAction", "method":"/**\r\n * Retrieves an appointment from the database, given its ID.\r\n * Returns null if there is no match, or multiple matches.\r\n *\r\n * @param apptID\r\n * \t\t\r\n * @return ApptBean with matching ID\r\n */\r\npublic ApptBean getAppt(int apptID) {\r\n    try {\r\n        List<ApptBean> apptBeans = apptDAO.getAppt(apptID);\r\n        if ((apptBeans.size()) == 1)\r\n            return apptBeans.get(0);\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}"},
 {"id":248, "methodname":"removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"removeAppt", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptAction.removeAppt", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptAction.removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "classid":63, "classname":"edu.ncsu.csc.itrust.action.EditApptAction", "shortclassname":"EditApptAction", "method":"/**\r\n * Removes an existing appointment\r\n *\r\n * @param appt\r\n * \t\tAppointment Bean containing the ID of the appointment to be removed.\r\n * @return Message to be displayed\r\n */\r\npublic String removeAppt(ApptBean appt) {\r\n    try {\r\n        apptDAO.removeAppt(appt);\r\n        return \"Success: Appointment removed\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":249, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptActionTest.-init-()", "classid":64, "classname":"edu.ncsu.csc.itrust.action.EditApptActionTest", "shortclassname":"EditApptActionTest", "method":"EditApptActionTest() {\r\n}"},
 {"id":250, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptActionTest.setUp()", "classid":64, "classname":"edu.ncsu.csc.itrust.action.EditApptActionTest", "shortclassname":"EditApptActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.patient42();\r\n    gen.appointment();\r\n    gen.appointmentType();\r\n    gen.uc22();\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.editAction = new EditApptAction(this.factory, this.hcpId);\r\n    this.viewAction = new ViewMyApptsAction(this.factory, this.hcpId);\r\n}"},
 {"id":251, "methodname":"testEditAppt()", "methodnamerefined":"testEditAppt", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptActionTest.testEditAppt", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptActionTest.testEditAppt()", "classid":64, "classname":"edu.ncsu.csc.itrust.action.EditApptActionTest", "shortclassname":"EditApptActionTest", "method":"public void testEditAppt() throws Exception {\r\n    List<ApptBean> appts = viewAction.getAllMyAppointments();\r\n    ApptBean orig = appts.get(0);\r\n    ApptBean b = new ApptBean();\r\n    b.setApptID(orig.getApptID());\r\n    b.setDate(orig.getDate());\r\n    b.setApptType(orig.getApptType());\r\n    b.setHcp(orig.getHcp());\r\n    b.setPatient(orig.getPatient());\r\n    b.setComment(\"New comment!\");\r\n    String s = editAction.editAppt(b, true);\r\n    assertTrue(s.contains(\"The scheduled date of this appointment\"));\r\n    assertTrue(s.contains(\"has already passed\"));\r\n    Date d = new Date();\r\n    boolean changed = false;\r\n    for (ApptBean aBean : appts) {\r\n        b = new ApptBean();\r\n        b.setApptID(aBean.getApptID());\r\n        b.setDate(aBean.getDate());\r\n        b.setApptType(aBean.getApptType());\r\n        b.setHcp(aBean.getHcp());\r\n        b.setPatient(aBean.getPatient());\r\n        b.setComment(\"New comment!\");\r\n        d.setTime(aBean.getDate().getTime());\r\n        if (d.after(new Date())) {\r\n            s = editAction.editAppt(b, true);\r\n            // assertTrue(s.contains(\"Success: Appointment changed\"));\r\n            assertEquals(\"Success: Appointment changed\", s);\r\n            changed = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!changed)\r\n        fail();\r\n\r\n}"},
 {"id":252, "methodname":"testEditApptConflict()", "methodnamerefined":"testEditApptConflict", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptActionTest.testEditApptConflict", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptActionTest.testEditApptConflict()", "classid":64, "classname":"edu.ncsu.csc.itrust.action.EditApptActionTest", "shortclassname":"EditApptActionTest", "method":"public void testEditApptConflict() throws Exception {\r\n    Calendar c = Calendar.getInstance();\r\n    c.add(Calendar.DATE, 12);\r\n    c.set(Calendar.HOUR, 9);\r\n    c.set(Calendar.AM_PM, Calendar.AM);\r\n    c.set(Calendar.MINUTE, 45);\r\n    List<ApptBean> appts = viewAction.getMyAppointments();\r\n    ApptBean orig = appts.get(0);\r\n    ApptBean b = new ApptBean();\r\n    b.setApptID(orig.getApptID());\r\n    b.setDate(new Timestamp(c.getTimeInMillis()));\r\n    b.setApptType(orig.getApptType());\r\n    b.setHcp(orig.getHcp());\r\n    b.setPatient(orig.getPatient());\r\n    String s = editAction.editAppt(b, false);\r\n    assertTrue(s.contains(\"conflict\"));\r\n}"},
 {"id":253, "methodname":"testGetAppt()", "methodnamerefined":"testGetAppt", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptActionTest.testGetAppt", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptActionTest.testGetAppt()", "classid":64, "classname":"edu.ncsu.csc.itrust.action.EditApptActionTest", "shortclassname":"EditApptActionTest", "method":"public void testGetAppt() throws Exception {\r\n    List<ApptBean> appts = viewAction.getMyAppointments();\r\n    ApptBean b1 = appts.get(0);\r\n    ApptBean b2 = editAction.getAppt(b1.getApptID());\r\n    assertEquals(b1.getApptID(), b2.getApptID());\r\n    assertEquals(b1.getApptType(), b2.getApptType());\r\n    assertEquals(b1.getComment(), b2.getComment());\r\n    assertEquals(b1.getHcp(), b2.getHcp());\r\n    assertEquals(b1.getPatient(), b2.getPatient());\r\n    assertEquals(b1.getClass(), b2.getClass());\r\n    assertEquals(b1.getDate(), b2.getDate());\r\n}"},
 {"id":254, "methodname":"testGetName()", "methodnamerefined":"testGetName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptActionTest.testGetName", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptActionTest.testGetName()", "classid":64, "classname":"edu.ncsu.csc.itrust.action.EditApptActionTest", "shortclassname":"EditApptActionTest", "method":"public void testGetName() throws iTrustException {\r\n    assertEquals(\"Kelly Doctor\", editAction.getName(hcpId));\r\n    assertEquals(\"Bad Horse\", editAction.getName(42));\r\n}"},
 {"id":255, "methodname":"testRemoveAppt()", "methodnamerefined":"testRemoveAppt", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptActionTest.testRemoveAppt", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptActionTest.testRemoveAppt()", "classid":64, "classname":"edu.ncsu.csc.itrust.action.EditApptActionTest", "shortclassname":"EditApptActionTest", "method":"public void testRemoveAppt() throws Exception {\r\n    List<ApptBean> appts = viewAction.getMyAppointments();\r\n    int size = appts.size();\r\n    assertEquals(\"Success: Appointment removed\", editAction.removeAppt(appts.get(0)));\r\n    assertEquals((size - 1), viewAction.getMyAppointments().size());\r\n    editAction.removeAppt(appts.get(0));\r\n}"},
 {"id":256, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":65, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeAction", "shortclassname":"EditApptTypeAction", "method":"public EditApptTypeAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n}"},
 {"id":257, "methodname":"addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "methodnamerefined":"addApptType", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeAction.addApptType", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeAction.addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "classid":65, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeAction", "shortclassname":"EditApptTypeAction", "method":"public String addApptType(ApptTypeBean apptType) throws FormValidationException, SQLException {\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName()))\r\n            return (\"Appointment Type: \" + (apptType.getName())) + \" already exists.\";\r\n\r\n    }\r\n    try {\r\n        if (apptTypeDAO.addApptType(apptType)) {\r\n            return (((\"Success: \" + (apptType.getName())) + \" - Duration: \") + (apptType.getDuration())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":258, "methodname":"editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "methodnamerefined":"editApptType", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeAction.editApptType", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeAction.editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "classid":65, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeAction", "shortclassname":"EditApptTypeAction", "method":"public String editApptType(ApptTypeBean apptType) throws FormValidationException, SQLException {\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    int flag = 0;\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName())) {\r\n            flag = 1;\r\n            if ((a.getDuration()) == (apptType.getDuration()))\r\n                return (((\"Appointment Type: \" + (apptType.getName())) + \" already has a duration of \") + (apptType.getDuration())) + \" minutes.\";\r\n\r\n            break;\r\n        }\r\n    }\r\n    if (flag == 0) {\r\n        return (\"Appointment Type: \" + (apptType.getName())) + \" you are trying to update does not exist.\";\r\n    }\r\n    try {\r\n        if (apptTypeDAO.editApptType(apptType)) {\r\n            return (((\"Success: \" + (apptType.getName())) + \" - Duration: \") + (apptType.getDuration())) + \" updated\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":259, "methodname":"getApptTypes()", "methodnamerefined":"getApptTypes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeAction.getApptTypes", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeAction.getApptTypes()", "classid":65, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeAction", "shortclassname":"EditApptTypeAction", "method":"public List<ApptTypeBean> getApptTypes() throws SQLException {\r\n    return apptTypeDAO.getApptTypes();\r\n}"},
 {"id":260, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeTest.-init-()", "classid":66, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeTest", "shortclassname":"EditApptTypeTest", "method":"EditApptTypeTest() {\r\n}"},
 {"id":261, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeTest.setUp()", "classid":66, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeTest", "shortclassname":"EditApptTypeTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.action = new EditApptTypeAction(this.factory, this.adminId);\r\n}"},
 {"id":262, "methodname":"testAddApptType()", "methodnamerefined":"testAddApptType", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testAddApptType", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testAddApptType()", "classid":66, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeTest", "shortclassname":"EditApptTypeTest", "method":"public void testAddApptType() throws FormValidationException, SQLException {\r\n    ApptTypeBean a = new ApptTypeBean();\r\n    a.setName(\"Test\");\r\n    a.setDuration(30);\r\n    assertTrue(action.addApptType(a).startsWith(\"Success\"));\r\n    assertEquals(7, action.getApptTypes().size());\r\n}"},
 {"id":263, "methodname":"testAddApptType2()", "methodnamerefined":"testAddApptType2", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testAddApptType2", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testAddApptType2()", "classid":66, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeTest", "shortclassname":"EditApptTypeTest", "method":"public void testAddApptType2() throws FormValidationException, SQLException {\r\n    ApptTypeBean a = new ApptTypeBean();\r\n    a.setName(\"General Checkup\");\r\n    a.setDuration(30);\r\n    assertTrue(action.addApptType(a).equals(\"Appointment Type: General Checkup already exists.\"));\r\n}"},
 {"id":264, "methodname":"testAddApptTypeLengthZero()", "methodnamerefined":"testAddApptTypeLengthZero", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testAddApptTypeLengthZero", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testAddApptTypeLengthZero()", "classid":66, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeTest", "shortclassname":"EditApptTypeTest", "method":"public void testAddApptTypeLengthZero() throws SQLException {\r\n    ApptTypeBean a = new ApptTypeBean();\r\n    a.setName(\"Test\");\r\n    a.setDuration(0);\r\n    try {\r\n        action.addApptType(a);\r\n    } catch (FormValidationException e) {\r\n        // Exception is good.\r\n        return;\r\n    }\r\n    assertTrue(false);\r\n}"},
 {"id":265, "methodname":"testEditApptType()", "methodnamerefined":"testEditApptType", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testEditApptType", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testEditApptType()", "classid":66, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeTest", "shortclassname":"EditApptTypeTest", "method":"public void testEditApptType() throws FormValidationException, SQLException {\r\n    ApptTypeBean a = new ApptTypeBean();\r\n    a.setName(\"General Checkup\");\r\n    a.setDuration(30);\r\n    assertTrue(action.editApptType(a).startsWith(\"Success\"));\r\n}"},
 {"id":266, "methodname":"testEditApptType2()", "methodnamerefined":"testEditApptType2", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testEditApptType2", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testEditApptType2()", "classid":66, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeTest", "shortclassname":"EditApptTypeTest", "method":"public void testEditApptType2() throws FormValidationException, SQLException {\r\n    ApptTypeBean a = new ApptTypeBean(\"General Checkup\", 45);\r\n    assertEquals(\"Appointment Type: General Checkup already has a duration of 45 minutes.\", action.editApptType(a));\r\n}"},
 {"id":267, "methodname":"testGetApptTypes()", "methodnamerefined":"testGetApptTypes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testGetApptTypes", "fullmethod":"edu.ncsu.csc.itrust.action.EditApptTypeTest.testGetApptTypes()", "classid":66, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeTest", "shortclassname":"EditApptTypeTest", "method":"public void testGetApptTypes() throws SQLException {\r\n    assertEquals(6, action.getApptTypes().size());\r\n}"},
 {"id":268, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "shortclassname":"EditDiagnosesAction", "method":"public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}"},
 {"id":269, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "shortclassname":"EditDiagnosesAction", "method":"public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}"},
 {"id":270, "methodname":"addDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"addDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.addDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.addDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "shortclassname":"EditDiagnosesAction", "method":"public void addDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.add(bean);\r\n}"},
 {"id":271, "methodname":"deleteDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"deleteDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.deleteDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.deleteDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "shortclassname":"EditDiagnosesAction", "method":"public void deleteDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.remove(bean.getOvDiagnosisID());\r\n}"},
 {"id":272, "methodname":"editDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"editDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.editDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.editDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "shortclassname":"EditDiagnosesAction", "method":"public void editDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.edit(bean);\r\n}"},
 {"id":273, "methodname":"getDiagnoses()", "methodnamerefined":"getDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.getDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.getDiagnoses()", "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "shortclassname":"EditDiagnosesAction", "method":"public List<DiagnosisBean> getDiagnoses() throws DBException {\r\n    if (isUnsaved()) {\r\n        return new ArrayList<DiagnosisBean>();\r\n    } else {\r\n        return diagnosesDAO.getList(getOvID());\r\n    }\r\n}"},
 {"id":274, "methodname":"getDiagnosisCodes()", "methodnamerefined":"getDiagnosisCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.getDiagnosisCodes", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.getDiagnosisCodes()", "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "shortclassname":"EditDiagnosesAction", "method":"public List<DiagnosisBean> getDiagnosisCodes() throws DBException {\r\n    return icdDAO.getAllICDCodes();\r\n}"},
 {"id":275, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.-init-()", "classid":68, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest", "shortclassname":"EditDiagnosesActionTest", "method":"EditDiagnosesActionTest() {\r\n}"},
 {"id":276, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.setUp()", "classid":68, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest", "shortclassname":"EditDiagnosesActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":277, "methodname":"testAddDiagnosis()", "methodnamerefined":"testAddDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testAddDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testAddDiagnosis()", "classid":68, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest", "shortclassname":"EditDiagnosesActionTest", "method":"public void testAddDiagnosis() throws Exception {\r\n    action = new EditDiagnosesAction(factory, 9000000000L, \"2\", \"952\");\r\n    assertEquals(0, action.getDiagnoses().size());\r\n    DiagnosisBean bean = new DiagnosisBean();\r\n    bean.setICDCode(\"250.10\");\r\n    bean.setVisitID(952);\r\n    action.addDiagnosis(bean);\r\n    assertEquals(1, action.getDiagnoses().size());\r\n    assertEquals(\"250.10\", action.getDiagnoses().get(0).getICDCode());\r\n}"},
 {"id":278, "methodname":"testDeleteDiagnosis()", "methodnamerefined":"testDeleteDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testDeleteDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testDeleteDiagnosis()", "classid":68, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest", "shortclassname":"EditDiagnosesActionTest", "method":"public void testDeleteDiagnosis() throws Exception {\r\n    action = new EditDiagnosesAction(factory, 9000000000L, \"2\", \"955\");\r\n    assertEquals(1, action.getDiagnoses().size());\r\n    action.deleteDiagnosis(action.getDiagnoses().get(0));\r\n    assertEquals(0, action.getDiagnoses().size());\r\n}"},
 {"id":279, "methodname":"testEditDiagnosis()", "methodnamerefined":"testEditDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testEditDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testEditDiagnosis()", "classid":68, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest", "shortclassname":"EditDiagnosesActionTest", "method":"public void testEditDiagnosis() throws Exception {\r\n    action = new EditDiagnosesAction(factory, 9000000000L, \"2\", \"955\");\r\n    DiagnosisBean bean = action.getDiagnoses().get(0);\r\n    assertEquals(\"250.10\", bean.getICDCode());\r\n    bean.setICDCode(\"84.50\");\r\n    action.editDiagnosis(bean);\r\n    bean = action.getDiagnoses().get(0);\r\n    assertEquals(\"84.50\", bean.getICDCode());\r\n}"},
 {"id":280, "methodname":"testGetDiagnoses()", "methodnamerefined":"testGetDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testGetDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testGetDiagnoses()", "classid":68, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest", "shortclassname":"EditDiagnosesActionTest", "method":"public void testGetDiagnoses() throws Exception {\r\n    action = new EditDiagnosesAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<DiagnosisBean> list = action.getDiagnoses();\r\n    assertEquals(1, list.size());\r\n    assertEquals(\"250.10\", list.get(0).getICDCode());\r\n    action = new EditDiagnosesAction(factory, 9000000000L, \"2\", \"952\");\r\n    assertEquals(0, action.getDiagnoses().size());\r\n    // An EditDiagnosesAction without an ovID returns an empty list.\r\n    action = new EditDiagnosesAction(factory, 9000000000L, \"2\");\r\n    assertEquals(0, action.getDiagnoses().size());\r\n}"},
 {"id":281, "methodname":"testGetDiagnosisCodes()", "methodnamerefined":"testGetDiagnosisCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testGetDiagnosisCodes", "fullmethod":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest.testGetDiagnosisCodes()", "classid":68, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesActionTest", "shortclassname":"EditDiagnosesActionTest", "method":"public void testGetDiagnosisCodes() throws Exception {\r\n    action = new EditDiagnosesAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<DiagnosisBean> list = action.getDiagnosisCodes();\r\n    assertEquals(15, list.size());\r\n    // It can also be retrieved for an undefined office visit\r\n    action = new EditDiagnosesAction(factory, 9000000000L, \"1\");\r\n    list = action.getDiagnosisCodes();\r\n    assertEquals(15, list.size());\r\n}"},
 {"id":282, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":69, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction", "shortclassname":"EditHealthHistoryAction", "method":"/**\r\n * The patient ID is validated by the superclass\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory which will be used to generate the DAOs used for this action.\r\n * @param loggedInMID\r\n * \t\tThe user authorizing this action.\r\n * @param pidString\r\n * \t\tThe patient (or other user) who is being edited.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditHealthHistoryAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":283, "methodname":"addHealthRecord(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "methodnamerefined":"addHealthRecord", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.addHealthRecord", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.addHealthRecord(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "classid":69, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction", "shortclassname":"EditHealthHistoryAction", "method":"/**\r\n * Adds a health record for the given patient\r\n *\r\n * @param pid\r\n * \t\tThe patient record who is being edited.\r\n * @param hr\r\n * \t\tThe filled out health record form to be added.\r\n * @return message - \"Information Recorded\" or exceptions message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addHealthRecord(long pid, HealthRecordForm hr) throws FormValidationException, iTrustException {\r\n    validator.validate(hr);\r\n    HealthRecord record = transferForm(pid, hr);\r\n    hrDAO.add(record);\r\n    return \"Information Recorded\";\r\n}"},
 {"id":284, "methodname":"getAllHealthRecords(long)", "methodnamerefined":"getAllHealthRecords", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.getAllHealthRecords", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.getAllHealthRecords(long)", "classid":69, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction", "shortclassname":"EditHealthHistoryAction", "method":"/**\r\n * Returns a list of all HealthRecords for the given patient\r\n *\r\n * @param pid\r\n * \t\tThe ID of the patient to look up\r\n * @return list of HealthRecords\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<HealthRecord> getAllHealthRecords(long pid) throws iTrustException {\r\n    return hrDAO.getAllHealthRecords(pid);\r\n}"},
 {"id":285, "methodname":"getPatientName()", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.getPatientName()", "classid":69, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction", "shortclassname":"EditHealthHistoryAction", "method":"/**\r\n * returns the patient name\r\n *\r\n * @return patient name\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName() throws DBException, iTrustException {\r\n    return authDAO.getUserName(pid);\r\n}"},
 {"id":286, "methodname":"transferForm(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "methodnamerefined":"transferForm", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.transferForm", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.transferForm(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "classid":69, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction", "shortclassname":"EditHealthHistoryAction", "method":"/**\r\n * Moves the information from the form to a HealthRecord\r\n *\r\n * @param pid\r\n * \t\tPatient of interest\r\n * @param form\r\n * \t\tForm to be translated\r\n * @return a HealthRecord containing all the information in the form\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\nprivate HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {\r\n    HealthRecord record = new HealthRecord();\r\n    record.setPatientID(pid);\r\n    record.setPersonnelID(loggedInMID);\r\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\r\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\r\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\r\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\r\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\r\n    if (((record.getTotalCholesterol()) < 100) || ((record.getTotalCholesterol()) > 600))\r\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\r\n\r\n    record.setHeight(Double.valueOf(form.getHeight()));\r\n    record.setWeight(Double.valueOf(form.getWeight()));\r\n    record.setSmoker(Integer.valueOf(form.getIsSmoker()));\r\n    return record;\r\n}"},
 {"id":287, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.-init-()", "classid":70, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest", "shortclassname":"EditHealthHistoryActionTest", "method":"EditHealthHistoryActionTest() {\r\n}"},
 {"id":288, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.setUp()", "classid":70, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest", "shortclassname":"EditHealthHistoryActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    action = new EditHealthHistoryAction(factory, 9000000000L, \"2\");\r\n}"},
 {"id":289, "methodname":"testAddHealthRecordEvil()", "methodnamerefined":"testAddHealthRecordEvil", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.testAddHealthRecordEvil", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.testAddHealthRecordEvil()", "classid":70, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest", "shortclassname":"EditHealthHistoryActionTest", "method":"public void testAddHealthRecordEvil() throws Exception {\r\n    // Correct form data\r\n    HealthRecordForm hr = new HealthRecordForm();\r\n    hr.setBloodPressureN(\"999\");\r\n    hr.setBloodPressureD(\"999\");\r\n    hr.setCholesterolHDL(\"50\");\r\n    hr.setCholesterolLDL(\"50\");\r\n    hr.setCholesterolTri(\"499\");\r\n    hr.setHeight(\"65.2\");\r\n    hr.setWeight(\"9999.9\");\r\n    hr.setIsSmoker(\"1\");\r\n    action = new EditHealthHistoryAction(new EvilDAOFactory(1), 9000000000L, \"2\");\r\n    try {\r\n        action.addHealthRecord(1L, hr);\r\n    } catch (iTrustException e) {\r\n        DBException dbe = ((DBException) (e));\r\n        assertEquals(EvilDAOFactory.MESSAGE, dbe.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":290, "methodname":"testAddToEmptyRecordSimple()", "methodnamerefined":"testAddToEmptyRecordSimple", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.testAddToEmptyRecordSimple", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.testAddToEmptyRecordSimple()", "classid":70, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest", "shortclassname":"EditHealthHistoryActionTest", "method":"public void testAddToEmptyRecordSimple() throws Exception {\r\n    assertEquals(1, action.getAllHealthRecords(1L).size());\r\n    HealthRecordForm hr = new HealthRecordForm();\r\n    hr.setBloodPressureN(\"999\");\r\n    hr.setBloodPressureD(\"999\");\r\n    hr.setCholesterolHDL(\"50\");\r\n    hr.setCholesterolLDL(\"50\");\r\n    hr.setCholesterolTri(\"499\");\r\n    hr.setHeight(\"65.2\");\r\n    hr.setWeight(\"9999.9\");\r\n    hr.setIsSmoker(\"1\");\r\n    String confirm = action.addHealthRecord(1L, hr);\r\n    assertEquals(\"Information Recorded\", confirm);\r\n    List<HealthRecord> records = action.getAllHealthRecords(1L);\r\n    assertEquals(2, records.size());\r\n    // Note that we dont need to check the returned values here - see the DAO test, AddPHRTest\r\n}"},
 {"id":291, "methodname":"testPatientNameNull()", "methodnamerefined":"testPatientNameNull", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.testPatientNameNull", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.testPatientNameNull()", "classid":70, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest", "shortclassname":"EditHealthHistoryActionTest", "method":"public void testPatientNameNull() throws Exception {\r\n    assertNotNull(action.getPatientName());\r\n}"},
 {"id":292, "methodname":"testTotalCholesterol()", "methodnamerefined":"testTotalCholesterol", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.testTotalCholesterol", "fullmethod":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest.testTotalCholesterol()", "classid":70, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryActionTest", "shortclassname":"EditHealthHistoryActionTest", "method":"public void testTotalCholesterol() throws Exception {\r\n    HealthRecordForm hr = new HealthRecordForm();\r\n    hr.setBloodPressureN(\"999\");\r\n    hr.setBloodPressureD(\"999\");\r\n    hr.setCholesterolHDL(\"50\");\r\n    hr.setCholesterolLDL(\"50\");\r\n    hr.setCholesterolTri(\"500\");\r\n    hr.setHeight(\"65.2\");\r\n    hr.setWeight(\"9999.9\");\r\n    action.addHealthRecord(2L, hr);\r\n    hr.setCholesterolTri(\"501\");\r\n    try {\r\n        action.addHealthRecord(2L, hr);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"Total cholesterol must be in [100,600]\", e.getErrorList().get(0));\r\n        assertEquals(1, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":293, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "shortclassname":"EditImmunizationsAction", "method":"public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":294, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "shortclassname":"EditImmunizationsAction", "method":"public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":295, "methodname":"addImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"addImmunization", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.addImmunization", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.addImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "shortclassname":"EditImmunizationsAction", "method":"public void addImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.add(bean);\r\n}"},
 {"id":296, "methodname":"deleteImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"deleteImmunization", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.deleteImmunization", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.deleteImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "shortclassname":"EditImmunizationsAction", "method":"public void deleteImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.remove(bean.getOvProcedureID());\r\n}"},
 {"id":297, "methodname":"editImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"editImmunization", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.editImmunization", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.editImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "shortclassname":"EditImmunizationsAction", "method":"public void editImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.edit(bean);\r\n}"},
 {"id":298, "methodname":"getImmunizationCodes()", "methodnamerefined":"getImmunizationCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.getImmunizationCodes", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.getImmunizationCodes()", "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "shortclassname":"EditImmunizationsAction", "method":"public List<ProcedureBean> getImmunizationCodes() throws DBException {\r\n    return cptDAO.getImmunizationCPTCodes();\r\n}"},
 {"id":299, "methodname":"getImmunizations()", "methodnamerefined":"getImmunizations", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.getImmunizations", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.getImmunizations()", "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "shortclassname":"EditImmunizationsAction", "method":"public List<ProcedureBean> getImmunizations() throws DBException {\r\n    if (isUnsaved()) {\r\n        return new ArrayList<ProcedureBean>();\r\n    } else {\r\n        return proceduresDAO.getImmunizationList(getOvID());\r\n    }\r\n}"},
 {"id":300, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.-init-()", "classid":72, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest", "shortclassname":"EditImmunizationsActionTest", "method":"EditImmunizationsActionTest() {\r\n}"},
 {"id":301, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.setUp()", "classid":72, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest", "shortclassname":"EditImmunizationsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":302, "methodname":"testAddImmunization()", "methodnamerefined":"testAddImmunization", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testAddImmunization", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testAddImmunization()", "classid":72, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest", "shortclassname":"EditImmunizationsActionTest", "method":"public void testAddImmunization() throws Exception {\r\n    action = new EditImmunizationsAction(factory, 9000000000L, \"2\", \"955\");\r\n    assertEquals(0, action.getImmunizations().size());\r\n    ProcedureBean bean = new ProcedureBean();\r\n    bean.setCPTCode(\"90707\");\r\n    bean.setVisitID(955);\r\n    bean.setHcpid(\"9000000000\");\r\n    action.addImmunization(bean);\r\n    assertEquals(1, action.getImmunizations().size());\r\n    assertEquals(\"90707\", action.getImmunizations().get(0).getCPTCode());\r\n}"},
 {"id":303, "methodname":"testDeleteImmunization()", "methodnamerefined":"testDeleteImmunization", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testDeleteImmunization", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testDeleteImmunization()", "classid":72, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest", "shortclassname":"EditImmunizationsActionTest", "method":"public void testDeleteImmunization() throws Exception {\r\n    action = new EditImmunizationsAction(factory, 9000000000L, \"5\", \"1000\");\r\n    assertEquals(1, action.getImmunizations().size());\r\n    action.deleteImmunization(action.getImmunizations().get(0));\r\n    assertEquals(0, action.getImmunizations().size());\r\n}"},
 {"id":304, "methodname":"testEditImmunization()", "methodnamerefined":"testEditImmunization", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testEditImmunization", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testEditImmunization()", "classid":72, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest", "shortclassname":"EditImmunizationsActionTest", "method":"public void testEditImmunization() throws Exception {\r\n    action = new EditImmunizationsAction(factory, 9000000000L, \"5\", \"1000\");\r\n    ProcedureBean bean = action.getImmunizations().get(0);\r\n    assertEquals(\"90371\", bean.getCPTCode());\r\n    bean.setCPTCode(\"90707\");\r\n    bean.setVisitID(1000);\r\n    bean.setHcpid(\"9000000000\");\r\n    action.editImmunization(bean);\r\n    bean = action.getImmunizations().get(0);\r\n    assertEquals(\"90707\", bean.getCPTCode());\r\n}"},
 {"id":305, "methodname":"testGetImmunizationCodes()", "methodnamerefined":"testGetImmunizationCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testGetImmunizationCodes", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testGetImmunizationCodes()", "classid":72, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest", "shortclassname":"EditImmunizationsActionTest", "method":"public void testGetImmunizationCodes() throws Exception {\r\n    action = new EditImmunizationsAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<ProcedureBean> list = action.getImmunizationCodes();\r\n    assertEquals(15, list.size());\r\n    // It can also be retrieved for an undefined office visit\r\n    action = new EditImmunizationsAction(factory, 9000000000L, \"1\");\r\n    list = action.getImmunizationCodes();\r\n    assertEquals(15, list.size());\r\n}"},
 {"id":306, "methodname":"testGetImmunizations()", "methodnamerefined":"testGetImmunizations", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testGetImmunizations", "fullmethod":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest.testGetImmunizations()", "classid":72, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsActionTest", "shortclassname":"EditImmunizationsActionTest", "method":"public void testGetImmunizations() throws Exception {\r\n    action = new EditImmunizationsAction(factory, 9000000000L, \"5\", \"1000\");\r\n    List<ProcedureBean> list = action.getImmunizations();\r\n    assertEquals(1, list.size());\r\n    assertEquals(\"90371\", list.get(0).getCPTCode());\r\n    action = new EditImmunizationsAction(factory, 9000000000L, \"1\", \"11\");\r\n    assertEquals(0, action.getImmunizations().size());\r\n    // An EditImmunizationsAction without an ovID returns an empty list.\r\n    action = new EditImmunizationsAction(factory, 9000000000L, \"2\");\r\n    assertEquals(0, action.getImmunizations().size());\r\n}"},
 {"id":307, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}"},
 {"id":308, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}"},
 {"id":309, "methodname":"addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"addLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.addLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public void addLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: choose lab tech if not assigned in bean\r\n    if (\"\".equals(bean.getStatus())) {\r\n        bean.setStatus(LabProcedureBean.In_Transit);\r\n    }\r\n    labProcedureDAO.addLabProcedure(bean);\r\n}"},
 {"id":310, "methodname":"autoAssignLabTech(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"autoAssignLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.autoAssignLabTech", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.autoAssignLabTech(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public LabProcedureBean autoAssignLabTech(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: determine the lab tech using more intelligent means\r\n    List<PersonnelBean> techs = personnelDAO.getLabTechs();\r\n    if (!(techs.isEmpty())) {\r\n        bean.setLTID(techs.get(0).getMID());\r\n    } else {\r\n        bean.setLTID(0);\r\n    }\r\n    return bean;\r\n}"},
 {"id":311, "methodname":"deleteLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"deleteLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.deleteLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.deleteLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public void deleteLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    labProcedureDAO.removeLabProcedure(bean.getProcedureID());\r\n}"},
 {"id":312, "methodname":"editLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"editLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.editLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.editLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public void editLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    labProcedureDAO.updateLabProcedure(bean);\r\n}"},
 {"id":313, "methodname":"getLabProcedure(long)", "methodnamerefined":"getLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabProcedure(long)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public LabProcedureBean getLabProcedure(long id) throws iTrustException {\r\n    verifySaved();\r\n    return labProcedureDAO.getLabProcedure(id);\r\n}"},
 {"id":314, "methodname":"getLabProcedureCodes()", "methodnamerefined":"getLabProcedureCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabProcedureCodes", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabProcedureCodes()", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public List<LOINCbean> getLabProcedureCodes() throws DBException {\r\n    return loincDAO.getAllLOINC();\r\n}"},
 {"id":315, "methodname":"getLabProcedures()", "methodnamerefined":"getLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabProcedures()", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public List<LabProcedureBean> getLabProcedures() throws DBException {\r\n    if (isUnsaved()) {\r\n        return new ArrayList<LabProcedureBean>();\r\n    } else {\r\n        return labProcedureDAO.getAllLabProceduresForDocOV(getOvID());\r\n    }\r\n}"},
 {"id":316, "methodname":"getLabTechName(long)", "methodnamerefined":"getLabTechName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechName", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechName(long)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public String getLabTechName(long mid) throws iTrustException {\r\n    try {\r\n        return personnelDAO.getName(mid);\r\n    } catch (iTrustException e) {\r\n        return \"\";\r\n    }\r\n}"},
 {"id":317, "methodname":"getLabTechQueueSize(long)", "methodnamerefined":"getLabTechQueueSize", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechQueueSize", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechQueueSize(long)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public int getLabTechQueueSize(long mid) throws iTrustException {\r\n    return labProcedureDAO.getLabTechQueueSize(mid);\r\n}"},
 {"id":318, "methodname":"getLabTechQueueSizeByPriority(long)", "methodnamerefined":"getLabTechQueueSizeByPriority", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechQueueSizeByPriority", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechQueueSizeByPriority(long)", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public int[] getLabTechQueueSizeByPriority(long mid) throws iTrustException {\r\n    return labProcedureDAO.getLabTechQueueSizeByPriority(mid);\r\n}"},
 {"id":319, "methodname":"getLabTechs()", "methodnamerefined":"getLabTechs", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechs", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.getLabTechs()", "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "shortclassname":"EditLabProceduresAction", "method":"public List<PersonnelBean> getLabTechs() throws iTrustException {\r\n    return personnelDAO.getLabTechs();\r\n}"},
 {"id":320, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.-init-()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"EditLabProceduresActionTest() {\r\n}"},
 {"id":321, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.setUp()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":322, "methodname":"testAddLabProcedure()", "methodnamerefined":"testAddLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testAddLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testAddLabProcedure()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testAddLabProcedure() throws Exception {\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"2\", \"953\");\r\n    assertEquals(0, action.getLabProcedures().size());\r\n    LabProcedureBean bean = new LabProcedureBean();\r\n    bean.setLoinc(\"10763-1\");\r\n    bean.setOvID(953);\r\n    bean.setPid(2);\r\n    action.addLabProcedure(bean);\r\n    assertEquals(1, action.getLabProcedures().size());\r\n    assertEquals(\"10763-1\", action.getLabProcedures().get(0).getLoinc());\r\n}"},
 {"id":323, "methodname":"testAutoAssignLabTech()", "methodnamerefined":"testAutoAssignLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testAutoAssignLabTech", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testAutoAssignLabTech()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testAutoAssignLabTech() throws Exception {\r\n    // TODO: setup: assign lab procs to techs\r\n    // the lab tech with the least amount of work should get the assignment\r\n}"},
 {"id":324, "methodname":"testDeleteLabProcedure()", "methodnamerefined":"testDeleteLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testDeleteLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testDeleteLabProcedure()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testDeleteLabProcedure() throws Exception {\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"2\", \"952\");\r\n    assertEquals(1, action.getLabProcedures().size());\r\n    action.deleteLabProcedure(action.getLabProcedures().get(0));\r\n    assertEquals(0, action.getLabProcedures().size());\r\n}"},
 {"id":325, "methodname":"testEditLabProcedure()", "methodnamerefined":"testEditLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testEditLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testEditLabProcedure()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testEditLabProcedure() throws Exception {\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"2\", \"952\");\r\n    assertEquals(1, action.getLabProcedures().size());\r\n    LabProcedureBean bean = action.getLabProcedures().get(0);\r\n    assertEquals(\"Performed the procedure\", bean.getCommentary());\r\n    bean.setCommentary(\"But I dont want to be a pirate!\");\r\n    bean.setOvID(952);\r\n    bean.setPid(2);\r\n    action.editLabProcedure(bean);\r\n    assertEquals(1, action.getLabProcedures().size());\r\n    bean = action.getLabProcedures().get(0);\r\n    assertEquals(\"But I dont want to be a pirate!\", bean.getCommentary());\r\n}"},
 {"id":326, "methodname":"testGetLabProcedure()", "methodnamerefined":"testGetLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabProcedure()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testGetLabProcedure() throws Exception {\r\n    gen.officeVisit5();\r\n    action = new EditLabProceduresAction(factory, 9000000003L, \"5\", \"380\");\r\n    LabProcedureBean bean = action.getLabProcedure(1380);\r\n    assertEquals(\"13495-7\", bean.getLoinc());\r\n}"},
 {"id":327, "methodname":"testGetLabProcedureCodes()", "methodnamerefined":"testGetLabProcedureCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabProcedureCodes", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabProcedureCodes()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testGetLabProcedureCodes() throws Exception {\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<LOINCbean> list = action.getLabProcedureCodes();\r\n    assertEquals(4, list.size());\r\n    // It can also be retrieved for an undefined office visit\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"1\");\r\n    list = action.getLabProcedureCodes();\r\n    assertEquals(4, list.size());\r\n}"},
 {"id":328, "methodname":"testGetLabProcedures()", "methodnamerefined":"testGetLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabProcedures()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testGetLabProcedures() throws Exception {\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<LabProcedureBean> list = action.getLabProcedures();\r\n    assertEquals(3, list.size());\r\n    assertEquals(\"10763-1\", list.get(0).getLoinc());\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"2\", \"953\");\r\n    assertEquals(0, action.getLabProcedures().size());\r\n    // An EditLabProceduresAction without an ovID returns an empty list.\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"2\");\r\n    assertEquals(0, action.getLabProcedures().size());\r\n}"},
 {"id":329, "methodname":"testGetLabTechName()", "methodnamerefined":"testGetLabTechName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabTechName", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabTechName()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testGetLabTechName() throws Exception {\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"1\", \"11\");\r\n    assertEquals(\"Lab Dude\", action.getLabTechName(5000000001L));\r\n    assertEquals(\"\", action.getLabTechName(5432100001L));\r\n}"},
 {"id":330, "methodname":"testGetLabTechQueueSize()", "methodnamerefined":"testGetLabTechQueueSize", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabTechQueueSize", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabTechQueueSize()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testGetLabTechQueueSize() throws Exception {\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"1\", \"11\");\r\n    assertEquals(19, action.getLabTechQueueSize(5000000001L));\r\n    assertEquals(26, action.getLabTechQueueSize(5000000002L));\r\n    assertEquals(0, action.getLabTechQueueSize(5000000003L));\r\n    assertEquals(0, action.getLabTechQueueSize(5432100001L));// bad id\r\n\r\n}"},
 {"id":331, "methodname":"testGetLabTechQueueSizeByPriority()", "methodnamerefined":"testGetLabTechQueueSizeByPriority", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabTechQueueSizeByPriority", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabTechQueueSizeByPriority()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testGetLabTechQueueSizeByPriority() throws Exception {\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"1\", \"11\");\r\n    int[] sizes = action.getLabTechQueueSizeByPriority(5000000001L);\r\n    assertEquals(3, sizes[1]);\r\n    assertEquals(0, sizes[2]);\r\n    assertEquals(16, sizes[3]);\r\n}"},
 {"id":332, "methodname":"testGetLabTechs()", "methodnamerefined":"testGetLabTechs", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabTechs", "fullmethod":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest.testGetLabTechs()", "classid":74, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresActionTest", "shortclassname":"EditLabProceduresActionTest", "method":"public void testGetLabTechs() throws Exception {\r\n    action = new EditLabProceduresAction(factory, 9000000000L, \"1\", \"11\");\r\n    List<PersonnelBean> list = action.getLabTechs();\r\n    assertEquals(3, list.size());\r\n    ArrayList<String> names = new ArrayList<String>();\r\n    for (PersonnelBean bean : list) {\r\n        names.add(bean.getFullName());\r\n    }\r\n    assertTrue(names.contains(\"Lab Dude\"));\r\n    assertTrue(names.contains(\"Nice Guy\"));\r\n    assertTrue(names.contains(\"Cool Person\"));\r\n}"},
 {"id":333, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":75, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListAction", "shortclassname":"EditMonitoringListAction", "method":"/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the HCP editing their monitoring list.\r\n */\r\npublic EditMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":334, "methodname":"addToList(long,edu.ncsu.csc.itrust.beans.TelemedicineBean)", "methodnamerefined":"addToList", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.addToList", "fullmethod":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.addToList(long,edu.ncsu.csc.itrust.beans.TelemedicineBean)", "classid":75, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListAction", "shortclassname":"EditMonitoringListAction", "method":"/**\r\n * Adds a patient to the current HCPs remote monitoring list\r\n *\r\n * @param patientMID\r\n * \t\tthe patient\r\n * @param permissions\r\n * \t\tArray indicating what data the patient is allowed to enter.\r\n * \t\tOrdered by Systolic Blood Pressure, Diastolic Blood Pressure, Glucose Level, Weight, Pedometer Reading.\r\n * @return true if added successfully. False if already in list.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean addToList(long patientMID, TelemedicineBean tBean) throws DBException {\r\n    return rmDAO.addPatientToList(patientMID, loggedInMID, tBean);\r\n}"},
 {"id":335, "methodname":"getPatientName(long)", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.getPatientName(long)", "classid":75, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListAction", "shortclassname":"EditMonitoringListAction", "method":"/**\r\n * returns the patient name\r\n *\r\n * @return patient name\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(long pid) throws DBException, iTrustException {\r\n    return authDAO.getUserName(pid);\r\n}"},
 {"id":336, "methodname":"isPatientInList(long)", "methodnamerefined":"isPatientInList", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.isPatientInList", "fullmethod":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.isPatientInList(long)", "classid":75, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListAction", "shortclassname":"EditMonitoringListAction", "method":"/**\r\n * Returns whether a patient is in an HCPs list already\r\n *\r\n * @param patientMID\r\n * \t\tthe patient\r\n * @return true if in DB, false otherwise\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean isPatientInList(long patientMID) throws DBException {\r\n    List<RemoteMonitoringDataBean> dataset = rmDAO.getPatientsData(loggedInMID);\r\n    for (RemoteMonitoringDataBean d : dataset) {\r\n        if ((d.getPatientMID()) == patientMID)\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":337, "methodname":"removeFromList(long)", "methodnamerefined":"removeFromList", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.removeFromList", "fullmethod":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.removeFromList(long)", "classid":75, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListAction", "shortclassname":"EditMonitoringListAction", "method":"/**\r\n * Removes a patient from the current HCPs remote monitoring list\r\n *\r\n * @param patientMID\r\n * \t\tthe patient\r\n * @return true if removed successfully. False if not in list.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean removeFromList(long patientMID) throws DBException {\r\n    return rmDAO.removePatientFromList(patientMID, loggedInMID);\r\n}"},
 {"id":338, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest.-init-()", "classid":76, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest", "shortclassname":"EditMonitoringListActionTest", "method":"EditMonitoringListActionTest() {\r\n}"},
 {"id":339, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest.setUp()", "classid":76, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest", "shortclassname":"EditMonitoringListActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.patient1();\r\n    action = new EditMonitoringListAction(TestDAOFactory.getTestInstance(), 9000000000L);\r\n}"},
 {"id":340, "methodname":"testAddToRemoveFromList()", "methodnamerefined":"testAddToRemoveFromList", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest.testAddToRemoveFromList", "fullmethod":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest.testAddToRemoveFromList()", "classid":76, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest", "shortclassname":"EditMonitoringListActionTest", "method":"public void testAddToRemoveFromList() throws Exception {\r\n    TelemedicineBean tBean = new TelemedicineBean();\r\n    assertTrue(action.addToList(1L, tBean));\r\n    assertFalse(action.addToList(1L, tBean));\r\n    assertTrue(action.removeFromList(1L));\r\n    assertFalse(action.removeFromList(1L));\r\n}"},
 {"id":341, "methodname":"testIsPatientInList()", "methodnamerefined":"testIsPatientInList", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest.testIsPatientInList", "fullmethod":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest.testIsPatientInList()", "classid":76, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListActionTest", "shortclassname":"EditMonitoringListActionTest", "method":"public void testIsPatientInList() throws Exception {\r\n    TelemedicineBean tBean = new TelemedicineBean();\r\n    action.addToList(1L, tBean);\r\n    assertTrue(action.isPatientInList(1));\r\n    assertFalse(action.isPatientInList(2));\r\n}"},
 {"id":342, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Patient id and office visit id validated by super class\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory to be used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is authorizing this action.\r\n * @param pidString\r\n * \t\tThe patient who this action is performed on.\r\n * @param ovIDString\r\n * \t\tThe ID of the office visit in play.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString, ovIDString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":343, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Create an OfficeVisitAction that is not yet associated with an actual\r\n * office visit.  When update() is called, it will be saved.  Until then,\r\n * any attempt to save prescriptions, procedures, lab procedures,\r\n * immunizations, or diagnoses will raise an exception.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param loggedInMID\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":344, "methodname":"combineLists(java.util.List,java.util.List)", "methodnamerefined":"combineLists", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.combineLists", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.combineLists(java.util.List,java.util.List)", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Combines two lists of hospitals\r\n *\r\n * @param hcpsHospitals\r\n * \t\thospitals the HCP is assigned to\r\n * @param allHospitals\r\n * \t\tall hospitals\r\n * @return the combined list\r\n */\r\nprivate List<HospitalBean> combineLists(List<HospitalBean> hcpsHospitals, List<HospitalBean> allHospitals) {\r\n    for (HospitalBean hos : allHospitals) {\r\n        if (!(hcpsHospitals.contains(hos)))\r\n            hcpsHospitals.add(hos);\r\n\r\n    }\r\n    return hcpsHospitals;\r\n}"},
 {"id":345, "methodname":"diagnoses()", "methodnamerefined":"diagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.diagnoses", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.diagnoses()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n *\r\n *\r\n * @return The EditDiagnosesAction sub action associated with this office visit.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditDiagnosesAction diagnoses() throws iTrustException {\r\n    return diagnosesAction;\r\n}"},
 {"id":346, "methodname":"getBean()", "methodnamerefined":"getBean", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.getBean", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.getBean()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n *\r\n *\r\n * @return The OfficeVisitBean associated with this office visit, or if it\r\nhas not been saved, a default OfficeVisitBean with the HCP id and\r\npatient id filled in.\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate OfficeVisitBean getBean() throws DBException {\r\n    if (isUnsaved()) {\r\n        OfficeVisitBean b = new OfficeVisitBean();\r\n        b.setHcpID(getHcpid());\r\n        b.setPatientID(getPid());\r\n        return b;\r\n    } else {\r\n        return ovDAO.getOfficeVisit(ovID);\r\n    }\r\n}"},
 {"id":347, "methodname":"getHospitals()", "methodnamerefined":"getHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.getHospitals", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.getHospitals()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * This is a list of all hospitals, ordered by the office visits hcp FIRST\r\n *\r\n * @param hcpID\r\n * \t\t\r\n * @return \r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<HospitalBean> getHospitals() throws iTrustException {\r\n    List<HospitalBean> hcpsHospitals = personnelDAO.getHospitals(getHcpid());\r\n    List<HospitalBean> allHospitals = hospitalDAO.getAllHospitals();\r\n    return combineLists(hcpsHospitals, allHospitals);\r\n}"},
 {"id":348, "methodname":"getOfficeVisit()", "methodnamerefined":"getOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.getOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.getOfficeVisit()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Returns the office visit bean for the office visit\r\n *\r\n * @return the OfficeVisitBean of the office visit\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic OfficeVisitBean getOfficeVisit() throws iTrustException {\r\n    return getBean();\r\n}"},
 {"id":349, "methodname":"immunizations()", "methodnamerefined":"immunizations", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.immunizations", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.immunizations()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n *\r\n *\r\n * @return The EditImmunizationsAction sub action associated with this office visit.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditImmunizationsAction immunizations() throws iTrustException {\r\n    return immunizationsAction;\r\n}"},
 {"id":350, "methodname":"labProcedures()", "methodnamerefined":"labProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.labProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.labProcedures()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n *\r\n *\r\n * @return The EditLabProceduresAction sub action associated with this office visit.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditLabProceduresAction labProcedures() throws iTrustException {\r\n    return labProceduresAction;\r\n}"},
 {"id":351, "methodname":"logIncidentReportEvent(edu.ncsu.csc.itrust.enums.TransactionType)", "methodnamerefined":"logIncidentReportEvent", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logIncidentReportEvent", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logIncidentReportEvent(edu.ncsu.csc.itrust.enums.TransactionType)", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Helper that logs an ER incident.  The associated patient id, ER\r\n * id, and incident report id are automatically included.\r\n *\r\n * @param trans\r\n * \t\tTransaction type for the log.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logIncidentReportEvent(TransactionType trans) throws DBException {\r\n    loggingAction.logEvent(trans, loggedInMID, getPid(), (\"Incident Report ID: \" + (getOvID())));\r\n}"},
 {"id":352, "methodname":"logOfficeVisitEvent(edu.ncsu.csc.itrust.enums.TransactionType)", "methodnamerefined":"logOfficeVisitEvent", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logOfficeVisitEvent", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logOfficeVisitEvent(edu.ncsu.csc.itrust.enums.TransactionType)", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Helper that logs an office visit event.  The associated patient id, HCP\r\n * id, and office visit id are automatically included.\r\n *\r\n * @param trans\r\n * \t\tTransaction type for the log.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logOfficeVisitEvent(TransactionType trans) throws DBException {\r\n    loggingAction.logEvent(trans, loggedInMID, getPid(), (\"Office visit ID: \" + (getOvID())));\r\n}"},
 {"id":353, "methodname":"makeEmailApp(long,java.lang.String,java.lang.String)", "methodnamerefined":"makeEmailApp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.makeEmailApp", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.makeEmailApp(long,java.lang.String,java.lang.String)", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Sends e-mail regarding the prescribed dangerous drug.\r\n *\r\n * @param hcpID\r\n * \t\tHCP the prescription is made by\r\n * @param patID\r\n * \t\tID of the patient prescription is for\r\n * @param problem\r\n * \t\tThe allergy and/or interaction that is the problem\r\n * @return the sent e-mail\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic Email makeEmailApp(long hcpID, String patID, String problem) throws DBException, iTrustException {\r\n    PatientBean p = patDAO.getPatient(Long.parseLong(patID));\r\n    String hcpName = personnelDAO.getName(hcpID);\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"HCP has prescribed you a potentially dangerous medication\");\r\n    email.setBody(String.format(\"%s has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. %s\", hcpName, problem));\r\n    return email;\r\n}"},
 {"id":354, "methodname":"patientInstructions()", "methodnamerefined":"patientInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.patientInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.patientInstructions()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"public EditPatientInstructionsAction patientInstructions() throws iTrustException {\r\n    return patientInstructionsAction;\r\n}"},
 {"id":355, "methodname":"prescriptions()", "methodnamerefined":"prescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.prescriptions", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.prescriptions()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n *\r\n *\r\n * @return The EditPrescriptionsAction sub action associated with this office visit.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPrescriptionsAction prescriptions() throws iTrustException {\r\n    return prescriptionsAction;\r\n}"},
 {"id":356, "methodname":"procedures()", "methodnamerefined":"procedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.procedures", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.procedures()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n *\r\n *\r\n * @return The EditProceduresAction sub action associated with this office visit.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditProceduresAction procedures() throws iTrustException {\r\n    return proceduresAction;\r\n}"},
 {"id":357, "methodname":"referrals()", "methodnamerefined":"referrals", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.referrals", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.referrals()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"public EditReferralsAction referrals() throws iTrustException {\r\n    return referralsAction;\r\n}"},
 {"id":358, "methodname":"reinitializeSubActions()", "methodnamerefined":"reinitializeSubActions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.reinitializeSubActions", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.reinitializeSubActions()", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Used to update the sub actions once a office visit is saved.  Until this\r\n * is called, attempting to save sub actions will raise an exception.\r\n *\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate void reinitializeSubActions() throws iTrustException {\r\n    if (isUnsaved()) {\r\n        throw new iTrustException(\"Cannot initalize EditOfficeVisit sub actions.  No ovID is present.\");\r\n    }\r\n    DAOFactory factory = getFactory();\r\n    String pidString = \"\" + (getPid());\r\n    String ovIDString = \"\" + (getOvID());\r\n    prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString, ovIDString);\r\n    diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString, ovIDString);\r\n    labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    referralsAction = new EditReferralsAction(factory, loggedInMID, pidString, ovIDString);\r\n}"},
 {"id":359, "methodname":"updateBean(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "methodnamerefined":"updateBean", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateBean", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateBean(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Update the office visit with the given data.  If the office visit has\r\n * not yet been saved, this will save it and reinitialize the sub actions.\r\n *\r\n * @param bean\r\n * \t\tThe data with which to update the office visit.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate void updateBean(OfficeVisitBean bean) throws DBException, iTrustException {\r\n    if (isUnsaved()) {\r\n        // bean.getID() == -1\r\n        ovID = ovDAO.add(bean);\r\n        reinitializeSubActions();\r\n    } else {\r\n        ovDAO.update(bean);\r\n    }\r\n}"},
 {"id":360, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateInformation(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Updates the office visit with information from the form passed in.  If\r\n * the office visit has not yet been saved, calling this method will save\r\n * it as well as make the sub actions able to be saved.\r\n *\r\n * @param form\r\n * \t\tinformation to update\r\n * @return \"success\" or exceptions message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(EditOfficeVisitForm form, boolean isERIncident) throws FormValidationException {\r\n    String confirm = \"\";\r\n    try {\r\n        updateOv(form, isERIncident);\r\n        confirm = \"success\";\r\n        return confirm;\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":361, "methodname":"updateOv(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)", "methodnamerefined":"updateOv", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateOv", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateOv(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)", "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "shortclassname":"EditOfficeVisitAction", "method":"/**\r\n * Updates the office visit.\r\n *\r\n * @param form\r\n * \t\tform with all the information\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\nprivate void updateOv(EditOfficeVisitForm form, boolean isERIncident) throws DBException, FormValidationException, iTrustException {\r\n    validator.validate(form);\r\n    OfficeVisitBean ov = getBean();\r\n    ov.setNotes(form.getNotes());\r\n    ov.setVisitDateStr(form.getVisitDate());\r\n    ov.setHcpID(Long.valueOf(form.getHcpID()));\r\n    ov.setPatientID(Long.valueOf(form.getPatientID()));\r\n    ov.setHospitalID(form.getHospitalID());\r\n    ov.setERIncident(isERIncident);\r\n    updateBean(ov);\r\n}"},
 {"id":362, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.-init-()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"EditOfficeVisitActionTest() {\r\n}"},
 {"id":363, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.setUp()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.hospitals();\r\n    gen.hcp0();\r\n    gen.patient1();\r\n    gen.admin1();\r\n    gen.officeVisit1();\r\n    gen.ndCodes();\r\n    action = new EditOfficeVisitAction(factory, 9000000001L, \"1\", \"1\");\r\n}"},
 {"id":364, "methodname":"testEvilDatabase()", "methodnamerefined":"testEvilDatabase", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testEvilDatabase", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testEvilDatabase()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"public void testEvilDatabase() {\r\n    try {\r\n        action = new EditOfficeVisitAction(EvilDAOFactory.getEvilInstance(), 0L, \"1\", \"1\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", e.getMessage());\r\n        DBException dbe = ((DBException) (e));\r\n        assertEquals(EvilDAOFactory.MESSAGE, dbe.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":365, "methodname":"testGetHospitals()", "methodnamerefined":"testGetHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testGetHospitals", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testGetHospitals()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"/**\r\n * Test Hospital location\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testGetHospitals() throws Exception {\r\n    // NOTE: may have to fix this... use different pid and ovid.\r\n    action = new EditOfficeVisitAction(factory, 9000000000L, \"1\", \"1\");\r\n    List<HospitalBean> hospitals = action.getHospitals();\r\n    assertEquals(9, hospitals.size());\r\n    // First comes hospitals associated with the HCP in alphabetical order.\r\n    // Then comes all other hospitals in alphabetical order.\r\n    assertEquals(\"Test Hospital 8181818181\", hospitals.get(0).getHospitalName());\r\n    assertEquals(\"Test Hospital 9191919191\", hospitals.get(1).getHospitalName());\r\n    assertEquals(\"Facebook Rehab Center\", hospitals.get(2).getHospitalName());\r\n    assertEquals(\"Health Institute Dr. E\", hospitals.get(3).getHospitalName());\r\n    assertEquals(\"Health Institute Mr. Barry\", hospitals.get(4).getHospitalName());\r\n    assertEquals(\"Health Institute Mr. Donghoon\", hospitals.get(5).getHospitalName());\r\n    assertEquals(\"Le Awesome Hospital\", hospitals.get(6).getHospitalName());\r\n}"},
 {"id":366, "methodname":"testGetOfficeVisit()", "methodnamerefined":"testGetOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testGetOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testGetOfficeVisit()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"/**\r\n * Test patient office visit\r\n *\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void testGetOfficeVisit() throws iTrustException {\r\n    OfficeVisitBean ovb = action.getOfficeVisit();\r\n    assertEquals(1L, action.getOvID());\r\n    assertEquals(\"Generated for Death for Patient: 1\", ovb.getNotes());\r\n    assertEquals(9000000000L, ovb.getHcpID());\r\n    assertEquals(1L, ovb.getID());\r\n    assertEquals(1, ovb.getVisitID());\r\n    /* assertEquals(0, ovb.getDiagnoses().size()); */\r\n    assertEquals(\"1\", ovb.getHospitalID());\r\n    assertEquals(0, action.prescriptions().getPrescriptions().size());\r\n}"},
 {"id":367, "methodname":"testMakeEmailApp()", "methodnamerefined":"testMakeEmailApp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testMakeEmailApp", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testMakeEmailApp()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"/* public void testCheckAddPrescription() throws FormValidationException {\nEditOfficeVisitForm frm = new EditOfficeVisitForm();\nfrm.setHcpID(\"9000000000\");\nfrm.setPatientID(\"1\");\nfrm.setVisitDate(\"05/02/2001\");\nfrm.setAddMedID(\"5\");\nfrm.setDosage(\"5\");\nfrm.setStartDate(\"02/02/2007\");\nfrm.setEndDate(\"02/02/2008\");\nfrm.setOvID(\"9000000000\");\n\ntry {\nfrm.setOverrideCode(null);\nfail();\n} catch(FormValidationException e) {\n\n}\n\nString[] overrideCodes = {\"00001\", \"00002\"};\nfrm.setOverrideCode(overrideCodes);\nfrm.setOverrideComment(\"Other reasons\");\naction.updateInformation(frm);\n\n\n}\n */\r\n/* public void testCheckRemoveSubaction() throws FormValidationException {\nEditOfficeVisitForm frm = new EditOfficeVisitForm();\nfrm.setHcpID(\"9000000000\");\nfrm.setPatientID(\"1\");\nfrm.setVisitDate(\"05/02/2001\");\nfrm.setAddDiagID(\"35\");\nfrm.setRemoveDiagID(\"35\");\naction.updateInformation(frm);\n}\n */\r\n/* public void testNoAllergyPrescribe() throws FormValidationException, Exception {\ngen.patient2();\ngen.officeVisit2();\nassertTrue(action.hasInteraction(\"081096\", \"2\",\"2009/9/22\",\"2009/9/22\")==\"\");\n\n}\n\npublic void testInteraction() throws FormValidationException, Exception {\ngen.officeVisit3();\ngen.ndCodes1();\ngen.drugInteractions3();\nassertFalse(action.hasInteraction(\"619580501\", \"1\",\"9/22/2009\",\"10/11/2009\")==\"\");\n\n}\n */\r\npublic void testMakeEmailApp() throws FormValidationException, Exception {\r\n    gen.patient2();\r\n    gen.hcp0();\r\n    Email testEmail = action.makeEmailApp(9000000000L, \"2\", \"You are allergic.\");\r\n    assertEquals(\"no-reply@itrust.com\", testEmail.getFrom());\r\n    assertEquals(\"andy.programmer@gmail.com\", testEmail.getToListStr());\r\n    assertEquals(\"HCP has prescribed you a potentially dangerous medication\", testEmail.getSubject());\r\n    assertEquals(\"Kelly Doctor has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. You are allergic.\", testEmail.getBody());\r\n}"},
 {"id":368, "methodname":"testOVDoesntExist()", "methodnamerefined":"testOVDoesntExist", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testOVDoesntExist", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testOVDoesntExist()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"public void testOVDoesntExist() {\r\n    try {\r\n        action = new EditOfficeVisitAction(TestDAOFactory.getTestInstance(), 0L, \"1\", \"158\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Office Visit 158 with Patient MID 1 does not exist\", e.getMessage());\r\n    }\r\n}"},
 {"id":369, "methodname":"testOVID()", "methodnamerefined":"testOVID", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testOVID", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testOVID()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"public void testOVID() {\r\n    try {\r\n        action = new EditOfficeVisitAction(factory, 0L, \"1\", \"NaN\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Office Visit ID is not a number: For input string: \"NaN\"\", e.getMessage());\r\n    }\r\n}"},
 {"id":370, "methodname":"testUpdateInformation()", "methodnamerefined":"testUpdateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformation()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"/**\r\n * Test if patient information is update\r\n * test update information semicolon\r\n * test updateInformation Octothorpe\r\n *\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic void testUpdateInformation() throws FormValidationException {\r\n    EditOfficeVisitForm frm = new EditOfficeVisitForm();\r\n    frm.setHcpID(\"9000000000\");\r\n    frm.setPatientID(\"1\");\r\n    frm.setVisitDate(\"05/02/2001\");\r\n    // frm.setAddDiagID(\"79.3\");\r\n    action.updateInformation(frm, false);\r\n}"},
 {"id":371, "methodname":"testUpdateInformationEmptyForm()", "methodnamerefined":"testUpdateInformationEmptyForm", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformationEmptyForm", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformationEmptyForm()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"public void testUpdateInformationEmptyForm() {\r\n    try {\r\n        EditOfficeVisitForm frm = new EditOfficeVisitForm();\r\n        action.updateInformation(frm, false);\r\n        fail(\"should have thrown exception\");\r\n    } catch (FormValidationException fve) {\r\n    }\r\n}"},
 {"id":372, "methodname":"testUpdateInformationNewOfficeVisit()", "methodnamerefined":"testUpdateInformationNewOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformationNewOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformationNewOfficeVisit()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"public void testUpdateInformationNewOfficeVisit() throws Exception {\r\n    action = new EditOfficeVisitAction(factory, 9000000001L, \"1\");\r\n    assertEquals(true, action.isUnsaved());\r\n    assertEquals((-1), action.getOvID());\r\n    EditOfficeVisitForm frm = new EditOfficeVisitForm();\r\n    frm.setHcpID(\"9000000001\");\r\n    frm.setPatientID(\"1\");\r\n    frm.setVisitDate(\"05/02/2001\");\r\n    frm.setNotes(\"That was a doctors visit\");\r\n    try {\r\n        action.updateInformation(frm, false);\r\n    } catch (FormValidationException e) {\r\n        fail(e.getMessage());\r\n    }\r\n    assertEquals(false, action.isUnsaved());\r\n    assertFalse(((-1) == (action.getOvID())));\r\n}"},
 {"id":373, "methodname":"testUpdateInformationOctothorpe()", "methodnamerefined":"testUpdateInformationOctothorpe", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformationOctothorpe", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformationOctothorpe()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"public void testUpdateInformationOctothorpe() throws Exception {\r\n    EditOfficeVisitForm frm = new EditOfficeVisitForm();\r\n    frm.setHcpID(\"9000000000\");\r\n    frm.setPatientID(\"1\");\r\n    frm.setVisitDate(\"05/02/2001\");\r\n    frm.setNotes(\"semicolon test #\");\r\n    try {\r\n        action.updateInformation(frm, false);\r\n    } catch (FormValidationException e) {\r\n        fail(e.getMessage());\r\n    }\r\n}"},
 {"id":374, "methodname":"testUpdateInformationSemicolon()", "methodnamerefined":"testUpdateInformationSemicolon", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformationSemicolon", "fullmethod":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest.testUpdateInformationSemicolon()", "classid":78, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitActionTest", "shortclassname":"EditOfficeVisitActionTest", "method":"public void testUpdateInformationSemicolon() throws FormValidationException {\r\n    EditOfficeVisitForm frm = new EditOfficeVisitForm();\r\n    frm.setHcpID(\"9000000000\");\r\n    frm.setPatientID(\"1\");\r\n    frm.setVisitDate(\"05/02/2001\");\r\n    frm.setNotes(\"semicolon test ;\");\r\n    action.updateInformation(frm, false);\r\n}"},
 {"id":375, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory to be used in creating DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the currently logged in user who is authorizing this action.\r\n * @param pidString\r\n * \t\tThe MID of the patient whose personal health records are being added.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws NoHealthRecordsException\r\n * \t\t\r\n */\r\npublic EditPHRAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.HCPUAP = personnelDAO.getPersonnel(loggedInMID);\r\n    this.patient = patientDAO.getPatient(pid);\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.ndcodesDAO = factory.getNDCodesDAO();// NEW\r\n\r\n    emailutil = new EmailUtil(factory);\r\n    this.factory = factory;\r\n}"},
 {"id":376, "methodname":"doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveCancer", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveCancer", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Checks to see if a particular family member has cancer\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has cancer.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"199\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":377, "methodname":"doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveDiabetes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveDiabetes", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Checks to see if a particular family member has diabetes\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has diabetes.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"250\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":378, "methodname":"doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveHeartDisease", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHeartDisease", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Checks to see if a particular family member has heart disease\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has heart disease.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"402\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":379, "methodname":"doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveHighBP", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighBP", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Checks to see if a particular family member has high blood pressure\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getBloodPressureSystolic()) > 240) || ((record.getBloodPressureDiastolic()) > 120))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":380, "methodname":"doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveHighCholesterol", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighCholesterol", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Checks to see if a particular family member has high cholesterol\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has high cholesterol.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getCholesterolHDL()) < 35) || ((record.getCholesterolLDL()) > 250))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":381, "methodname":"getAllHealthRecords()", "methodnamerefined":"getAllHealthRecords", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.getAllHealthRecords", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.getAllHealthRecords()", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Returns a list of HealthRecords for the patient\r\n *\r\n * @return \r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<HealthRecord> getAllHealthRecords() throws iTrustException {\r\n    List<HealthRecord> allHealthRecords = hrDAO.getAllHealthRecords(pid);\r\n    return allHealthRecords;\r\n}"},
 {"id":382, "methodname":"getAllOfficeVisits()", "methodnamerefined":"getAllOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.getAllOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.getAllOfficeVisits()", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Returns a list of OfficeVisitBeans\r\n *\r\n * @return \r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisits() throws iTrustException {\r\n    return ovDAO.getAllOfficeVisits(pid);\r\n}"},
 {"id":383, "methodname":"getAllergies()", "methodnamerefined":"getAllergies", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.getAllergies", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.getAllergies()", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Returns a list of AllergyBeans for the patient\r\n *\r\n * @return list of AllergyBeans\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<AllergyBean> getAllergies() throws iTrustException {\r\n    return allergyDAO.getAllergies(pid);\r\n}"},
 {"id":384, "methodname":"getCompleteOfficeVisit(long)", "methodnamerefined":"getCompleteOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.getCompleteOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.getCompleteOfficeVisit(long)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Returns a complete OfficeVisitBean given a visitID\r\n *\r\n * @return \r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(visitID);\r\n}"},
 {"id":385, "methodname":"getDiseasesAtRisk()", "methodnamerefined":"getDiseasesAtRisk", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.getDiseasesAtRisk", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.getDiseasesAtRisk()", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Returns a list of diseases for which the patient is at risk\r\n *\r\n * @return list of RiskCheckers\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<RiskChecker> getDiseasesAtRisk() throws DBException, NoHealthRecordsException, iTrustException {\r\n    this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\r\n    return diseaseMediator.getDiseaseAtRisk();\r\n}"},
 {"id":386, "methodname":"getFamily()", "methodnamerefined":"getFamily", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.getFamily", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.getFamily()", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Returns a list of FamilyMemberBeans for the patient\r\n *\r\n * @return list of FamilyMemberBeans\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<FamilyMemberBean> getFamily() throws iTrustException {\r\n    List<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();\r\n    List<FamilyMemberBean> parents = null;\r\n    parents = familyDAO.getParents(pid);\r\n    fam.addAll(parents);\r\n    fam.addAll(familyDAO.getSiblings(pid));\r\n    fam.addAll(familyDAO.getChildren(pid));\r\n    if (parents != null) {\r\n        List<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();\r\n        for (FamilyMemberBean parent : parents) {\r\n            grandparents.addAll(familyDAO.getParents(parent.getMid()));\r\n        }\r\n        fam.addAll(grandparents);\r\n        for (FamilyMemberBean gp : grandparents) {\r\n            gp.setRelation(\"Grandparent\");\r\n        }\r\n    }\r\n    return fam;\r\n}"},
 {"id":387, "methodname":"getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"getFamilyMemberCOD", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.getFamilyMemberCOD", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Checks to see if the family member is dead and returns their cause of death if so\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return the cause of death if there is one; otherwise null\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(member.getMid());\r\n    if ((patient.getCauseOfDeath()) == null)\r\n        return \"\";\r\n\r\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\r\n    if (diag == null)\r\n        return \"\";\r\n\r\n    return diag.getDescription();\r\n}"},
 {"id":388, "methodname":"getPatient()", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.getPatient", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.getPatient()", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Returns a PatientBean for the patient\r\n *\r\n * @return PatientBean\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PatientBean getPatient() throws iTrustException {\r\n    return patientDAO.getPatient(pid);\r\n}"},
 {"id":389, "methodname":"getProcedures(long)", "methodnamerefined":"getProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.getProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.getProcedures(long)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"public List<ProcedureBean> getProcedures(long visitID) throws DBException {\r\n    return procDAO.getList(visitID);\r\n}"},
 {"id":390, "methodname":"isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"isFamilyMemberSmoker", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.isFamilyMemberSmoker", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Checks to see if a particular family member smokes\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member smokes.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (record.isSmoker())\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":391, "methodname":"makeEmail()", "methodnamerefined":"makeEmail", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.makeEmail", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.makeEmail()", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmail() throws DBException {\r\n    Email email = new Email();\r\n    List<PatientBean> reps = patientDAO.getRepresenting(patient.getMID());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    for (PatientBean r : reps) {\r\n        toAddrs.add(r.getEmail());\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Your medical records have been altered\"));\r\n    email.setBody((((\"Health care professional \" + (HCPUAP.getFullName())) + \" has altered your medical records. \") + \"She is not on your list of designated health care professionals.\"));\r\n    return email;\r\n}"},
 {"id":392, "methodname":"updateAllergies(long,java.lang.String)", "methodnamerefined":"updateAllergies", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRAction.updateAllergies", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRAction.updateAllergies(long,java.lang.String)", "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "shortclassname":"EditPHRAction", "method":"/**\r\n * Adds an allergy to the patients records\r\n *\r\n * @return \"Allergy Added\", exception message, a list of invalid fields, or \"\" (only if description is null)\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String updateAllergies(long pid, String ndcode) throws FormValidationException, iTrustException {\r\n    AllergyBean bean = new AllergyBean();\r\n    bean.setPatientID(pid);\r\n    bean.setNDCode(ndcode);\r\n    bean.setDescription(ndcodesDAO.getNDCode(ndcode).getDescription());\r\n    AllergyBeanValidator abv = new AllergyBeanValidator();\r\n    abv.validate(bean);\r\n    String patientName = patientDAO.getName(pid);\r\n    List<AllergyBean> allergies = allergyDAO.getAllergies(pid);\r\n    for (AllergyBean current : allergies) {\r\n        if (current.getNDCode().equals(bean.getNDCode())) {\r\n            return (((((\"Allergy \" + (bean.getNDCode())) + \" - \") + (bean.getDescription())) + \" has already been added for \") + patientName) + \".\";\r\n        }\r\n    }\r\n    allergyDAO.addAllergy(bean);\r\n    emailutil.sendEmail(makeEmail());\r\n    /* adding loop that checks for allergy conflicts. The loop runs through every prescription bean\n    and checks for conflict.\n     */\r\n    List<PrescriptionBean> beansRx = patientDAO.getCurrentPrescriptions(pid);\r\n    for (int i = 0; i < (beansRx.size()); i++) {\r\n        if (beansRx.get(i).getMedication().getNDCode().equals(bean.getNDCode())) {\r\n            return (((((\"Medication \" + (beansRx.get(i).getMedication().getNDCode())) + \" - \") + (beansRx.get(i).getMedication().getDescription())) + \" is currently prescribed to \") + patientName) + \".\";\r\n        }\r\n    }\r\n    return \"Allergy Added\";// If loop is successful, it will never reach here.\r\n\r\n}"},
 {"id":393, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTest.-init-()", "classid":80, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTest", "shortclassname":"EditPHRActionTest", "method":"EditPHRActionTest() {\r\n}"},
 {"id":394, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTest.setUp()", "classid":80, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTest", "shortclassname":"EditPHRActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    fmbList = famDAO.getParents(5);\r\n    fmBean = fmbList.get(0);\r\n}"},
 {"id":395, "methodname":"testAllergyExistingPrescription()", "methodnamerefined":"testAllergyExistingPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTest.testAllergyExistingPrescription", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTest.testAllergyExistingPrescription()", "classid":80, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTest", "shortclassname":"EditPHRActionTest", "method":"public void testAllergyExistingPrescription() throws Exception {\r\n    action = new EditPHRAction(factory, 9000000000L, \"100\");\r\n    String result = action.updateAllergies(100L, \"483012382\");\r\n    assertTrue(result.contains(\"is currently prescribed to\"));\r\n}"},
 {"id":396, "methodname":"testConstructPoorly()", "methodnamerefined":"testConstructPoorly", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTest.testConstructPoorly", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTest.testConstructPoorly()", "classid":80, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTest", "shortclassname":"EditPHRActionTest", "method":"public void testConstructPoorly() throws Exception {\r\n    try {\r\n        action = new EditPHRAction(factory, 9000000000L, \"500\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Patient does not exist\", e.getMessage());\r\n    }\r\n    // I know its bad form to have two test in one, but its so we dont have to redo the database\r\n    try {\r\n        action = new EditPHRAction(factory, 9000000000L, \"<br />\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Patient ID is not a number: &lt;br /&gt;\", e.getMessage());\r\n    }\r\n}"},
 {"id":397, "methodname":"testObtainInformation()", "methodnamerefined":"testObtainInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTest.testObtainInformation", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTest.testObtainInformation()", "classid":80, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTest", "shortclassname":"EditPHRActionTest", "method":"public void testObtainInformation() throws Exception {\r\n    action = new EditPHRAction(factory, 9000000000L, \"2\");\r\n    // Check that the correct call was made - more thorough assertions are in the DAO tests\r\n    assertEquals(2L, action.getPid());\r\n    assertEquals(2L, action.getPatient().getMID());\r\n    assertEquals(2, action.getAllergies().size());\r\n    assertEquals(9, action.getFamily().size());\r\n    assertEquals(2, action.getAllHealthRecords().size());\r\n    // assertTransactionOnly(TransactionType.VIEW_RECORDS, 9000000000L, 2L, \"Viewed patient records\");\r\n    assertEquals(10, action.getAllOfficeVisits().size());\r\n    gen.clearTransactionLog();\r\n    assertEquals(2, action.getDiseasesAtRisk().size());\r\n    assertTrue(action.doesFamilyMemberHaveHighBP(fmBean));\r\n    assertTrue(action.doesFamilyMemberHaveDiabetes(fmBean));\r\n    assertTrue(action.isFamilyMemberSmoker(fmBean));\r\n    assertFalse(action.doesFamilyMemberHaveCancer(fmBean));\r\n    assertFalse(action.doesFamilyMemberHaveHighCholesterol(fmBean));\r\n    assertFalse(action.doesFamilyMemberHaveHeartDisease(fmBean));\r\n    assertTrue(action.getFamilyMemberCOD(fmBean).contains(\"\"));\r\n    assertEquals(5, new ViewMyRecordsAction(factory, 5L).getFamilyHistory().size());\r\n}"},
 {"id":398, "methodname":"testUpdateAllergies()", "methodnamerefined":"testUpdateAllergies", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTest.testUpdateAllergies", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTest.testUpdateAllergies()", "classid":80, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTest", "shortclassname":"EditPHRActionTest", "method":"public void testUpdateAllergies() throws Exception {\r\n    action = new EditPHRAction(factory, 9000000000L, \"2\");\r\n    action.updateAllergies(2L, \"483012382\");\r\n    List<AllergyBean> allergies = action.getAllergies();\r\n    assertEquals(3, allergies.size());\r\n    assertEquals(\"Midichlominene\", allergies.get(0).getDescription());\r\n    // assertTransactionOnly(TransactionType.ENTER_EDIT_PHR, 9000000000L, 2L, \"added allergy Allergic to people\");\r\n}"},
 {"id":399, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.-init-()", "classid":81, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo", "shortclassname":"EditPHRActionTestTwo", "method":"EditPHRActionTestTwo() {\r\n}"},
 {"id":400, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.setUp()", "classid":81, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo", "shortclassname":"EditPHRActionTestTwo", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":401, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.tearDown", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.tearDown()", "classid":81, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo", "shortclassname":"EditPHRActionTestTwo", "method":"protected void tearDown() throws Exception {\r\n    super.tearDown();\r\n}"},
 {"id":402, "methodname":"testUpdateAllergiesDuplicateAllergy()", "methodnamerefined":"testUpdateAllergiesDuplicateAllergy", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.testUpdateAllergiesDuplicateAllergy", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.testUpdateAllergiesDuplicateAllergy()", "classid":81, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo", "shortclassname":"EditPHRActionTestTwo", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.EditPHRAction#updateAllergies(long, java.lang.String)}.\r\n *\r\n * @author Austin Olander\r\n * @author Eric Whitmire\r\n\r\nThis method tests that a warning is shown when adding a duplicate allergy.\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic final void testUpdateAllergiesDuplicateAllergy() throws Exception {\r\n    actionPHR = new EditPHRAction(factory, 9000000000L, \"100\");// HCP Kelly Doctor, patient Trend Setter\r\n\r\n    actionPHR.updateAllergies(100L, \"483013420\");// Adds M-maxene\r\n\r\n    result = actionPHR.updateAllergies(100L, \"483013420\");// Adds M-maxene again\r\n\r\n    assertTrue(result.contains(\"has already\"));// Should return warning\r\n\r\n}"},
 {"id":403, "methodname":"testUpdateAllergiesFutRX()", "methodnamerefined":"testUpdateAllergiesFutRX", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.testUpdateAllergiesFutRX", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.testUpdateAllergiesFutRX()", "classid":81, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo", "shortclassname":"EditPHRActionTestTwo", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.EditPHRAction#updateAllergies(long, java.lang.String)}.\r\n *\r\n * @author Austin Olander\r\n * @author Eric Whitmire\r\n\r\nThis method tests that a warning is shown for a future prescription.\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic final void testUpdateAllergiesFutRX() throws Exception {\r\n    actionPHR = new EditPHRAction(factory, 9000000000L, \"100\");// HCP Kelly Doctor, patient Anakin Skywalker\r\n\r\n    result = actionPHR.updateAllergies(100L, \"483012382\");// Adds M-minene\r\n\r\n    assertTrue(result.contains(\"is currently\"));// Should return warning\r\n\r\n}"},
 {"id":404, "methodname":"testUpdateAllergiesNoRX()", "methodnamerefined":"testUpdateAllergiesNoRX", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.testUpdateAllergiesNoRX", "fullmethod":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo.testUpdateAllergiesNoRX()", "classid":81, "classname":"edu.ncsu.csc.itrust.action.EditPHRActionTestTwo", "shortclassname":"EditPHRActionTestTwo", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.EditPHRAction#updateAllergies(long, java.lang.String)}.\r\n *\r\n * @author Austin Olander\r\n * @author Eric Whitmire\r\n\r\nThis method tests that no warning is shown.\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic final void testUpdateAllergiesNoRX() throws Exception {\r\n    actionPHR = new EditPHRAction(factory, 9000000000L, \"100\");// HCP Kelly Doctor, patient Trend Setter\r\n\r\n    result = actionPHR.updateAllergies(100L, \"483013420\");// Adds M-maxene\r\n\r\n    assertTrue(result.contains(\"Allergy Added\"));// Should return no warning\r\n\r\n}"},
 {"id":405, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "shortclassname":"EditPatientAction", "method":"/**\r\n * The super class validates the patient id\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is authorizing this action.\r\n * @param pidString\r\n * \t\tThe MID of the patient being edited.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPatientAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    emailutil = new EmailUtil(factory);\r\n}"},
 {"id":406, "methodname":"activate()", "methodnamerefined":"activate", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientAction.activate", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientAction.activate()", "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "shortclassname":"EditPatientAction", "method":"public void activate() throws DBException {\r\n    PatientBean p = patientDAO.getPatient(this.getPid());\r\n    p.setMID(pid);\r\n    p.setDateOfDeactivationStr(null);\r\n    patientDAO.editPatient(p, loggedInMID);\r\n}"},
 {"id":407, "methodname":"deactivate()", "methodnamerefined":"deactivate", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientAction.deactivate", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientAction.deactivate()", "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "shortclassname":"EditPatientAction", "method":"public void deactivate() throws DBException {\r\n    PatientBean p = patientDAO.getPatient(this.getPid());\r\n    p.setMID(pid);\r\n    p.setDateOfDeactivationStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(Calendar.getInstance().getTime()));\r\n    patientDAO.editPatient(p, loggedInMID);\r\n}"},
 {"id":408, "methodname":"getEmployeeName(long)", "methodnamerefined":"getEmployeeName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientAction.getEmployeeName", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientAction.getEmployeeName(long)", "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "shortclassname":"EditPatientAction", "method":"public String getEmployeeName(long mid) throws DBException, iTrustException {\r\n    return personnelDAO.getName(mid);\r\n}"},
 {"id":409, "methodname":"getHistory()", "methodnamerefined":"getHistory", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientAction.getHistory", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientAction.getHistory()", "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "shortclassname":"EditPatientAction", "method":"public List<PatientHistoryBean> getHistory() throws DBException {\r\n    return patientDAO.getPatientHistory(this.getPid());\r\n}"},
 {"id":410, "methodname":"getPatient()", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientAction.getPatient", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientAction.getPatient()", "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "shortclassname":"EditPatientAction", "method":"/**\r\n * Returns a PatientBean for the patient\r\n *\r\n * @return the PatientBean\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PatientBean getPatient() throws DBException {\r\n    return patientDAO.getPatient(this.getPid());\r\n}"},
 {"id":411, "methodname":"hasHistory()", "methodnamerefined":"hasHistory", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientAction.hasHistory", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientAction.hasHistory()", "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "shortclassname":"EditPatientAction", "method":"public boolean hasHistory() throws DBException {\r\n    return patientDAO.hasHistory(this.getPid());\r\n}"},
 {"id":412, "methodname":"makeEmail()", "methodnamerefined":"makeEmail", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientAction.makeEmail", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientAction.makeEmail()", "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "shortclassname":"EditPatientAction", "method":"/**\r\n * Creates and e-mail to inform the patient that their information has been updated.\r\n *\r\n * @return the email with the notice\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmail() throws DBException {\r\n    Email email = new Email();\r\n    List<PatientBean> reps = patientDAO.getRepresenting(pid);\r\n    PatientBean pb = patientDAO.getPatient(pid);\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(pb.getEmail());\r\n    for (PatientBean r : reps) {\r\n        toAddrs.add(r.getEmail());\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Patient Information Updated\"));\r\n    email.setBody((((\"Dear \" + (pb.getFullName())) + \",\n\tYour patient record information has been updated. \") + \"Please login to iTrust to see who has viewed your records.\"));\r\n    return email;\r\n}"},
 {"id":413, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientAction.updateInformation(edu.ncsu.csc.itrust.beans.PatientBean)", "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "shortclassname":"EditPatientAction", "method":"/**\r\n * Takes the information out of the PatientBean param and updates the patients information\r\n *\r\n * @param p\r\n * \t\tthe new patient information\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic void updateInformation(PatientBean p) throws FormValidationException, iTrustException {\r\n    p.setMID(pid);// for security reasons\r\n\r\n    validator.validate(p);\r\n    patientDAO.editPatient(p, loggedInMID);\r\n    emailutil.sendEmail(makeEmail());\r\n}"},
 {"id":414, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.-init-()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"EditPatientActionTest() {\r\n}"},
 {"id":415, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.setUp()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    action = new EditPatientAction(factory, 9000000000L, \"2\");\r\n}"},
 {"id":416, "methodname":"testConstructNormal()", "methodnamerefined":"testConstructNormal", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testConstructNormal", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testConstructNormal()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"public void testConstructNormal() throws Exception {\r\n    assertEquals(2L, action.getPid());\r\n}"},
 {"id":417, "methodname":"testDeactivateActivate()", "methodnamerefined":"testDeactivateActivate", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testDeactivateActivate", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testDeactivateActivate()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"public void testDeactivateActivate() throws Exception {\r\n    gen.patient1();\r\n    action = new EditPatientAction(factory, 1L, \"1\");\r\n    PatientDAO po = TestDAOFactory.getTestInstance().getPatientDAO();\r\n    action.deactivate();\r\n    PatientBean pb1 = po.getPatient(1L);\r\n    assertFalse(pb1.getDateOfDeactivationStr().equals(\"\"));\r\n    action.activate();\r\n    PatientBean pb2 = po.getPatient(1L);\r\n    assertTrue(pb2.getDateOfDeactivationStr().equals(\"\"));\r\n}"},
 {"id":418, "methodname":"testEditCOD()", "methodnamerefined":"testEditCOD", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testEditCOD", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testEditCOD()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"public void testEditCOD() throws Exception {\r\n    gen.patient1();\r\n    action = new EditPatientAction(factory, 1L, \"1\");\r\n    PatientDAO po = TestDAOFactory.getTestInstance().getPatientDAO();\r\n    PatientBean pb = po.getPatient(1L);\r\n    assertEquals(\"Random\", pb.getFirstName());\r\n    assertEquals(\"\", pb.getCauseOfDeath());\r\n    assertEquals(\"\", pb.getDateOfDeathStr());\r\n    pb.setCauseOfDeath(\"79.1\");\r\n    pb.setDateOfDeathStr(\"01/03/2006\");\r\n    action.updateInformation(pb);\r\n    PatientBean pb2 = po.getPatient(1L);\r\n    assertEquals(\"Random\", pb2.getFirstName());\r\n    assertEquals(\"79.1\", pb2.getCauseOfDeath());\r\n    assertEquals(\"01/03/2006\", pb2.getDateOfDeathStr());\r\n}"},
 {"id":419, "methodname":"testEditRepresentatives()", "methodnamerefined":"testEditRepresentatives", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testEditRepresentatives", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testEditRepresentatives()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"public void testEditRepresentatives() throws Exception {\r\n    action = new EditPatientAction(factory, 2L, \"2\");\r\n    PatientDAO po = new PatientDAO(factory);\r\n    PatientBean pb = po.getPatient(2);\r\n    assertEquals(\"Andy\", pb.getFirstName());\r\n    assertEquals(\"Programmer\", pb.getLastName());\r\n    assertEquals(\"0\", pb.getFatherMID());\r\n    pb.setFatherMID(\"1\");\r\n    assertEquals(\"1\", pb.getFatherMID());\r\n    action.updateInformation(pb);\r\n    PatientBean pb2 = po.getPatient(2);\r\n    assertEquals(\"Andy\", pb2.getFirstName());\r\n    assertEquals(\"Programmer\", pb2.getLastName());\r\n    assertEquals(\"1\", pb2.getFatherMID());\r\n}"},
 {"id":420, "methodname":"testGetPatientLogged()", "methodnamerefined":"testGetPatientLogged", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testGetPatientLogged", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testGetPatientLogged()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"public void testGetPatientLogged() throws Exception {\r\n    PatientBean patient = action.getPatient();\r\n    assertEquals(2L, patient.getMID());\r\n}"},
 {"id":421, "methodname":"testInvalidDates()", "methodnamerefined":"testInvalidDates", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testInvalidDates", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testInvalidDates()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"public void testInvalidDates() throws Exception {\r\n    gen.patient3();\r\n    action = new EditPatientAction(factory, 3L, \"3\");\r\n    PatientDAO po = TestDAOFactory.getTestInstance().getPatientDAO();\r\n    PatientBean pb = po.getPatient(3L);\r\n    try {\r\n        pb.setCauseOfDeath(\"79.1\");\r\n        pb.setDateOfDeathStr(\"01/03/2050\");\r\n        action.updateInformation(pb);\r\n        fail(\"exception should have been thrown on invalid date of death\");\r\n    } catch (FormValidationException e) {\r\n        // test passes, exception should have been thrown\r\n    }\r\n    try {\r\n        pb.setDateOfBirthStr(\"01/03/2050\");\r\n        action.updateInformation(pb);\r\n        fail(\"exception should have been thrown on invalid date of birth\");\r\n    } catch (FormValidationException e) {\r\n        // test passes, exception should have been thrown\r\n    }\r\n}"},
 {"id":422, "methodname":"testNonExistent()", "methodnamerefined":"testNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testNonExistent", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testNonExistent()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"public void testNonExistent() throws Exception {\r\n    try {\r\n        action = new EditPatientAction(factory, 0L, \"200\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Patient does not exist\", e.getMessage());\r\n    }\r\n}"},
 {"id":423, "methodname":"testNull()", "methodnamerefined":"testNull", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testNull", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testNull()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"public void testNull() throws Exception {\r\n    try {\r\n        action = new EditPatientAction(factory, 0L, null);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Patient ID is not a number: null\", e.getMessage());\r\n    }\r\n}"},
 {"id":424, "methodname":"testWrongFormat()", "methodnamerefined":"testWrongFormat", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testWrongFormat", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientActionTest.testWrongFormat()", "classid":83, "classname":"edu.ncsu.csc.itrust.action.EditPatientActionTest", "shortclassname":"EditPatientActionTest", "method":"public void testWrongFormat() throws Exception {\r\n    try {\r\n        action = new EditPatientAction(factory, 0L, \"hello!\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Patient ID is not a number: hello!\", e.getMessage());\r\n    }\r\n}"},
 {"id":425, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "shortclassname":"EditPatientInstructionsAction", "method":"/**\r\n * Creates an EditPatientInstructionsAction for an existing office visit.\r\n *\r\n * @param factory\r\n * \t\tThe DAO Factory.\r\n * @param hcpid\r\n * \t\tThe HCP id.\r\n * @param pidString\r\n * \t\tThe patient id as a string.\r\n * @param ovIDString\r\n * \t\tThe office visit as a string.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}"},
 {"id":426, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "shortclassname":"EditPatientInstructionsAction", "method":"/**\r\n * Creates an EditPatientInstructionsAction for an non-existent office\r\n * visit.  Most methods will throw exceptions if built with this\r\n * constructor.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param hcpid\r\n * \t\tThe HCP id.\r\n * @param pidString\r\n * \t\tThe patient ID as a string.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}"},
 {"id":427, "methodname":"addPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "methodnamerefined":"addPatientInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.addPatientInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.addPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "shortclassname":"EditPatientInstructionsAction", "method":"/**\r\n * Add patient instructions to the office visit.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to add.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void addPatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.add(bean);\r\n}"},
 {"id":428, "methodname":"deletePatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "methodnamerefined":"deletePatientInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.deletePatientInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.deletePatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "shortclassname":"EditPatientInstructionsAction", "method":"/**\r\n * Delete patient instructions from this office visit.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to delete.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void deletePatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.remove(bean.getId());\r\n}"},
 {"id":429, "methodname":"editPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "methodnamerefined":"editPatientInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.editPatientInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.editPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "shortclassname":"EditPatientInstructionsAction", "method":"/**\r\n * Modify patient instruction in this office visit.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to modify\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void editPatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.edit(bean);\r\n}"},
 {"id":430, "methodname":"getPatientInstructions()", "methodnamerefined":"getPatientInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.getPatientInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.getPatientInstructions()", "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "shortclassname":"EditPatientInstructionsAction", "method":"/**\r\n * Get the list of patient instructions associated with the office visit.\r\n *\r\n * @return A list of patient instructions.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientInstructionsBean> getPatientInstructions() throws DBException {\r\n    if (isUnsaved()) {\r\n        return new ArrayList<PatientInstructionsBean>();\r\n    } else {\r\n        return instructionsDAO.getList(getOvID());\r\n    }\r\n}"},
 {"id":431, "methodname":"validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.validate", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "shortclassname":"EditPatientInstructionsAction", "method":"/**\r\n * Verify the contents of the given instruction bean.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to check.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic void validate(PatientInstructionsBean bean) throws FormValidationException, iTrustException {\r\n    verifySaved();\r\n    PatientInstructionsBeanValidator validator = new PatientInstructionsBeanValidator();\r\n    validator.validate(bean);\r\n}"},
 {"id":432, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.-init-()", "classid":85, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest", "shortclassname":"EditPatientInstructionsActionTest", "method":"EditPatientInstructionsActionTest() {\r\n}"},
 {"id":433, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.setUp()", "classid":85, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest", "shortclassname":"EditPatientInstructionsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.hcp4();\r\n}"},
 {"id":434, "methodname":"testAddPatientInstructions()", "methodnamerefined":"testAddPatientInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testAddPatientInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testAddPatientInstructions()", "classid":85, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest", "shortclassname":"EditPatientInstructionsActionTest", "method":"public void testAddPatientInstructions() throws Exception {\r\n    // Without an Office visit ID, this should throw.\r\n    action = new EditPatientInstructionsAction(factory, 9000000000L, \"2\");\r\n    try {\r\n        action.addPatientInstructions(bean);\r\n        fail(\"Expected an exception.\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Cannot perform action.  OfficeVisit is not saved.\", e.getMessage());\r\n    }\r\n    // Try adding patient specific instructions.\r\n    action = new EditPatientInstructionsAction(factory, 9000000000L, \"2\", \"952\");\r\n    assertEquals(0, action.getPatientInstructions().size());\r\n    bean.setName(\"This is an instruction name.\");\r\n    bean.setComment(\"This is an instruction comment.\");\r\n    bean.setUrl(\"http://example.com/\");\r\n    bean.setVisitID(952);\r\n    bean.setModified(new Date());\r\n    action.addPatientInstructions(bean);\r\n    assertEquals(1, action.getPatientInstructions().size());\r\n    assertEquals(\"This is an instruction name.\", action.getPatientInstructions().get(0).getName());\r\n}"},
 {"id":435, "methodname":"testDeletePatientInstructions()", "methodnamerefined":"testDeletePatientInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testDeletePatientInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testDeletePatientInstructions()", "classid":85, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest", "shortclassname":"EditPatientInstructionsActionTest", "method":"public void testDeletePatientInstructions() throws Exception {\r\n    // Without an Office visit ID, this should throw.\r\n    action = new EditPatientInstructionsAction(factory, 9000000000L, \"2\");\r\n    try {\r\n        action.deletePatientInstructions(bean);\r\n        fail(\"Expected an exception.\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Cannot perform action.  OfficeVisit is not saved.\", e.getMessage());\r\n    }\r\n    // Try deleting patient specific instructions.\r\n    gen.uc44_acceptance_scenario_2();\r\n    action = new EditPatientInstructionsAction(factory, 9000000004L, \"1\", \"44100\");\r\n    assertEquals(1, action.getPatientInstructions().size());\r\n    bean.setId(44100);\r\n    action.deletePatientInstructions(bean);\r\n    assertEquals(0, action.getPatientInstructions().size());\r\n}"},
 {"id":436, "methodname":"testEditPatientInstructions()", "methodnamerefined":"testEditPatientInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testEditPatientInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testEditPatientInstructions()", "classid":85, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest", "shortclassname":"EditPatientInstructionsActionTest", "method":"public void testEditPatientInstructions() throws Exception {\r\n    // Without an Office visit ID, this should throw.\r\n    action = new EditPatientInstructionsAction(factory, 9000000000L, \"2\");\r\n    try {\r\n        action.editPatientInstructions(bean);\r\n        fail(\"Expected an exception.\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Cannot perform action.  OfficeVisit is not saved.\", e.getMessage());\r\n    }\r\n    // Try editing patient specific instructions.\r\n    gen.uc44_acceptance_scenario_2();\r\n    action = new EditPatientInstructionsAction(factory, 9000000004L, \"1\", \"44100\");\r\n    assertEquals(1, action.getPatientInstructions().size());\r\n    bean = action.getPatientInstructions().get(0);\r\n    bean.setName(\"This instruction has been modified!\");\r\n    action.editPatientInstructions(bean);\r\n    assertEquals(1, action.getPatientInstructions().size());\r\n    assertEquals(\"This instruction has been modified!\", action.getPatientInstructions().get(0).getName());\r\n}"},
 {"id":437, "methodname":"testGetPatientInstructions()", "methodnamerefined":"testGetPatientInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testGetPatientInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testGetPatientInstructions()", "classid":85, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest", "shortclassname":"EditPatientInstructionsActionTest", "method":"public void testGetPatientInstructions() throws Exception {\r\n    // Without an Office visit ID, this should return an empty list.\r\n    action = new EditPatientInstructionsAction(factory, 9000000000L, \"2\");\r\n    assertEquals(0, action.getPatientInstructions().size());\r\n}"},
 {"id":438, "methodname":"testValidate()", "methodnamerefined":"testValidate", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testValidate", "fullmethod":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest.testValidate()", "classid":85, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsActionTest", "shortclassname":"EditPatientInstructionsActionTest", "method":"public void testValidate() throws Exception {\r\n    // Without an Office visit ID, this should throw.\r\n    action = new EditPatientInstructionsAction(factory, 9000000000L, \"2\");\r\n    try {\r\n        action.validate(bean);\r\n        fail(\"Expected an exception.\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Cannot perform action.  OfficeVisit is not saved.\", e.getMessage());\r\n    }\r\n    // Try validating patient specific instructions.\r\n    gen.uc44_acceptance_scenario_2();\r\n    action = new EditPatientInstructionsAction(factory, 9000000004L, \"1\", \"44100\");\r\n    bean.setName(\"This is an instruction name.\");\r\n    bean.setComment(\"This is an instruction comment.\");\r\n    bean.setUrl(\"http://example.com/\");\r\n    bean.setVisitID(952);\r\n    bean.setModified(new Date());\r\n    try {\r\n        action.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Expected validation to succeed.\");\r\n    }\r\n}"},
 {"id":439, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":86, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelAction", "shortclassname":"EditPersonnelAction", "method":"/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user editing this personnel.\r\n * @param pidString\r\n * \t\tThe ID of the user being edited.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPersonnelAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    long pidlong = Long.parseLong(pidString);\r\n    Role editor = authDAO.getUserRole(loggedInMID);\r\n    Role editing = authDAO.getUserRole(pidlong);\r\n    if ((editor == editing) && (pidlong != loggedInMID)) {\r\n        throw new iTrustException(\"You can only edit your own demographics!\");\r\n    } else\r\n        if ((((editor == (Role.HCP)) && (editing == (Role.ADMIN))) || ((editor == (Role.UAP)) && (editing == (Role.HCP)))) || ((editor == (Role.ADMIN)) && (editing == (Role.UAP)))) {\r\n            throw new iTrustException(\"You are not authorized to edit this record!\");\r\n        }\r\n\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":440, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelAction.updateInformation(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":86, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelAction", "shortclassname":"EditPersonnelAction", "method":"/**\r\n * Takes information from the personnelForm param and updates the patient\r\n *\r\n * @param personnelForm\r\n * \t\tPersonnelBean with new information\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic void updateInformation(PersonnelBean personnelForm) throws FormValidationException, iTrustException {\r\n    personnelForm.setMID(pid);\r\n    validator.validate(personnelForm);\r\n    personnelDAO.editPersonnel(personnelForm);\r\n}"},
 {"id":441, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.-init-()", "classid":87, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest", "shortclassname":"EditPersonnelActionTest", "method":"EditPersonnelActionTest() {\r\n}"},
 {"id":442, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.setUp()", "classid":87, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest", "shortclassname":"EditPersonnelActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n}"},
 {"id":443, "methodname":"testNonExistent()", "methodnamerefined":"testNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testNonExistent", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testNonExistent()", "classid":87, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest", "shortclassname":"EditPersonnelActionTest", "method":"public void testNonExistent() throws Exception {\r\n    try {\r\n        personnelEditor = new EditPersonnelAction(factory, 0L, \"8999999999\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Personnel does not exist\", e.getMessage());\r\n    }\r\n}"},
 {"id":444, "methodname":"testNotAuthorized()", "methodnamerefined":"testNotAuthorized", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testNotAuthorized", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testNotAuthorized()", "classid":87, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest", "shortclassname":"EditPersonnelActionTest", "method":"public void testNotAuthorized() throws Exception {\r\n    gen.standardData();\r\n    try {\r\n        personnelEditor = new EditPersonnelAction(factory, 9000000000L, \"9000000003\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"You can only edit your own demographics!\", e.getMessage());\r\n    }\r\n}"},
 {"id":445, "methodname":"testNotAuthorized2()", "methodnamerefined":"testNotAuthorized2", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testNotAuthorized2", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testNotAuthorized2()", "classid":87, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest", "shortclassname":"EditPersonnelActionTest", "method":"public void testNotAuthorized2() throws Exception {\r\n    gen.standardData();\r\n    try {\r\n        personnelEditor = new EditPersonnelAction(factory, 9000000000L, \"9000000001\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"You are not authorized to edit this record!\", e.getMessage());\r\n    }\r\n}"},
 {"id":446, "methodname":"testNull()", "methodnamerefined":"testNull", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testNull", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testNull()", "classid":87, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest", "shortclassname":"EditPersonnelActionTest", "method":"public void testNull() throws Exception {\r\n    try {\r\n        gen.hcp0();\r\n        personnelEditor = new EditPersonnelAction(factory, 0L, null);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Personnel ID is not a number: null\", e.getMessage());\r\n    }\r\n}"},
 {"id":447, "methodname":"testUpdateInformation()", "methodnamerefined":"testUpdateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testUpdateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testUpdateInformation()", "classid":87, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest", "shortclassname":"EditPersonnelActionTest", "method":"public void testUpdateInformation() throws Exception {\r\n    gen.uap1();\r\n    personnelEditor = new EditPersonnelAction(factory, 8000000009L, \"8000000009\");\r\n    PersonnelBean j = factory.getPersonnelDAO().getPersonnel(8000000009L);\r\n    // j.setPassword(\"isntRetrieved\");\r\n    // j.setConfirmPassword(\"isntRetrieved\");\r\n    j.setStreetAddress2(\"second line\");\r\n    personnelEditor.updateInformation(j);\r\n    j = factory.getPersonnelDAO().getPersonnel(8000000009L);\r\n    assertEquals(\"second line\", j.getStreetAddress2());\r\n}"},
 {"id":448, "methodname":"testWrongFormat()", "methodnamerefined":"testWrongFormat", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testWrongFormat", "fullmethod":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest.testWrongFormat()", "classid":87, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelActionTest", "shortclassname":"EditPersonnelActionTest", "method":"public void testWrongFormat() throws Exception {\r\n    try {\r\n        gen.hcp0();\r\n        personnelEditor = new EditPersonnelAction(factory, 0L, \"hello!\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Personnel ID is not a number: For input string: \"hello!\"\", e.getMessage());\r\n    }\r\n}"},
 {"id":449, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Creates a new action by initializing the office visit\r\n * database access object.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    init(factory);\r\n}"},
 {"id":450, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * A prescription action that is part of an office visit that is not yet\r\n * saved.  All attempts to modify this action will throw exceptions.  Once\r\n * the office visit is saved, obtain a new EditPrescriptionsAction using\r\n * the four-argument constructor.  (This is done automatically by the\r\n * EditOfficeVisitAction class.)\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param hcpid\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    init(factory);\r\n}"},
 {"id":451, "methodname":"addPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"addPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.addPrescription", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.addPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Add a prescription to this office visit.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void addPrescription(PrescriptionBean pres) throws iTrustException {\r\n    verifySaved();\r\n    checkForAllergiesAndInteractions(pres);\r\n    long medID = psDAO.add(pres);\r\n    for (OverrideReasonBean reason : pres.getReasons()) {\r\n        reason.setPresID(medID);\r\n        prescriptionOverrideDAO.add(reason);\r\n    }\r\n}"},
 {"id":452, "methodname":"checkAllergy(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"checkAllergy", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkAllergy", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkAllergy(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Checks to see if the patient is allergic to the given prescription.\r\n *\r\n * @return A list of allergy warnings.  The list is empty if no allergies\r\nwere detected.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws PrescriptionWarningException\r\n * \t\t\r\n */\r\nprivate List<String> checkAllergy(PrescriptionBean pres) throws PrescriptionWarningException, iTrustException {\r\n    ArrayList<String> warnings = new ArrayList<String>();\r\n    try {\r\n        List<AllergyBean> allergyList = allergyDAO.getAllergies(getPid());\r\n        MedicationBean medBean = pres.getMedication();\r\n        if (medBean != null) {\r\n            String newDrug = medBean.getNDCode();\r\n            for (AllergyBean allergyBean : allergyList) {\r\n                // Allergy: Aspirin. First Found: 12/20/2008.\r\n                if (newDrug.equals(allergyBean.getNDCode())) {\r\n                    warnings.add(formatAllergyWarning(allergyBean));\r\n                }\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return warnings;\r\n}"},
 {"id":453, "methodname":"checkForAllergiesAndInteractions(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"checkForAllergiesAndInteractions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkForAllergiesAndInteractions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkForAllergiesAndInteractions(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Checks the prescription bean for interactions, allergies, and legal\r\n * values.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate void checkForAllergiesAndInteractions(PrescriptionBean pres) throws iTrustException {\r\n    List<String> warnings = checkInteraction(pres);\r\n    warnings.addAll(checkAllergy(pres));\r\n    if (!(warnings.isEmpty())) {\r\n        PatientBean patient = patientDAO.getPatient(getPid());\r\n        PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n        loggingAction.logEvent(TransactionType.OVERRIDE_INTERACTION_WARNING, hcp.getMID(), patient.getMID(), (((pres.getMedication().getNDCode()) + \" Override: \") + (pres.getReasons().toString())));\r\n        if (validOverride(pres)) {\r\n            emailUtil.sendEmail(makeEmail(pres, warnings));\r\n        } else {\r\n            throw new PrescriptionWarningException(warnings);\r\n        }\r\n    }\r\n    if (\"\".equals(pres.getInstructions())) {\r\n        throw new PrescriptionFieldException(\"Instructions are required.\");\r\n    }\r\n}"},
 {"id":454, "methodname":"checkInteraction(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"checkInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkInteraction", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkInteraction(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Checks to see if the given prescription has an interaction with any\r\n * other previously prescribed prescriptions.\r\n *\r\n * @param newPrescription\r\n * \t\t\r\n * @return A list of interaction warning messages.  The list is empty if no\r\ninteractions were detected.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate List<String> checkInteraction(PrescriptionBean newPrescription) throws iTrustException {\r\n    ArrayList<String> warnings = new ArrayList<String>();\r\n    try {\r\n        SimpleDateFormat needed = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n        String startdate = needed.format(newPrescription.getStartDate());\r\n        String enddate = needed.format(newPrescription.getEndDate());\r\n        String drug = newPrescription.getMedication().getNDCode();\r\n        startdate = startdate.replaceAll(\"/\", \"-\");\r\n        enddate = enddate.replaceAll(\"/\", \"-\");\r\n        List<PrescriptionReportBean> prBeanList = rptDAO.byDate(getPid(), startdate, enddate);\r\n        List<DrugInteractionBean> dBeanList = interactionsDAO.getInteractions(drug);\r\n        for (PrescriptionReportBean prBean : prBeanList) {\r\n            String oldDrug = prBean.getPrescription().getMedication().getNDCode();\r\n            PrescriptionBean oldPrescription = prBean.getPrescription();\r\n            for (DrugInteractionBean dBean : dBeanList) {\r\n                String intDrug1 = dBean.getFirstDrug();\r\n                String intDrug2 = dBean.getSecondDrug();\r\n                if ((oldDrug.equals(intDrug1)) && (drug.equals(intDrug2))) {\r\n                    warnings.add(formatInteractionWarning(newPrescription, oldPrescription, dBean));\r\n                } else\r\n                    if ((oldDrug.equals(intDrug2)) && (drug.equals(intDrug1))) {\r\n                        warnings.add(formatInteractionWarning(newPrescription, oldPrescription, dBean));\r\n                    }\r\n\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return warnings;\r\n}"},
 {"id":455, "methodname":"deletePrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"deletePrescription", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.deletePrescription", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.deletePrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Delete a prescription from this office visit.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void deletePrescription(PrescriptionBean pres) throws DBException, iTrustException {\r\n    verifySaved();\r\n    psDAO.remove(pres.getId());\r\n    prescriptionOverrideDAO.remove(pres.getId());\r\n}"},
 {"id":456, "methodname":"editPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"editPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.editPrescription", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.editPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Edits an existing prescription in the database.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean that has been changed.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void editPrescription(PrescriptionBean pres) throws iTrustException {\r\n    verifySaved();\r\n    checkForAllergiesAndInteractions(pres);\r\n    psDAO.edit(pres);\r\n}"},
 {"id":457, "methodname":"formToBean(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm,java.lang.String)", "methodnamerefined":"formToBean", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formToBean", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formToBean(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm,java.lang.String)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Validates a prescription form, converts it into a bean, and returns that bean.\r\n *\r\n * @param form\r\n * \t\tThe form to convert.\r\n * @param defaultInstructions\r\n * \t\tThe default value given in the instructions\r\n * \t\tfield.  If the field equals this value, the validation will fail.\r\n * @return \r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PrescriptionBean formToBean(EditPrescriptionsForm form, String defaultInstructions) throws DBException, FormValidationException {\r\n    EditPrescriptionsValidator validator = new EditPrescriptionsValidator(defaultInstructions);\r\n    validator.validate(form);\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    bean.setVisitID(getOvID());\r\n    MedicationBean med = medDAO.getNDCode(form.getMedID());\r\n    bean.setMedication(med);\r\n    bean.setDosage(Integer.valueOf(form.getDosage()));\r\n    bean.setStartDateStr(form.getStartDate());\r\n    bean.setEndDateStr(form.getEndDate());\r\n    bean.setInstructions(form.getInstructions());\r\n    ArrayList<OverrideReasonBean> reasons = new ArrayList<OverrideReasonBean>();\r\n    for (String reason : form.getOverrideCodes()) {\r\n        OverrideReasonBean override = new OverrideReasonBean();\r\n        override.setORCode(reason);\r\n        reasons.add(override);\r\n    }\r\n    bean.setReasons(reasons);\r\n    bean.setOverrideReasonOther(form.getOverrideOther());\r\n    return bean;\r\n}"},
 {"id":458, "methodname":"formatAllergyWarning(edu.ncsu.csc.itrust.beans.AllergyBean)", "methodnamerefined":"formatAllergyWarning", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatAllergyWarning", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatAllergyWarning(edu.ncsu.csc.itrust.beans.AllergyBean)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-allergy warning was detected.\r\n */\r\nprivate String formatAllergyWarning(AllergyBean bean) throws DBException {\r\n    return ((\"Allergy: \" + (bean.getDescription())) + \". First Found: \") + (new SimpleDateFormat(\"MM/dd/yyyy\").format(bean.getFirstFound()));\r\n}"},
 {"id":459, "methodname":"formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "methodnamerefined":"formatInteractionWarning", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}"},
 {"id":460, "methodname":"getMedications()", "methodnamerefined":"getMedications", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.getMedications", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.getMedications()", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Returns a list of known medications.  This can be called even if the\r\n * office visit is unsaved.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<MedicationBean> getMedications() throws DBException, iTrustException {\r\n    return medDAO.getAllNDCodes();\r\n}"},
 {"id":461, "methodname":"getPrescriptions()", "methodnamerefined":"getPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.getPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.getPrescriptions()", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n *\r\n *\r\n * @return A list of all prescriptions for this office visit.  (If the\r\noffice visit is unsaved, this returns an empty list.)\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getPrescriptions() throws DBException {\r\n    if (isUnsaved()) {\r\n        return new ArrayList<PrescriptionBean>();\r\n    } else {\r\n        return psDAO.getList(getOvID());\r\n    }\r\n}"},
 {"id":462, "methodname":"init(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"init", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.init", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.init(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"private void init(DAOFactory factory) {\r\n    psDAO = factory.getPrescriptionsDAO();\r\n    medDAO = factory.getNDCodesDAO();\r\n    interactionsDAO = factory.getDrugInteractionDAO();\r\n    allergyDAO = factory.getAllergyDAO();\r\n    rptDAO = factory.getPrescriptionReportDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    emailUtil = new EmailUtil(factory);\r\n    personnelDAO = new PersonnelDAO(factory);\r\n    prescriptionOverrideDAO = new PrescriptionOverrideDAO(factory);\r\n    loggingAction = new EventLoggingAction(factory);\r\n}"},
 {"id":463, "methodname":"makeEmail(edu.ncsu.csc.itrust.beans.PrescriptionBean,java.util.List)", "methodnamerefined":"makeEmail", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.makeEmail", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.makeEmail(edu.ncsu.csc.itrust.beans.PrescriptionBean,java.util.List)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmail(PrescriptionBean pres, List<String> warnings) throws DBException {\r\n    Email email = new Email();\r\n    PatientBean patient = patientDAO.getPatient(getPid());\r\n    PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    String message = (((\"Health care professional \" + (hcp.getFullName())) + \" has prescribed \") + (pres.getMedication().getDescription())) + \". However, the following warning(s) were found:\";\r\n    for (String warning : warnings) {\r\n        message += warning + \"\n\";\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Prescription warning\"));\r\n    email.setBody(message);\r\n    return email;\r\n}"},
 {"id":464, "methodname":"validOverride(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"validOverride", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.validOverride", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.validOverride(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "shortclassname":"EditPrescriptionsAction", "method":"/**\r\n * Indicates if the prescription bean has a valid allergy/interaction\r\n * override.\r\n */\r\nprivate boolean validOverride(PrescriptionBean pres) {\r\n    return ((pres.getReasons()) != null) && ((pres.getReasons().size()) > 0);\r\n}"},
 {"id":465, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.-init-()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"EditPrescriptionsActionTest() {\r\n}"},
 {"id":466, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.setUp()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"@Override\r\npublic void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":467, "methodname":"testAddPrescription1()", "methodnamerefined":"testAddPrescription1", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription1", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription1()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"/**\r\n * Test if prescription have been added for scenario 1\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddPrescription1() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"1\", \"11\");\r\n    assertEquals(0, action.getPrescriptions().size());\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    MedicationBean med = factory.getNDCodesDAO().getNDCode(\"009042407\");\r\n    bean.setMedication(med);\r\n    bean.setDosage(10);\r\n    bean.setStartDateStr(\"01/31/2011\");\r\n    bean.setEndDateStr(\"02/12/2011\");\r\n    bean.setInstructions(\"Take as needed\");\r\n    bean.setVisitID(11);\r\n    action.addPrescription(bean);\r\n    List<PrescriptionBean> list = action.getPrescriptions();\r\n    assertEquals(1, list.size());\r\n    assertEquals(\"009042407\", list.get(0).getMedication().getNDCode());\r\n}"},
 {"id":468, "methodname":"testAddPrescription2()", "methodnamerefined":"testAddPrescription2", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription2", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription2()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"/**\r\n * Test prescription for scenario 2\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddPrescription2() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"2\", \"952\");\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    MedicationBean med = factory.getNDCodesDAO().getNDCode(\"664662530\");\r\n    bean.setMedication(med);\r\n    bean.setDosage(10);\r\n    bean.setStartDateStr(\"01/31/2011\");\r\n    bean.setEndDateStr(\"02/12/2011\");\r\n    bean.setInstructions(\"Take as needed\");\r\n    bean.setVisitID(952);\r\n    try {\r\n        action.addPrescription(bean);\r\n        fail(\"Expected a PrescriptionWarningException.\");\r\n    } catch (PrescriptionWarningException e) {\r\n        assertTrue(e.getDisplayMessage().contains(\"Allergy: Penicillin\"));\r\n    }\r\n}"},
 {"id":469, "methodname":"testAddPrescription3()", "methodnamerefined":"testAddPrescription3", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription3", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription3()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"/**\r\n * Test add prescription for scenario 3\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddPrescription3() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"2\", \"952\");\r\n    assertEquals(0, action.getPrescriptions().size());\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    MedicationBean med = factory.getNDCodesDAO().getNDCode(\"664662530\");\r\n    bean.setMedication(med);\r\n    bean.setDosage(10);\r\n    bean.setStartDateStr(\"01/31/2011\");\r\n    bean.setEndDateStr(\"02/12/2011\");\r\n    bean.setInstructions(\"Take as needed\");\r\n    bean.setVisitID(952);\r\n    bean.addReason(new OverrideReasonBean(\"0006\"));\r\n    action.addPrescription(bean);\r\n    assertEquals(1, action.getPrescriptions().size());\r\n}"},
 {"id":470, "methodname":"testAddPrescription4()", "methodnamerefined":"testAddPrescription4", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription4", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription4()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"/**\r\n * Test add prescription for scenario 4\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddPrescription4() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"1\", \"11\");\r\n    assertEquals(0, action.getPrescriptions().size());\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    MedicationBean med = factory.getNDCodesDAO().getNDCode(\"678771191\");\r\n    bean.setMedication(med);\r\n    bean.setDosage(10);\r\n    bean.setStartDateStr(\"01/31/2011\");\r\n    bean.setEndDateStr(\"02/12/2011\");\r\n    bean.setInstructions(\"Take as needed\");\r\n    bean.setVisitID(11);\r\n    action.addPrescription(bean);\r\n    assertEquals(1, action.getPrescriptions().size());\r\n    med = factory.getNDCodesDAO().getNDCode(\"081096\");\r\n    bean.setMedication(med);\r\n    bean.setDosage(10);\r\n    bean.setStartDateStr(\"01/31/2011\");\r\n    bean.setEndDateStr(\"02/12/2011\");\r\n    bean.setInstructions(\"Take as needed\");\r\n    bean.setVisitID(11);\r\n    try {\r\n        action.addPrescription(bean);\r\n        fail(\"Expected a PrescriptionWarningException.\");\r\n    } catch (PrescriptionWarningException e) {\r\n        assertTrue(e.getDisplayMessage().contains(\"Currently Prescribed: Ibuprofen\"));\r\n    }\r\n}"},
 {"id":471, "methodname":"testAddPrescription5()", "methodnamerefined":"testAddPrescription5", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription5", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription5()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"public void testAddPrescription5() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"2\", \"952\");\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    MedicationBean med = factory.getNDCodesDAO().getNDCode(\"081096\");\r\n    bean.setMedication(med);\r\n    bean.setDosage(10);\r\n    bean.setStartDateStr(\"01/31/2011\");\r\n    bean.setEndDateStr(\"02/12/2011\");\r\n    bean.setVisitID(952);\r\n    try {\r\n        action.addPrescription(bean);\r\n        fail(\"Expected a PrescriptionFieldException.\");\r\n    } catch (PrescriptionFieldException e) {\r\n        assertTrue(e.getMessage().contains(\"Instructions are required\"));\r\n    }\r\n}"},
 {"id":472, "methodname":"testAddPrescription_Allergy()", "methodnamerefined":"testAddPrescription_Allergy", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription_Allergy", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription_Allergy()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"public void testAddPrescription_Allergy() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"100\", \"1093\");\r\n    PrescriptionBean pres = new PrescriptionBean();\r\n    pres.setDosage(50);\r\n    pres.setInstructions(\"Take it\");\r\n    pres.setStartDateStr(\"01/31/2011\");\r\n    pres.setEndDateStr(\"02/12/2011\");\r\n    MedicationBean med = factory.getNDCodesDAO().getNDCode(\"00882219\");\r\n    pres.setMedication(med);\r\n    pres.setVisitID(1093);\r\n    try {\r\n        action.addPrescription(pres);\r\n        fail(\"Should have thrown exception\");\r\n    } catch (PrescriptionWarningException e) {\r\n        assertTrue(e.getDisplayMessage().contains(\"Allergy: Lantus\"));\r\n    } catch (Exception e) {\r\n        fail(\"Wrong exception thrown\");\r\n    }\r\n}"},
 {"id":473, "methodname":"testAddPrescription_AllergyFuture()", "methodnamerefined":"testAddPrescription_AllergyFuture", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription_AllergyFuture", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription_AllergyFuture()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"public void testAddPrescription_AllergyFuture() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"100\", \"1093\");\r\n    PrescriptionBean pres = new PrescriptionBean();\r\n    pres.setDosage(50);\r\n    pres.setInstructions(\"Take it\");\r\n    pres.setStartDateStr(\"01/31/2111\");\r\n    pres.setEndDateStr(\"02/12/2111\");\r\n    MedicationBean med = factory.getNDCodesDAO().getNDCode(\"00882219\");\r\n    pres.setMedication(med);\r\n    pres.setVisitID(1093);\r\n    try {\r\n        action.addPrescription(pres);\r\n        fail(\"Should have thrown exception\");\r\n    } catch (PrescriptionWarningException e) {\r\n        assertTrue(e.getDisplayMessage().contains(\"Allergy: Lantus\"));\r\n    } catch (Exception e) {\r\n        fail(\"Wrong exception thrown\");\r\n    }\r\n}"},
 {"id":474, "methodname":"testAddPrescription_AllergyOverride()", "methodnamerefined":"testAddPrescription_AllergyOverride", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription_AllergyOverride", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription_AllergyOverride()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"public void testAddPrescription_AllergyOverride() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"100\", \"1093\");\r\n    PrescriptionBean pres = new PrescriptionBean();\r\n    pres.setDosage(50);\r\n    pres.setInstructions(\"Take it\");\r\n    pres.setStartDateStr(\"01/31/2011\");\r\n    pres.setEndDateStr(\"02/12/2011\");\r\n    pres.addReason(new OverrideReasonBean(\"1234\"));\r\n    MedicationBean med = factory.getNDCodesDAO().getNDCode(\"00882219\");\r\n    pres.setMedication(med);\r\n    pres.setVisitID(1093);\r\n    try {\r\n        action.addPrescription(pres);\r\n    } catch (Exception e) {\r\n        fail(\"Exception should not be thrown since override set\");\r\n    }\r\n    boolean emailSent = (factory.getFakeEmailDAO().getEmailWithBody(\"Allergy: Lantus\").size()) > 0;\r\n    assertTrue(emailSent);\r\n}"},
 {"id":475, "methodname":"testAddPrescription_Interaction()", "methodnamerefined":"testAddPrescription_Interaction", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription_Interaction", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testAddPrescription_Interaction()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"public void testAddPrescription_Interaction() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"100\", \"1093\");\r\n    PrescriptionBean pres = new PrescriptionBean();\r\n    pres.setDosage(50);\r\n    pres.setInstructions(\"Take it\");\r\n    pres.setStartDateStr(\"01/31/2111\");\r\n    pres.setEndDateStr(\"02/12/2111\");\r\n    // Nexium, which interacts with aspirin\r\n    MedicationBean med = factory.getNDCodesDAO().getNDCode(\"01864020\");\r\n    pres.setMedication(med);\r\n    pres.setVisitID(1093);\r\n    PrescriptionBean pres2 = new PrescriptionBean();\r\n    pres2.setDosage(50);\r\n    pres2.setInstructions(\"Take it too\");\r\n    pres2.setStartDateStr(\"01/31/2111\");\r\n    pres2.setEndDateStr(\"02/12/2111\");\r\n    // aspirin, which interacts with nexium\r\n    MedicationBean med2 = factory.getNDCodesDAO().getNDCode(\"081096\");\r\n    pres2.setMedication(med2);\r\n    pres2.setVisitID(1093);\r\n    try {\r\n        action.addPrescription(pres);\r\n        action.addPrescription(pres2);\r\n        fail(\"Should have thrown exception\");\r\n    } catch (PrescriptionWarningException e) {\r\n        assertTrue(e.getDisplayMessage().contains(\"Interaction\"));\r\n    } catch (Exception e) {\r\n        fail(\"Wrong exception thrown\");\r\n    }\r\n}"},
 {"id":476, "methodname":"testDeletePrescription()", "methodnamerefined":"testDeletePrescription", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testDeletePrescription", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testDeletePrescription()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"/**\r\n * Test if prescription has been deleted\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testDeletePrescription() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<PrescriptionBean> list = action.getPrescriptions();\r\n    assertEquals(3, list.size());\r\n    PrescriptionBean bean = list.get(2);\r\n    assertEquals(\"647641512\", bean.getMedication().getNDCode());\r\n    action.deletePrescription(bean);\r\n    list = action.getPrescriptions();\r\n    assertEquals(2, list.size());\r\n    assertEquals(\"009042407\", list.get(0).getMedication().getNDCode());\r\n    assertEquals(\"009042407\", list.get(1).getMedication().getNDCode());\r\n}"},
 {"id":477, "methodname":"testEditPrescription()", "methodnamerefined":"testEditPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testEditPrescription", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testEditPrescription()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"/**\r\n * Test edit prescription\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testEditPrescription() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"2\", \"955\");\r\n    PrescriptionBean bean = action.getPrescriptions().get(0);\r\n    assertEquals(5, bean.getDosage());\r\n    bean.setDosage(42);\r\n    action.editPrescription(bean);\r\n    bean = action.getPrescriptions().get(0);\r\n    assertEquals(42, bean.getDosage());\r\n}"},
 {"id":478, "methodname":"testFormToBean()", "methodnamerefined":"testFormToBean", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testFormToBean", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testFormToBean()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"public void testFormToBean() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"2\", \"955\");\r\n    EditPrescriptionsForm form = new EditPrescriptionsForm();\r\n    form.setMedID(\"548684985\");\r\n    form.setDosage(\"5\");\r\n    form.setStartDate(\"02/28/2011\");\r\n    form.setEndDate(\"03/07/2011\");\r\n    form.setInstructions(\"Try it.\");\r\n    String[] overrideCodes = new String[]{ \"asdf\" };\r\n    form.setOverrideCodes(overrideCodes);\r\n    form.setOverrideOther(\"yeeees?\");\r\n    PrescriptionBean bean = action.formToBean(form, \"-- Instructions --\");\r\n    assertEquals(\"548684985\", bean.getMedication().getNDCode());\r\n    assertEquals(\"asdf\", bean.getReasons().get(0).getORCode());\r\n    assertEquals(\"yeeees?\", bean.getOverrideReasonOther());\r\n}"},
 {"id":479, "methodname":"testGetMedications()", "methodnamerefined":"testGetMedications", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testGetMedications", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testGetMedications()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"/**\r\n * Test Medication\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testGetMedications() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<MedicationBean> list = action.getMedications();\r\n    assertEquals(15, list.size());\r\n    // It can also be retrieved for an undefined office visit\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"1\");\r\n    list = action.getMedications();\r\n    assertEquals(15, list.size());\r\n}"},
 {"id":480, "methodname":"testGetPrescriptions()", "methodnamerefined":"testGetPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testGetPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest.testGetPrescriptions()", "classid":89, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsActionTest", "shortclassname":"EditPrescriptionsActionTest", "method":"/**\r\n * Test getPrescription\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testGetPrescriptions() throws Exception {\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<PrescriptionBean> list = action.getPrescriptions();\r\n    assertEquals(3, list.size());\r\n    assertEquals(\"009042407\", list.get(0).getMedication().getNDCode());\r\n    assertEquals(\"009042407\", list.get(1).getMedication().getNDCode());\r\n    assertEquals(\"647641512\", list.get(2).getMedication().getNDCode());\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"1\", \"11\");\r\n    assertEquals(0, action.getPrescriptions().size());\r\n    // An EditPrescriptionAction without an ovID returns an empty list.\r\n    action = new EditPrescriptionsAction(factory, 9000000000L, \"2\");\r\n    assertEquals(0, action.getPrescriptions().size());\r\n}"},
 {"id":481, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "shortclassname":"EditProceduresAction", "method":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param hcpid\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @param ovIDString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":482, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "shortclassname":"EditProceduresAction", "method":"public EditProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":483, "methodname":"addProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"addProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresAction.addProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresAction.addProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "shortclassname":"EditProceduresAction", "method":"public void addProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.add(bean);\r\n}"},
 {"id":484, "methodname":"deleteProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"deleteProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresAction.deleteProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresAction.deleteProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "shortclassname":"EditProceduresAction", "method":"public void deleteProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.remove(bean.getOvProcedureID());\r\n}"},
 {"id":485, "methodname":"editProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"editProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresAction.editProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresAction.editProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "shortclassname":"EditProceduresAction", "method":"public void editProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.edit(bean);\r\n}"},
 {"id":486, "methodname":"getProcedureCodes()", "methodnamerefined":"getProcedureCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresAction.getProcedureCodes", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresAction.getProcedureCodes()", "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "shortclassname":"EditProceduresAction", "method":"public List<ProcedureBean> getProcedureCodes() throws DBException {\r\n    return cptDAO.getProcedureCPTCodes();\r\n}"},
 {"id":487, "methodname":"getProcedures()", "methodnamerefined":"getProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresAction.getProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresAction.getProcedures()", "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "shortclassname":"EditProceduresAction", "method":"public List<ProcedureBean> getProcedures() throws DBException {\r\n    if (isUnsaved()) {\r\n        return new ArrayList<ProcedureBean>();\r\n    } else {\r\n        return proceduresDAO.getMedProceduresList(getOvID());\r\n    }\r\n}"},
 {"id":488, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.-init-()", "classid":91, "classname":"edu.ncsu.csc.itrust.action.EditProceduresActionTest", "shortclassname":"EditProceduresActionTest", "method":"EditProceduresActionTest() {\r\n}"},
 {"id":489, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.setUp()", "classid":91, "classname":"edu.ncsu.csc.itrust.action.EditProceduresActionTest", "shortclassname":"EditProceduresActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":490, "methodname":"testAddProcedure()", "methodnamerefined":"testAddProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testAddProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testAddProcedure()", "classid":91, "classname":"edu.ncsu.csc.itrust.action.EditProceduresActionTest", "shortclassname":"EditProceduresActionTest", "method":"public void testAddProcedure() throws Exception {\r\n    action = new EditProceduresAction(factory, 9000000000L, \"1\", \"11\");\r\n    assertEquals(0, action.getProcedures().size());\r\n    ProcedureBean bean = new ProcedureBean(\"1270F\", \"Injection procedure\", null, \"9000000000\");\r\n    bean.setVisitID(11);\r\n    action.addProcedure(bean);\r\n    assertEquals(1, action.getProcedures().size());\r\n    assertEquals(\"1270F\", action.getProcedures().get(0).getCPTCode());\r\n}"},
 {"id":491, "methodname":"testDeleteProcedure()", "methodnamerefined":"testDeleteProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testDeleteProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testDeleteProcedure()", "classid":91, "classname":"edu.ncsu.csc.itrust.action.EditProceduresActionTest", "shortclassname":"EditProceduresActionTest", "method":"public void testDeleteProcedure() throws Exception {\r\n    action = new EditProceduresAction(factory, 9000000000L, \"2\", \"955\");\r\n    assertEquals(1, action.getProcedures().size());\r\n    action.deleteProcedure(action.getProcedures().get(0));\r\n    assertEquals(0, action.getProcedures().size());\r\n}"},
 {"id":492, "methodname":"testEditProcedure()", "methodnamerefined":"testEditProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testEditProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testEditProcedure()", "classid":91, "classname":"edu.ncsu.csc.itrust.action.EditProceduresActionTest", "shortclassname":"EditProceduresActionTest", "method":"public void testEditProcedure() throws Exception {\r\n    action = new EditProceduresAction(factory, 9000000000L, \"2\", \"955\");\r\n    ProcedureBean bean = action.getProcedures().get(0);\r\n    assertEquals(\"1270F\", bean.getCPTCode());\r\n    bean.setCPTCode(\"87\");\r\n    bean.setVisitID(955);\r\n    bean.setHcpid(\"9000000000\");\r\n    action.editProcedure(bean);\r\n    bean = action.getProcedures().get(0);\r\n    assertEquals(\"87\", bean.getCPTCode());\r\n}"},
 {"id":493, "methodname":"testGetProcedureCodes()", "methodnamerefined":"testGetProcedureCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testGetProcedureCodes", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testGetProcedureCodes()", "classid":91, "classname":"edu.ncsu.csc.itrust.action.EditProceduresActionTest", "shortclassname":"EditProceduresActionTest", "method":"public void testGetProcedureCodes() throws Exception {\r\n    action = new EditProceduresAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<ProcedureBean> list = action.getProcedureCodes();\r\n    assertEquals(2, list.size());\r\n    // It can also be retrieved for an undefined office visit\r\n    action = new EditProceduresAction(factory, 9000000000L, \"1\");\r\n    list = action.getProcedureCodes();\r\n    assertEquals(2, list.size());\r\n}"},
 {"id":494, "methodname":"testGetProcedures()", "methodnamerefined":"testGetProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testGetProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.EditProceduresActionTest.testGetProcedures()", "classid":91, "classname":"edu.ncsu.csc.itrust.action.EditProceduresActionTest", "shortclassname":"EditProceduresActionTest", "method":"public void testGetProcedures() throws Exception {\r\n    action = new EditProceduresAction(factory, 9000000000L, \"2\", \"955\");\r\n    List<ProcedureBean> list = action.getProcedures();\r\n    assertEquals(1, list.size());\r\n    assertEquals(\"1270F\", list.get(0).getCPTCode());\r\n    action = new EditProceduresAction(factory, 9000000000L, \"1\", \"11\");\r\n    assertEquals(0, action.getProcedures().size());\r\n    // An EditPrescriptionAction without an ovID returns an empty list.\r\n    action = new EditProceduresAction(factory, 9000000000L, \"2\");\r\n    assertEquals(0, action.getProcedures().size());\r\n}"},
 {"id":495, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "shortclassname":"EditReferralsAction", "method":"public EditReferralsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":496, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "shortclassname":"EditReferralsAction", "method":"public EditReferralsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":497, "methodname":"getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsAction.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "shortclassname":"EditReferralsAction", "method":"/**\r\n * Add a new referral to the database.  The id on the ReferralBean is\r\n * ignored.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void addReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.addReferral(bean);\n}\n */\r\n/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * \t\tThe bean to edit.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void editReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.editReferral(bean);\n}\n */\r\n/**\r\n * Delete an existing referral from the database.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void deleteReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.removeReferral(bean.getId());\n}\n */\r\n/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}"},
 {"id":498, "methodname":"getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"getReceivingHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsAction.getReceivingHCPName", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "shortclassname":"EditReferralsAction", "method":"/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}"},
 {"id":499, "methodname":"getReferral(long)", "methodnamerefined":"getReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsAction.getReferral", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsAction.getReferral(long)", "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "shortclassname":"EditReferralsAction", "method":"/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * \t\tThe id of the desired referral.\r\n * @return ReferralBean\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}"},
 {"id":500, "methodname":"getReferrals()", "methodnamerefined":"getReferrals", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsAction.getReferrals", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsAction.getReferrals()", "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "shortclassname":"EditReferralsAction", "method":"/**\r\n * Get all referrals associated with this office visit.\r\n *\r\n * @return List of ReferralBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReferralBean> getReferrals() throws DBException {\r\n    if (isUnsaved()) {\r\n        return new ArrayList<ReferralBean>();\r\n    } else {\r\n        return referralDAO.getReferralsFromOV(getOvID());\r\n    }\r\n}"},
 {"id":501, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.-init-()", "classid":93, "classname":"edu.ncsu.csc.itrust.action.EditReferralsActionTest", "shortclassname":"EditReferralsActionTest", "method":"EditReferralsActionTest() {\r\n}"},
 {"id":502, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.setUp()", "classid":93, "classname":"edu.ncsu.csc.itrust.action.EditReferralsActionTest", "shortclassname":"EditReferralsActionTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":503, "methodname":"testGetPatientName()", "methodnamerefined":"testGetPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.testGetPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.testGetPatientName()", "classid":93, "classname":"edu.ncsu.csc.itrust.action.EditReferralsActionTest", "shortclassname":"EditReferralsActionTest", "method":"public void testGetPatientName() throws Exception {\r\n    action = new EditReferralsAction(factory, 9000000000L, \"2\", \"955\");\r\n    ReferralBean bean = action.getReferral(1L);\r\n    assertEquals(\"Andy Programmer\", action.getPatientName(bean));\r\n}"},
 {"id":504, "methodname":"testGetReceivingHCPName()", "methodnamerefined":"testGetReceivingHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.testGetReceivingHCPName", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.testGetReceivingHCPName()", "classid":93, "classname":"edu.ncsu.csc.itrust.action.EditReferralsActionTest", "shortclassname":"EditReferralsActionTest", "method":"public void testGetReceivingHCPName() throws Exception {\r\n    action = new EditReferralsAction(factory, 9000000000L, \"2\", \"955\");\r\n    ReferralBean bean = action.getReferral(1L);\r\n    assertEquals(\"Gandalf Stormcrow\", action.getReceivingHCPName(bean));\r\n}"},
 {"id":505, "methodname":"testGetReferrals()", "methodnamerefined":"testGetReferrals", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.testGetReferrals", "fullmethod":"edu.ncsu.csc.itrust.action.EditReferralsActionTest.testGetReferrals()", "classid":93, "classname":"edu.ncsu.csc.itrust.action.EditReferralsActionTest", "shortclassname":"EditReferralsActionTest", "method":"public void testGetReferrals() throws Exception {\r\n    action = new EditReferralsAction(factory, 9000000000L, \"2\", \"955\");\r\n    assertEquals(4, action.getReferrals().size());\r\n    action = new EditReferralsAction(factory, 9000000000L, \"1\", \"11\");\r\n    assertEquals(0, action.getReferrals().size());\r\n    // An EditPrescriptionAction without an ovID returns an empty list.\r\n    action = new EditReferralsAction(factory, 9000000000L, \"2\");\r\n    assertEquals(0, action.getReferrals().size());\r\n}"},
 {"id":506, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":94, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesAction", "shortclassname":"EditRepresentativesAction", "method":"/**\r\n * Super class validates the patient mid\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the patient editing his/her representatives.\r\n * @param pidString\r\n * \t\tThe MID of the representative in question.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditRepresentativesAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":507, "methodname":"addRepresentative(java.lang.String)", "methodnamerefined":"addRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesAction.addRepresentative", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesAction.addRepresentative(java.lang.String)", "classid":94, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesAction", "shortclassname":"EditRepresentativesAction", "method":"/**\r\n * Makes the patient (pid) represent the input mid parameter\r\n *\r\n * @param pidString\r\n * \t\tthe mid of the person who will be represented (the representee)\r\n * @return a message\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String addRepresentative(String pidString) throws iTrustException {\r\n    try {\r\n        long representee = Long.valueOf(pidString);\r\n        if ((authDAO.getUserRole(representee)) != (Role.PATIENT))\r\n            throw new iTrustException(\"This user is not a patient!\");\r\n        else\r\n            if ((super.pid) == representee)\r\n                throw new iTrustException(\"This user cannot represent themselves.\");\r\n\r\n\r\n        boolean confirm = patientDAO.addRepresentative(pid, representee);\r\n        if (confirm) {\r\n            return \"Patient represented\";\r\n        } else\r\n            return \"No change made\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        return \"MID not a number\";\r\n    }\r\n}"},
 {"id":508, "methodname":"getRepresented(long)", "methodnamerefined":"getRepresented", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesAction.getRepresented", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesAction.getRepresented(long)", "classid":94, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesAction", "shortclassname":"EditRepresentativesAction", "method":"/**\r\n * Return a list of patients that pid represents\r\n *\r\n * @param pid\r\n * \t\tThe id of the personnel we are looking up representees for.\r\n * @return a list of PatientBeans\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getRepresented(long pid) throws iTrustException {\r\n    return patientDAO.getRepresented(pid);\r\n}"},
 {"id":509, "methodname":"removeRepresentative(java.lang.String)", "methodnamerefined":"removeRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesAction.removeRepresentative", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesAction.removeRepresentative(java.lang.String)", "classid":94, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesAction", "shortclassname":"EditRepresentativesAction", "method":"/**\r\n * Makes the patient (pid) no longer represent the input mid param\r\n *\r\n * @param input\r\n * \t\tthe mid of the person be represented (representee)\r\n * @return a message\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String removeRepresentative(String input) throws iTrustException {\r\n    try {\r\n        long representee = Long.valueOf(input);\r\n        boolean confirm = patientDAO.removeRepresentative(pid, representee);\r\n        if (confirm) {\r\n            return \"Patient represented\";\r\n        } else\r\n            return \"No change made\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        return \"MID not a number\";\r\n    }\r\n}"},
 {"id":510, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.-init-()", "classid":95, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest", "shortclassname":"EditRepresentativesActionTest", "method":"EditRepresentativesActionTest() {\r\n}"},
 {"id":511, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.setUp()", "classid":95, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest", "shortclassname":"EditRepresentativesActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.patient1();// 2 represents 1, but not 4\r\n\r\n    gen.patient2();\r\n    gen.patient4();\r\n}"},
 {"id":512, "methodname":"testAddNotNumber()", "methodnamerefined":"testAddNotNumber", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testAddNotNumber", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testAddNotNumber()", "classid":95, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest", "shortclassname":"EditRepresentativesActionTest", "method":"public void testAddNotNumber() throws Exception {\r\n    action = new EditRepresentativesAction(factory, 9000000000L, \"2\");\r\n    assertEquals(\"MID not a number\", action.addRepresentative(\"a\"));\r\n    assertEquals(\"MID not a number\", action.removeRepresentative(\"a\"));\r\n}"},
 {"id":513, "methodname":"testAddRepresentative()", "methodnamerefined":"testAddRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testAddRepresentative", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testAddRepresentative()", "classid":95, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest", "shortclassname":"EditRepresentativesActionTest", "method":"public void testAddRepresentative() throws Exception {\r\n    action = new EditRepresentativesAction(factory, 9000000000L, \"2\");\r\n    action.addRepresentative(\"4\");\r\n    List<PatientBean> reps = action.getRepresented(2);\r\n    assertEquals(2, reps.size());\r\n    assertEquals(4L, reps.get(1).getMID());\r\n}"},
 {"id":514, "methodname":"testCannotRepresentSelf()", "methodnamerefined":"testCannotRepresentSelf", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testCannotRepresentSelf", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testCannotRepresentSelf()", "classid":95, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest", "shortclassname":"EditRepresentativesActionTest", "method":"public void testCannotRepresentSelf() throws Exception {\r\n    action = new EditRepresentativesAction(factory, 9000000000L, \"2\");\r\n    try {\r\n        action.addRepresentative(\"2\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"This user cannot represent themselves.\", e.getMessage());\r\n    }\r\n    JUnitiTrustUtils.assertTransactionsNone();\r\n    assertEquals(1, action.getRepresented(2).size());\r\n}"},
 {"id":515, "methodname":"testGetRepresentatives()", "methodnamerefined":"testGetRepresentatives", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testGetRepresentatives", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testGetRepresentatives()", "classid":95, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest", "shortclassname":"EditRepresentativesActionTest", "method":"public void testGetRepresentatives() throws Exception {\r\n    action = new EditRepresentativesAction(factory, 9000000000L, \"2\");\r\n    List<PatientBean> reps = action.getRepresented(2L);\r\n    assertEquals(1, reps.size());\r\n    assertEquals(1L, reps.get(0).getMID());\r\n}"},
 {"id":516, "methodname":"testNotAPatient()", "methodnamerefined":"testNotAPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testNotAPatient", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testNotAPatient()", "classid":95, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest", "shortclassname":"EditRepresentativesActionTest", "method":"public void testNotAPatient() throws Exception {\r\n    action = new EditRepresentativesAction(factory, 9000000000L, \"2\");\r\n    assertEquals(\"No change made\", action.removeRepresentative(\"9000000000\"));\r\n    JUnitiTrustUtils.assertTransactionsNone();\r\n    assertEquals(1, action.getRepresented(2).size());\r\n}"},
 {"id":517, "methodname":"testRemoveNothing()", "methodnamerefined":"testRemoveNothing", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testRemoveNothing", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testRemoveNothing()", "classid":95, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest", "shortclassname":"EditRepresentativesActionTest", "method":"public void testRemoveNothing() throws Exception {\r\n    action = new EditRepresentativesAction(factory, 9000000000L, \"2\");\r\n    assertEquals(\"No change made\", action.removeRepresentative(\"2\"));\r\n    JUnitiTrustUtils.assertTransactionsNone();\r\n    assertEquals(1, action.getRepresented(2).size());\r\n}"},
 {"id":518, "methodname":"testRemoveRepresentative()", "methodnamerefined":"testRemoveRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testRemoveRepresentative", "fullmethod":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest.testRemoveRepresentative()", "classid":95, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesActionTest", "shortclassname":"EditRepresentativesActionTest", "method":"public void testRemoveRepresentative() throws Exception {\r\n    action = new EditRepresentativesAction(factory, 9000000000L, \"2\");\r\n    action.removeRepresentative(\"1\");\r\n    List<PatientBean> reps = action.getRepresented(2);\r\n    assertEquals(0, reps.size());\r\n}"},
 {"id":519, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"public EditSingleReferralAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    messageAction = new SendMessageAction(factory, hcpid);\r\n    this.hcpid = hcpid;\r\n}"},
 {"id":520, "methodname":"addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"addReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.addReferral", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"/**\r\n * Add a new referral to the database.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void addReferral(ReferralBean bean) throws Exception {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"New referrals must be from the current HCP.\");\r\n    }\r\n    long id = referralDAO.addReferral(bean);\r\n    bean = referralDAO.getReferral(id);\r\n    sendReferralCreatedMessages(bean);\r\n}"},
 {"id":521, "methodname":"deleteReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"deleteReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.deleteReferral", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.deleteReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"/**\r\n * Delete a referral from the database.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void deleteReferral(ReferralBean bean) throws Exception {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"Deleted referrals must be from the current HCP.\");\r\n    }\r\n    referralDAO.removeReferral(bean.getId());\r\n    sendReferralCancelledMessages(bean);\r\n}"},
 {"id":522, "methodname":"editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"editReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.editReferral", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void editReferral(ReferralBean bean) throws iTrustException {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"Edited referrals must be from the current HCP.\");\r\n    }\r\n    referralDAO.editReferral(bean);\r\n}"},
 {"id":523, "methodname":"getOfficeVisitDate(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"getOfficeVisitDate", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getOfficeVisitDate", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getOfficeVisitDate(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"public String getOfficeVisitDate(ReferralBean bean) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(bean.getOvid()).getVisitDateStr();\r\n}"},
 {"id":524, "methodname":"getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}"},
 {"id":525, "methodname":"getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"getReceivingHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPName", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}"},
 {"id":526, "methodname":"getReceivingHCPSpecialty(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"getReceivingHCPSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPSpecialty", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPSpecialty(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"public String getReceivingHCPSpecialty(ReferralBean bean) throws iTrustException {\r\n    String s = personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty();\r\n    return s == null ? \"\" : s;\r\n}"},
 {"id":527, "methodname":"getReferral(long)", "methodnamerefined":"getReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReferral", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReferral(long)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}"},
 {"id":528, "methodname":"sendReferralCancelledMessages(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"sendReferralCancelledMessages", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCancelledMessages", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCancelledMessages(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"/**\r\n * Send messages to the users associated with canceling a referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void sendReferralCancelledMessages(ReferralBean bean) throws Exception {\r\n    StringBuilder body = new StringBuilder();\r\n    body.append(((\"The referral created on \" + (bean.getTimeStamp())) + \"has been deleted.\n\n\"));\r\n    body.append(\"The referral is reproduced here for your convienence:\n\");\r\n    body.append(((((\"Sending HCP: \" + (personnelDAO.getName(bean.getSenderID()))) + \" (\") + (personnelDAO.getPersonnel(bean.getSenderID()).getSpecialty())) + \")\n\"));\r\n    body.append(((((\"Receiving HCP: \" + (personnelDAO.getName(bean.getReceiverID()))) + \" (\") + (personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty())) + \")\n\"));\r\n    body.append(((\"Patient: \" + (getPatientName(bean))) + \"\n\"));\r\n    body.append(((\"Notes: \" + (bean.getReferralDetails())) + \"\n\"));\r\n    body.append(((\"Created on: \" + (bean.getTimeStamp())) + \"\n\"));\r\n    MessageBean receiverMsg = new MessageBean();\r\n    receiverMsg.setFrom(bean.getSenderID());\r\n    receiverMsg.setTo(bean.getReceiverID());\r\n    receiverMsg.setBody(body.toString());\r\n    receiverMsg.setSubject(\"Your Referral Was Cancelled\");\r\n    receiverMsg.setRead(0);\r\n    messageAction.sendMessage(receiverMsg);\r\n    MessageBean patientMsg = new MessageBean();\r\n    patientMsg.setFrom(bean.getSenderID());\r\n    patientMsg.setTo(bean.getPatientID());\r\n    patientMsg.setBody(body.toString());\r\n    patientMsg.setSubject(\"Your Referral Was Cancelled\");\r\n    patientMsg.setRead(0);\r\n    messageAction.sendMessage(patientMsg);\r\n}"},
 {"id":529, "methodname":"sendReferralCreatedMessages(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"sendReferralCreatedMessages", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCreatedMessages", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCreatedMessages(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "shortclassname":"EditSingleReferralAction", "method":"/**\r\n * Send messages to the users associated with creating a referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void sendReferralCreatedMessages(ReferralBean bean) throws Exception {\r\n    StringBuilder body = new StringBuilder();\r\n    body.append(\"Referral information:\n\");\r\n    String senderSpecialty = personnelDAO.getPersonnel(bean.getSenderID()).getSpecialty();\r\n    String receiverSpecialty = personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty();\r\n    senderSpecialty = (senderSpecialty == null) ? \"no specialty\" : senderSpecialty;\r\n    receiverSpecialty = (receiverSpecialty == null) ? \"no specialty\" : receiverSpecialty;\r\n    body.append(((((\"Sending HCP: \" + (personnelDAO.getName(bean.getSenderID()))) + \" (\") + senderSpecialty) + \")\n\"));\r\n    body.append(((((\"Receiving HCP: \" + (personnelDAO.getName(bean.getReceiverID()))) + \" (\") + receiverSpecialty) + \")\n\"));\r\n    body.append(((\"Patient: \" + (getPatientName(bean))) + \"\n\"));\r\n    body.append(((\"Notes: \" + (bean.getReferralDetails())) + \"\n\"));\r\n    body.append(((\"Created on: \" + (bean.getTimeStamp())) + \"\n\"));\r\n    MessageBean senderMsg = new MessageBean();\r\n    senderMsg.setFrom(bean.getSenderID());\r\n    senderMsg.setTo(bean.getSenderID());\r\n    senderMsg.setBody(body.toString());\r\n    senderMsg.setSubject(\"You Created a New Referral\");\r\n    senderMsg.setRead(0);\r\n    messageAction.sendMessage(senderMsg);\r\n    MessageBean receiverMsg = new MessageBean();\r\n    receiverMsg.setFrom(bean.getSenderID());\r\n    receiverMsg.setTo(bean.getReceiverID());\r\n    receiverMsg.setBody(body.toString());\r\n    receiverMsg.setSubject(\"You Received a New Referral\");\r\n    receiverMsg.setRead(0);\r\n    messageAction.sendMessage(receiverMsg);\r\n    MessageBean patientMsg = new MessageBean();\r\n    patientMsg.setFrom(bean.getSenderID());\r\n    patientMsg.setTo(bean.getPatientID());\r\n    patientMsg.setBody(body.toString());\r\n    patientMsg.setSubject(\"You Received a New Referral\");\r\n    patientMsg.setRead(0);\r\n    messageAction.sendMessage(patientMsg);\r\n}"},
 {"id":530, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.-init-()", "classid":97, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest", "shortclassname":"EditSingleReferralActionTest", "method":"EditSingleReferralActionTest() {\r\n}"},
 {"id":531, "methodname":"countMessageWithSubject(java.util.List,java.lang.String)", "methodnamerefined":"countMessageWithSubject", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.countMessageWithSubject", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.countMessageWithSubject(java.util.List,java.lang.String)", "classid":97, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest", "shortclassname":"EditSingleReferralActionTest", "method":"// helper method\r\nprivate int countMessageWithSubject(List<MessageBean> msgs, String subject) {\r\n    int count = 0;\r\n    for (MessageBean m : msgs) {\r\n        if (m.getSubject().equals(subject)) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}"},
 {"id":532, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.setUp()", "classid":97, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest", "shortclassname":"EditSingleReferralActionTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":533, "methodname":"testAddReferral()", "methodnamerefined":"testAddReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.testAddReferral", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.testAddReferral()", "classid":97, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest", "shortclassname":"EditSingleReferralActionTest", "method":"public void testAddReferral() throws Exception {\r\n    // When adding a referral, it should appear in the database, and\r\n    // messages should be sent to the associated users.\r\n    long senderid = 9000000000L;\r\n    long receiverid = 9000000003L;\r\n    long patientid = 2L;\r\n    action = new EditSingleReferralAction(factory, senderid);\r\n    // Ensure no referral messages exist for any user.\r\n    List<MessageBean> msgs = msgDAO.getMessagesFor(senderid);\r\n    assertEquals(0, countMessageWithSubject(msgs, \"You Created a New Referral\"));\r\n    msgs = msgDAO.getMessagesFor(receiverid);\r\n    assertEquals(0, countMessageWithSubject(msgs, \"You Received a New Referral\"));\r\n    msgs = msgDAO.getMessagesFor(patientid);\r\n    assertEquals(0, countMessageWithSubject(msgs, \"You Received a New Referral\"));\r\n    // construct the referral\r\n    ReferralBean bean = new ReferralBean();\r\n    bean.setOvid(955L);\r\n    bean.setPatientID(patientid);\r\n    bean.setReceiverID(receiverid);\r\n    bean.setSenderID(senderid);\r\n    bean.setPriority(1);\r\n    bean.setReferralDetails(\"A Test Referral!!!\");\r\n    // send the referral\r\n    action.addReferral(bean);\r\n    // get stored referral\r\n    List<ReferralBean> refs = refDAO.getReferralsFromOV(955L);\r\n    bean = null;\r\n    for (ReferralBean r : refs) {\r\n        if (r.getReferralDetails().equals(\"A Test Referral!!!\")) {\r\n            bean = r;\r\n            break;\r\n        }\r\n    }\r\n    assertTrue((bean != null));// make sure we actually found a bean\r\n\r\n    // check the contents of the bean\r\n    assertEquals(patientid, bean.getPatientID());\r\n    assertEquals(senderid, bean.getSenderID());\r\n    assertEquals(receiverid, bean.getReceiverID());\r\n    // check that messages were sent\r\n    msgs = msgDAO.getMessagesFor(senderid);\r\n    assertEquals(1, countMessageWithSubject(msgs, \"You Created a New Referral\"));\r\n    msgs = msgDAO.getMessagesFor(receiverid);\r\n    assertEquals(1, countMessageWithSubject(msgs, \"You Received a New Referral\"));\r\n    msgs = msgDAO.getMessagesFor(patientid);\r\n    assertEquals(1, countMessageWithSubject(msgs, \"You Received a New Referral\"));\r\n}"},
 {"id":534, "methodname":"testDeleteReferral()", "methodnamerefined":"testDeleteReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.testDeleteReferral", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.testDeleteReferral()", "classid":97, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest", "shortclassname":"EditSingleReferralActionTest", "method":"public void testDeleteReferral() throws Exception {\r\n    long senderid = 9000000000L;\r\n    long receiverid = 9000000003L;\r\n    long patientid = 2L;\r\n    action = new EditSingleReferralAction(factory, senderid);\r\n    // get existing referral\r\n    ReferralBean bean = action.getReferral(3L);\r\n    assertEquals(\"Gandalf will help you defeat the orcs!\", bean.getReferralDetails());\r\n    // delete referral\r\n    action.deleteReferral(bean);\r\n    // trying to retrieve deleted referral should return null\r\n    assertEquals(null, action.getReferral(3L));\r\n    // part 2: check that messages were sent\r\n    List<MessageBean> msgs = msgDAO.getMessagesFor(senderid);\r\n    assertEquals(0, countMessageWithSubject(msgs, \"Your Referral Was Cancelled\"));\r\n    msgs = msgDAO.getMessagesFor(receiverid);\r\n    assertEquals(1, countMessageWithSubject(msgs, \"Your Referral Was Cancelled\"));\r\n    msgs = msgDAO.getMessagesFor(patientid);\r\n    assertEquals(1, countMessageWithSubject(msgs, \"Your Referral Was Cancelled\"));\r\n}"},
 {"id":535, "methodname":"testEditReferral()", "methodnamerefined":"testEditReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.testEditReferral", "fullmethod":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest.testEditReferral()", "classid":97, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralActionTest", "shortclassname":"EditSingleReferralActionTest", "method":"/* public void testDeleteReferral() {\nfail(\"Not yet implemented\");\n}\n */\r\npublic void testEditReferral() throws Exception {\r\n    long senderid = 9000000000L;\r\n    // long receiverid = 9000000003L;\r\n    // long patientid = 2L;\r\n    action = new EditSingleReferralAction(factory, senderid);\r\n    // get existing referral and edit it\r\n    ReferralBean bean = action.getReferral(3L);\r\n    assertEquals(\"Gandalf will help you defeat the orcs!\", bean.getReferralDetails());\r\n    bean.setReferralDetails(\"abc123\");\r\n    // save modified referral\r\n    action.editReferral(bean);\r\n    // retrieve referral and see that it has been modified\r\n    bean = action.getReferral(3L);\r\n    assertEquals(\"abc123\", bean.getReferralDetails());\r\n}"},
 {"id":536, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * The super class handles validating the pid Logs viewing of the report\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is looking at the emergency report.\r\n * @param pidString\r\n * \t\tThe ID of the patient whose report is being generated.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EmergencyReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    emailutil = new EmailUtil(factory);\r\n    pb = patientDAO.getPatient(this.pid);\r\n    emailutil.sendEmail(makeEmail());\r\n}"},
 {"id":537, "methodname":"getAllergies()", "methodnamerefined":"getAllergies", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getAllergies", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getAllergies()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Returns a list of allergies for the given patient\r\n *\r\n * @return a list of AllergyBeans\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<AllergyBean> getAllergies() throws iTrustException {\r\n    return allergyDAO.getAllergies(this.pid);\r\n}"},
 {"id":538, "methodname":"getBloodType()", "methodnamerefined":"getBloodType", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getBloodType", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getBloodType()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Returns the patients blood type\r\n *\r\n * @return the patients blood type\r\n */\r\npublic String getBloodType() {\r\n    return (pb.getBloodType()) + \"\";\r\n}"},
 {"id":539, "methodname":"getCurrentPrescriptions()", "methodnamerefined":"getCurrentPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getCurrentPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getCurrentPrescriptions()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Returns a list of prescriptions the patient is currently taking\r\n *\r\n * @return a list of PrescriptionBeans for which the patient is currently taking\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getCurrentPrescriptions() throws iTrustException {\r\n    List<PrescriptionBean> allPrescriptions = patientDAO.getCurrentPrescriptions(this.pid);\r\n    ArrayList<PrescriptionBean> warningList = new ArrayList<PrescriptionBean>();\r\n    for (int i = 0; i < (allPrescriptions.size()); i++) {\r\n        if (PrescriptionAlerts.isAlert(allPrescriptions.get(i).getMedication().getNDCode()))\r\n            warningList.add(allPrescriptions.get(i));\r\n\r\n    }\r\n    return warningList;\r\n}"},
 {"id":540, "methodname":"getImmunizations()", "methodnamerefined":"getImmunizations", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getImmunizations", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getImmunizations()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Returns a list of prescriptions the patient is currently taking\r\n *\r\n * @return a list of PrescriptionBeans for which the patient is currently taking\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<ProcedureBean> getImmunizations() throws iTrustException {\r\n    List<ProcedureBean> allImmunizations = patientDAO.getImmunizationProcedures(this.pid);\r\n    return allImmunizations;\r\n}"},
 {"id":541, "methodname":"getPatientAge()", "methodnamerefined":"getPatientAge", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getPatientAge", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getPatientAge()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Returns the patients age\r\n *\r\n * @return patients age\r\n */\r\npublic String getPatientAge() {\r\n    return Integer.toString(pb.getAge());\r\n}"},
 {"id":542, "methodname":"getPatientEmergencyContact()", "methodnamerefined":"getPatientEmergencyContact", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getPatientEmergencyContact", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getPatientEmergencyContact()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Returns the patients emergency contact\r\n *\r\n * @return patients emergency contact\r\n */\r\npublic String getPatientEmergencyContact() {\r\n    return ((pb.getEmergencyName()) + \" \") + (pb.getEmergencyPhone());\r\n}"},
 {"id":543, "methodname":"getPatientGender()", "methodnamerefined":"getPatientGender", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getPatientGender", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getPatientGender()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Returns the patients gender\r\n *\r\n * @return patients gender\r\n */\r\npublic String getPatientGender() {\r\n    return pb.getGender().toString();\r\n}"},
 {"id":544, "methodname":"getPatientName()", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getPatientName()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Returns the patients name\r\n *\r\n * @return patients full name\r\n */\r\npublic String getPatientName() {\r\n    return ((pb.getFirstName()) + \" \") + (pb.getLastName());\r\n}"},
 {"id":545, "methodname":"getWarningDiagnoses()", "methodnamerefined":"getWarningDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getWarningDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.getWarningDiagnoses()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Returns a list of diagnoses that are in the range indicated by the DiagnosisRange enum\r\n *\r\n * @return list of DiagnosisBeans\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<DiagnosisBean> getWarningDiagnoses() throws iTrustException {\r\n    try {\r\n        boolean dup = false;\r\n        List<DiagnosisBean> allDiagnoses = patientDAO.getDiagnoses(this.pid);\r\n        ArrayList<DiagnosisBean> warningList = new ArrayList<DiagnosisBean>();\r\n        for (DiagnosisBean bean : allDiagnoses) {\r\n            OfficeVisitBean ovb = ovDAO.getOfficeVisit(bean.getVisitID());\r\n            if (ovb == null) {\r\n                continue;\r\n            }\r\n            if ((\"yes\".equals(bean.getClassification())) || ((ovb.getVisitDate().getTime()) > ((Calendar.getInstance().getTimeInMillis()) - ((((30 * 24) * 60) * 60) * 1000)))) {\r\n                for (DiagnosisBean wbean : warningList) {\r\n                    if (bean.getDescription().equals(wbean.getDescription())) {\r\n                        dup = true;\r\n                    }\r\n                }\r\n                if (!dup) {\r\n                    warningList.add(bean);\r\n                }\r\n            }\r\n        }\r\n        return warningList;\r\n    } catch (DBException dbe) {\r\n        throw new iTrustException(dbe.getMessage());\r\n    }\r\n}"},
 {"id":546, "methodname":"makeEmail()", "methodnamerefined":"makeEmail", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportAction.makeEmail", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportAction.makeEmail()", "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "shortclassname":"EmergencyReportAction", "method":"/**\r\n * Creates a fake e-mail to notify the user that an emergency report has been created and viewed.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmail() throws DBException {\r\n    Email email = new Email();\r\n    List<PatientBean> reps = patientDAO.getRepresenting(pb.getMID());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(pb.getEmail());\r\n    for (PatientBean r : reps) {\r\n        toAddrs.add(r.getEmail());\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Emergency Report Viewed Notification\"));\r\n    email.setBody((((\"Dear \" + (pb.getFullName())) + \",\n An emergency report has been generated. \") + \"Please login to iTrust to see who has viewed your records.\"));\r\n    return email;\r\n}"},
 {"id":547, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportActionTest.-init-()", "classid":99, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportActionTest", "shortclassname":"EmergencyReportActionTest", "method":"EmergencyReportActionTest() {\r\n}"},
 {"id":548, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportActionTest.setUp()", "classid":99, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportActionTest", "shortclassname":"EmergencyReportActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.hcp0();\r\n    gen.ndCodes();\r\n    gen.icd9cmCodes();\r\n    action = new EmergencyReportAction(factory, 9000000000L, \"2\");\r\n}"},
 {"id":549, "methodname":"testBaseCase()", "methodnamerefined":"testBaseCase", "methodabbreviation":"edu.ncsu.csc.itrust.action.EmergencyReportActionTest.testBaseCase", "fullmethod":"edu.ncsu.csc.itrust.action.EmergencyReportActionTest.testBaseCase()", "classid":99, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportActionTest", "shortclassname":"EmergencyReportActionTest", "method":"public void testBaseCase() throws iTrustException {\r\n    assertEquals(\"Andy Programmer\", action.getPatientName());\r\n    assertEquals(\"O-\", action.getBloodType());\r\n    List<AllergyBean> lab = action.getAllergies();\r\n    assertEquals(2, lab.size());\r\n    List<PrescriptionBean> lpb = action.getCurrentPrescriptions();\r\n    assertEquals(1, lpb.size());\r\n    assertEquals(\"Prioglitazone\", lpb.get(0).getMedication().getDescription());\r\n    List<DiagnosisBean> ldb = action.getWarningDiagnoses();\r\n    assertEquals(2, ldb.size());\r\n}"},
 {"id":550, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EventLoggingAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EventLoggingAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":100, "classname":"edu.ncsu.csc.itrust.action.EventLoggingAction", "shortclassname":"EventLoggingAction", "method":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving the logs.\r\n */\r\npublic EventLoggingAction(DAOFactory factory) {\r\n    this.transDAO = factory.getTransactionDAO();\r\n}"},
 {"id":551, "methodname":"logEvent(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "methodnamerefined":"logEvent", "methodabbreviation":"edu.ncsu.csc.itrust.action.EventLoggingAction.logEvent", "fullmethod":"edu.ncsu.csc.itrust.action.EventLoggingAction.logEvent(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "classid":100, "classname":"edu.ncsu.csc.itrust.action.EventLoggingAction", "shortclassname":"EventLoggingAction", "method":"/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * \t\tThe {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is logged in.\r\n * @param secondaryMID\r\n * \t\tTypically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * \t\tA note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logEvent(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    this.transDAO.logTransaction(type, loggedInMID, secondaryMID, addedInfo);\r\n}"},
 {"id":552, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.EventLoggingActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.EventLoggingActionTest.-init-()", "classid":101, "classname":"edu.ncsu.csc.itrust.action.EventLoggingActionTest", "shortclassname":"EventLoggingActionTest", "method":"EventLoggingActionTest() {\r\n}"},
 {"id":553, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.EventLoggingActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.EventLoggingActionTest.setUp()", "classid":101, "classname":"edu.ncsu.csc.itrust.action.EventLoggingActionTest", "shortclassname":"EventLoggingActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    factory = TestDAOFactory.getTestInstance();\r\n    action = new EventLoggingAction(factory);\r\n}"},
 {"id":554, "methodname":"testGetTransactions()", "methodnamerefined":"testGetTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.action.EventLoggingActionTest.testGetTransactions", "fullmethod":"edu.ncsu.csc.itrust.action.EventLoggingActionTest.testGetTransactions()", "classid":101, "classname":"edu.ncsu.csc.itrust.action.EventLoggingActionTest", "shortclassname":"EventLoggingActionTest", "method":"public void testGetTransactions() throws FormValidationException, SQLException {\r\n    try {\r\n        action.logEvent(TransactionType.LOGIN_FAILURE, mid, 0, \"\");\r\n        TransactionDAO dao = factory.getTransactionDAO();\r\n        List<TransactionBean> all = dao.getAllTransactions();\r\n        boolean passes = false;\r\n        for (TransactionBean log : all) {\r\n            if (((log.getLoggedInMID()) == (mid)) && ((log.getTransactionType()) == (TransactionType.LOGIN_FAILURE))) {\r\n                passes = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!passes) {\r\n            fail();\r\n        }\r\n    } catch (DBException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":555, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":102, "classname":"edu.ncsu.csc.itrust.action.FindExpertAction", "shortclassname":"FindExpertAction", "method":"/**\r\n * Constructor simply is used to initialize the DAOs\r\n *\r\n * @param factory\r\n * \t\tused to initialize DAOs\r\n */\r\npublic FindExpertAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n    hospitalsDAO = new HospitalsDAO(factory);\r\n    personnelDAO = new PersonnelDAO(factory);\r\n}"},
 {"id":556, "methodname":"calculateDistance(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)", "methodnamerefined":"calculateDistance", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertAction.calculateDistance", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertAction.calculateDistance(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)", "classid":102, "classname":"edu.ncsu.csc.itrust.action.FindExpertAction", "shortclassname":"FindExpertAction", "method":"/**\r\n * Method to calculate the distance between the two GPS coordinates of the user and hospital\r\n *\r\n * @param lat1\r\n * \t\tLatitude of user\r\n * @param lat2\r\n * \t\tLatitude of hospital\r\n * @param lng1\r\n * \t\tLongitude of user\r\n * @param lng2\r\n * \t\tLongitude of hospital\r\n * @return The distance between the user and hospital\r\n */\r\npublic Double calculateDistance(Double lat1, Double lat2, Double lng1, Double lng2) {\r\n    Double deltaLat = Math.toRadians((lat2 - lat1));\r\n    Double deltaLng = Math.toRadians((lng2 - lng1));\r\n    Double rlat1 = Math.toRadians(lat1);\r\n    Double rlat2 = Math.toRadians(lat2);\r\n    Double temp = ((Math.sin((deltaLat / 2))) * (Math.sin((deltaLat / 2)))) + ((((Math.sin((deltaLng / 2))) * (Math.sin((deltaLng / 2)))) * (Math.cos(rlat1))) * (Math.cos(rlat2)));\r\n    return ((FindExpertAction.RADIUS) * 2) * (Math.atan2(Math.sqrt(temp), Math.sqrt((1 - temp))));\r\n}"},
 {"id":557, "methodname":"filterHospitals(java.util.List,long)", "methodnamerefined":"filterHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertAction.filterHospitals", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertAction.filterHospitals(java.util.List,long)", "classid":102, "classname":"edu.ncsu.csc.itrust.action.FindExpertAction", "shortclassname":"FindExpertAction", "method":"/**\r\n * Filters hospitals down to just the hospitals in the specified range of the user\r\n *\r\n * @param hospitals\r\n * \t\tHospitals to filter\r\n * @param patientZip\r\n * \t\tpatients zipcode\r\n * @return All hospitals within the specified range of the user\r\n */\r\npublic List<HospitalBean> filterHospitals(List<HospitalBean> hospitals, long loggedInMID) {\r\n    List<HospitalBean> inRange = new ArrayList<HospitalBean>();\r\n    return inRange;\r\n}"},
 {"id":558, "methodname":"findExperts(java.util.List,java.lang.String)", "methodnamerefined":"findExperts", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertAction.findExperts", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertAction.findExperts(java.util.List,java.lang.String)", "classid":102, "classname":"edu.ncsu.csc.itrust.action.FindExpertAction", "shortclassname":"FindExpertAction", "method":"/**\r\n * Method used to find experts of specified specialty from hospitals that are in range\r\n *\r\n * @param hospitals\r\n * \t\tThe hospitals within the proximity of the user\r\n * @param specialty\r\n * \t\tThe expertise specified\r\n * @return A relationship between the hospitals within proximity and the personnel with the specified expertise within them.\r\n */\r\npublic HashMap<HospitalBean, List<PersonnelBean>> findExperts(List<HospitalBean> hospitals, String specialty) {\r\n    HashMap<HospitalBean, List<PersonnelBean>> experts = new HashMap<HospitalBean, List<PersonnelBean>>();\r\n    try {\r\n        // Go through all nearby hospitals\r\n        for (HospitalBean hospital : hospitals) {\r\n            // Put the specified experts into a hashmap with the hospital\r\n            experts.put(hospital, personnelDAO.getPersonnelFromHospital(hospital.getHospitalID(), specialty));\r\n        }\r\n    } catch (DBException e) {\r\n        // \r\n    }\r\n    return experts;\r\n}"},
 {"id":559, "methodname":"findHospitalsBySpecialty(java.lang.String,long)", "methodnamerefined":"findHospitalsBySpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertAction.findHospitalsBySpecialty", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertAction.findHospitalsBySpecialty(java.lang.String,long)", "classid":102, "classname":"edu.ncsu.csc.itrust.action.FindExpertAction", "shortclassname":"FindExpertAction", "method":"/**\r\n * Main method used to find the hospitals and all specified personnel within range\r\n *\r\n * @param distance\r\n * \t\tThe maximum distance that a hospital must be within range in order for it to return\r\n * @param specialty\r\n * \t\tThe specialty that the user is interested in\r\n * @param lat\r\n * \t\tThe latitude of the address that the user is located at\r\n * @param lng\r\n * \t\tThe longitude of the address that the user is located at\r\n * @return A relationship between hospitals within the defined proximity and the specified experts at the hospital.\r\n */\r\npublic HashMap<HospitalBean, List<PersonnelBean>> findHospitalsBySpecialty(String specialty, long loggedInMID) {\r\n    HashMap<HospitalBean, List<PersonnelBean>> experts = null;\r\n    try {\r\n        // Grab all hospitals and filter them based on distance\r\n        List<HospitalBean> hospitals = filterHospitals(hospitalsDAO.getAllHospitals(), loggedInMID);\r\n        // Find experts in hospitals\r\n        experts = findExperts(hospitals, specialty);\r\n    } catch (DBException e) {\r\n        // \r\n    }\r\n    return experts;\r\n}"},
 {"id":560, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertActionTest.-init-()", "classid":103, "classname":"edu.ncsu.csc.itrust.action.FindExpertActionTest", "shortclassname":"FindExpertActionTest", "method":"FindExpertActionTest() {\r\n}"},
 {"id":561, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertActionTest.setUp()", "classid":103, "classname":"edu.ncsu.csc.itrust.action.FindExpertActionTest", "shortclassname":"FindExpertActionTest", "method":"protected void setUp() {\r\n    fea = new FindExpertAction(factory);\r\n}"},
 {"id":562, "methodname":"testCalculateDistance()", "methodnamerefined":"testCalculateDistance", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertActionTest.testCalculateDistance", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertActionTest.testCalculateDistance()", "classid":103, "classname":"edu.ncsu.csc.itrust.action.FindExpertActionTest", "shortclassname":"FindExpertActionTest", "method":"public void testCalculateDistance() {\r\n    // Test for near location, less than 5 miles\r\n    assertTrue(((fea.calculateDistance(35.794443, 35.797349, (-78.738906), (-78.78047))) < 5));\r\n    // Test same location is (close to) 0\r\n    assertTrue(((fea.calculateDistance(35.794443, 35.794443, (-78.738906), (-78.738906))) < 0.1));\r\n}"},
 {"id":563, "methodname":"testFilterHospitals()", "methodnamerefined":"testFilterHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertActionTest.testFilterHospitals", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertActionTest.testFilterHospitals()", "classid":103, "classname":"edu.ncsu.csc.itrust.action.FindExpertActionTest", "shortclassname":"FindExpertActionTest", "method":"public void testFilterHospitals() {\r\n    // Test with hospital with no lat/lng\r\n    HospitalBean blankHospital = new HospitalBean();\r\n    List<HospitalBean> hospitals = new ArrayList<HospitalBean>();\r\n    hospitals.add(blankHospital);\r\n    assertTrue(((fea.filterHospitals(hospitals, 1L).size()) == 0));\r\n}"},
 {"id":564, "methodname":"testFindExperts()", "methodnamerefined":"testFindExperts", "methodabbreviation":"edu.ncsu.csc.itrust.action.FindExpertActionTest.testFindExperts", "fullmethod":"edu.ncsu.csc.itrust.action.FindExpertActionTest.testFindExperts()", "classid":103, "classname":"edu.ncsu.csc.itrust.action.FindExpertActionTest", "shortclassname":"FindExpertActionTest", "method":"public void testFindExperts() {\r\n    List<HospitalBean> hospitals = new ArrayList<HospitalBean>();\r\n    HospitalBean realHospital = new HospitalBean();\r\n    hospitals.add(realHospital);\r\n    // Test a single result\r\n    assertTrue(((fea.findExperts(hospitals, \"ob/gyn\").size()) == 1));\r\n}"},
 {"id":565, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":104, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarAction", "shortclassname":"GenerateCalendarAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is viewing the calendar\r\n */\r\npublic GenerateCalendarAction(DAOFactory factory, long loggedInMID) {\r\n    a_action = new ViewMyApptsAction(factory, loggedInMID);\r\n    r_action = new ViewMyRecordsAction(factory, loggedInMID);\r\n    send = new ArrayList<ApptBean>();\r\n    apptTypeDAO = factory.getApptTypeDAO();\r\n}"},
 {"id":566, "methodname":"getApptsTable(int,int)", "methodnamerefined":"getApptsTable", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getApptsTable", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getApptsTable(int,int)", "classid":104, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarAction", "shortclassname":"GenerateCalendarAction", "method":"/**\r\n * Creates a hash table with all of the Appointments to be\r\n * displayed on the calendar for the month and year being viewed.\r\n *\r\n * @param thisMonth\r\n * \t\tThe month of the calendar to be rendered\r\n * @param thisYear\r\n * \t\tThe year of the calendar to be rendered\r\n * @return A Hashtable containing the AppointmentBeans to be rendered\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic Hashtable<Integer, ArrayList<ApptBean>> getApptsTable(int thisMonth, int thisYear) throws SQLException {\r\n    List<ApptBean> appts = a_action.getAllMyAppointments();\r\n    Hashtable<Integer, ArrayList<ApptBean>> atable = new Hashtable<Integer, ArrayList<ApptBean>>();\r\n    Calendar a = Calendar.getInstance();\r\n    for (ApptBean b : appts) {\r\n        a.setTimeInMillis(b.getDate().getTime());\r\n        if (((a.get(Calendar.MONTH)) == thisMonth) && ((a.get(Calendar.YEAR)) == thisYear)) {\r\n            if (!(atable.containsKey(a.get(Calendar.DAY_OF_MONTH))))\r\n                atable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<ApptBean>());\r\n\r\n            ArrayList<ApptBean> l = atable.get(a.get(Calendar.DAY_OF_MONTH));\r\n            l.add(b);\r\n            send.add(b);\r\n            atable.put(a.get(Calendar.DAY_OF_MONTH), l);\r\n        }\r\n    }\r\n    return atable;\r\n}"},
 {"id":567, "methodname":"getConflicts()", "methodnamerefined":"getConflicts", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getConflicts", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getConflicts()", "classid":104, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarAction", "shortclassname":"GenerateCalendarAction", "method":"/**\r\n * Check appointments appearing on the calendar for conflicts\r\n * with other appointments on the calendar.\r\n *\r\n * The array from this method is used to determine what appointments\r\n * will appear in bold on the calendar.\r\n *\r\n * @return An array of items that are in conflict with other items.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic boolean[] getConflicts() throws SQLException {\r\n    boolean[] conflicts = new boolean[send.size()];\r\n    for (int i = 0; i < (send.size()); i++) {\r\n        ApptBean ab = send.get(i);\r\n        long t = ab.getDate().getTime();\r\n        long m = ((apptTypeDAO.getApptType(ab.getApptType()).getDuration()) * 60L) * 1000L;\r\n        Timestamp time = new Timestamp((t + m));\r\n        for (int j = i + 1; j < (send.size()); j++) {\r\n            if (send.get(j).getDate().before(time)) {\r\n                conflicts[i] = true;\r\n                conflicts[j] = true;\r\n            }\r\n        }\r\n    }\r\n    return conflicts;\r\n}"},
 {"id":568, "methodname":"getLabProceduresTable(int,int)", "methodnamerefined":"getLabProceduresTable", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getLabProceduresTable", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getLabProceduresTable(int,int)", "classid":104, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarAction", "shortclassname":"GenerateCalendarAction", "method":"/**\r\n * Creates a hash table with all of the lab procedures to be\r\n * displayed on the calendar for the month and year being viewed.\r\n *\r\n * @param thisMonth\r\n * \t\tThe month of the calendar to be rendered\r\n * @param thisYear\r\n * \t\tThe year of the calendar to be rendered\r\n * @return A Hashtable containing the LabProcedureBeans to be rendered\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic Hashtable<Integer, ArrayList<LabProcedureBean>> getLabProceduresTable(int thisMonth, int thisYear) throws iTrustException {\r\n    List<LabProcedureBean> procs = r_action.getLabs();\r\n    Hashtable<Integer, ArrayList<LabProcedureBean>> ptable = new Hashtable<Integer, ArrayList<LabProcedureBean>>();\r\n    Calendar a = Calendar.getInstance();\r\n    for (LabProcedureBean b : procs) {\r\n        a.setTimeInMillis(b.getTimestamp().getTime());\r\n        if (((a.get(Calendar.MONTH)) == thisMonth) && ((a.get(Calendar.YEAR)) == thisYear)) {\r\n            if (!(ptable.containsKey(a.get(Calendar.DAY_OF_MONTH))))\r\n                ptable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<LabProcedureBean>());\r\n\r\n            ArrayList<LabProcedureBean> l = ptable.get(a.get(Calendar.DAY_OF_MONTH));\r\n            l.add(b);\r\n            ptable.put(a.get(Calendar.DAY_OF_MONTH), l);\r\n        }\r\n    }\r\n    return ptable;\r\n}"},
 {"id":569, "methodname":"getOfficeVisitsTable(int,int)", "methodnamerefined":"getOfficeVisitsTable", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getOfficeVisitsTable", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getOfficeVisitsTable(int,int)", "classid":104, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarAction", "shortclassname":"GenerateCalendarAction", "method":"/**\r\n * Creates a hash table with all of the Office Visits to be\r\n * displayed on the calendar for the month and year being viewed.\r\n *\r\n * @param thisMonth\r\n * \t\tThe month of the calendar to be rendered\r\n * @param thisYear\r\n * \t\tThe year of the calendar to be rendered\r\n * @return A Hashtable containing the OfficeVisitBeans to be rendered\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic Hashtable<Integer, ArrayList<OfficeVisitBean>> getOfficeVisitsTable(int thisMonth, int thisYear) throws iTrustException {\r\n    List<OfficeVisitBean> officeVisits = r_action.getAllOfficeVisits();\r\n    Hashtable<Integer, ArrayList<OfficeVisitBean>> rtable = new Hashtable<Integer, ArrayList<OfficeVisitBean>>();\r\n    Calendar a = Calendar.getInstance();\r\n    for (OfficeVisitBean b : officeVisits) {\r\n        a.setTimeInMillis(b.getVisitDate().getTime());\r\n        if (((a.get(Calendar.MONTH)) == thisMonth) && ((a.get(Calendar.YEAR)) == thisYear)) {\r\n            if (!(rtable.containsKey(a.get(Calendar.DAY_OF_MONTH))))\r\n                rtable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<OfficeVisitBean>());\r\n\r\n            ArrayList<OfficeVisitBean> l = rtable.get(a.get(Calendar.DAY_OF_MONTH));\r\n            l.add(b);\r\n            rtable.put(a.get(Calendar.DAY_OF_MONTH), l);\r\n        }\r\n    }\r\n    return rtable;\r\n}"},
 {"id":570, "methodname":"getSend()", "methodnamerefined":"getSend", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getSend", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.getSend()", "classid":104, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarAction", "shortclassname":"GenerateCalendarAction", "method":"/**\r\n * Return the send request for an AppointmentBean\r\n *\r\n * @return the send request for an AppointmentBean\r\n */\r\npublic List<ApptBean> getSend() {\r\n    return send;\r\n}"},
 {"id":571, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.-init-()", "classid":105, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest", "shortclassname":"GenerateCalendarActionTest", "method":"GenerateCalendarActionTest() {\r\n}"},
 {"id":572, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.setUp()", "classid":105, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest", "shortclassname":"GenerateCalendarActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.action = new GenerateCalendarAction(factory, mId);\r\n}"},
 {"id":573, "methodname":"testGetApptsTable()", "methodnamerefined":"testGetApptsTable", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetApptsTable", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetApptsTable()", "classid":105, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest", "shortclassname":"GenerateCalendarActionTest", "method":"public void testGetApptsTable() throws SQLException {\r\n    Hashtable<Integer, ArrayList<ApptBean>> aTable = action.getApptsTable(Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.YEAR));\r\n    assertTrue(aTable.containsKey(5));\r\n    assertTrue(aTable.containsKey(18));\r\n    assertTrue(aTable.containsKey(28));\r\n}"},
 {"id":574, "methodname":"testGetConflicts()", "methodnamerefined":"testGetConflicts", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetConflicts", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetConflicts()", "classid":105, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest", "shortclassname":"GenerateCalendarActionTest", "method":"public void testGetConflicts() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n    gen.appointmentType();\r\n    Calendar startDate = Calendar.getInstance();\r\n    startDate.set(Calendar.HOUR, 0);\r\n    startDate.setTimeInMillis(((startDate.getTimeInMillis()) + (((1000 * 60) * 60) * 24)));\r\n    ApptBean b = new ApptBean();\r\n    b.setApptType(\"General Checkup\");\r\n    b.setHcp(hcpId);\r\n    b.setPatient(mId);\r\n    b.setDate(new Timestamp(((startDate.getTimeInMillis()) + ((10 * 60) * 1000))));\r\n    b.setComment(null);\r\n    AddApptAction schedAction = new AddApptAction(factory, hcpId);\r\n    try {\r\n        assertTrue(schedAction.addAppt(b, true).startsWith(\"Success\"));\r\n    } catch (FormValidationException e1) {\r\n        fail();\r\n    }\r\n    b = new ApptBean();\r\n    b.setApptType(\"Physical\");\r\n    b.setHcp(hcpId);\r\n    b.setPatient(1L);\r\n    b.setDate(new Timestamp(((startDate.getTimeInMillis()) + ((20 * 60) * 1000))));\r\n    b.setComment(null);\r\n    try {\r\n        assertTrue(schedAction.addAppt(b, true).startsWith(\"Success\"));\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n    b = new ApptBean();\r\n    b.setApptType(\"Colonoscopy\");\r\n    b.setHcp(hcpId);\r\n    b.setPatient(mId);\r\n    b.setDate(new Timestamp(((startDate.getTimeInMillis()) + ((60 * 60) * 1000))));\r\n    b.setComment(null);\r\n    try {\r\n        assertTrue(schedAction.addAppt(b, true).startsWith(\"Success\"));\r\n    } catch (FormValidationException e) {\r\n        fail();\r\n    }\r\n    this.action = new GenerateCalendarAction(factory, hcpId);\r\n    action.getApptsTable(startDate.get(Calendar.MONTH), startDate.get(Calendar.YEAR));\r\n    boolean[] conflicts = action.getConflicts();\r\n    assertTrue(conflicts[0]);\r\n    assertTrue(conflicts[1]);\r\n    assertFalse(conflicts[2]);\r\n}"},
 {"id":575, "methodname":"testGetLabProceduresTable()", "methodnamerefined":"testGetLabProceduresTable", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetLabProceduresTable", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetLabProceduresTable()", "classid":105, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest", "shortclassname":"GenerateCalendarActionTest", "method":"public void testGetLabProceduresTable() throws iTrustException {\r\n    Hashtable<Integer, ArrayList<LabProcedureBean>> lTable = action.getLabProceduresTable(4, 2007);\r\n    assertTrue(lTable.containsKey(19));\r\n}"},
 {"id":576, "methodname":"testGetOfficeVisitsTable()", "methodnamerefined":"testGetOfficeVisitsTable", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetOfficeVisitsTable", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetOfficeVisitsTable()", "classid":105, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest", "shortclassname":"GenerateCalendarActionTest", "method":"public void testGetOfficeVisitsTable() throws iTrustException {\r\n    this.action = new GenerateCalendarAction(factory, mId);\r\n    Hashtable<Integer, ArrayList<OfficeVisitBean>> oTable = action.getOfficeVisitsTable(5, 2007);\r\n    assertTrue(oTable.containsKey(9));\r\n    assertTrue(oTable.containsKey(10));\r\n}"},
 {"id":577, "methodname":"testGetSend()", "methodnamerefined":"testGetSend", "methodabbreviation":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetSend", "fullmethod":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest.testGetSend()", "classid":105, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarActionTest", "shortclassname":"GenerateCalendarActionTest", "method":"public void testGetSend() throws SQLException {\r\n    action.getApptsTable(Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.YEAR));\r\n    List<ApptBean> aList = action.getSend();\r\n    SimpleDateFormat year = new SimpleDateFormat(\"yyyy\");\r\n    SimpleDateFormat month = new SimpleDateFormat(\"-MM\");\r\n    Date now = Calendar.getInstance().getTime();\r\n    Timestamp FirstDayOfMonth = Timestamp.valueOf((((\"\" + (year.format(now))) + (month.format(now))) + \"-01 00:00:00\"));\r\n    Timestamp LastDayOfMonth = Timestamp.valueOf((((\"\" + (year.format(now))) + (month.format(now))) + \"-31 23:59:59\"));\r\n    for (int i = 0; i < (aList.size()); i++) {\r\n        assertTrue(aList.get(i).getDate().after(FirstDayOfMonth));\r\n        assertTrue(aList.get(i).getDate().before(LastDayOfMonth));\r\n    }\r\n}"},
 {"id":578, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetUserNameAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GetUserNameAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":106, "classname":"edu.ncsu.csc.itrust.action.GetUserNameAction", "shortclassname":"GetUserNameAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used for creating the DAOs for this action.\r\n */\r\npublic GetUserNameAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":579, "methodname":"getUserName(java.lang.String)", "methodnamerefined":"getUserName", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetUserNameAction.getUserName", "fullmethod":"edu.ncsu.csc.itrust.action.GetUserNameAction.getUserName(java.lang.String)", "classid":106, "classname":"edu.ncsu.csc.itrust.action.GetUserNameAction", "shortclassname":"GetUserNameAction", "method":"/**\r\n * Returns the persons name that matches the inputMID param\r\n *\r\n * @param inputMID\r\n * \t\tThe MID to look up.\r\n * @return the persons name\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getUserName(String inputMID) throws iTrustException {\r\n    try {\r\n        long mid = Long.valueOf(inputMID);\r\n        return factory.getAuthDAO().getUserName(mid);\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"MID not in correct form\");\r\n    }\r\n}"},
 {"id":580, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetUserNameActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GetUserNameActionTest.-init-()", "classid":107, "classname":"edu.ncsu.csc.itrust.action.GetUserNameActionTest", "shortclassname":"GetUserNameActionTest", "method":"GetUserNameActionTest() {\r\n}"},
 {"id":581, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetUserNameActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.GetUserNameActionTest.setUp()", "classid":107, "classname":"edu.ncsu.csc.itrust.action.GetUserNameActionTest", "shortclassname":"GetUserNameActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":582, "methodname":"testCorrectFormat()", "methodnamerefined":"testCorrectFormat", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetUserNameActionTest.testCorrectFormat", "fullmethod":"edu.ncsu.csc.itrust.action.GetUserNameActionTest.testCorrectFormat()", "classid":107, "classname":"edu.ncsu.csc.itrust.action.GetUserNameActionTest", "shortclassname":"GetUserNameActionTest", "method":"public void testCorrectFormat() throws Exception {\r\n    gen.hcp0();\r\n    assertEquals(\"Kelly Doctor\", new GetUserNameAction(factory).getUserName(\"9000000000\"));\r\n}"},
 {"id":583, "methodname":"testWrongFormat()", "methodnamerefined":"testWrongFormat", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetUserNameActionTest.testWrongFormat", "fullmethod":"edu.ncsu.csc.itrust.action.GetUserNameActionTest.testWrongFormat()", "classid":107, "classname":"edu.ncsu.csc.itrust.action.GetUserNameActionTest", "shortclassname":"GetUserNameActionTest", "method":"public void testWrongFormat() throws Exception {\r\n    gen.hcp0();\r\n    try {\r\n        new GetUserNameAction(factory).getUserName(\"90000000aaa01\");\r\n        fail(\"Exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"MID not in correct form\", e.getMessage());\r\n    }\r\n}"},
 {"id":584, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.-init-(java.lang.String)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"private ReminderType(String typeName) {\r\n    this.typeName = typeName;\r\n}"},
 {"id":585, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tMID of the person who is logged in\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic GetVisitRemindersAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    visitReminderDAO = factory.getVisitRemindersDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n}"},
 {"id":586, "methodname":"checkImmunizations(long)", "methodnamerefined":"checkImmunizations", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.checkImmunizations", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.checkImmunizations(long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks a patient to see what immunizations they need\r\n *\r\n * @param pid\r\n * \t\tpatient to be checked\r\n * @return patient list of those lacking immunizations according to the schedule\r\n */\r\nprivate String checkImmunizations(long pid) throws iTrustException {\r\n    String reason = \"\";\r\n    List<ProcedureBean> procs = patientDAO.getProcedures(pid);\r\n    PatientBean patient = patientDAO.getPatient(pid);\r\n    // long patientAge = patient.getAgeInWeeks();\r\n    Date patientDOB = patient.getDateOfBirth();\r\n    Gender gen = patient.getGender();\r\n    int hepB = 0;\r\n    long hepBTime = 0;\r\n    int rota = 0;\r\n    long rotaTime = 0;\r\n    int diptet = 0;\r\n    long deptetTime = 0;\r\n    int haemoflu = 0;\r\n    long haemofluTime = 0;\r\n    long haemofluTimeFirst = 0;\r\n    int pneumo = 0;\r\n    long pneumoTime = 0;\r\n    long pneumofluTimeFirst = 0;\r\n    int polio = 0;\r\n    long polioTime = 0;\r\n    int measles = 0;\r\n    long measlesTime = 0;\r\n    int varicella = 0;\r\n    long varicellaTime = 0;\r\n    int hepA = 0;\r\n    long hepATime = 0;\r\n    int hpv = 0;\r\n    long hpvTime = 0;\r\n    for (ProcedureBean proc : procs) {\r\n        String cpt = proc.getCPTCode();\r\n        // Hep B (90371)\r\n        if (cpt.equals(\"90371\")) {\r\n            hepB++;\r\n            hepBTime = proc.getDate().getTime();\r\n        } else// Rotavirus (90681)\r\n\r\n            if (cpt.equals(\"90681\")) {\r\n                rota++;\r\n                rotaTime = proc.getDate().getTime();\r\n            } else// Diptheria, Tetanus, Pertussis (90696)\r\n\r\n                if (cpt.equals(\"90696\")) {\r\n                    diptet++;\r\n                    deptetTime = proc.getDate().getTime();\r\n                } else// Haemophilus influenza (90645)\r\n\r\n                    if (cpt.equals(\"90645\")) {\r\n                        if (0 == haemoflu)\r\n                            haemofluTimeFirst = proc.getDate().getTime();\r\n\r\n                        haemoflu++;\r\n                        haemofluTime = proc.getDate().getTime();\r\n                    } else// Pneumococcal (90669)\r\n\r\n                        if (cpt.equals(\"90669\")) {\r\n                            if (0 == pneumo)\r\n                                pneumofluTimeFirst = proc.getDate().getTime();\r\n\r\n                            pneumo++;\r\n                            pneumoTime = proc.getDate().getTime();\r\n                        } else// Poliovirus (90712)\r\n\r\n                            if (cpt.equals(\"90712\")) {\r\n                                polio++;\r\n                                polioTime = proc.getDate().getTime();\r\n                            } else// Measles, Mumps, Rubella (90707)\r\n\r\n                                if (cpt.equals(\"90707\")) {\r\n                                    measles++;\r\n                                    measlesTime = proc.getDate().getTime();\r\n                                } else// Varicella (90396)\r\n\r\n                                    if (cpt.equals(\"90396\")) {\r\n                                        varicella++;\r\n                                        varicellaTime = proc.getDate().getTime();\r\n                                    } else// Hep A (90633)\r\n\r\n                                        if (cpt.equals(\"90633\")) {\r\n                                            hepA++;\r\n                                            hepATime = proc.getDate().getTime();\r\n                                        } else// Human Papillomaavirus (90649)\r\n\r\n                                            if (cpt.equals(\"90649\")) {\r\n                                                hpv++;\r\n                                                hpvTime = proc.getDate().getTime();\r\n                                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    if (3 > hepB) {\r\n        reason += GetVisitRemindersAction.testHepB(hepB, patientDOB, hepBTime);\r\n    }\r\n    if (3 > rota) {\r\n        reason += GetVisitRemindersAction.testRotaVirus(rota, patientDOB, rotaTime);\r\n    }\r\n    if (6 > diptet) {\r\n        reason += GetVisitRemindersAction.testDipTet(diptet, patientDOB, deptetTime);\r\n    }\r\n    if (3 > haemoflu) {\r\n        reason += GetVisitRemindersAction.testHaemoFlu(haemoflu, patientDOB, haemofluTime, haemofluTimeFirst);\r\n    }\r\n    if (4 > pneumo) {\r\n        reason += GetVisitRemindersAction.testPneumo(pneumo, patientDOB, pneumoTime, pneumofluTimeFirst);\r\n    }\r\n    if (3 > polio) {\r\n        reason += GetVisitRemindersAction.testPolio(polio, patientDOB, polioTime);\r\n    }\r\n    if (2 > measles) {\r\n        reason += GetVisitRemindersAction.testMeasles(measles, patientDOB, measlesTime);\r\n    }\r\n    if (2 > varicella) {\r\n        reason += GetVisitRemindersAction.testVaricella(varicella, patientDOB, varicellaTime);\r\n    }\r\n    if (2 > hepA) {\r\n        reason += GetVisitRemindersAction.testHepA(hepA, patientDOB, hepATime);\r\n    }\r\n    if ((3 > hpv) && (gen.getName().equals(\"Female\"))) {\r\n        reason += GetVisitRemindersAction.testHPV(hpv, patientDOB, hpvTime);\r\n    }\r\n    if ((reason.length()) > 2)\r\n        return reason.substring(0, ((reason.length()) - 2));\r\n\r\n    return reason;\r\n}"},
 {"id":587, "methodname":"endBefore(java.util.Date,java.util.Date,int,int,int)", "methodnamerefined":"endBefore", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.endBefore", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.endBefore(java.util.Date,java.util.Date,int,int,int)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"private static boolean endBefore(Date startTime, Date endTime, int years, int months, int weeks) {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(startTime);\r\n    cal.add(Calendar.YEAR, years);\r\n    cal.add(Calendar.MONTH, months);\r\n    cal.add(Calendar.HOUR, ((weeks * 7) * 24));\r\n    return (cal.getTime().compareTo(endTime)) <= 0;// startTime.before(endTime);\r\n\r\n}"},
 {"id":588, "methodname":"firstDoseAfter(java.util.Date,java.util.Date,int,int,int)", "methodnamerefined":"firstDoseAfter", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.firstDoseAfter", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.firstDoseAfter(java.util.Date,java.util.Date,int,int,int)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"private static boolean firstDoseAfter(Date patientDOB, Date ageFirst, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, ageFirst, years, months, weeks);\r\n}"},
 {"id":589, "methodname":"getImmunizationNeeders(long)", "methodnamerefined":"getImmunizationNeeders", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.getImmunizationNeeders", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.getImmunizationNeeders(long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Gets a list of anyone who need immunizations\r\n *\r\n * @param mid\r\n * \t\tthe HCP whose patients are being checked\r\n * @return a list of all the people who need immunizations--done in a visit reminder\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate List<VisitReminderReturnForm> getImmunizationNeeders(long mid) throws iTrustException {\r\n    List<VisitReminderReturnForm> formList;\r\n    List<VisitReminderReturnForm> needList = new ArrayList<VisitReminderReturnForm>();\r\n    String reason = \"\";\r\n    // Get list of patients that designate this HCP\r\n    formList = visitReminderDAO.getPatients(mid);\r\n    for (VisitReminderReturnForm r : formList) {\r\n        reason = checkImmunizations(r.getPatientID());\r\n        if (0 < (reason.length())) {\r\n            needList.add(r);\r\n            r.addVisitFlag(new VisitFlag(VisitFlag.IMMUNIZATION, reason));\r\n        }\r\n    }\r\n    return needList;\r\n}"},
 {"id":590, "methodname":"getVisitReminders(edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType)", "methodnamerefined":"getVisitReminders", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.getVisitReminders", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.getVisitReminders(edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Returns a list of VisitReminderReturnForms for the type passed in as a param\r\n *\r\n * @param type\r\n * \t\tthe ReminderType\r\n * @return the list of VisitReminderReturnForms\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<VisitReminderReturnForm> getVisitReminders(GetVisitRemindersAction.ReminderType type) throws FormValidationException, iTrustException {\r\n    if (null == type)\r\n        throw new iTrustException(\"Reminder Type DNE\");\r\n\r\n    switch (type) {\r\n        case DIAGNOSED_CARE_NEEDERS :\r\n            return visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID);\r\n            // return stripDupes(visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID));\r\n        case FLU_SHOT_NEEDERS :\r\n            return visitReminderDAO.getFluShotDelinquents(loggedInMID);\r\n        case IMMUNIZATION_NEEDERS :\r\n            return getImmunizationNeeders(loggedInMID);\r\n        default :\r\n            throw new iTrustException(\"Reminder Type DNE\");\r\n    }\r\n}"},
 {"id":591, "methodname":"olderThan(java.util.Date,int,int,int)", "methodnamerefined":"olderThan", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.olderThan", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.olderThan(java.util.Date,int,int,int)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"private static boolean olderThan(Date patientDOB, int years, int months, int weeks) {\r\n    return GetVisitRemindersAction.endBefore(patientDOB, new Date(), years, months, weeks);\r\n}"},
 {"id":592, "methodname":"testDipTet(int,java.util.Date,long)", "methodnamerefined":"testDipTet", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testDipTet", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testDipTet(int,java.util.Date,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization\r\n *\r\n * @param count\r\n * \t\twhich immunization they are on\r\n * @param patientAge\r\n * \t\thow old the patient is\r\n * @param time\r\n * \t\twhat the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testDipTet(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90696 Diphtheria, Tetanus, Pertussis (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90696 Diphtheria, Tetanus, Pertussis (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks))\r\n                    reason += \"90696 Diphtheria, Tetanus, Pertussis (6 months), \";\r\n\r\n            } else\r\n                if (3 == count) {\r\n                    if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 15)) && (26 <= weeks))\r\n                        reason += \"90696 Diphtheria, Tetanus, Pertussis (15 weeks), \";\r\n\r\n                } else\r\n                    if (4 == count) {\r\n                        if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (26 <= weeks))\r\n                            reason += \"90696 Diphtheria, Tetanus, Pertussis (4 years), \";\r\n\r\n                    } else\r\n                        if (5 == count) {\r\n                            if ((GetVisitRemindersAction.olderThan(patientDOB, 11, 0, 0)) && (260 <= weeks))\r\n                                reason += \"90696 Diphtheria, Tetanus, Pertussis (11 years), \";\r\n\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    return reason;\r\n}"},
 {"id":593, "methodname":"testHPV(int,java.util.Date,long)", "methodnamerefined":"testHPV", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHPV", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHPV(int,java.util.Date,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the HPV immunization\r\n *\r\n * @param count\t\t\thow\r\n * \t\tmany HPV immunizations she has already had\r\n * @param patientAge\thow\r\n * \t\told the patient is, in weeks\r\n * @param time\t\t\tdate\r\n * \t\tof the last procedure\r\n * @return the\t\t\treason the immunization should be given, including required immunization age\r\n */\r\npublic static String testHPV(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    new Date();\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 9, 0, 0))\r\n            reason += \"90649 Human Papillomavirus (9 years), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 9, 2, 0)) && (8 <= weeks))\r\n                reason += \"90649 Human Papillomavirus (9 years, 2 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 9, 6, 0)) && (16 <= weeks))\r\n                    reason += \"90649 Human Papillomavirus (9 years, 6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}"},
 {"id":594, "methodname":"testHaemoFlu(int,java.util.Date,long,long)", "methodnamerefined":"testHaemoFlu", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHaemoFlu", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHaemoFlu(int,java.util.Date,long,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the Haemophilus Infulenzae immunization\r\n *\r\n * @param count\r\n * \t\twhich immunization they are on\r\n * @param patientAge\r\n * \t\thow old the patient is\r\n * @param time\r\n * \t\twhat the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHaemoFlu(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    Date firstDose = new Date(firstDoseTime);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90645 Haemophilus influenzae (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90645 Haemophilus influenzae (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90645 Haemophilus influenzae (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90645 Haemophilus influenzae (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}"},
 {"id":595, "methodname":"testHepA(int,java.util.Date,long)", "methodnamerefined":"testHepA", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepA", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepA(int,java.util.Date,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the Hepatits A immunization\r\n *\r\n * @param count\r\n * \t\twhich immunization they are on\r\n * @param patientAge\r\n * \t\thow old the patient is\r\n * @param time\r\n * \t\twhat the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHepA(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90633 Hepatits A (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 1, 6, 0)) && (26 <= weeks))\r\n                reason += \"90633 Hepatits A (18 months), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}"},
 {"id":596, "methodname":"testHepB(int,java.util.Date,long)", "methodnamerefined":"testHepB", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepB", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testHepB(int,java.util.Date,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the Hepatitis B immunization\r\n *\r\n * @param count\r\n * \t\twhich immunization they are on\r\n * @param patientAge\r\n * \t\thow old the patient is\r\n * @param time\r\n * \t\twhat the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testHepB(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 0))\r\n            reason += \"90371 Hepatitis B (birth), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 1, 0)) && (4 <= weeks))\r\n                reason += \"90371 Hepatitis B (1 month), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (8 <= weeks))\r\n                    reason += \"90371 Hepatitis B (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}"},
 {"id":597, "methodname":"testMeasles(int,java.util.Date,long)", "methodnamerefined":"testMeasles", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testMeasles", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testMeasles(int,java.util.Date,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization\r\n *\r\n * @param count\r\n * \t\twhich immunization they are on\r\n * @param patientAge\r\n * \t\thow old the patient is\r\n * @param time\r\n * \t\twhat the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testMeasles(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90707 Measles, Mumps, Rubekka (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (12 <= weeks))\r\n                reason += \"90707 Measles, Mumps, Rubekka (4 years), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}"},
 {"id":598, "methodname":"testPneumo(int,java.util.Date,long,long)", "methodnamerefined":"testPneumo", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPneumo", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPneumo(int,java.util.Date,long,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the Pneumococcal immunization\r\n *\r\n * @param count\r\n * \t\twhich immunization they are on\r\n * @param patientAge\r\n * \t\thow old the patient is\r\n * @param time\r\n * \t\twhat the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testPneumo(int count, Date patientDOB, long time, long firstDoseTime) {\r\n    String reason = \"\";\r\n    Date firstDose = new Date(firstDoseTime);\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    // long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7));\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90669 Pneumococcal (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0)))) && (4 <= weeks))\r\n                reason += \"90669 Pneumococcal (4 months), \";\r\n            else\r\n                if ((((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 2, 0)))) && (8 <= weeks))\r\n                    reason += \"90669 Pneumococcal (4 months), \";\r\n\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                    reason += \"90669 Pneumococcal (6 months), \";\r\n\r\n            } else\r\n                if (3 == count) {\r\n                    if (((GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0)) && (8 <= weeks)) && (!(GetVisitRemindersAction.firstDoseAfter(patientDOB, firstDose, 1, 0, 0))))\r\n                        reason += \"90669 Pneumococcal (12 months), \";\r\n\r\n                }\r\n\r\n\r\n\r\n    return reason;\r\n}"},
 {"id":599, "methodname":"testPolio(int,java.util.Date,long)", "methodnamerefined":"testPolio", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPolio", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testPolio(int,java.util.Date,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the Polio immunization\r\n *\r\n * @param count\r\n * \t\twhich immunization they are on\r\n * @param patientAge\r\n * \t\thow old the patient is\r\n * @param time\r\n * \t\twhat the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testPolio(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90712 Poliovirus (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90712 Poliovirus (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if (GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0))\r\n                    reason += \"90712 Poliovirus (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}"},
 {"id":600, "methodname":"testRotaVirus(int,java.util.Date,long)", "methodnamerefined":"testRotaVirus", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testRotaVirus", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testRotaVirus(int,java.util.Date,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the Rotavirus immunization\r\n *\r\n * @param count\r\n * \t\twhich immunization they are on\r\n * @param patientAge\r\n * \t\thow old the patient is\r\n * @param time\r\n * \t\twhat the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testRotaVirus(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 0, 0, 6))\r\n            reason += \"90681 Rotavirus (6 weeks), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 4, 0)) && (4 <= weeks))\r\n                reason += \"90681 Rotavirus (4 months), \";\r\n\r\n        } else\r\n            if (2 == count) {\r\n                if ((GetVisitRemindersAction.olderThan(patientDOB, 0, 6, 0)) && (4 <= weeks))\r\n                    reason += \"90681 Rotavirus (6 months), \";\r\n\r\n            }\r\n\r\n\r\n    return reason;\r\n}"},
 {"id":601, "methodname":"testVaricella(int,java.util.Date,long)", "methodnamerefined":"testVaricella", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testVaricella", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.testVaricella(int,java.util.Date,long)", "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "shortclassname":"GetVisitRemindersAction", "method":"/**\r\n * Checks to see if a patient needs the Varicella immunization\r\n *\r\n * @param count\r\n * \t\twhich immunization they are on\r\n * @param patientAge\r\n * \t\thow old the patient is\r\n * @param time\r\n * \t\twhat the current date is\r\n * @return when the immunization should be given\r\n */\r\npublic static String testVaricella(int count, Date patientDOB, long time) {\r\n    String reason = \"\";\r\n    long weeks = ((Calendar.getInstance().getTimeInMillis()) - time) / (GetVisitRemindersAction.WEEK_IN_MILLIS);\r\n    if (0 == count) {\r\n        if (GetVisitRemindersAction.olderThan(patientDOB, 1, 0, 0))\r\n            reason += \"90396 Varicella (12 months), \";\r\n\r\n    } else\r\n        if (1 == count) {\r\n            if ((GetVisitRemindersAction.olderThan(patientDOB, 4, 0, 0)) && (12 <= weeks))\r\n                reason += \"90396 Varicella (4 years), \";\r\n\r\n        }\r\n\r\n    return reason;\r\n}"},
 {"id":602, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType.-init-(java.lang.String)", "classid":108, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType", "shortclassname":"GetVisitRemindersAction$ReminderType", "method":"private ReminderType(String typeName) {\r\n    this.typeName = typeName;\r\n}"},
 {"id":603, "methodname":"getReminderType(java.lang.String)", "methodnamerefined":"getReminderType", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType.getReminderType", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType.getReminderType(java.lang.String)", "classid":108, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType", "shortclassname":"GetVisitRemindersAction$ReminderType", "method":"/**\r\n * Gets the ReminderType for the name passed as a param\r\n *\r\n * @param name\r\n * \t\t\r\n * @return the ReminderType associated with the name\r\n */\r\npublic static GetVisitRemindersAction.ReminderType getReminderType(String name) {\r\n    return GetVisitRemindersAction.ReminderType.map.get(name);\r\n}"},
 {"id":604, "methodname":"getTypeName()", "methodnamerefined":"getTypeName", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType.getTypeName", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType.getTypeName()", "classid":108, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType", "shortclassname":"GetVisitRemindersAction$ReminderType", "method":"/**\r\n * Returns the type name as a string\r\n *\r\n * @return \r\n */\r\npublic String getTypeName() {\r\n    return typeName;\r\n}"},
 {"id":605, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.-init-()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"GetVisitRemindersActionTest() {\r\n}"},
 {"id":606, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.setUp()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":607, "methodname":"testBadReminderType()", "methodnamerefined":"testBadReminderType", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testBadReminderType", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testBadReminderType()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testBadReminderType() throws Exception {\r\n    // Test that a null ReminderType is not allowed\r\n    // TODO: Check other failure inputs\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    try {\r\n        action.getVisitReminders(null);\r\n        fail(\"testBadReminderType: bad reminder type not caught\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Reminder Type DNE\", e.getMessage());\r\n    }\r\n}"},
 {"id":608, "methodname":"testGetImmunizationNeeders()", "methodnamerefined":"testGetImmunizationNeeders", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetImmunizationNeeders", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetImmunizationNeeders()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testGetImmunizationNeeders() throws FormValidationException, iTrustException, Exception {\r\n    // Test that StandardData starts with two immunization needers\r\n    // TODO: test the contents of the returned list.\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    List<VisitReminderReturnForm> vrList = action.getVisitReminders(GetVisitRemindersAction.ReminderType.IMMUNIZATION_NEEDERS);\r\n    assertEquals(2, vrList.size());\r\n}"},
 {"id":609, "methodname":"testGetReminderType()", "methodnamerefined":"testGetReminderType", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetReminderType", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetReminderType()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testGetReminderType() throws Exception {\r\n    // Test that Enum->String translation works properly\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    assertEquals(GetVisitRemindersAction.ReminderType.DIAGNOSED_CARE_NEEDERS, GetVisitRemindersAction.ReminderType.getReminderType(\"Diagnosed Care Needers\"));\r\n}"},
 {"id":610, "methodname":"testGetVisitReminders_AlivePatients()", "methodnamerefined":"testGetVisitReminders_AlivePatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetVisitReminders_AlivePatients", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetVisitReminders_AlivePatients()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testGetVisitReminders_AlivePatients() throws Exception {\r\n    gen.hcp0();\r\n    gen.aliveRecurringPatients();\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    assertEquals(1, action.getVisitReminders(GetVisitRemindersAction.ReminderType.FLU_SHOT_NEEDERS).size());\r\n    assertEquals(1, action.getVisitReminders(GetVisitRemindersAction.ReminderType.DIAGNOSED_CARE_NEEDERS).size());\r\n    assertEquals(1, action.getVisitReminders(GetVisitRemindersAction.ReminderType.IMMUNIZATION_NEEDERS).size());\r\n}"},
 {"id":611, "methodname":"testGetVisitReminders_CorrectDateOfRecentVisit()", "methodnamerefined":"testGetVisitReminders_CorrectDateOfRecentVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetVisitReminders_CorrectDateOfRecentVisit", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetVisitReminders_CorrectDateOfRecentVisit()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testGetVisitReminders_CorrectDateOfRecentVisit() throws Exception {\r\n    gen.hcp0();\r\n    gen.aliveRecurringPatients();\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n    Calendar twoYrsAgo = Calendar.getInstance();\r\n    twoYrsAgo.add(Calendar.YEAR, (-2));\r\n    List<VisitReminderReturnForm> vReminders = action.getVisitReminders(GetVisitRemindersAction.ReminderType.DIAGNOSED_CARE_NEEDERS);\r\n    String date = \"\";\r\n    for (VisitFlag vf : vReminders.get(0).getVisitFlags()) {\r\n        if (vf.getType().equals(VisitFlag.LAST_VISIT)) {\r\n            date = vf.getValue();\r\n        }\r\n    }\r\n    assertEquals(sdf.format(twoYrsAgo.getTime()), date);\r\n}"},
 {"id":612, "methodname":"testGetVisitReminders_DeadPatients()", "methodnamerefined":"testGetVisitReminders_DeadPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetVisitReminders_DeadPatients", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetVisitReminders_DeadPatients()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testGetVisitReminders_DeadPatients() throws Exception {\r\n    gen.hcp0();\r\n    gen.deadRecurringPatients();\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    assertEquals(0, action.getVisitReminders(GetVisitRemindersAction.ReminderType.FLU_SHOT_NEEDERS).size());\r\n    assertEquals(0, action.getVisitReminders(GetVisitRemindersAction.ReminderType.DIAGNOSED_CARE_NEEDERS).size());\r\n    assertEquals(0, action.getVisitReminders(GetVisitRemindersAction.ReminderType.IMMUNIZATION_NEEDERS).size());\r\n}"},
 {"id":613, "methodname":"testGetVisitReminders_Diagnosed_OldAndRecentVisit()", "methodnamerefined":"testGetVisitReminders_Diagnosed_OldAndRecentVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetVisitReminders_Diagnosed_OldAndRecentVisit", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testGetVisitReminders_Diagnosed_OldAndRecentVisit()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testGetVisitReminders_Diagnosed_OldAndRecentVisit() throws Exception {\r\n    gen.hcp0();\r\n    gen.diagnosedPatient_OldAndNewVisit();\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    // Patient had a visit over a year ago. Make sure that he isnt given a reminder for this year\r\n    // since he also had a visit 3 months ago.\r\n    assertEquals(0, action.getVisitReminders(GetVisitRemindersAction.ReminderType.DIAGNOSED_CARE_NEEDERS).size());\r\n}"},
 {"id":614, "methodname":"testNoSubAction()", "methodnamerefined":"testNoSubAction", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testNoSubAction", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testNoSubAction()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testNoSubAction() throws Exception {\r\n    // Test that standardData creates an initial 3 visit reminders\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    // Returns reminders for NoRecords Has, Bad Horse, Care Needs, and Random Person\r\n    assertEquals(4, action.getVisitReminders(GetVisitRemindersAction.ReminderType.FLU_SHOT_NEEDERS).size());\r\n}"},
 {"id":615, "methodname":"testNormalReturn()", "methodnamerefined":"testNormalReturn", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testNormalReturn", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testNormalReturn()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testNormalReturn() throws Exception {\r\n    // Test that no exceptions are thrown on method call\r\n    // TODO: check valid data returns\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    action.getVisitReminders(GetVisitRemindersAction.ReminderType.DIAGNOSED_CARE_NEEDERS);\r\n    action.getVisitReminders(GetVisitRemindersAction.ReminderType.FLU_SHOT_NEEDERS);\r\n}"},
 {"id":616, "methodname":"testTestDipTet()", "methodnamerefined":"testTestDipTet", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestDipTet", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestDipTet()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestDipTet() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.HOUR, (((-6) * 7) * 24));\r\n    assertEquals(\"90696 Diphtheria, Tetanus, Pertussis (6 weeks), \", GetVisitRemindersAction.testDipTet(0, cal.getTime(), 0L));\r\n    cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, (-4));\r\n    assertEquals(\"90696 Diphtheria, Tetanus, Pertussis (4 months), \", GetVisitRemindersAction.testDipTet(1, cal.getTime(), 0L));\r\n    cal.add(Calendar.MONTH, (-2));\r\n    assertEquals(\"90696 Diphtheria, Tetanus, Pertussis (6 months), \", GetVisitRemindersAction.testDipTet(2, cal.getTime(), 0L));\r\n    cal = Calendar.getInstance();\r\n    cal.add(Calendar.HOUR, (((-15) * 7) * 24));\r\n    assertEquals(\"90696 Diphtheria, Tetanus, Pertussis (15 weeks), \", GetVisitRemindersAction.testDipTet(3, cal.getTime(), 0L));\r\n    cal = Calendar.getInstance();\r\n    cal.add(Calendar.YEAR, (-4));\r\n    assertEquals(\"90696 Diphtheria, Tetanus, Pertussis (4 years), \", GetVisitRemindersAction.testDipTet(4, cal.getTime(), 0L));\r\n    cal.add(Calendar.YEAR, (-7));\r\n    assertEquals(\"90696 Diphtheria, Tetanus, Pertussis (11 years), \", GetVisitRemindersAction.testDipTet(5, cal.getTime(), 0L));\r\n}"},
 {"id":617, "methodname":"testTestHPV()", "methodnamerefined":"testTestHPV", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestHPV", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestHPV()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestHPV() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.YEAR, (-9));\r\n    assertEquals(\"90649 Human Papillomavirus (9 years), \", GetVisitRemindersAction.testHPV(0, cal.getTime(), 0L));\r\n    cal.add(Calendar.MONTH, (-1));\r\n    assertEquals(\"90649 Human Papillomavirus (9 years), \", GetVisitRemindersAction.testHPV(0, cal.getTime(), 0L));\r\n    cal.add(Calendar.MONTH, (-1));\r\n    assertEquals(\"90649 Human Papillomavirus (9 years, 2 months), \", GetVisitRemindersAction.testHPV(1, cal.getTime(), 0L));\r\n    cal.add(Calendar.MONTH, (-4));\r\n    assertEquals(\"90649 Human Papillomavirus (9 years, 6 months), \", GetVisitRemindersAction.testHPV(2, cal.getTime(), 0L));\r\n}"},
 {"id":618, "methodname":"testTestHaemoFlu()", "methodnamerefined":"testTestHaemoFlu", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestHaemoFlu", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestHaemoFlu()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestHaemoFlu() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.HOUR, (((-6) * 7) * 24));\r\n    assertEquals(\"90645 Haemophilus influenzae (6 weeks), \", GetVisitRemindersAction.testHaemoFlu(0, cal.getTime(), 0L, 0L));\r\n    cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, (-4));\r\n    assertEquals(\"90645 Haemophilus influenzae (4 months), \", GetVisitRemindersAction.testHaemoFlu(1, cal.getTime(), 0L, 0L));\r\n    cal.add(Calendar.MONTH, (-2));\r\n    assertEquals(\"90645 Haemophilus influenzae (6 months), \", GetVisitRemindersAction.testHaemoFlu(2, cal.getTime(), 0L, 0L));\r\n}"},
 {"id":619, "methodname":"testTestHepA()", "methodnamerefined":"testTestHepA", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestHepA", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestHepA()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestHepA() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.YEAR, (-1));\r\n    assertEquals(\"90633 Hepatits A (12 months), \", GetVisitRemindersAction.testHepA(0, cal.getTime(), 0L));\r\n    cal.add(Calendar.MONTH, (-6));\r\n    assertEquals(\"90633 Hepatits A (18 months), \", GetVisitRemindersAction.testHepA(1, cal.getTime(), 0L));\r\n}"},
 {"id":620, "methodname":"testTestHepB()", "methodnamerefined":"testTestHepB", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestHepB", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestHepB()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestHepB() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    assertEquals(\"90371 Hepatitis B (birth), \", GetVisitRemindersAction.testHepB(0, cal.getTime(), 0L));\r\n    cal.add(Calendar.MONTH, (-1));\r\n    assertEquals(\"90371 Hepatitis B (1 month), \", GetVisitRemindersAction.testHepB(1, cal.getTime(), 0L));\r\n    cal.add(Calendar.MONTH, (-5));\r\n    assertEquals(\"90371 Hepatitis B (6 months), \", GetVisitRemindersAction.testHepB(2, cal.getTime(), 0L));\r\n}"},
 {"id":621, "methodname":"testTestMeasles()", "methodnamerefined":"testTestMeasles", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestMeasles", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestMeasles()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestMeasles() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.YEAR, (-1));\r\n    assertEquals(\"90707 Measles, Mumps, Rubekka (12 months), \", GetVisitRemindersAction.testMeasles(0, cal.getTime(), 0L));\r\n    cal.add(Calendar.YEAR, (-3));\r\n    assertEquals(\"90707 Measles, Mumps, Rubekka (4 years), \", GetVisitRemindersAction.testMeasles(1, cal.getTime(), 0L));\r\n}"},
 {"id":622, "methodname":"testTestPneumo()", "methodnamerefined":"testTestPneumo", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestPneumo", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestPneumo()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestPneumo() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.HOUR, (((-6) * 7) * 24));\r\n    assertEquals(\"90669 Pneumococcal (6 weeks), \", GetVisitRemindersAction.testPneumo(0, cal.getTime(), 0L, 0L));\r\n    cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, (-4));\r\n    assertEquals(\"90669 Pneumococcal (4 months), \", GetVisitRemindersAction.testPneumo(1, cal.getTime(), 0L, 0L));\r\n    // assertEquals(\"90669 Pneumococcal (6 months) \", GetVisitRemindersAction.testPneumo(2, 26L, 0L));\r\n    // assertEquals(\"90669 Pneumococcal (12 months) \", GetVisitRemindersAction.testPneumo(2, 52L, 0L));\r\n}"},
 {"id":623, "methodname":"testTestPolio()", "methodnamerefined":"testTestPolio", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestPolio", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestPolio()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestPolio() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.HOUR, (((-6) * 7) * 24));\r\n    assertEquals(\"90712 Poliovirus (6 weeks), \", GetVisitRemindersAction.testPolio(0, cal.getTime(), 0L));\r\n    cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, (-4));\r\n    assertEquals(\"90712 Poliovirus (4 months), \", GetVisitRemindersAction.testPolio(1, cal.getTime(), 0L));\r\n    cal.add(Calendar.MONTH, (-2));\r\n    assertEquals(\"90712 Poliovirus (6 months), \", GetVisitRemindersAction.testPolio(2, cal.getTime(), 0L));\r\n}"},
 {"id":624, "methodname":"testTestRotaVirus()", "methodnamerefined":"testTestRotaVirus", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestRotaVirus", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestRotaVirus()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestRotaVirus() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.HOUR, (((-6) * 7) * 24));\r\n    assertEquals(\"90681 Rotavirus (6 weeks), \", GetVisitRemindersAction.testRotaVirus(0, cal.getTime(), 0L));\r\n    cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, (-4));\r\n    assertEquals(\"90681 Rotavirus (4 months), \", GetVisitRemindersAction.testRotaVirus(1, cal.getTime(), 0L));\r\n    cal.add(Calendar.MONTH, (-2));\r\n    assertEquals(\"90681 Rotavirus (6 months), \", GetVisitRemindersAction.testRotaVirus(2, cal.getTime(), 0L));\r\n}"},
 {"id":625, "methodname":"testTestVaricella()", "methodnamerefined":"testTestVaricella", "methodabbreviation":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestVaricella", "fullmethod":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest.testTestVaricella()", "classid":110, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersActionTest", "shortclassname":"GetVisitRemindersActionTest", "method":"public void testTestVaricella() throws Exception {\r\n    // TODO: add boundary tests\r\n    gen.standardData();\r\n    // Login as kelly doctor\r\n    action = new GetVisitRemindersAction(factory, 9000000000L);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.YEAR, (-1));\r\n    assertEquals(\"90396 Varicella (12 months), \", GetVisitRemindersAction.testVaricella(0, cal.getTime(), 0L));\r\n    cal.add(Calendar.YEAR, (-3));\r\n    assertEquals(\"90396 Varicella (4 years), \", GetVisitRemindersAction.testVaricella(1, cal.getTime(), 0L));\r\n}"},
 {"id":626, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "shortclassname":"GroupReportAction", "method":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n */\r\npublic GroupReportAction(DAOFactory factory) {\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    fDAO = factory.getFamilyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}"},
 {"id":627, "methodname":"generateReport(java.util.List)", "methodnamerefined":"generateReport", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportAction.generateReport", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportAction.generateReport(java.util.List)", "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "shortclassname":"GroupReportAction", "method":"/**\r\n *\r\n *\r\n * @param filters\r\n * \t\t\r\n * @return \r\n */\r\npublic GroupReportBean generateReport(List<ReportFilter> filters) {\r\n    List<PatientBean> patients;\r\n    try {\r\n        patients = getAllPatients();\r\n    } catch (DBException e) {\r\n        return null;\r\n    }\r\n    for (ReportFilter filter : filters) {\r\n        patients = filter.filter(patients);\r\n    }\r\n    return new GroupReportBean(patients, filters);\r\n}"},
 {"id":628, "methodname":"getAllPatients()", "methodnamerefined":"getAllPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportAction.getAllPatients", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportAction.getAllPatients()", "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "shortclassname":"GroupReportAction", "method":"/**\r\n *\r\n *\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate List<PatientBean> getAllPatients() throws DBException {\r\n    return pDAO.getAllPatients();\r\n}"},
 {"id":629, "methodname":"getComprehensiveDemographicInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType)", "methodnamerefined":"getComprehensiveDemographicInfo", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveDemographicInfo", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveDemographicInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType)", "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "shortclassname":"GroupReportAction", "method":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\t\r\n * @param filterType\r\n * \t\t\r\n * @return \r\n */\r\npublic String getComprehensiveDemographicInfo(PatientBean patient, DemographicReportFilter.DemographicReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case GENDER :\r\n            return patient.getGender().toString();\r\n        case LAST_NAME :\r\n            return patient.getLastName();\r\n        case FIRST_NAME :\r\n            return patient.getFirstName();\r\n        case CONTACT_EMAIL :\r\n            return patient.getEmail();\r\n        case STREET_ADDR :\r\n            return ((patient.getStreetAddress1()) + \" \") + (patient.getStreetAddress2());\r\n        case CITY :\r\n            return patient.getCity();\r\n        case STATE :\r\n            return patient.getState();\r\n        case ZIP :\r\n            return patient.getZip();\r\n        case PHONE :\r\n            return patient.getPhone();\r\n        case EMER_CONTACT_NAME :\r\n            return patient.getEmergencyName();\r\n        case EMER_CONTACT_PHONE :\r\n            return patient.getEmergencyPhone();\r\n        case INSURE_NAME :\r\n            return patient.getIcName();\r\n        case INSURE_ADDR :\r\n            return ((patient.getIcAddress1()) + \" \") + (patient.getIcAddress2());\r\n        case INSURE_CITY :\r\n            return patient.getIcCity();\r\n        case INSURE_STATE :\r\n            return patient.getIcState();\r\n        case INSURE_ZIP :\r\n            return patient.getIcZip();\r\n        case INSURE_PHONE :\r\n            return patient.getIcPhone();\r\n        case MID :\r\n            return Long.toString(patient.getMID());\r\n        case INSURE_ID :\r\n            return patient.getIcID();\r\n        case PARENT_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PARENT_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DEACTIVATED :\r\n            return patient.getDateOfDeactivationStr();\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}"},
 {"id":630, "methodname":"getComprehensiveMedicalInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType)", "methodnamerefined":"getComprehensiveMedicalInfo", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveMedicalInfo", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveMedicalInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType)", "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "shortclassname":"GroupReportAction", "method":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\t\r\n * @param filterType\r\n * \t\t\r\n * @return \r\n */\r\npublic String getComprehensiveMedicalInfo(PatientBean patient, MedicalReportFilter.MedicalReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case ALLERGY :\r\n            try {\r\n                List<AllergyBean> allergies = aDAO.getAllergies(patient.getMID());\r\n                String out = \"\";\r\n                for (AllergyBean allergy : allergies) {\r\n                    out += (allergy.getNDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getCurrentPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DIAGNOSIS_ICD_CODE :\r\n            try {\r\n                List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                String out = \"\";\r\n                for (DiagnosisBean diagnosis : diagnoses) {\r\n                    out += (diagnosis.getICDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case LOWER_OFFICE_VISIT_DATE :\r\n            try {\r\n                List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                String out = \"\";\r\n                for (OfficeVisitBean visit : visits) {\r\n                    out += (visit.getVisitDateStr()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PASTCURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PROCEDURE :\r\n            try {\r\n                List<ProcedureBean> procedures = pDAO.getProcedures(patient.getMID());\r\n                String out = \"\";\r\n                for (ProcedureBean procedure : procedures) {\r\n                    out += (procedure.getCPTCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}"},
 {"id":631, "methodname":"getComprehensivePersonnelInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType)", "methodnamerefined":"getComprehensivePersonnelInfo", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensivePersonnelInfo", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensivePersonnelInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType)", "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "shortclassname":"GroupReportAction", "method":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\t\r\n * @param filterType\r\n * \t\t\r\n * @return \r\n */\r\npublic String getComprehensivePersonnelInfo(PatientBean patient, PersonnelReportFilter.PersonnelReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case DLHCP :\r\n            try {\r\n                List<PersonnelBean> dlhcps = pDAO.getDeclaredHCPs(patient.getMID());\r\n                String out = \"\";\r\n                for (PersonnelBean dlhcp : dlhcps) {\r\n                    out += (dlhcp.getFullName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}"},
 {"id":632, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportActionTest.-init-()", "classid":112, "classname":"edu.ncsu.csc.itrust.action.GroupReportActionTest", "shortclassname":"GroupReportActionTest", "method":"GroupReportActionTest() {\r\n}"},
 {"id":633, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportActionTest.setUp()", "classid":112, "classname":"edu.ncsu.csc.itrust.action.GroupReportActionTest", "shortclassname":"GroupReportActionTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    action = new GroupReportAction(factory);\r\n}"},
 {"id":634, "methodname":"testGenerateReport()", "methodnamerefined":"testGenerateReport", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportActionTest.testGenerateReport", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportActionTest.testGenerateReport()", "classid":112, "classname":"edu.ncsu.csc.itrust.action.GroupReportActionTest", "shortclassname":"GroupReportActionTest", "method":"public void testGenerateReport() {\r\n    List<ReportFilter> f = new ArrayList<ReportFilter>();\r\n    f.add(new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.LAST_NAME, \"Person\", factory));\r\n    GroupReportBean res = action.generateReport(f);\r\n    assertTrue(((res.getPatients().size()) == 1));\r\n    assertEquals(1L, res.getPatients().get(0).getMID());\r\n}"},
 {"id":635, "methodname":"testGetComprehensiveDemographicInfo()", "methodnamerefined":"testGetComprehensiveDemographicInfo", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportActionTest.testGetComprehensiveDemographicInfo", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportActionTest.testGetComprehensiveDemographicInfo()", "classid":112, "classname":"edu.ncsu.csc.itrust.action.GroupReportActionTest", "shortclassname":"GroupReportActionTest", "method":"public void testGetComprehensiveDemographicInfo() throws DBException {\r\n    PatientBean b = factory.getPatientDAO().getPatient(2L);\r\n    for (DemographicReportFilter.DemographicReportFilterType filterType : DemographicReportFilter.DemographicReportFilterType.values()) {\r\n        String res = action.getComprehensiveDemographicInfo(b, filterType);\r\n        switch (filterType) {\r\n            case GENDER :\r\n                assertEquals(\"Male\", res);\r\n                break;\r\n            case LAST_NAME :\r\n                assertEquals(\"Programmer\", res);\r\n                break;\r\n            case FIRST_NAME :\r\n                assertEquals(\"Andy\", res);\r\n                break;\r\n            case CONTACT_EMAIL :\r\n                assertEquals(\"andy.programmer@gmail.com\", res);\r\n                break;\r\n            case STREET_ADDR :\r\n                assertEquals(\"344 Bob Street \", res);\r\n                break;\r\n            case CITY :\r\n                assertEquals(\"Raleigh\", res);\r\n                break;\r\n            case STATE :\r\n                assertEquals(\"NC\", res);\r\n                break;\r\n            case ZIP :\r\n                assertEquals(\"27607\", res);\r\n                break;\r\n            case PHONE :\r\n                assertEquals(\"555-555-5555\", res);\r\n                break;\r\n            case EMER_CONTACT_NAME :\r\n                assertEquals(\"Mr Emergency\", res);\r\n                break;\r\n            case EMER_CONTACT_PHONE :\r\n                assertEquals(\"555-555-5551\", res);\r\n                break;\r\n            case INSURE_NAME :\r\n                assertEquals(\"IC\", res);\r\n                break;\r\n            case INSURE_ADDR :\r\n                assertEquals(\"Street1 Street2\", res);\r\n                break;\r\n            case INSURE_CITY :\r\n                assertEquals(\"City\", res);\r\n                break;\r\n            case INSURE_STATE :\r\n                assertEquals(\"PA\", res);\r\n                break;\r\n            case INSURE_ZIP :\r\n                assertEquals(\"19003-2715\", res);\r\n                break;\r\n            case INSURE_PHONE :\r\n                assertEquals(\"555-555-5555\", res);\r\n                break;\r\n            case INSURE_ID :\r\n                assertEquals(\"1\", res);\r\n                break;\r\n            case PARENT_FIRST_NAME :\r\n                assertEquals(\"Random\n\", res);\r\n                break;\r\n            case PARENT_LAST_NAME :\r\n                assertEquals(\"Person\n\", res);\r\n                break;\r\n            case CHILD_FIRST_NAME :\r\n                assertEquals(\"Baby\nBaby\nBaby\nBaby\n\", res);\r\n                break;\r\n            case CHILD_LAST_NAME :\r\n                assertEquals(\"Programmer\nA\nB\nC\n\", res);\r\n                break;\r\n            case SIBLING_FIRST_NAME :\r\n                assertEquals(\"Care\nNoRecords\nBowser\nPrincess\n\", res);\r\n                break;\r\n            case SIBLING_LAST_NAME :\r\n                assertEquals(\"Needs\nHas\nKoopa\nPeach\n\", res);\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n}"},
 {"id":636, "methodname":"testGetComprehensiveMedicalInfo()", "methodnamerefined":"testGetComprehensiveMedicalInfo", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportActionTest.testGetComprehensiveMedicalInfo", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportActionTest.testGetComprehensiveMedicalInfo()", "classid":112, "classname":"edu.ncsu.csc.itrust.action.GroupReportActionTest", "shortclassname":"GroupReportActionTest", "method":"public void testGetComprehensiveMedicalInfo() throws DBException {\r\n    PatientBean b = factory.getPatientDAO().getPatient(2L);\r\n    for (MedicalReportFilter.MedicalReportFilterType filterType : MedicalReportFilter.MedicalReportFilterType.values()) {\r\n        String res = action.getComprehensiveMedicalInfo(b, filterType);\r\n        switch (filterType) {\r\n            case ALLERGY :\r\n                assertEquals(\"\n664662530\n\", res);\r\n                break;\r\n            case CURRENT_PRESCRIPTIONS :\r\n                assertEquals(\"64764-1512\n\", res);\r\n                break;\r\n            case DIAGNOSIS_ICD_CODE :\r\n                assertEquals(\"250.10\n79.30\n250.10\n250.10\n11.40\n15.00\n\", res);\r\n                break;\r\n            case LOWER_OFFICE_VISIT_DATE :\r\n                assertEquals(\"09/14/2009\n06/10/2007\n06/09/2007\n10/10/2006\n10/10/2005\n10/10/2005\n10/10/2005\n10/10/2005\n10/10/2005\n10/10/1985\n\", res);\r\n                break;\r\n            case PASTCURRENT_PRESCRIPTIONS :\r\n                assertEquals(\"00904-2407\n00904-2407\n64764-1512\n\", res);\r\n                break;\r\n            case PROCEDURE :\r\n                assertEquals(\"1270F\n\", res);\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n}"},
 {"id":637, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.util.List)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.util.List)", "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "shortclassname":"GroupReportGeneratorAction", "method":"/**\r\n * Initializes the group report generator with a list of filters\r\n *\r\n * @param filters\r\n * \t\tList of filters to be used in the report\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, List<ReportFilter> filters) {\r\n    this.factory = factory;\r\n    this.filters = filters;\r\n    action = new GroupReportAction(factory);\r\n}"},
 {"id":638, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,javax.servlet.http.HttpServletRequest)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,javax.servlet.http.HttpServletRequest)", "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "shortclassname":"GroupReportGeneratorAction", "method":"/**\r\n * Initializes the group report generator with a list of filters after parsing them\r\n *\r\n * @param filters\r\n * \t\tHttpServletRequest to grab and parse parameters from\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, HttpServletRequest request) {\r\n    this.factory = factory;\r\n    this.filters = new ArrayList<ReportFilter>();\r\n    parseFilters(request);\r\n    action = new GroupReportAction(factory);\r\n}"},
 {"id":639, "methodname":"generateReport()", "methodnamerefined":"generateReport", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.generateReport", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.generateReport()", "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "shortclassname":"GroupReportGeneratorAction", "method":"/**\r\n * Generates the ArrayLists for the report based on the filters passed\r\n * in the constructor.\r\n */\r\npublic void generateReport() {\r\n    // Initialize the GroupReportBean\r\n    GroupReportBean report = action.generateReport(filters);\r\n    // Populate the filter lists\r\n    for (ReportFilter filter : filters) {\r\n        reportFilterTypes.add(filter.getFilterTypeString());\r\n        reportFilterValues.add(filter.getFilterValue());\r\n    }\r\n    // Populate the header list with the DemographicReportFilters\r\n    for (DemographicReportFilter.DemographicReportFilterType type : DemographicReportFilter.DemographicReportFilterType.values()) {\r\n        if ((type != (DemographicReportFilter.DemographicReportFilterType.LOWER_AGE_LIMIT)) && (type != (DemographicReportFilter.DemographicReportFilterType.UPPER_AGE_LIMIT))) {\r\n            reportHeaders.add(type.toString());\r\n        }\r\n    }\r\n    // Populate the header list with the MedicalReportFilters\r\n    for (MedicalReportFilter.MedicalReportFilterType type : MedicalReportFilter.MedicalReportFilterType.values()) {\r\n        if ((type != (MedicalReportFilter.MedicalReportFilterType.LOWER_OFFICE_VISIT_DATE)) && (type != (MedicalReportFilter.MedicalReportFilterType.UPPER_OFFICE_VISIT_DATE))) {\r\n            reportHeaders.add(type.toString());\r\n        }\r\n        if (type == (MedicalReportFilter.MedicalReportFilterType.LOWER_OFFICE_VISIT_DATE)) {\r\n            reportHeaders.add(\"OFFICE VISIT DATE\");\r\n        }\r\n    }\r\n    // Populate the header list with the PersonnelReportFilters\r\n    for (PersonnelReportFilter.PersonnelReportFilterType type : PersonnelReportFilter.PersonnelReportFilterType.values()) {\r\n        reportHeaders.add(type.toString());\r\n    }\r\n    // Loop through all the patients in the report\r\n    for (PatientBean patient : report.getPatients()) {\r\n        // Create a temporary ArrayList for the current patients data\r\n        ArrayList<String> currentPatientData = new ArrayList<String>();\r\n        // Populate the current record with Demographic data\r\n        for (DemographicReportFilter.DemographicReportFilterType type : DemographicReportFilter.DemographicReportFilterType.values()) {\r\n            if ((type != (DemographicReportFilter.DemographicReportFilterType.LOWER_AGE_LIMIT)) && (type != (DemographicReportFilter.DemographicReportFilterType.UPPER_AGE_LIMIT))) {\r\n                String val = action.getComprehensiveDemographicInfo(patient, type);\r\n                if (val != null) {\r\n                    currentPatientData.add(val);\r\n                } else {\r\n                    currentPatientData.add(\"\");\r\n                }\r\n            }\r\n        }\r\n        // Populate the current record with Medical data\r\n        for (MedicalReportFilter.MedicalReportFilterType type : MedicalReportFilter.MedicalReportFilterType.values()) {\r\n            if (type != (MedicalReportFilter.MedicalReportFilterType.UPPER_OFFICE_VISIT_DATE)) {\r\n                String val = action.getComprehensiveMedicalInfo(patient, type);\r\n                if (val != null) {\r\n                    currentPatientData.add(val);\r\n                } else {\r\n                    currentPatientData.add(\"\");\r\n                }\r\n            }\r\n        }\r\n        // Populate the current record with Personnel data\r\n        for (PersonnelReportFilter.PersonnelReportFilterType type : PersonnelReportFilter.PersonnelReportFilterType.values()) {\r\n            String val = action.getComprehensivePersonnelInfo(patient, type);\r\n            if (val != null) {\r\n                currentPatientData.add(val);\r\n            } else {\r\n                currentPatientData.add(\"\");\r\n            }\r\n        }\r\n        // Add the current record to the list of records\r\n        reportData.add(currentPatientData);\r\n    }\r\n    // Remove MID from report\r\n    int midIndex = reportHeaders.indexOf(\"MID\");\r\n    reportHeaders.remove(midIndex);\r\n    for (ArrayList<String> patients : reportData) {\r\n        patients.remove(midIndex);\r\n    }\r\n}"},
 {"id":640, "methodname":"getReportData()", "methodnamerefined":"getReportData", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.getReportData", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.getReportData()", "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "shortclassname":"GroupReportGeneratorAction", "method":"/**\r\n * Gets a list of lists of report records (patients)\r\n *\r\n * @return List of lists of report records\r\n */\r\npublic ArrayList<ArrayList<String>> getReportData() {\r\n    return reportData;\r\n}"},
 {"id":641, "methodname":"getReportFilterTypes()", "methodnamerefined":"getReportFilterTypes", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.getReportFilterTypes", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.getReportFilterTypes()", "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "shortclassname":"GroupReportGeneratorAction", "method":"/**\r\n * Gets a list of the filters used in the report.\r\n *\r\n * @return List of FilterTypes used in the report\r\n */\r\npublic ArrayList<String> getReportFilterTypes() {\r\n    return reportFilterTypes;\r\n}"},
 {"id":642, "methodname":"getReportFilterValues()", "methodnamerefined":"getReportFilterValues", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.getReportFilterValues", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.getReportFilterValues()", "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "shortclassname":"GroupReportGeneratorAction", "method":"/**\r\n * Gets a list of the filter values used in the report.\r\n *\r\n * @return List of filter values used in the report\r\n */\r\npublic ArrayList<String> getReportFilterValues() {\r\n    return reportFilterValues;\r\n}"},
 {"id":643, "methodname":"getReportHeaders()", "methodnamerefined":"getReportHeaders", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.getReportHeaders", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.getReportHeaders()", "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "shortclassname":"GroupReportGeneratorAction", "method":"/**\r\n * Gets a list of the report headers.\r\n *\r\n * @return List of report headers\r\n */\r\npublic ArrayList<String> getReportHeaders() {\r\n    return reportHeaders;\r\n}"},
 {"id":644, "methodname":"parseFilters(javax.servlet.http.HttpServletRequest)", "methodnamerefined":"parseFilters", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.parseFilters", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.parseFilters(javax.servlet.http.HttpServletRequest)", "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "shortclassname":"GroupReportGeneratorAction", "method":"/**\r\n * Method that parses the request parameters to create the filter list in order to run report.\r\n *\r\n * @param request\r\n * \t\twith form parameters to create the filter list\r\n */\r\nprivate void parseFilters(HttpServletRequest request) {\r\n    boolean hasDeactivatedFilter = false;\r\n    if (((request.getParameter(\"demoparams\")) != null) && (!(request.getParameter(\"demoparams\").isEmpty()))) {\r\n        String demoparams = request.getParameter(\"demoparams\");\r\n        String[] demoFilters = demoparams.split(\" \");\r\n        for (String filter : demoFilters) {\r\n            if (((request.getParameter(filter)) != null) && (!(request.getParameter(filter).isEmpty()))) {\r\n                DemographicReportFilter.DemographicReportFilterType filterType = DemographicReportFilter.filterTypeFromString(filter);\r\n                if (filterType.toString().equals(\"DEACTIVATED\")) {\r\n                    hasDeactivatedFilter = true;\r\n                }\r\n                DemographicReportFilter fil = new DemographicReportFilter(filterType, request.getParameter(filter), factory);\r\n                filters.add(fil);\r\n            }\r\n        }\r\n    }\r\n    if (!hasDeactivatedFilter) {\r\n        filters.add(new DemographicReportFilter(DemographicReportFilter.filterTypeFromString(\"DEACTIVATED\"), \"exclude\", factory));\r\n    }\r\n    if (((request.getParameter(\"medparams\")) != null) && (!(request.getParameter(\"medparams\").isEmpty()))) {\r\n        String medparams = request.getParameter(\"medparams\");\r\n        String[] medFilters = medparams.split(\" \");\r\n        for (String filter : medFilters) {\r\n            if (((request.getParameter(filter)) != null) && (!(request.getParameter(filter).isEmpty()))) {\r\n                MedicalReportFilter.MedicalReportFilterType filterType = MedicalReportFilter.filterTypeFromString(filter);\r\n                if ((((((filterType == (MedicalReportFilter.MedicalReportFilterType.DIAGNOSIS_ICD_CODE)) || (filterType == (MedicalReportFilter.MedicalReportFilterType.MISSING_DIAGNOSIS_ICD_CODE))) || (filterType == (MedicalReportFilter.MedicalReportFilterType.ALLERGY))) || (filterType == (MedicalReportFilter.MedicalReportFilterType.CURRENT_PRESCRIPTIONS))) || (filterType == (MedicalReportFilter.MedicalReportFilterType.PASTCURRENT_PRESCRIPTIONS))) || (filterType == (MedicalReportFilter.MedicalReportFilterType.PROCEDURE))) {\r\n                    String[] vals = request.getParameterValues(filter);\r\n                    for (String val : vals) {\r\n                        MedicalReportFilter fil = new MedicalReportFilter(filterType, val, factory);\r\n                        filters.add(fil);\r\n                    }\r\n                } else {\r\n                    MedicalReportFilter fil = new MedicalReportFilter(filterType, request.getParameter(filter), factory);\r\n                    filters.add(fil);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (((request.getParameter(\"persparams\")) != null) && (!(request.getParameter(\"persparams\").isEmpty()))) {\r\n        String persparams = request.getParameter(\"persparams\");\r\n        String[] personnelFilters = persparams.split(\" \");\r\n        for (String filter : personnelFilters) {\r\n            if (((request.getParameter(filter)) != null) && (!(request.getParameter(filter).isEmpty()))) {\r\n                PersonnelReportFilter.PersonnelReportFilterType filterType = PersonnelReportFilter.filterTypeFromString(filter);\r\n                if (filterType == (PersonnelReportFilter.PersonnelReportFilterType.DLHCP)) {\r\n                    String[] vals = request.getParameterValues(filter);\r\n                    for (String val : vals) {\r\n                        PersonnelReportFilter fil = new PersonnelReportFilter(filterType, val, factory);\r\n                        filters.add(fil);\r\n                    }\r\n                } else {\r\n                    PersonnelReportFilter fil = new PersonnelReportFilter(filterType, request.getParameter(filter), factory);\r\n                    filters.add(fil);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":645, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest.-init-()", "classid":114, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest", "shortclassname":"GroupReportGeneratorActionTest", "method":"GroupReportGeneratorActionTest() {\r\n}"},
 {"id":646, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest.setUp()", "classid":114, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest", "shortclassname":"GroupReportGeneratorActionTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":647, "methodname":"testGenerateReport()", "methodnamerefined":"testGenerateReport", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest.testGenerateReport", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest.testGenerateReport()", "classid":114, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest", "shortclassname":"GroupReportGeneratorActionTest", "method":"public void testGenerateReport() {\r\n    List<ReportFilter> filters = new ArrayList<ReportFilter>();\r\n    filters.add(new DemographicReportFilter(DemographicReportFilter.filterTypeFromString(\"DEACTIVATED\"), \"exclude\", factory));\r\n    filters.add(new PersonnelReportFilter(PersonnelReportFilter.filterTypeFromString(\"DLHCP\"), \"Gandalf Stormcrow\", factory));\r\n    gpga = new GroupReportGeneratorAction(factory, filters);\r\n    gpga.generateReport();\r\n    assertEquals(2, gpga.getReportFilterTypes().size());\r\n    assertEquals(2, gpga.getReportFilterValues().size());\r\n    assertEquals(\"DEACTIVATED\", gpga.getReportFilterTypes().get(0).toString());\r\n    assertEquals(\"exclude\", gpga.getReportFilterValues().get(0));\r\n    assertEquals(\"DECLARED HCP\", gpga.getReportFilterTypes().get(1).toString());\r\n    assertEquals(\"Gandalf Stormcrow\", gpga.getReportFilterValues().get(1));\r\n    int deactivatedIndex = gpga.getReportHeaders().indexOf(\"DEACTIVATED\");\r\n    int DHCPIndex = gpga.getReportHeaders().indexOf(\"DECLARED HCP\");\r\n    for (int i = 0; i < (gpga.getReportData().size()); i++) {\r\n        assertEquals(\"\", gpga.getReportData().get(i).get(deactivatedIndex));\r\n        assertEquals(\"Gandalf Stormcrow\n\", gpga.getReportData().get(i).get(DHCPIndex));\r\n    }\r\n}"},
 {"id":648, "methodname":"testParseFilters()", "methodnamerefined":"testParseFilters", "methodabbreviation":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest.testParseFilters", "fullmethod":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest.testParseFilters()", "classid":114, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorActionTest", "shortclassname":"GroupReportGeneratorActionTest", "method":"public void testParseFilters() {\r\n    HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class);\r\n    EasyMock.expect(request.getParameter(\"demoparams\")).andReturn(\"MID\").anyTimes();\r\n    EasyMock.expect(request.getParameter(\"medparams\")).andReturn(\"ALLERGY\").anyTimes();\r\n    EasyMock.expect(request.getParameter(\"persparams\")).andReturn(\" \").anyTimes();\r\n    EasyMock.expect(request.getParameter(\"MID\")).andReturn(\"1\").anyTimes();\r\n    EasyMock.expect(request.getParameterValues(\"ALLERGY\")).andReturn(new String[0]).anyTimes();\r\n    EasyMock.expect(request.getParameter(\"ALLERGY\")).andReturn(\" \").anyTimes();\r\n    EasyMock.replay(request);\r\n    GroupReportGeneratorAction grga = new GroupReportGeneratorAction(factory, request);\r\n}"},
 {"id":649, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":115, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPAction", "shortclassname":"LabProcHCPAction", "method":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tMID for the logged in HCP\r\n */\r\npublic LabProcHCPAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n}"},
 {"id":650, "methodname":"changePrivacy(long)", "methodnamerefined":"changePrivacy", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPAction.changePrivacy", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPAction.changePrivacy(long)", "classid":115, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPAction", "shortclassname":"LabProcHCPAction", "method":"/**\r\n * Changes the privacy settings\r\n *\r\n * @param x\r\n * \t\tthe ID of the procedure to change\r\n */\r\npublic void changePrivacy(long x) throws DBException, FormValidationException {\r\n    LabProcedureBean pb = lpDAO.getLabProcedure(x);\r\n    if (checkAccess(x)) {\r\n        if (pb.getRights().equals(LabProcedureBean.Restrict)) {\r\n            pb.allow();\r\n        } else {\r\n            pb.restrict();\r\n        }\r\n        validator.validate(pb);\r\n        lpDAO.updateRights(pb);\r\n    }\r\n}"},
 {"id":651, "methodname":"checkAccess(long)", "methodnamerefined":"checkAccess", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPAction.checkAccess", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPAction.checkAccess(long)", "classid":115, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPAction", "shortclassname":"LabProcHCPAction", "method":"/**\r\n * Checks to see if the logged in HCP is the one who made the procedure.  Used to generate links for page to edit OfficeVisit\r\n *\r\n * @param x\r\n * \t\tthe ID of the HCP to check\r\n */\r\npublic boolean checkAccess(long x) throws DBException, FormValidationException {\r\n    LabProcedureBean pb = lpDAO.getLabProcedure(x);\r\n    OfficeVisitBean ovbean = ovDAO.getOfficeVisit(pb.getOvID());\r\n    return (loggedInMID) == (ovbean.getHcpID());\r\n}"},
 {"id":652, "methodname":"getLabProcForNextMonth()", "methodnamerefined":"getLabProcForNextMonth", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPAction.getLabProcForNextMonth", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPAction.getLabProcForNextMonth()", "classid":115, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPAction", "shortclassname":"LabProcHCPAction", "method":"/**\r\n * Returns a list of all the lab procedures for the next month\r\n *\r\n * @return all the lab procedures for the next month\r\n */\r\npublic List<LabProcedureBean> getLabProcForNextMonth() throws DBException {\r\n    List<LabProcedureBean> listLabProc = new ArrayList<LabProcedureBean>(0);\r\n    List<OfficeVisitBean> listOV = ovDAO.getAllOfficeVisitsForLHCP(loggedInMID);\r\n    for (OfficeVisitBean ov : listOV) {\r\n        if ((listLabProc.isEmpty()) == true) {\r\n            listLabProc = lpDAO.getLabProceduresForLHCPForNextMonth(ov.getID());\r\n        } else {\r\n            for (LabProcedureBean lb : lpDAO.getLabProceduresForLHCPForNextMonth(ov.getID())) {\r\n                listLabProc.add(lb);\r\n            }\r\n        }\r\n    }\r\n    return listLabProc;\r\n}"},
 {"id":653, "methodname":"getPendingCount()", "methodnamerefined":"getPendingCount", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPAction.getPendingCount", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPAction.getPendingCount()", "classid":115, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPAction", "shortclassname":"LabProcHCPAction", "method":"public int getPendingCount() throws DBException {\r\n    return lpDAO.getHCPPendingCount(loggedInMID);\r\n}"},
 {"id":654, "methodname":"sortByLOINC(long)", "methodnamerefined":"sortByLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPAction.sortByLOINC", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPAction.sortByLOINC(long)", "classid":115, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPAction", "shortclassname":"LabProcHCPAction", "method":"/**\r\n * This method sorts by LOINC and returns the list\r\n *\r\n * @param id\r\n * \t\tthe ID to sort the list by\r\n * @return List sorted by LOINC\r\n */\r\npublic List<LabProcedureBean> sortByLOINC(long id) throws DBException {\r\n    return lpDAO.getAllLabProceduresLOINC(id);\r\n}"},
 {"id":655, "methodname":"viewProceduresByHCP()", "methodnamerefined":"viewProceduresByHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPAction.viewProceduresByHCP", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPAction.viewProceduresByHCP()", "classid":115, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPAction", "shortclassname":"LabProcHCPAction", "method":"public List<LabProcedureBean> viewProceduresByHCP() throws DBException {\r\n    return lpDAO.getHCPLabProcedures(loggedInMID);\r\n}"},
 {"id":656, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.-init-()", "classid":116, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest", "shortclassname":"LabProcHCPActionTest", "method":"LabProcHCPActionTest() {\r\n}"},
 {"id":657, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.setUp()", "classid":116, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest", "shortclassname":"LabProcHCPActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.transactionLog();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient3();\r\n    gen.patient4();\r\n    gen.hcp0();\r\n    gen.hcp3();\r\n    gen.labProcedures();\r\n    action = new LabProcHCPAction(factory, 9000000000L);\r\n}"},
 {"id":658, "methodname":"testGetLabProcedureForLHCPForNextMonth()", "methodnamerefined":"testGetLabProcedureForLHCPForNextMonth", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testGetLabProcedureForLHCPForNextMonth", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testGetLabProcedureForLHCPForNextMonth()", "classid":116, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest", "shortclassname":"LabProcHCPActionTest", "method":"public void testGetLabProcedureForLHCPForNextMonth() throws Exception {\r\n    List<LabProcedureBean> procedures = action.getLabProcForNextMonth();\r\n    assertEquals(1, procedures.size());\r\n    assertEquals(\"10763-1\", procedures.get(0).getLoinc());\r\n    assertEquals(4, procedures.get(0).getPid());\r\n}"},
 {"id":659, "methodname":"testGetLabProcedureForLHCPForNextMonth1()", "methodnamerefined":"testGetLabProcedureForLHCPForNextMonth1", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testGetLabProcedureForLHCPForNextMonth1", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testGetLabProcedureForLHCPForNextMonth1()", "classid":116, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest", "shortclassname":"LabProcHCPActionTest", "method":"public void testGetLabProcedureForLHCPForNextMonth1() throws Exception {\r\n    action2 = new LabProcHCPAction(factory, 9000000003L);\r\n    List<LabProcedureBean> procedures = action2.getLabProcForNextMonth();\r\n    assertNotNull(procedures);\r\n}"},
 {"id":660, "methodname":"testSortByLOINC()", "methodnamerefined":"testSortByLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testSortByLOINC", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testSortByLOINC()", "classid":116, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest", "shortclassname":"LabProcHCPActionTest", "method":"public void testSortByLOINC() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"12933-5\");\r\n    lp.setCommentary(\"This is a routine procedure\");\r\n    lp.setOvID(952);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusPending();\r\n    lpDAO.addLabProcedure(lp);\r\n    LabProcedureBean lp2 = new LabProcedureBean();\r\n    lp2.setLoinc(\"00000-0\");\r\n    lp2.setCommentary(\"This is a routine procedure\");\r\n    lp2.setOvID(953);\r\n    lp2.setPid(2L);\r\n    lp2.setResults(\"\");\r\n    lp2.allow();\r\n    lp2.statusPending();\r\n    lpDAO.addLabProcedure(lp2);\r\n    LabProcedureBean lp3 = new LabProcedureBean();\r\n    lp3.setLoinc(\"10543-5\");\r\n    lp3.setCommentary(\"This is a routine procedure\");\r\n    lp3.setOvID(954);\r\n    lp3.setPid(2L);\r\n    lp3.setResults(\"\");\r\n    lp3.allow();\r\n    lp3.statusPending();\r\n    lpDAO.addLabProcedure(lp3);\r\n    List<LabProcedureBean> lplist = action.sortByLOINC(2);\r\n    assertEquals(953, lplist.get(0).getOvID());\r\n    assertEquals(\"00000-0\", lplist.get(0).getLoinc());\r\n}"},
 {"id":661, "methodname":"testUpdateProcedure()", "methodnamerefined":"testUpdateProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testUpdateProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testUpdateProcedure()", "classid":116, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest", "shortclassname":"LabProcHCPActionTest", "method":"public void testUpdateProcedure() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"This is a routine procedure\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusPending();\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    lp.setProcedureID(id);\r\n    lp.statusComplete();\r\n    lp.setResults(\"No abnormal results\");\r\n    gen.fakeEmail();\r\n    action.updateProcedure(lp);\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(LabProcedureBean.Completed, procedures.getStatus());\r\n    assertEquals(\"No abnormal results\", procedures.getResults());\r\n    List<Email> list = feDAO.getAllEmails();\r\n    assertEquals(\"Dear Andy Programmer, \n Your Lab Procedure (10763-1) has a new updated status of Completed. Log on to iTrust to view.\", list.get(0).getBody());\r\n}"},
 {"id":662, "methodname":"testUpdateRights()", "methodnamerefined":"testUpdateRights", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testUpdateRights", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testUpdateRights()", "classid":116, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest", "shortclassname":"LabProcHCPActionTest", "method":"public void testUpdateRights() throws Exception {\r\n    OfficeVisitBean ov = new OfficeVisitBean();\r\n    ov.setHcpID(9000000000L);\r\n    long ovid = ovDAO.add(ov);\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-5\");\r\n    lp.setCommentary(\"This is a routine procedure\");\r\n    lp.setOvID(ovid);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusPending();\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    assertEquals(LabProcedureBean.Allow, lpDAO.getLabProcedure(id).getRights());\r\n    action.changePrivacy(id);\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(LabProcedureBean.Restrict, procedures.getRights());\r\n}"},
 {"id":663, "methodname":"testViewProcedure()", "methodnamerefined":"testViewProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testViewProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest.testViewProcedure()", "classid":116, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPActionTest", "shortclassname":"LabProcHCPActionTest", "method":"public void testViewProcedure() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"This is a routine procedure\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(3L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusPending();\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    List<LabProcedureBean> procedures = action.viewProcedures(3L);\r\n    assertEquals(1, procedures.size());\r\n    assertEquals(id, procedures.get(0).getProcedureID());\r\n}"},
 {"id":664, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "shortclassname":"LabProcLTAction", "method":"/**\r\n * Setup\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tLT who is logged in\r\n */\r\npublic LabProcLTAction(DAOFactory factory, long loggedInMID) {\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    personDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":665, "methodname":"getHCPName(long)", "methodnamerefined":"getHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTAction.getHCPName", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTAction.getHCPName(long)", "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "shortclassname":"LabProcLTAction", "method":"public String getHCPName(long ovid) throws iTrustException {\r\n    OfficeVisitBean b = ovDAO.getOfficeVisit(ovid);\r\n    return personDAO.getName(b.getHcpID());\r\n}"},
 {"id":666, "methodname":"getLabProcedure(long)", "methodnamerefined":"getLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTAction.getLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTAction.getLabProcedure(long)", "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "shortclassname":"LabProcLTAction", "method":"public LabProcedureBean getLabProcedure(long id) throws DBException {\r\n    return lpDAO.getLabProcedure(id);\r\n}"},
 {"id":667, "methodname":"setToTesting(long)", "methodnamerefined":"setToTesting", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTAction.setToTesting", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTAction.setToTesting(long)", "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "shortclassname":"LabProcLTAction", "method":"public Boolean setToTesting(long id) throws DBException {\r\n    lpDAO.setLPToTesting(id);\r\n    return true;\r\n}"},
 {"id":668, "methodname":"submitReceived(java.lang.String)", "methodnamerefined":"submitReceived", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTAction.submitReceived", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTAction.submitReceived(java.lang.String)", "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "shortclassname":"LabProcLTAction", "method":"public Boolean submitReceived(String id) throws DBException {\r\n    try {\r\n        lpDAO.submitReceivedLP(Long.parseLong(id));\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":669, "methodname":"submitResults(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"submitResults", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTAction.submitResults", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTAction.submitResults(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "shortclassname":"LabProcLTAction", "method":"public Boolean submitResults(String id, String numericalResults, String numericalResultsUnit, String upperBound, String lowerBound) throws FormValidationException {\r\n    try {\r\n        long procedureID = Long.parseLong(id);\r\n        LabProcedureBean lp = lpDAO.getLabProcedure(procedureID);\r\n        lp.setNumericalResult(numericalResults);\r\n        lp.setNumericalResultUnit(numericalResultsUnit);\r\n        lp.setUpperBound(upperBound);\r\n        lp.setLowerBound(lowerBound);\r\n        lpDAO.submitTestResults(Long.parseLong(id), numericalResults, numericalResultsUnit, upperBound, lowerBound);\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":670, "methodname":"viewInTransitProcedures(long)", "methodnamerefined":"viewInTransitProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTAction.viewInTransitProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTAction.viewInTransitProcedures(long)", "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "shortclassname":"LabProcLTAction", "method":"public List<LabProcedureBean> viewInTransitProcedures(long id) throws DBException {\r\n    return lpDAO.getLabProceduresInTransitForLabTech(id);\r\n}"},
 {"id":671, "methodname":"viewReceivedProcedures(long)", "methodnamerefined":"viewReceivedProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTAction.viewReceivedProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTAction.viewReceivedProcedures(long)", "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "shortclassname":"LabProcLTAction", "method":"public List<LabProcedureBean> viewReceivedProcedures(long id) throws DBException {\r\n    return lpDAO.getLabProceduresReceivedForLabTech(id);\r\n}"},
 {"id":672, "methodname":"viewTestingProcedures(long)", "methodnamerefined":"viewTestingProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTAction.viewTestingProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTAction.viewTestingProcedures(long)", "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "shortclassname":"LabProcLTAction", "method":"public List<LabProcedureBean> viewTestingProcedures(long id) throws DBException {\r\n    return lpDAO.getLabProceduresTestingForLabTech(id);\r\n}"},
 {"id":673, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.-init-()", "classid":118, "classname":"edu.ncsu.csc.itrust.action.LabProcLTActionTest", "shortclassname":"LabProcLTActionTest", "method":"LabProcLTActionTest() {\r\n}"},
 {"id":674, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.setUp()", "classid":118, "classname":"edu.ncsu.csc.itrust.action.LabProcLTActionTest", "shortclassname":"LabProcLTActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.transactionLog();\r\n    gen.ltData0();\r\n    gen.ltData1();\r\n    gen.ltData2();\r\n    gen.hcp0();\r\n    gen.labProcedures();\r\n    action = new LabProcLTAction(factory, 5000000001L);\r\n}"},
 {"id":675, "methodname":"testGetHCPName()", "methodnamerefined":"testGetHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testGetHCPName", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testGetHCPName()", "classid":118, "classname":"edu.ncsu.csc.itrust.action.LabProcLTActionTest", "shortclassname":"LabProcLTActionTest", "method":"public void testGetHCPName() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusTesting();\r\n    lp.setLTID(5000000005L);\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    lp.setProcedureID(id);\r\n    lpDAO.getLabProcedure(id);\r\n    assertEquals(\"Kelly Doctor\", action.getHCPName(902L));\r\n}"},
 {"id":676, "methodname":"testSetToTesting()", "methodnamerefined":"testSetToTesting", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testSetToTesting", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testSetToTesting()", "classid":118, "classname":"edu.ncsu.csc.itrust.action.LabProcLTActionTest", "shortclassname":"LabProcLTActionTest", "method":"public void testSetToTesting() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusReceived();\r\n    lp.setLTID(5000000005L);\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    lp.setProcedureID(id);\r\n    assertTrue(action.setToTesting(id));\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(\"Testing\", procedures.getStatus());\r\n}"},
 {"id":677, "methodname":"testSubmitReceived()", "methodnamerefined":"testSubmitReceived", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testSubmitReceived", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testSubmitReceived()", "classid":118, "classname":"edu.ncsu.csc.itrust.action.LabProcLTActionTest", "shortclassname":"LabProcLTActionTest", "method":"public void testSubmitReceived() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusInTransit();\r\n    lp.setLTID(5000000005L);\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    lp.setProcedureID(id);\r\n    assertTrue(action.submitReceived((\"\" + id)));\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(\"Received\", procedures.getStatus());\r\n}"},
 {"id":678, "methodname":"testSubmitResults()", "methodnamerefined":"testSubmitResults", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testSubmitResults", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testSubmitResults()", "classid":118, "classname":"edu.ncsu.csc.itrust.action.LabProcLTActionTest", "shortclassname":"LabProcLTActionTest", "method":"public void testSubmitResults() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusReceived();\r\n    lp.setLTID(5000000005L);\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    lp.setProcedureID(id);\r\n    assertTrue(action.submitResults((\"\" + id), \"12\", \"grams\", \"13\", \"14\"));\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(\"Pending\", procedures.getStatus());\r\n    assertEquals(\"12\", procedures.getNumericalResult());\r\n    assertEquals(\"grams\", procedures.getNumericalResultUnit());\r\n    assertEquals(\"13\", procedures.getUpperBound());\r\n    assertEquals(\"14\", procedures.getLowerBound());\r\n}"},
 {"id":679, "methodname":"testUpdateProcedure()", "methodnamerefined":"testUpdateProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testUpdateProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testUpdateProcedure()", "classid":118, "classname":"edu.ncsu.csc.itrust.action.LabProcLTActionTest", "shortclassname":"LabProcLTActionTest", "method":"public void testUpdateProcedure() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusInTransit();\r\n    lp.setLTID(5000000005L);\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    lp.setProcedureID(id);\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    List<LabProcedureBean> beans = action.viewInTransitProcedures(5000000005L);\r\n    assertEquals(1, beans.size());\r\n    LabProcedureBean lpBean = beans.get(0);\r\n    assertEquals(procedures.getLoinc(), lpBean.getLoinc());\r\n    assertEquals(procedures.getOvID(), lpBean.getOvID());\r\n    assertEquals(procedures.getLoinc(), lpBean.getLoinc());\r\n    assertEquals(\"In Transit\", lpBean.getStatus());\r\n    assertEquals(procedures.getProcedureID(), lpBean.getProcedureID());\r\n}"},
 {"id":680, "methodname":"testViewReceivedProcedures()", "methodnamerefined":"testViewReceivedProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testViewReceivedProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testViewReceivedProcedures()", "classid":118, "classname":"edu.ncsu.csc.itrust.action.LabProcLTActionTest", "shortclassname":"LabProcLTActionTest", "method":"public void testViewReceivedProcedures() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusReceived();\r\n    lp.setLTID(5000000005L);\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    lp.setProcedureID(id);\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    List<LabProcedureBean> beans = action.viewReceivedProcedures(5000000005L);\r\n    assertEquals(1, beans.size());\r\n    LabProcedureBean lpBean = beans.get(0);\r\n    assertEquals(procedures.getLoinc(), lpBean.getLoinc());\r\n    assertEquals(procedures.getOvID(), lpBean.getOvID());\r\n    assertEquals(procedures.getLoinc(), lpBean.getLoinc());\r\n    assertEquals(\"Received\", lpBean.getStatus());\r\n    assertEquals(procedures.getProcedureID(), lpBean.getProcedureID());\r\n}"},
 {"id":681, "methodname":"testViewTestingProcedures()", "methodnamerefined":"testViewTestingProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testViewTestingProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcLTActionTest.testViewTestingProcedures()", "classid":118, "classname":"edu.ncsu.csc.itrust.action.LabProcLTActionTest", "shortclassname":"LabProcLTActionTest", "method":"public void testViewTestingProcedures() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusTesting();\r\n    lp.setLTID(5000000005L);\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    lp.setProcedureID(id);\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    List<LabProcedureBean> beans = action.viewTestingProcedures(5000000005L);\r\n    assertEquals(1, beans.size());\r\n    LabProcedureBean lpBean = beans.get(0);\r\n    assertEquals(procedures.getLoinc(), lpBean.getLoinc());\r\n    assertEquals(procedures.getOvID(), lpBean.getOvID());\r\n    assertEquals(procedures.getLoinc(), lpBean.getLoinc());\r\n    assertEquals(\"Testing\", lpBean.getStatus());\r\n    assertEquals(procedures.getProcedureID(), lpBean.getProcedureID());\r\n}"},
 {"id":682, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcUAPAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":119, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPAction", "shortclassname":"LabProcUAPAction", "method":"/**\r\n * Setup\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tUAP who is logged in\r\n */\r\npublic LabProcUAPAction(DAOFactory factory, long loggedInMID) {\r\n    factory.getTransactionDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n    this.factory = factory;\r\n}"},
 {"id":683, "methodname":"makeEmail(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"makeEmail", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcUAPAction.makeEmail", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcUAPAction.makeEmail(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":119, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPAction", "shortclassname":"LabProcUAPAction", "method":"/**\r\n * Sends an e-mail informing the patient that their procedure has been updated\r\n *\r\n * @param b\r\n * \t\tthe procedure that was updated\r\n * @return an e-mail to the patient with the notice\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmail(LabProcedureBean b) throws DBException {\r\n    PatientBean p = new PatientDAO(factory).getPatient(b.getPid());\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"A Lab Procedure Was Updated\");\r\n    email.setBody(String.format(\"Dear %s, \n Your Lab Procedure (%s) has a new updated status of %s. Log on to iTrust to view.\", p.getFullName(), b.getLoinc(), b.getStatus()));\r\n    return email;\r\n}"},
 {"id":684, "methodname":"updateProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"updateProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcUAPAction.updateProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcUAPAction.updateProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":119, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPAction", "shortclassname":"LabProcUAPAction", "method":"/**\r\n * Updates a lab procedure\r\n *\r\n * @param b\r\n * \t\tthe procedure to update\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic void updateProcedure(LabProcedureBean b) throws DBException, FormValidationException {\r\n    validator.validate(b);\r\n    // need to check if status is whats being changed - if new status!=old status send email\r\n    if (!(b.getStatus().equals(lpDAO.getLabProcedure(b.getProcedureID()).getStatus()))) {\r\n        new EmailUtil(factory).sendEmail(makeEmail(b));\r\n    }\r\n    lpDAO.updateLabProcedure(b);\r\n}"},
 {"id":685, "methodname":"viewPatientProcedures(long)", "methodnamerefined":"viewPatientProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcUAPAction.viewPatientProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcUAPAction.viewPatientProcedures(long)", "classid":119, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPAction", "shortclassname":"LabProcUAPAction", "method":"/**\r\n * Returns a list of the lab procedures associated with both the HCP and\r\n * the given patient.\r\n *\r\n * @param pid\r\n * \t\tThe id of the patient.\r\n * @return A list of lab procedures.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> viewPatientProcedures(long pid) throws DBException {\r\n    return lpDAO.getLabProcedures(loggedInMID, pid);\r\n}"},
 {"id":686, "methodname":"viewProcedures(long)", "methodnamerefined":"viewProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcUAPAction.viewProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcUAPAction.viewProcedures(long)", "classid":119, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPAction", "shortclassname":"LabProcUAPAction", "method":"/**\r\n * Returns a list of all the lab procedures for a particular patient.\r\n *\r\n * @param id\r\n * \t\tMID of the UAP viewing the procedures\r\n * @return a list of all the lab procedures for that UAP\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> viewProcedures(long id) throws DBException {\r\n    return lpDAO.getAllLabProceduresDate(id);\r\n}"},
 {"id":687, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest.-init-()", "classid":120, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest", "shortclassname":"LabProcUAPActionTest", "method":"LabProcUAPActionTest() {\r\n}"},
 {"id":688, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest.setUp()", "classid":120, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest", "shortclassname":"LabProcUAPActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.uap1();\r\n    gen.labProcedures();\r\n    action = new LabProcUAPAction(factory, 8000000009L);\r\n}"},
 {"id":689, "methodname":"testUpdateProcedure()", "methodnamerefined":"testUpdateProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest.testUpdateProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest.testUpdateProcedure()", "classid":120, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest", "shortclassname":"LabProcUAPActionTest", "method":"public void testUpdateProcedure() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"This is a routine procedure\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(2L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusPending();\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    lp.setProcedureID(id);\r\n    lp.statusComplete();\r\n    lp.setResults(\"No abnormal results\");\r\n    action.updateProcedure(lp);\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(LabProcedureBean.Completed, procedures.getStatus());\r\n    assertEquals(\"No abnormal results\", procedures.getResults());\r\n    List<Email> list = feDAO.getAllEmails();\r\n    assertEquals(\"Dear Andy Programmer, \n Your Lab Procedure (10763-1) has a new updated status of Completed. Log on to iTrust to view.\", list.get(0).getBody());\r\n}"},
 {"id":690, "methodname":"testViewProcedure()", "methodnamerefined":"testViewProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest.testViewProcedure", "fullmethod":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest.testViewProcedure()", "classid":120, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPActionTest", "shortclassname":"LabProcUAPActionTest", "method":"public void testViewProcedure() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setCommentary(\"This is a routine procedure\");\r\n    lp.setOvID(902L);\r\n    lp.setPid(3L);\r\n    lp.setResults(\"\");\r\n    lp.allow();\r\n    lp.statusPending();\r\n    long id = lpDAO.addLabProcedure(lp);\r\n    List<LabProcedureBean> procedures = action.viewProcedures(3L);\r\n    assertEquals(1, procedures.size());\r\n    assertEquals(id, procedures.get(0).getProcedureID());\r\n}"},
 {"id":691, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "classid":121, "classname":"edu.ncsu.csc.itrust.action.LoginFailureAction", "shortclassname":"LoginFailureAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param ipAddr\r\n * \t\tThe IP address of the user making the login attempt.\r\n */\r\npublic LoginFailureAction(DAOFactory factory, String ipAddr) {\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.ipAddr = ipAddr;\r\n    validCaptcha = false;\r\n    hasAttempts = false;\r\n}"},
 {"id":692, "methodname":"getFailureCount()", "methodnamerefined":"getFailureCount", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureAction.getFailureCount", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureAction.getFailureCount()", "classid":121, "classname":"edu.ncsu.csc.itrust.action.LoginFailureAction", "shortclassname":"LoginFailureAction", "method":"public int getFailureCount() {\r\n    try {\r\n        return authDAO.getLoginFailures(ipAddr);\r\n    } catch (DBException e) {\r\n        return 0;\r\n    }\r\n}"},
 {"id":693, "methodname":"isValidForLogin()", "methodnamerefined":"isValidForLogin", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureAction.isValidForLogin", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureAction.isValidForLogin()", "classid":121, "classname":"edu.ncsu.csc.itrust.action.LoginFailureAction", "shortclassname":"LoginFailureAction", "method":"/**\r\n * Checks to see if the current user can login (#failures<3)\r\n *\r\n * @return true if the user is valid to login\r\n */\r\npublic boolean isValidForLogin() {\r\n    try {\r\n        return ((authDAO.getLoginFailures(ipAddr)) < 3) || (validCaptcha);\r\n    } catch (DBException e) {\r\n        return false;\r\n    }\r\n}"},
 {"id":694, "methodname":"needsCaptcha()", "methodnamerefined":"needsCaptcha", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureAction.needsCaptcha", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureAction.needsCaptcha()", "classid":121, "classname":"edu.ncsu.csc.itrust.action.LoginFailureAction", "shortclassname":"LoginFailureAction", "method":"public boolean needsCaptcha() {\r\n    try {\r\n        return (authDAO.getLoginFailures(ipAddr)) >= 3;\r\n    } catch (DBException e) {\r\n        System.err.println(\"Denying access due to DBException\");\r\n        return false;\r\n    }\r\n}"},
 {"id":695, "methodname":"recordLoginFailure()", "methodnamerefined":"recordLoginFailure", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureAction.recordLoginFailure", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureAction.recordLoginFailure()", "classid":121, "classname":"edu.ncsu.csc.itrust.action.LoginFailureAction", "shortclassname":"LoginFailureAction", "method":"/**\r\n * Calls authDAO to record the login failure in the database\r\n *\r\n * @return How many login failure attempts or a DBException message\r\n */\r\npublic String recordLoginFailure() {\r\n    try {\r\n        authDAO.recordLoginFailure(ipAddr);\r\n        int loginFailures = authDAO.getLoginFailures(ipAddr);\r\n        hasAttempts = true;\r\n        return \"Login failed, attempt \" + loginFailures;\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":696, "methodname":"resetFailures()", "methodnamerefined":"resetFailures", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureAction.resetFailures", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureAction.resetFailures()", "classid":121, "classname":"edu.ncsu.csc.itrust.action.LoginFailureAction", "shortclassname":"LoginFailureAction", "method":"public void resetFailures() throws DBException, SQLException {\r\n    if (hasAttempts) {\r\n        authDAO.resetLoginFailuresToZero(ipAddr);\r\n        hasAttempts = false;\r\n    }\r\n}"},
 {"id":697, "methodname":"setCaptcha(boolean)", "methodnamerefined":"setCaptcha", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureAction.setCaptcha", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureAction.setCaptcha(boolean)", "classid":121, "classname":"edu.ncsu.csc.itrust.action.LoginFailureAction", "shortclassname":"LoginFailureAction", "method":"public void setCaptcha(boolean val) {\r\n    validCaptcha = val;\r\n}"},
 {"id":698, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.-init-()", "classid":122, "classname":"edu.ncsu.csc.itrust.action.LoginFailureActionTest", "shortclassname":"LoginFailureActionTest", "method":"LoginFailureActionTest() {\r\n}"},
 {"id":699, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.setUp()", "classid":122, "classname":"edu.ncsu.csc.itrust.action.LoginFailureActionTest", "shortclassname":"LoginFailureActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    action = new LoginFailureAction(factory, \"192.168.1.1\");\r\n}"},
 {"id":700, "methodname":"testIsValidForLoginEvil()", "methodnamerefined":"testIsValidForLoginEvil", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.testIsValidForLoginEvil", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.testIsValidForLoginEvil()", "classid":122, "classname":"edu.ncsu.csc.itrust.action.LoginFailureActionTest", "shortclassname":"LoginFailureActionTest", "method":"public void testIsValidForLoginEvil() throws Exception {\r\n    action = new LoginFailureAction(evil, \"192.168.1.1\");\r\n    assertEquals(false, action.isValidForLogin());\r\n}"},
 {"id":701, "methodname":"testNeedsCaptcha()", "methodnamerefined":"testNeedsCaptcha", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.testNeedsCaptcha", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.testNeedsCaptcha()", "classid":122, "classname":"edu.ncsu.csc.itrust.action.LoginFailureActionTest", "shortclassname":"LoginFailureActionTest", "method":"public void testNeedsCaptcha() throws Exception {\r\n    assertEquals(0, action.getFailureCount());\r\n    assertFalse(action.needsCaptcha());\r\n    action.recordLoginFailure();\r\n    assertFalse(action.needsCaptcha());\r\n    action.recordLoginFailure();\r\n    assertFalse(action.needsCaptcha());\r\n    assertEquals(2, action.getFailureCount());\r\n    action.recordLoginFailure();\r\n    assertTrue(action.needsCaptcha());\r\n    assertEquals(3, action.getFailureCount());\r\n    action.resetFailures();\r\n    assertFalse(action.needsCaptcha());\r\n    assertEquals(0, action.getFailureCount());\r\n}"},
 {"id":702, "methodname":"testNormalLoginFailureSequence()", "methodnamerefined":"testNormalLoginFailureSequence", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.testNormalLoginFailureSequence", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.testNormalLoginFailureSequence()", "classid":122, "classname":"edu.ncsu.csc.itrust.action.LoginFailureActionTest", "shortclassname":"LoginFailureActionTest", "method":"public void testNormalLoginFailureSequence() throws Exception {\r\n    assertTrue(action.isValidForLogin());\r\n    assertEquals(\"Login failed, attempt 1\", action.recordLoginFailure());\r\n    assertTrue(action.isValidForLogin());\r\n    assertEquals(\"Login failed, attempt 2\", action.recordLoginFailure());\r\n    assertTrue(action.isValidForLogin());\r\n    assertEquals(\"Login failed, attempt 3\", action.recordLoginFailure());\r\n    assertFalse(action.isValidForLogin());\r\n}"},
 {"id":703, "methodname":"testRecordLoginFailureEvil()", "methodnamerefined":"testRecordLoginFailureEvil", "methodabbreviation":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.testRecordLoginFailureEvil", "fullmethod":"edu.ncsu.csc.itrust.action.LoginFailureActionTest.testRecordLoginFailureEvil()", "classid":122, "classname":"edu.ncsu.csc.itrust.action.LoginFailureActionTest", "shortclassname":"LoginFailureActionTest", "method":"public void testRecordLoginFailureEvil() throws Exception {\r\n    action = new LoginFailureAction(evil, \"192.168.1.1\");\r\n    assertEquals((\"A database exception has occurred. Please see the log in the \" + \"console for stacktrace\"), action.recordLoginFailure());\r\n}"},
 {"id":704, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":123, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction", "shortclassname":"ManageHospitalAssignmentsAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user managing hospitals.\r\n */\r\npublic ManageHospitalAssignmentsAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalsDAO = factory.getHospitalsDAO();\r\n}"},
 {"id":705, "methodname":"assignHCPToHospital(java.lang.String,java.lang.String)", "methodnamerefined":"assignHCPToHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.assignHCPToHospital", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.assignHCPToHospital(java.lang.String,java.lang.String)", "classid":123, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction", "shortclassname":"ManageHospitalAssignmentsAction", "method":"/**\r\n * Assigns the mid to the hospital\r\n *\r\n * @param midString\r\n * \t\tThe MID of the person assigned to the hospital as a String.\r\n * @param hospitalID\r\n * \t\tThe ID of the hospital.\r\n * @return message indicating the status of the assignment\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String assignHCPToHospital(String midString, String hospitalID) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        boolean confirm = hospitalsDAO.assignHospital(hcpID, hospitalID);\r\n        if (confirm) {\r\n            /* only patient is mentioned for transaction type 0, but spec looks like personnel\n            should be included too...\n             */\r\n            return \"HCP successfully assigned.\";\r\n        } else\r\n            return \"Assignment did not occur\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}"},
 {"id":706, "methodname":"checkHCPID(java.lang.String)", "methodnamerefined":"checkHCPID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.checkHCPID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.checkHCPID(java.lang.String)", "classid":123, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction", "shortclassname":"ManageHospitalAssignmentsAction", "method":"/**\r\n * Checks if the hcpID param is a HCP\r\n *\r\n * @param hcpID\r\n * \t\tthe String to be checked\r\n * @return the mid as a long if the hcpID is a HCPs mid\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long checkHCPID(String hcpID) throws iTrustException {\r\n    try {\r\n        long pid = Long.valueOf(hcpID);\r\n        if (personnelDAO.checkPersonnelExists(pid))\r\n            return pid;\r\n        else\r\n            throw new iTrustException(\"HCP does not exist\");\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"HCP ID is not a number: \" + (e.getMessage())));\r\n    }\r\n}"},
 {"id":707, "methodname":"checkLTHospital(java.lang.String)", "methodnamerefined":"checkLTHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.checkLTHospital", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.checkLTHospital(java.lang.String)", "classid":123, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction", "shortclassname":"ManageHospitalAssignmentsAction", "method":"/**\r\n * Checks if the HCP is a LT if it is then check to see if a hospital is assigned to them\r\n *\r\n * @param hcpID\r\n * \t\tthe String to be checked\r\n * @return true If the LT has an assigned hospital\r\n * @return false If the LT does not have an assigned hospital\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean checkLTHospital(String hcpID) throws iTrustException {\r\n    try {\r\n        long pid = Long.valueOf(hcpID);\r\n        if (personnelDAO.getPersonnel(pid).getRole().toString().equals(\"LT\")) {\r\n            if (hospitalsDAO.checkLTHasHospital(pid)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"LT ID is not a number: \" + (e.getMessage())));\r\n    }\r\n    return false;\r\n}"},
 {"id":708, "methodname":"getAssignedHospitals(java.lang.String)", "methodnamerefined":"getAssignedHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.getAssignedHospitals", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.getAssignedHospitals(java.lang.String)", "classid":123, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction", "shortclassname":"ManageHospitalAssignmentsAction", "method":"/**\r\n * Returns a list of hospitals to which the given mid is currently assigned\r\n *\r\n * @param midString\r\n * \t\t\r\n * @return list of HosptialBeans\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<HospitalBean> getAssignedHospitals(String midString) throws iTrustException {\r\n    try {\r\n        long mid = Long.valueOf(midString);\r\n        return personnelDAO.getHospitals(mid);\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}"},
 {"id":709, "methodname":"getAvailableHospitals(java.lang.String)", "methodnamerefined":"getAvailableHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.getAvailableHospitals", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.getAvailableHospitals(java.lang.String)", "classid":123, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction", "shortclassname":"ManageHospitalAssignmentsAction", "method":"/**\r\n * Returns a list of hospitals to which the given mid is not currently assigned\r\n *\r\n * @param midString\r\n * \t\t\r\n * @return list of HospitalBeans\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<HospitalBean> getAvailableHospitals(String midString) throws iTrustException {\r\n    try {\r\n        long mid = Long.valueOf(midString);\r\n        List<HospitalBean> allHospitals = hospitalsDAO.getAllHospitals();\r\n        List<HospitalBean> ourHospitals = personnelDAO.getHospitals(mid);\r\n        while (!(ourHospitals.isEmpty())) {\r\n            allHospitals.remove(ourHospitals.remove(0));\r\n        } \r\n        return allHospitals;\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}"},
 {"id":710, "methodname":"removeAllAssignmentsFromHCP(java.lang.String)", "methodnamerefined":"removeAllAssignmentsFromHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.removeAllAssignmentsFromHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.removeAllAssignmentsFromHCP(java.lang.String)", "classid":123, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction", "shortclassname":"ManageHospitalAssignmentsAction", "method":"/**\r\n * Removes all hospital assignments for the given hcp mid\r\n *\r\n * @param midString\r\n * \t\tHCPs mid\r\n * @return status message\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic int removeAllAssignmentsFromHCP(String midString) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        int numAssignments = hospitalsDAO.removeAllHospitalAssignmentsFrom(hcpID);\r\n        return numAssignments;\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}"},
 {"id":711, "methodname":"removeHCPAssignmentToHospital(java.lang.String,java.lang.String)", "methodnamerefined":"removeHCPAssignmentToHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.removeHCPAssignmentToHospital", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.removeHCPAssignmentToHospital(java.lang.String,java.lang.String)", "classid":123, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction", "shortclassname":"ManageHospitalAssignmentsAction", "method":"/**\r\n * Removes HCPs assignment to the designated hospital\r\n *\r\n * @param midString\r\n * \t\tthe HCPs mid\r\n * @param hospitalID\r\n * \t\tthe hospital id to be removed\r\n * @return Status message\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String removeHCPAssignmentToHospital(String midString, String hospitalID) throws iTrustException {\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        boolean confirm = hospitalsDAO.removeHospitalAssignment(hcpID, hospitalID);\r\n        if (confirm) {\r\n            return \"HCP successfully unassigned\";\r\n        } else\r\n            return \"HCP not unassigned\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCPs MID not a number\");\r\n    }\r\n}"},
 {"id":712, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.-init-()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"ManageHospitalAssignmentsActionTest() {\r\n}"},
 {"id":713, "methodname":"doAssignment()", "methodnamerefined":"doAssignment", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.doAssignment", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.doAssignment()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"private String doAssignment() throws iTrustException {\r\n    return action.assignHCPToHospital((\"\" + (ManageHospitalAssignmentsActionTest.hcp0)), ManageHospitalAssignmentsActionTest.hosp0);\r\n}"},
 {"id":714, "methodname":"doAssignment(java.lang.String)", "methodnamerefined":"doAssignment", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.doAssignment", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.doAssignment(java.lang.String)", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"private String doAssignment(String hospitalID) throws DBException, iTrustException {\r\n    return action.assignHCPToHospital((\"\" + (ManageHospitalAssignmentsActionTest.hcp0)), hospitalID);\r\n}"},
 {"id":715, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.setUp()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.admin1();\r\n    gen.hospitals();\r\n    gen.clearHospitalAssignments();\r\n    gen.ltData0();\r\n    action = new ManageHospitalAssignmentsAction(factory, ManageHospitalAssignmentsActionTest.performingAdmin);\r\n    ltAction = new ManageHospitalAssignmentsAction(factory, ManageHospitalAssignmentsActionTest.lt0);\r\n}"},
 {"id":716, "methodname":"testAssignDuplicate()", "methodnamerefined":"testAssignDuplicate", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testAssignDuplicate", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testAssignDuplicate()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testAssignDuplicate() throws iTrustException {\r\n    assertEquals(\"HCP successfully assigned.\", doAssignment());\r\n    try {\r\n        doAssignment();\r\n        fail(\"testAssignDuplicate failed: assignHCPToHospital should have thrown exception\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"HCP 9000000000 already assigned to hospital 1\", e.getMessage());\r\n    }\r\n}"},
 {"id":717, "methodname":"testAssignHCPToHospital()", "methodnamerefined":"testAssignHCPToHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testAssignHCPToHospital", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testAssignHCPToHospital()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testAssignHCPToHospital() throws iTrustException {\r\n    assertEquals(\"HCP successfully assigned.\", doAssignment());\r\n    List<HospitalBean> h = action.getAssignedHospitals((\"\" + (ManageHospitalAssignmentsActionTest.hcp0)));\r\n    assertEquals(1, h.size());\r\n    assertEquals(\"1\", h.get(0).getHospitalID());\r\n}"},
 {"id":718, "methodname":"testAssignHCPToHospitalBadID()", "methodnamerefined":"testAssignHCPToHospitalBadID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testAssignHCPToHospitalBadID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testAssignHCPToHospitalBadID()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testAssignHCPToHospitalBadID() {\r\n    try {\r\n        action.assignHCPToHospital(\"f\", \"1\");\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":719, "methodname":"testAssignHCPToHospitalEvil()", "methodnamerefined":"testAssignHCPToHospitalEvil", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testAssignHCPToHospitalEvil", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testAssignHCPToHospitalEvil()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testAssignHCPToHospitalEvil() {\r\n    action = new ManageHospitalAssignmentsAction(evil, ManageHospitalAssignmentsActionTest.performingAdmin);\r\n    try {\r\n        action.getAssignedHospitals((\"\" + (ManageHospitalAssignmentsActionTest.hcp0)));\r\n        fail();\r\n    } catch (iTrustException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":720, "methodname":"testCheckHCPID()", "methodnamerefined":"testCheckHCPID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckHCPID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckHCPID()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testCheckHCPID() throws iTrustException {\r\n    assertEquals(9000000000L, action.checkHCPID(\"9000000000\"));\r\n}"},
 {"id":721, "methodname":"testCheckHCPIDBadMID()", "methodnamerefined":"testCheckHCPIDBadMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckHCPIDBadMID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckHCPIDBadMID()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testCheckHCPIDBadMID() {\r\n    try {\r\n        action.checkHCPID(\"90000000001\");\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":722, "methodname":"testCheckHCPIDEvil()", "methodnamerefined":"testCheckHCPIDEvil", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckHCPIDEvil", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckHCPIDEvil()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testCheckHCPIDEvil() {\r\n    try {\r\n        action = new ManageHospitalAssignmentsAction(evil, ManageHospitalAssignmentsActionTest.performingAdmin);\r\n        action.checkHCPID(\"9000000000\");\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":723, "methodname":"testCheckHCPIDStringMID()", "methodnamerefined":"testCheckHCPIDStringMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckHCPIDStringMID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckHCPIDStringMID()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testCheckHCPIDStringMID() {\r\n    try {\r\n        action.checkHCPID(\"f\");\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":724, "methodname":"testCheckLTHospital()", "methodnamerefined":"testCheckLTHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckLTHospital", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckLTHospital()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"/**\r\n * New Method to check and make sure LTs only have 1 hospital\r\n *\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic void testCheckLTHospital() throws iTrustException, FileNotFoundException, IOException, SQLException {\r\n    assertTrue(ltAction.checkLTHospital(\"5000000001\"));\r\n    gen.clearHospitalAssignments();\r\n    assertFalse(ltAction.checkLTHospital(\"5000000001\"));\r\n}"},
 {"id":725, "methodname":"testCheckLTIDStringMID()", "methodnamerefined":"testCheckLTIDStringMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckLTIDStringMID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testCheckLTIDStringMID()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"/**\r\n * This method checks to make sure checkLTHospital method can correctly handle\r\n * and illegal MID.\r\n */\r\npublic void testCheckLTIDStringMID() {\r\n    try {\r\n        assertFalse(ltAction.checkLTHospital(\"ABCD\"));\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":726, "methodname":"testGetAssignedHospitalsBadMID()", "methodnamerefined":"testGetAssignedHospitalsBadMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testGetAssignedHospitalsBadMID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testGetAssignedHospitalsBadMID()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testGetAssignedHospitalsBadMID() {\r\n    try {\r\n        action.getAssignedHospitals(\"f\");\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":727, "methodname":"testGetAvailableHospitals()", "methodnamerefined":"testGetAvailableHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testGetAvailableHospitals", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testGetAvailableHospitals()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testGetAvailableHospitals() throws iTrustException {\r\n    assertSame(9, action.getAvailableHospitals(\"9000000000\").size());\r\n}"},
 {"id":728, "methodname":"testGetAvailableHospitalsBadMID()", "methodnamerefined":"testGetAvailableHospitalsBadMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testGetAvailableHospitalsBadMID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testGetAvailableHospitalsBadMID()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testGetAvailableHospitalsBadMID() {\r\n    try {\r\n        action.getAvailableHospitals(\"f\");\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":729, "methodname":"testRemovaAllUnassigned()", "methodnamerefined":"testRemovaAllUnassigned", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemovaAllUnassigned", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemovaAllUnassigned()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testRemovaAllUnassigned() throws iTrustException {\r\n    assertEquals(0, action.removeAllAssignmentsFromHCP((\"\" + (ManageHospitalAssignmentsActionTest.hcp0))));\r\n}"},
 {"id":730, "methodname":"testRemoveAll()", "methodnamerefined":"testRemoveAll", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveAll", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveAll()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testRemoveAll() throws iTrustException, Exception {\r\n    doAssignment();\r\n    doAssignment(ManageHospitalAssignmentsActionTest.hosp1);\r\n    doAssignment(ManageHospitalAssignmentsActionTest.hosp2);\r\n    assertEquals(3, action.getAssignedHospitals((\"\" + (ManageHospitalAssignmentsActionTest.hcp0))).size());\r\n    assertEquals(3, action.removeAllAssignmentsFromHCP((\"\" + (ManageHospitalAssignmentsActionTest.hcp0))));\r\n    assertEquals(0, action.getAssignedHospitals((\"\" + (ManageHospitalAssignmentsActionTest.hcp0))).size());\r\n}"},
 {"id":731, "methodname":"testRemoveAllEvil()", "methodnamerefined":"testRemoveAllEvil", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveAllEvil", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveAllEvil()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testRemoveAllEvil() {\r\n    action = new ManageHospitalAssignmentsAction(evil, ManageHospitalAssignmentsActionTest.performingAdmin);\r\n    try {\r\n        action.removeAllAssignmentsFromHCP((\"\" + (ManageHospitalAssignmentsActionTest.hcp0)));\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":732, "methodname":"testRemoveHCPAssignmentsBadID()", "methodnamerefined":"testRemoveHCPAssignmentsBadID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveHCPAssignmentsBadID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveHCPAssignmentsBadID()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testRemoveHCPAssignmentsBadID() {\r\n    try {\r\n        action.removeAllAssignmentsFromHCP(\"l\");\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":733, "methodname":"testRemoveHCPtoHospitalBadID()", "methodnamerefined":"testRemoveHCPtoHospitalBadID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveHCPtoHospitalBadID", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveHCPtoHospitalBadID()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testRemoveHCPtoHospitalBadID() {\r\n    try {\r\n        action.removeHCPAssignmentToHospital(\"f\", \"1\");\r\n        fail();\r\n    } catch (iTrustException e) {\r\n    }\r\n}"},
 {"id":734, "methodname":"testRemoveNonAssigned()", "methodnamerefined":"testRemoveNonAssigned", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveNonAssigned", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemoveNonAssigned()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testRemoveNonAssigned() throws iTrustException {\r\n    assertEquals(\"HCP not unassigned\", action.removeHCPAssignmentToHospital((\"\" + (ManageHospitalAssignmentsActionTest.hcp0)), ManageHospitalAssignmentsActionTest.hosp0));\r\n}"},
 {"id":735, "methodname":"testRemovePersonnelAssignmentToHospital()", "methodnamerefined":"testRemovePersonnelAssignmentToHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemovePersonnelAssignmentToHospital", "fullmethod":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest.testRemovePersonnelAssignmentToHospital()", "classid":124, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsActionTest", "shortclassname":"ManageHospitalAssignmentsActionTest", "method":"public void testRemovePersonnelAssignmentToHospital() throws iTrustException {\r\n    doAssignment();\r\n    assertEquals(\"HCP successfully unassigned\", action.removeHCPAssignmentToHospital((\"\" + (ManageHospitalAssignmentsActionTest.hcp0)), ManageHospitalAssignmentsActionTest.hosp0));\r\n    assertEquals(0, action.getAssignedHospitals((\"\" + (ManageHospitalAssignmentsActionTest.hcp0))).size());\r\n}"},
 {"id":736, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":125, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction", "shortclassname":"MonitorAdverseEventAction", "method":"/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param loggedInMID\r\n * \t\t\r\n */\r\npublic MonitorAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.messenger = new SendMessageAction(factory, loggedInMID);\r\n}"},
 {"id":737, "methodname":"getName(long)", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.getName", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.getName(long)", "classid":125, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction", "shortclassname":"MonitorAdverseEventAction", "method":"/**\r\n * Returns the patients name\r\n *\r\n * @param MID\r\n * \t\tthe MID of the patient to return the name for.\r\n * @return \r\n */\r\npublic String getName(long MID) {\r\n    try {\r\n        return patientDAO.getName(MID);\r\n    } catch (DBException e) {\r\n        return \"\";\r\n    } catch (iTrustException e) {\r\n        return \"Patient no longer exists\";\r\n    }\r\n}"},
 {"id":738, "methodname":"getReports(boolean,java.lang.String,java.lang.String)", "methodnamerefined":"getReports", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.getReports", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.getReports(boolean,java.lang.String,java.lang.String)", "classid":125, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction", "shortclassname":"MonitorAdverseEventAction", "method":"/**\r\n * Returns a list of reports between specified dates\r\n *\r\n * @param isPrescription\r\n * \t\tBoolean to return prescriptions or immunizations\r\n * @param start\r\n * \t\tThe starting date\r\n * @param end\r\n * \t\tThe ending date\r\n * @return the list of events\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n * @throws ParseException\r\n * \t\t\r\n */\r\npublic List<AdverseEventBean> getReports(boolean isPrescription, String start, String end) throws FormValidationException, iTrustException, SQLException, ParseException {\r\n    if (isPrescription) {\r\n        return adverseEventDAO.getPerscriptions(start, end);\r\n    } else {\r\n        // is Immunization\r\n        return adverseEventDAO.getImmunizations(start, end);\r\n    }\r\n}"},
 {"id":739, "methodname":"remove(int)", "methodnamerefined":"remove", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.remove", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.remove(int)", "classid":125, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction", "shortclassname":"MonitorAdverseEventAction", "method":"/**\r\n * Method used to remove an adverse event report\r\n *\r\n * @param id\r\n * \t\tthe id of the report to be removed\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void remove(int id) throws DBException, FormValidationException, iTrustException {\r\n    long HCPMID;\r\n    try {\r\n        AdverseEventBean aeBean = adverseEventDAO.getReport(id);\r\n        adverseEventDAO.removeReport(id);\r\n        HCPMID = adverseEventDAO.getHCPMID(id);\r\n        MessageBean mBeanTwo = new MessageBean();\r\n        MessageBean mBeanOne = new MessageBean();\r\n        String body = (((((\"An adverse event for \" + (aeBean.getDrug())) + \" perscribed to \") + (patientDAO.getName(Long.parseLong(aeBean.getMID())))) + \" with description: (\") + (aeBean.getDescription())) + \") was removed.\";\r\n        mBeanOne.setTo(Long.parseLong(aeBean.getMID()));\r\n        mBeanTwo.setTo(HCPMID);\r\n        mBeanOne.setSubject(\"Subject\");\r\n        mBeanTwo.setSubject(\"Subject\");\r\n        mBeanOne.setBody(body);\r\n        mBeanTwo.setBody(body);\r\n        mBeanOne.setFrom(loggedInMID);\r\n        mBeanTwo.setFrom(loggedInMID);\r\n        messenger.sendMessage(mBeanOne);\r\n        messenger.sendMessage(mBeanTwo);\r\n    } catch (SQLException e) {\r\n        throw new DBException(e);\r\n    }\r\n}"},
 {"id":740, "methodname":"sendEmail(long,java.lang.String)", "methodnamerefined":"sendEmail", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.sendEmail", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.sendEmail(long,java.lang.String)", "classid":125, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction", "shortclassname":"MonitorAdverseEventAction", "method":"/**\r\n * Sends an e-mail to a patient requesting more information\r\n *\r\n * @param patientMID\r\n * \t\tThe patient to receive the message\r\n * @param message\r\n * \t\tThe message\r\n * @return string for testing purposes\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String sendEmail(long patientMID, String message) throws DBException {\r\n    String rValue;\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean receiver = patientDAO.getPatient(patientMID);\r\n    toList.add(receiver.getEmail());\r\n    Email mail = new Email();\r\n    mail.setBody(message);\r\n    mail.setFrom(((loggedInMID) + \"\"));\r\n    mail.setToList(toList);\r\n    emailer.sendEmail(mail);\r\n    rValue = ((\"\" + (mail.getFrom())) + \" \") + (mail.getBody());\r\n    return rValue;\r\n}"},
 {"id":741, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.-init-()", "classid":126, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest", "shortclassname":"MonitorAdverseEventActionTest", "method":"MonitorAdverseEventActionTest() {\r\n}"},
 {"id":742, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.setUp()", "classid":126, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest", "shortclassname":"MonitorAdverseEventActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.pha0();\r\n    gen.patient1();\r\n    gen.adverseEventPres();\r\n    gen.ndCodes();\r\n    gen.cptCodes();\r\n    action = new MonitorAdverseEventAction(TestDAOFactory.getTestInstance(), 9999999990L);\r\n}"},
 {"id":743, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.tearDown()", "classid":126, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest", "shortclassname":"MonitorAdverseEventActionTest", "method":"@Override\r\nprotected void tearDown() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":744, "methodname":"testGetImmunizations()", "methodnamerefined":"testGetImmunizations", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testGetImmunizations", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testGetImmunizations()", "classid":126, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest", "shortclassname":"MonitorAdverseEventActionTest", "method":"public void testGetImmunizations() throws Exception {\r\n    List<AdverseEventBean> beanList = action.getReports(false, \"11/08/2008\", \"11/10/2010\");\r\n    assertEquals(\"Hepatitis B\", beanList.get(0).getDrug());\r\n}"},
 {"id":745, "methodname":"testGetName()", "methodnamerefined":"testGetName", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testGetName", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testGetName()", "classid":126, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest", "shortclassname":"MonitorAdverseEventActionTest", "method":"public void testGetName() throws Exception {\r\n    assertEquals(\"Random Person\", action.getName(1L));\r\n}"},
 {"id":746, "methodname":"testGetNoName()", "methodnamerefined":"testGetNoName", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testGetNoName", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testGetNoName()", "classid":126, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest", "shortclassname":"MonitorAdverseEventActionTest", "method":"public void testGetNoName() throws Exception {\r\n    assertEquals(\"Patient no longer exists\", action.getName(4));\r\n}"},
 {"id":747, "methodname":"testGetPrescriptions()", "methodnamerefined":"testGetPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testGetPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testGetPrescriptions()", "classid":126, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest", "shortclassname":"MonitorAdverseEventActionTest", "method":"public void testGetPrescriptions() throws Exception {\r\n    List<AdverseEventBean> beanList = action.getReports(true, \"11/08/2008\", \"11/10/2010\");\r\n    assertEquals(\"Prioglitazone\", beanList.get(0).getDrug());\r\n}"},
 {"id":748, "methodname":"testRemove()", "methodnamerefined":"testRemove", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testRemove", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testRemove()", "classid":126, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest", "shortclassname":"MonitorAdverseEventActionTest", "method":"public void testRemove() throws Exception {\r\n    action.remove(2);\r\n    List<AdverseEventBean> beanList = action.getReports(false, \"11/08/2008\", \"11/10/2010\");\r\n    assertEquals(\"removed\", beanList.get(0).getStatus());\r\n}"},
 {"id":749, "methodname":"testSendMessage()", "methodnamerefined":"testSendMessage", "methodabbreviation":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testSendMessage", "fullmethod":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest.testSendMessage()", "classid":126, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventActionTest", "shortclassname":"MonitorAdverseEventActionTest", "method":"public void testSendMessage() throws Exception {\r\n    assertEquals(\"9999999990 Ill fix you up\", action.sendEmail(1L, \"Ill fix you up\"));\r\n}"},
 {"id":750, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":128, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction", "shortclassname":"MyDiagnosisAction", "method":"/**\r\n * Set up for defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is looking at their diagnoses.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic MyDiagnosisAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.officeVisitDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labprocDAO = factory.getLabProcedureDAO();\r\n    this.prescriptionsDAO = factory.getPrescriptionsDAO();\r\n}"},
 {"id":751, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.-init-()", "classid":128, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction", "shortclassname":"MyDiagnosisAction", "method":"HCPDiagnosisBeanComparator() {\r\n}"},
 {"id":752, "methodname":"getDiagnoses()", "methodnamerefined":"getDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.getDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.getDiagnoses()", "classid":128, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction", "shortclassname":"MyDiagnosisAction", "method":"/**\r\n * Returns a list of DiagnosisBeans for the patient\r\n *\r\n * @return the list of DiagnosisBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<DiagnosisBean> getDiagnoses() throws DBException {\r\n    return patientDAO.getDiagnoses(loggedInMID);\r\n}"},
 {"id":753, "methodname":"getHCPByDiagnosis(java.lang.String)", "methodnamerefined":"getHCPByDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.getHCPByDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.getHCPByDiagnosis(java.lang.String)", "classid":128, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction", "shortclassname":"MyDiagnosisAction", "method":"/**\r\n * Returns a list of all the HCPs who have a particular diagnosis\r\n *\r\n * @param icdcode\r\n * \t\tthe diagnosis of interest\r\n * @return the list of HCPs\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<HCPDiagnosisBean> getHCPByDiagnosis(String icdcode) throws DBException {\r\n    int medMatch = 0;\r\n    HashMap<Long, HCPDiagnosisBean> hcpHash = new HashMap<Long, HCPDiagnosisBean>();\r\n    HashMap<Long, Long> patientHash = new HashMap<Long, Long>();\r\n    HCPDiagnosisBean diag = null;\r\n    List<OfficeVisitBean> beans = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\r\n    for (OfficeVisitBean bean : beans) {\r\n        // check for HCP-Patient locality based on first 3 digits in ZIP\r\n        if (!(patientDAO.getPatient(loggedInMID).getZip().substring(0, 2).equals(personnelDAO.getPersonnel(bean.getHcpID()).getZip().substring(0, 2))))\r\n            continue;\r\n\r\n        // Check to see if we already have a bean for the HCP associated with this visit\r\n        if (hcpHash.containsKey(bean.getHcpID())) {\r\n            diag = hcpHash.get(bean.getHcpID());\r\n            // get all prescriptions associated with an office visit\r\n            List<PrescriptionBean> prescriptions = prescriptionsDAO.getList(bean.getID());\r\n            for (PrescriptionBean p : prescriptions) {\r\n                List<MedicationBean> mlist = diag.getMedList();\r\n                for (MedicationBean b : mlist) {\r\n                    if (p.getMedication().getDescription().equals(b.getDescription()))\r\n                        medMatch++;\r\n\r\n                }\r\n                if (medMatch == 0) {\r\n                    mlist.add(p.getMedication());\r\n                    diag.setMedList(mlist);\r\n                } else {\r\n                    medMatch = 0;\r\n                }\r\n            }\r\n            // Get Lab Procedures\r\n            List<LabProcedureBean> labprocs = diag.getLabList();\r\n            List<LabProcedureBean> lpbeans = labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID());\r\n            for (LabProcedureBean p : lpbeans) {\r\n                labprocs.add(p);\r\n            }\r\n            diag.setLabList(labprocs);\r\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\r\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\r\n                diag.setVisitSat(survey.getVisitSatisfaction());\r\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\r\n            }\r\n            // Check if this patient has been seen multiple times for this diagnosis\r\n            if (!(patientHash.containsKey(bean.getPatientID()))) {\r\n                patientHash.put(bean.getPatientID(), bean.getHcpID());\r\n                diag.incNumPatients();\r\n            }\r\n        } else {\r\n            diag = new HCPDiagnosisBean();\r\n            List<MedicationBean> mlist = new ArrayList<MedicationBean>();\r\n            diag.setHCP(bean.getHcpID());\r\n            try {\r\n                diag.setHCPName(personnelDAO.getName(bean.getHcpID()));\r\n            } catch (iTrustException e) {\r\n                diag.setHCPName(\"null\");\r\n            }\r\n            diag.incNumPatients();\r\n            List<PrescriptionBean> prescriptions = prescriptionsDAO.getList(bean.getID());\r\n            for (PrescriptionBean p : prescriptions) {\r\n                mlist.add(p.getMedication());\r\n            }\r\n            diag.setMedList(mlist);\r\n            diag.setLabList(labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID()));\r\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\r\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\r\n                diag.setVisitSat(survey.getVisitSatisfaction());\r\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\r\n            }\r\n            patientHash.put(bean.getPatientID(), bean.getHcpID());\r\n            hcpHash.put(bean.getHcpID(), diag);\r\n        }\r\n    }\r\n    List<HCPDiagnosisBean> list = new ArrayList<HCPDiagnosisBean>(hcpHash.values());\r\n    Collections.sort(list, new MyDiagnosisAction.HCPDiagnosisBeanComparator());\r\n    return list;\r\n}"},
 {"id":754, "methodname":"getPrescriptionsByHCPAndICD(long,java.lang.String)", "methodnamerefined":"getPrescriptionsByHCPAndICD", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.getPrescriptionsByHCPAndICD", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.getPrescriptionsByHCPAndICD(long,java.lang.String)", "classid":128, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction", "shortclassname":"MyDiagnosisAction", "method":"/**\r\n * Looks up all the prescriptions given by a certain HCP with the same ICD code.\r\n *\r\n * @param hcpid\r\n * \t\tThe MID of the HCP\r\n * @param icdcode\r\n * \t\tThe ICD code of the prescription we are looking up.\r\n * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getPrescriptionsByHCPAndICD(long hcpid, String icdcode) throws DBException {\r\n    List<PrescriptionBean> list = new ArrayList<PrescriptionBean>();\r\n    List<OfficeVisitBean> ovs = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\r\n    for (int i = 0; i < (ovs.size()); i++) {\r\n        if ((ovs.get(i).getHcpID()) == hcpid) {\r\n            long ovid = ovs.get(i).getID();\r\n            List<PrescriptionBean> prescriptions = prescriptionsDAO.getList(ovid);\r\n            list.addAll(prescriptions);\r\n        }\r\n    }\r\n    return list;\r\n}"},
 {"id":755, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.-init-()", "classid":127, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator", "shortclassname":"MyDiagnosisAction$HCPDiagnosisBeanComparator", "method":"HCPDiagnosisBeanComparator() {\r\n}"},
 {"id":756, "methodname":"compare(edu.ncsu.csc.itrust.beans.HCPDiagnosisBean,edu.ncsu.csc.itrust.beans.HCPDiagnosisBean)", "methodnamerefined":"compare", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.compare", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.compare(edu.ncsu.csc.itrust.beans.HCPDiagnosisBean,edu.ncsu.csc.itrust.beans.HCPDiagnosisBean)", "classid":127, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator", "shortclassname":"MyDiagnosisAction$HCPDiagnosisBeanComparator", "method":"/**\r\n * Compares one HCP with another\r\n *\r\n * @param a\r\n * \t\tthe first HCP\r\n * @param b\r\n * \t\tthe second HCP\r\n * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\r\n */\r\npublic int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {\r\n    int ret = 0;\r\n    if ((a.getNumPatients()) > (b.getNumPatients()))\r\n        ret = -1;\r\n    else\r\n        if ((a.getNumPatients()) < (b.getNumPatients()))\r\n            ret = 1;\r\n\r\n\r\n    return ret;\r\n}"},
 {"id":757, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.-init-()", "classid":129, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest", "shortclassname":"MyDiagnosisActionTest", "method":"MyDiagnosisActionTest() {\r\n}"},
 {"id":758, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.setUp()", "classid":129, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest", "shortclassname":"MyDiagnosisActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patient_hcp_vists();\r\n    gen.hcp_diagnosis_data();\r\n}"},
 {"id":759, "methodname":"testCompare1()", "methodnamerefined":"testCompare1", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testCompare1", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testCompare1()", "classid":129, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest", "shortclassname":"MyDiagnosisActionTest", "method":"public void testCompare1() {\r\n    a = new HCPDiagnosisBean();\r\n    b = new HCPDiagnosisBean();\r\n    hcpdbc = new MyDiagnosisAction.HCPDiagnosisBeanComparator();\r\n    a.incNumPatients();\r\n    assertEquals((-1), hcpdbc.compare(a, b));// a > b\r\n\r\n}"},
 {"id":760, "methodname":"testCompare2()", "methodnamerefined":"testCompare2", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testCompare2", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testCompare2()", "classid":129, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest", "shortclassname":"MyDiagnosisActionTest", "method":"public void testCompare2() {\r\n    a = new HCPDiagnosisBean();\r\n    b = new HCPDiagnosisBean();\r\n    hcpdbc = new MyDiagnosisAction.HCPDiagnosisBeanComparator();\r\n    b.incNumPatients();\r\n    assertEquals(1, hcpdbc.compare(a, b));// a < b\r\n\r\n}"},
 {"id":761, "methodname":"testCompare3()", "methodnamerefined":"testCompare3", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testCompare3", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testCompare3()", "classid":129, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest", "shortclassname":"MyDiagnosisActionTest", "method":"public void testCompare3() {\r\n    a = new HCPDiagnosisBean();\r\n    b = new HCPDiagnosisBean();\r\n    hcpdbc = new MyDiagnosisAction.HCPDiagnosisBeanComparator();\r\n    a.incNumPatients();\r\n    b.incNumPatients();\r\n    assertEquals(0, hcpdbc.compare(a, b));// a == b\r\n\r\n}"},
 {"id":762, "methodname":"testGetDiagnoses()", "methodnamerefined":"testGetDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testGetDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testGetDiagnoses()", "classid":129, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest", "shortclassname":"MyDiagnosisActionTest", "method":"public void testGetDiagnoses() throws Exception {\r\n    action = new MyDiagnosisAction(factory, 2L);\r\n    List<DiagnosisBean> diagnoses = action.getDiagnoses();\r\n    assertEquals(11, diagnoses.size());\r\n    // further testing should be done in the patientDAO\r\n}"},
 {"id":763, "methodname":"testGetHCPByDiagnosis()", "methodnamerefined":"testGetHCPByDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testGetHCPByDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest.testGetHCPByDiagnosis()", "classid":129, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisActionTest", "shortclassname":"MyDiagnosisActionTest", "method":"public void testGetHCPByDiagnosis() throws Exception {\r\n    action = new MyDiagnosisAction(factory, 1L);\r\n    List<HCPDiagnosisBean> diags = action.getHCPByDiagnosis(\"79.1\");\r\n    assertEquals(9000000004L, diags.get(0).getHCP());\r\n    assertTrue(diags.get(0).getHCPName().equals(\"Jason Frankenstein\"));\r\n    assertEquals(2, diags.get(0).getNumPatients());\r\n    assertEquals(1, diags.get(0).getMedList().size());\r\n    assertEquals(0, diags.get(0).getLabList().size());\r\n    assertEquals(\"3.0\", diags.get(0).getVisitSatisfaction());\r\n    assertEquals(\"4.0\", diags.get(0).getTreatmentSatisfaction());\r\n}"},
 {"id":764, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientBaseActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.PatientBaseActionTest.-init-()", "classid":130, "classname":"edu.ncsu.csc.itrust.action.PatientBaseActionTest", "shortclassname":"PatientBaseActionTest", "method":"PatientBaseActionTest() {\r\n}"},
 {"id":765, "methodname":"testEvilDatabase()", "methodnamerefined":"testEvilDatabase", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientBaseActionTest.testEvilDatabase", "fullmethod":"edu.ncsu.csc.itrust.action.PatientBaseActionTest.testEvilDatabase()", "classid":130, "classname":"edu.ncsu.csc.itrust.action.PatientBaseActionTest", "shortclassname":"PatientBaseActionTest", "method":"public void testEvilDatabase() {\r\n    try {\r\n        new PatientBaseAction(EvilDAOFactory.getEvilInstance(), \"2222\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", e.getMessage());\r\n    }\r\n}"},
 {"id":766, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":131, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction", "shortclassname":"PatientRoomAssignmentAction", "method":"public PatientRoomAssignmentAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n    wardDAO = new WardDAO(factory);\r\n}"},
 {"id":767, "methodname":"assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"assignPatientToRoom", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom", "fullmethod":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,edu.ncsu.csc.itrust.beans.PatientBean)", "classid":131, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction", "shortclassname":"PatientRoomAssignmentAction", "method":"public void assignPatientToRoom(WardRoomBean wardRoom, PatientBean patient) throws DBException {\r\n    assignPatientToRoom(wardRoom, patient.getMID());\r\n}"},
 {"id":768, "methodname":"assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,long)", "methodnamerefined":"assignPatientToRoom", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom", "fullmethod":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,long)", "classid":131, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction", "shortclassname":"PatientRoomAssignmentAction", "method":"public void assignPatientToRoom(WardRoomBean wardRoom, long patientMID) throws DBException {\r\n    wardRoom.setOccupiedBy(patientMID);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}"},
 {"id":769, "methodname":"removePatientFromRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,java.lang.String)", "methodnamerefined":"removePatientFromRoom", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.removePatientFromRoom", "fullmethod":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.removePatientFromRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,java.lang.String)", "classid":131, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction", "shortclassname":"PatientRoomAssignmentAction", "method":"public void removePatientFromRoom(WardRoomBean wardRoom, String reason) throws DBException {\r\n    long mid = wardRoom.getOccupiedBy();\r\n    wardDAO.checkOutPatientReason(mid, reason);\r\n    wardRoom.setOccupiedBy(null);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}"},
 {"id":770, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest.-init-()", "classid":132, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest", "shortclassname":"PatientRoomAssignmentActionTest", "method":"PatientRoomAssignmentActionTest() {\r\n}"},
 {"id":771, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest.setUp()", "classid":132, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest", "shortclassname":"PatientRoomAssignmentActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    wardDAO = new WardDAO(factory);\r\n}"},
 {"id":772, "methodname":"testassignPatient()", "methodnamerefined":"testassignPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest.testassignPatient", "fullmethod":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest.testassignPatient()", "classid":132, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest", "shortclassname":"PatientRoomAssignmentActionTest", "method":"public void testassignPatient() throws Exception {\r\n    // WardBean wd = new WardBean(1,\"testSpecialty\",1);\r\n    WardRoomBean rm = new WardRoomBean(1, 1, 1, \"test\", \"clean\");\r\n    // //wardDAO.addWard(wd);\r\n    wardDAO.removeWardRoom(rm.getRoomID());\r\n    // wardDAO.addWardRoom(rm);\r\n    action = new PatientRoomAssignmentAction(factory);\r\n    action.assignPatientToRoom(rm, 1);\r\n    assertEquals(0, wardDAO.getAllWardRoomsByWardID(0).size());\r\n    wardDAO.removeWardRoom(rm.getRoomID());\r\n    // TODO add assert for patient in ward,\r\n    // getters in dao not there yet\r\n    // TODO add assert for patient in ward\r\n    // TODO check logging\r\n    patient.setMID(1L);\r\n    action.assignPatientToRoom(rm, patient);\r\n}"},
 {"id":773, "methodname":"testremovePatient()", "methodnamerefined":"testremovePatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest.testremovePatient", "fullmethod":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest.testremovePatient()", "classid":132, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentActionTest", "shortclassname":"PatientRoomAssignmentActionTest", "method":"public void testremovePatient() throws Exception {\r\n    // WardBean wd = new WardBean(1,\"testSpecialty\",1);\r\n    WardRoomBean rm = new WardRoomBean(1, 1, 1, \"test\", \"clean\");\r\n    // //wardDAO.addWard(wd);\r\n    wardDAO.addWardRoom(rm);\r\n    action = new PatientRoomAssignmentAction(factory);\r\n    action.assignPatientToRoom(rm, 1);\r\n    // TODO test patient is added\r\n    // TODO test room is set to occupied -- getter not available\r\n    action.removePatientFromRoom(rm, \"Reason\");\r\n    assertEquals(0, wardDAO.getAllWardRoomsByWardID(0).size());\r\n    wardDAO.removeWardRoom(rm.getRoomID());\r\n    // TODO check to see if patient was removed successfully\r\n    // TODO make sure ward still exists\r\n    // TODO check logging\r\n}"},
 {"id":774, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":133, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction", "shortclassname":"PrescriptionReportAction", "method":"/**\r\n * Super class validates pidString\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is making a prescription report.\r\n * @param pidString\r\n * \t\tThe MID of the patient in question.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws NoHealthRecordsException\r\n * \t\t\r\n */\r\npublic PrescriptionReportAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.prDAO = factory.getPrescriptionReportDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":775, "methodname":"buildQueryString(java.util.List)", "methodnamerefined":"buildQueryString", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.buildQueryString", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.buildQueryString(java.util.List)", "classid":133, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction", "shortclassname":"PrescriptionReportAction", "method":"/**\r\n * Builds a query string for office visits\r\n *\r\n * @param ovOffsets\r\n * \t\toffsets for the office visits\r\n * @return A SQL query in a Java String.\r\n */\r\nprivate String buildQueryString(List<Integer> ovOffsets) {\r\n    int n = ovOffsets.size();\r\n    if (n == 0)\r\n        return \"\";\r\n\r\n    String str = \"&n=\" + n;\r\n    for (int i = 0; i < (ovOffsets.size()); i++) {\r\n        str += ((\"&ovOff\" + i) + \"=\") + (ovOffsets.get(i));\r\n    }\r\n    return str;\r\n}"},
 {"id":776, "methodname":"checkOfficeVisits(java.util.HashMap,java.util.List)", "methodnamerefined":"checkOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.checkOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.checkOfficeVisits(java.util.HashMap,java.util.List)", "classid":133, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction", "shortclassname":"PrescriptionReportAction", "method":"/**\r\n * Checks office visits\r\n *\r\n * @param myParams\r\n * \t\tlist of parameters\r\n * @param officeVisits\r\n * \t\tlist of office visits\r\n * @return Returns a java.util.ArrayList of Integers for the given office visits.\r\n */\r\nprivate ArrayList<Integer> checkOfficeVisits(HashMap<String, String> myParams, List<OfficeVisitBean> officeVisits) {\r\n    ArrayList<Integer> list = new ArrayList<Integer>();\r\n    for (int i = 0; i < (officeVisits.size()); i++) {\r\n        if (\"on\".equals(myParams.get((\"ov\" + i))))\r\n            list.add(i);\r\n\r\n    }\r\n    return list;\r\n}"},
 {"id":777, "methodname":"getAllOfficeVisits()", "methodnamerefined":"getAllOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.getAllOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.getAllOfficeVisits()", "classid":133, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction", "shortclassname":"PrescriptionReportAction", "method":"/**\r\n * Returns a list of all office visits for the pid\r\n *\r\n * @return list of OfficeVisitBeans for the pid\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisits() throws DBException {\r\n    return ovDAO.getAllOfficeVisits(pid);\r\n}"},
 {"id":778, "methodname":"getPatient()", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.getPatient", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.getPatient()", "classid":133, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction", "shortclassname":"PrescriptionReportAction", "method":"/**\r\n * Returns a PatientBean for the pid\r\n *\r\n * @return PatientBean\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PatientBean getPatient() throws DBException {\r\n    return patientDAO.getPatient(pid);\r\n}"},
 {"id":779, "methodname":"getPrescriptionReports(java.util.Map,java.util.List)", "methodnamerefined":"getPrescriptionReports", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.getPrescriptionReports", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.getPrescriptionReports(java.util.Map,java.util.List)", "classid":133, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction", "shortclassname":"PrescriptionReportAction", "method":"/**\r\n * Used by the JSP, passes a Map from the html form and a list of OfficeVisitBeans Returns a list of\r\n * PrescriptionReportBeans\r\n *\r\n * @param params\r\n * \t\tA java.util.HashMap containing the parameter map.\r\n * @param officeVisits\r\n * \t\tA java.util.List of OfficeVisitBeans for the visits.\r\n * @return list of PrescriptionReportBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PrescriptionReportBean> getPrescriptionReports(Map<String, String> params, List<OfficeVisitBean> officeVisits) throws DBException {\r\n    HashMap<String, String> myParams = ParameterUtil.convertMap(params);\r\n    List<Long> ovIDs = new ArrayList<Long>();\r\n    for (int i = 0; i < (officeVisits.size()); i++) {\r\n        try {\r\n            if ((params.get((\"ovOff\" + i))) != null) {\r\n                int offset = Integer.valueOf(myParams.get((\"ovOff\" + i)));\r\n                ovIDs.add(officeVisits.get(offset).getVisitID());\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            // just skip it\r\n        }\r\n    }\r\n    if ((ovIDs.size()) == 0)\r\n        return new ArrayList<PrescriptionReportBean>();\r\n\r\n    return prDAO.byOfficeVisitAndPatient(ovIDs, pid);\r\n}"},
 {"id":780, "methodname":"getQueryString(java.util.Map,java.util.List)", "methodnamerefined":"getQueryString", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.getQueryString", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.getQueryString(java.util.Map,java.util.List)", "classid":133, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction", "shortclassname":"PrescriptionReportAction", "method":"/**\r\n * Used by the JSP, which passes the param map from the html form and a list of OfficeVisitBeans Returns a\r\n * string that will be used to create a new url. The JSP will pull params from this url to create the\r\n * prescription report.\r\n *\r\n * @param paramMap\r\n * \t\tA java.util.HashMap of the parameters.\r\n * @param officeVisits\r\n * \t\tA java.util.List of OfficeVisitBeans.\r\n * @return the string that will be used in the new url\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\n@SuppressWarnings(\"rawtypes\")\r\npublic String getQueryString(Map paramMap, List<OfficeVisitBean> officeVisits) throws DBException, FormValidationException {\r\n    HashMap<String, String> myParams = ParameterUtil.convertMap(paramMap);\r\n    List<Integer> ovOffsets = checkOfficeVisits(myParams, officeVisits);\r\n    String queryString = buildQueryString(ovOffsets);\r\n    if (isRepresenting)\r\n        queryString += \"&rep=\" + (pid);\r\n\r\n    return queryString;\r\n}"},
 {"id":781, "methodname":"representPatient(java.lang.String)", "methodnamerefined":"representPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.representPatient", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.representPatient(java.lang.String)", "classid":133, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction", "shortclassname":"PrescriptionReportAction", "method":"/**\r\n * Takes the patients representee as a param and returns it as a long if the patient represents the input\r\n * param\r\n *\r\n * @param input\r\n * \t\tthe patients representee mid\r\n * @return representees mid as a long\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long representPatient(String input) throws iTrustException {\r\n    try {\r\n        long reppeeMID = Long.valueOf(input);\r\n        if (patientDAO.represents(loggedInMID, reppeeMID)) {\r\n            loggedInMID = reppeeMID;\r\n            pid = reppeeMID;\r\n            isRepresenting = true;\r\n            return reppeeMID;\r\n        } else\r\n            throw new iTrustException((\"You do not represent patient \" + reppeeMID));\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"MID is not a number\");\r\n    }\r\n}"},
 {"id":782, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest.-init-()", "classid":134, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest", "shortclassname":"PrescriptionReportActionRepTest", "method":"PrescriptionReportActionRepTest() {\r\n}"},
 {"id":783, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest.setUp()", "classid":134, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest", "shortclassname":"PrescriptionReportActionRepTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":784, "methodname":"testGetNoPrescriptionReports()", "methodnamerefined":"testGetNoPrescriptionReports", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest.testGetNoPrescriptionReports", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest.testGetNoPrescriptionReports()", "classid":134, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest", "shortclassname":"PrescriptionReportActionRepTest", "method":"public void testGetNoPrescriptionReports() throws Exception {\r\n    action = new PrescriptionReportAction(factory, 9000000000L, \"2\");\r\n    List<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();\r\n    Map params = new HashMap();\r\n    params.put(\"ov1\", new String[]{ \"1\" });\r\n    List<PrescriptionReportBean> prescriptionReports = action.getPrescriptionReports(params, officeVisits);\r\n    assertEquals(0, prescriptionReports.size());\r\n}"},
 {"id":785, "methodname":"testRepresentPatient()", "methodnamerefined":"testRepresentPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest.testRepresentPatient", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest.testRepresentPatient()", "classid":134, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionRepTest", "shortclassname":"PrescriptionReportActionRepTest", "method":"public void testRepresentPatient() throws Exception {\r\n    action = new PrescriptionReportAction(factory, 2L, \"2\");\r\n    assertEquals(1L, action.representPatient(\"1\"));\r\n}"},
 {"id":786, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.-init-()", "classid":135, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest", "shortclassname":"PrescriptionReportActionTest", "method":"PrescriptionReportActionTest() {\r\n}"},
 {"id":787, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.setUp()", "classid":135, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest", "shortclassname":"PrescriptionReportActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.ndCodes();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n    gen.officeVisit1();\r\n    gen.additionalOfficeVisits();\r\n}"},
 {"id":788, "methodname":"testEmptyParamMap()", "methodnamerefined":"testEmptyParamMap", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testEmptyParamMap", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testEmptyParamMap()", "classid":135, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest", "shortclassname":"PrescriptionReportActionTest", "method":"public void testEmptyParamMap() throws Exception {\r\n    action = new PrescriptionReportAction(factory, 9000000000L, \"2\");\r\n    List<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    assertEquals(\"\", action.getQueryString(params, officeVisits));\r\n}"},
 {"id":789, "methodname":"testGetPrescriptionReports()", "methodnamerefined":"testGetPrescriptionReports", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testGetPrescriptionReports", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testGetPrescriptionReports()", "classid":135, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest", "shortclassname":"PrescriptionReportActionTest", "method":"public void testGetPrescriptionReports() throws Exception {\r\n    action = new PrescriptionReportAction(factory, 9000000000L, \"2\");\r\n    List<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();\r\n    Map params = new HashMap();\r\n    params.put(\"ovOff0\", new String[]{ \"0\" });\r\n    params.put(\"ovOff1\", new String[]{ \"1\" });\r\n    params.put(\"ovOff2\", new String[]{ \"4\" });\r\n    List<PrescriptionReportBean> prescriptionReports = action.getPrescriptionReports(params, officeVisits);\r\n    assertEquals(3, prescriptionReports.size());\r\n    // use the office visit DAO test to verify that all of the correct info is taken\r\n    assertEquals(\"Take twice daily\", prescriptionReports.get(0).getPrescription().getInstructions());\r\n    assertEquals(\"Take twice daily\", prescriptionReports.get(1).getPrescription().getInstructions());\r\n    assertEquals(\"Take twice daily\", prescriptionReports.get(2).getPrescription().getInstructions());\r\n}"},
 {"id":790, "methodname":"testNotFull()", "methodnamerefined":"testNotFull", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testNotFull", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testNotFull()", "classid":135, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest", "shortclassname":"PrescriptionReportActionTest", "method":"public void testNotFull() throws Exception {\r\n    action = new PrescriptionReportAction(factory, 9000000000L, \"2\");\r\n    List<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();\r\n    Map params = new HashMap();\r\n    params.put(\"ov0\", new String[]{ \"on\" });\r\n    params.put(\"ov1\", new String[]{ \"on\" });\r\n    params.put(\"ov2\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov3\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov4\", new String[]{ \"on\" });\r\n    assertEquals(\"&n=3&ovOff0=0&ovOff1=1&ovOff2=4\", action.getQueryString(params, officeVisits));\r\n}"},
 {"id":791, "methodname":"testQueryString3Checked()", "methodnamerefined":"testQueryString3Checked", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testQueryString3Checked", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testQueryString3Checked()", "classid":135, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest", "shortclassname":"PrescriptionReportActionTest", "method":"public void testQueryString3Checked() throws Exception {\r\n    action = new PrescriptionReportAction(factory, 9000000000L, \"2\");\r\n    List<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();\r\n    Map params = new HashMap();\r\n    params.put(\"ov0\", new String[]{ \"on\" });\r\n    params.put(\"ov1\", new String[]{ \"on\" });\r\n    params.put(\"ov2\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov3\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov4\", new String[]{ \"on\" });\r\n    params.put(\"ov5\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov6\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov7\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov8\", new String[]{ \"unchecked\" });\r\n    assertEquals(\"&n=3&ovOff0=0&ovOff1=1&ovOff2=4\", action.getQueryString(params, officeVisits));\r\n}"},
 {"id":792, "methodname":"testQueryStringNotChecked()", "methodnamerefined":"testQueryStringNotChecked", "methodabbreviation":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testQueryStringNotChecked", "fullmethod":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest.testQueryStringNotChecked()", "classid":135, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportActionTest", "shortclassname":"PrescriptionReportActionTest", "method":"public void testQueryStringNotChecked() throws Exception {\r\n    action = new PrescriptionReportAction(factory, 9000000000L, \"2\");\r\n    List<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();\r\n    Map params = new HashMap();\r\n    params.put(\"ov0\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov2\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov3\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov4\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov5\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov6\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov7\", new String[]{ \"unchecked\" });\r\n    params.put(\"ov8\", new String[]{ \"unchecked\" });\r\n    assertEquals(\"\", action.getQueryString(params, officeVisits));\r\n}"},
 {"id":793, "methodname":"-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "shortclassname":"ReportAdverseEventAction", "method":"public ReportAdverseEventAction(String hcpID, DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.hcpID = Long.parseLong(hcpID);\r\n    this.validator = new AdverseEventValidator();\r\n}"},
 {"id":794, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "shortclassname":"ReportAdverseEventAction", "method":"/**\r\n * Constructor used to send e-mails only\r\n */\r\npublic ReportAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.validator = new AdverseEventValidator();\r\n}"},
 {"id":795, "methodname":"addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "methodnamerefined":"addReport", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.addReport", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "shortclassname":"ReportAdverseEventAction", "method":"/**\r\n * Method used to add a report to the data base\r\n *\r\n * @param aeBean\r\n * \t\tThe adverse event to add\r\n * @return a string for testing purposes only\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String addReport(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    try {\r\n        validator.validate(aeBean);\r\n    } catch (FormValidationException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n    try {\r\n        adverseEventDAO.addReport(aeBean, hcpID);\r\n    } catch (DBException e) {\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    /**\r\n     * Old code used to send a single e-mail. Keep for reference\r\n     * Email email = new Email();\r\n     * String senderName;\r\n     * String fromEmail;\r\n     * email.setFrom(\"noreply@itrust.com\");\r\n     * List<String> toList = new ArrayList<String>();\r\n     *\r\n     * PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n     * PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n     *\r\n     * toList.add(receiver.getEmail());\r\n     * senderName = sender.getFullName();\r\n     * fromEmail = sender.getEmail();\r\n     *\r\n     * email.setToList(toList);\r\n     * email.setFrom(fromEmail);\r\n     * email.setSubject(String.format(\"Adverse Event Report\"));\r\n     * email.setBody(String.format(\r\n     * \" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID()))\r\n     * + \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event(s)\" +\r\n     * \" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()\r\n     * ));\r\n     * emailer.sendEmail(email);\r\n     */\r\n    return \"\";\r\n}"},
 {"id":796, "methodname":"sendMail(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "methodnamerefined":"sendMail", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMail", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMail(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "shortclassname":"ReportAdverseEventAction", "method":"/**\r\n * A method used to send a single e-mail. Used in immunizations.\r\n *\r\n * @param aeBean\r\n * \t\t\r\n * @return Email returns the Email for testing purposes.\r\n */\r\npublic Email sendMail(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    Email email = new Email();\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n    toList.add(receiver.getEmail());\r\n    fromEmail = sender.getEmail();\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\r\n    email.setBody(String.format(((((((((((\" Patient: \" + (patientDAO.getName(Long.parseLong(aeBean.getMID())))) + \" (MID \") + (aeBean.getMID())) + \") Has Reported the following adverse event\") + \" Drug: \") + (aeBean.getDrug())) + \"(\") + (aeBean.getCode())) + \") Description: \") + (aeBean.getDescription()))));\r\n    emailer.sendEmail(email);\r\n    return email;\r\n}"},
 {"id":797, "methodname":"sendMails(java.util.List)", "methodnamerefined":"sendMails", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMails", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMails(java.util.List)", "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "shortclassname":"ReportAdverseEventAction", "method":"/**\r\n * Method that sends exactly one e-mail to each MID in the list of Adverse Events\r\n *\r\n * @param aeList\r\n * \t\tThe list of adverse Event Beans that need to be acted upon\r\n * @return EList The list of e-mails sent for testing purposes\r\n */\r\npublic Email sendMails(List<AdverseEventBean> aeList) throws DBException, FormValidationException, iTrustException {\r\n    List<String> MIDlist = new ArrayList<String>();\r\n    String patientID = \"\";\r\n    for (AdverseEventBean beaner : aeList) {\r\n        patientID = beaner.getMID();\r\n        String newDesc = ((((\" Drug: \" + (beaner.getDrug())) + \" (\") + (beaner.getCode())) + \") Description: \") + (beaner.getDescription());\r\n        beaner.setDescription(newDesc);\r\n    }\r\n    for (AdverseEventBean beano : aeList) {\r\n        if (!(MIDlist.contains(beano.getPrescriber()))) {\r\n            MIDlist.add(beano.getPrescriber());\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    for (String num : MIDlist) {\r\n        String message = (((\" Patient: \" + (patientDAO.getName(Long.parseLong(patientID)))) + \" (MID \") + patientID) + \") Has Reported the following adverse event(s)\";\r\n        for (AdverseEventBean beano : aeList) {\r\n            if (beano.getPrescriber().equals(num)) {\r\n                message = message + (beano.getDescription());\r\n            }\r\n        }\r\n        String fromEmail;\r\n        email.setFrom(\"noreply@itrust.com\");\r\n        PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n        PersonnelBean receiver = personnelDAO.getPersonnel(Long.parseLong(num));\r\n        List<String> toList = new ArrayList<String>();\r\n        toList.add(receiver.getEmail());\r\n        fromEmail = sender.getEmail();\r\n        email.setToList(toList);\r\n        email.setFrom(fromEmail);\r\n        email.setSubject(String.format(\"Adverse Event Report(Prescription)\"));\r\n        email.setBody(message);\r\n        emailer.sendEmail(email);\r\n    }\r\n    return email;\r\n}"},
 {"id":798, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.-init-()", "classid":137, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest", "shortclassname":"ReportAdverseEventActionTest", "method":"ReportAdverseEventActionTest() {\r\n}"},
 {"id":799, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.setUp()", "classid":137, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest", "shortclassname":"ReportAdverseEventActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    this.pateientId = 2L;\r\n    this.hcpId = 9000000000L;\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.adverseDAO = new AdverseEventDAO(this.factory);\r\n    this.advAction = new ReportAdverseEventAction(String.valueOf(this.hcpId), this.factory, this.pateientId);\r\n    this.advMultiAction = new ReportAdverseEventAction(this.factory, this.pateientId);\r\n    // this.gCal = new GregorianCalendar();\r\n}"},
 {"id":800, "methodname":"testAddReport()", "methodnamerefined":"testAddReport", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testAddReport", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testAddReport()", "classid":137, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest", "shortclassname":"ReportAdverseEventActionTest", "method":"public void testAddReport() throws iTrustException, SQLException {\r\n    // String body = \"UNIT TEST - SendMessageActionText\";\r\n    AdverseEventBean aBean = new AdverseEventBean();\r\n    // Timestamp timestamp = new Timestamp(this.gCal.getTimeInMillis());\r\n    aBean.setMID(\"2\");\r\n    aBean.setDrug(\"Prioglitazone\");\r\n    aBean.setDescription(\"It Burns!\");\r\n    try {\r\n        advAction.addReport(aBean);\r\n    } catch (FormValidationException e) {\r\n        e.printStackTrace();\r\n    }\r\n    List<AdverseEventBean> adList = adverseDAO.getReportsFor(pateientId);\r\n    assertEquals(1, adList.size());\r\n    AdverseEventBean adBeanDB = adList.get(0);\r\n    assertEquals(\"It Burns!\", adBeanDB.getDescription());\r\n}"},
 {"id":801, "methodname":"testBadEvent()", "methodnamerefined":"testBadEvent", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testBadEvent", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testBadEvent()", "classid":137, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest", "shortclassname":"ReportAdverseEventActionTest", "method":"public void testBadEvent() {\r\n    AdverseEventBean badBean = new AdverseEventBean();\r\n    badBean.setMID(\"Two\");\r\n    badBean.setDrug(\"Rat Posion\");\r\n    badBean.setCode(\"999999999\");\r\n    badBean.setDescription(\"Im not a rat!\");\r\n    badBean.setPrescriber(\"9000000000\");\r\n    try {\r\n        advAction.addReport(badBean);\r\n    } catch (Exception e) {\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", e.getMessage());\r\n    }\r\n}"},
 {"id":802, "methodname":"testEmailAvalanche()", "methodnamerefined":"testEmailAvalanche", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testEmailAvalanche", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testEmailAvalanche()", "classid":137, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest", "shortclassname":"ReportAdverseEventActionTest", "method":"public void testEmailAvalanche() throws DBException, FormValidationException, iTrustException {\r\n    List<AdverseEventBean> BeanList = new ArrayList<AdverseEventBean>();\r\n    String body = \" Patient: Andy Programmer (MID 2) Has Reported the following adverse event(s)\";\r\n    for (int i = 0; i < 32; i++) {\r\n        AdverseEventBean bigBean = new AdverseEventBean();\r\n        bigBean.setMID(\"2\");\r\n        bigBean.setDrug(\"Prioglitazone\");\r\n        bigBean.setCode(\"647641512\");\r\n        bigBean.setDescription(\"<dead sounds>\");\r\n        bigBean.setPrescriber(\"9000000000\");\r\n        body = body + \" Drug: Prioglitazone (647641512) Description: <dead sounds>\";\r\n        BeanList.add(bigBean);\r\n    }\r\n    Email email = advMultiAction.sendMails(BeanList);\r\n    assertEquals(body, email.getBody());\r\n}"},
 {"id":803, "methodname":"testSendOneMail()", "methodnamerefined":"testSendOneMail", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testSendOneMail", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testSendOneMail()", "classid":137, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest", "shortclassname":"ReportAdverseEventActionTest", "method":"public void testSendOneMail() throws DBException, FormValidationException, iTrustException {\r\n    AdverseEventBean aBean = new AdverseEventBean();\r\n    aBean.setMID(\"2\");\r\n    aBean.setDrug(\"Prioglitazone\");\r\n    aBean.setCode(\"647641512\");\r\n    aBean.setDescription(\"ITS KILLING ME!\");\r\n    Email email = advAction.sendMail(aBean);\r\n    assertEquals(\" Patient: Andy Programmer (MID 2) Has Reported the following adverse event Drug: Prioglitazone(647641512) Description: ITS KILLING ME!\", email.getBody());\r\n}"},
 {"id":804, "methodname":"testSendTwoMail()", "methodnamerefined":"testSendTwoMail", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testSendTwoMail", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testSendTwoMail()", "classid":137, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest", "shortclassname":"ReportAdverseEventActionTest", "method":"public void testSendTwoMail() throws DBException, FormValidationException, iTrustException {\r\n    List<AdverseEventBean> BeanList = new ArrayList<AdverseEventBean>();\r\n    AdverseEventBean aBean = new AdverseEventBean();\r\n    AdverseEventBean aBeanTwo = new AdverseEventBean();\r\n    aBean.setMID(\"2\");\r\n    aBean.setDrug(\"Prioglitazone\");\r\n    aBean.setCode(\"647641512\");\r\n    aBean.setDescription(\"IM DYING!\");\r\n    aBean.setPrescriber(\"9000000000\");\r\n    aBeanTwo.setMID(\"2\");\r\n    aBeanTwo.setDrug(\"Prioglitazone\");\r\n    aBeanTwo.setCode(\"647641512\");\r\n    aBeanTwo.setDescription(\"IM DEAD!\");\r\n    aBeanTwo.setPrescriber(\"9000000000\");\r\n    BeanList.add(aBean);\r\n    BeanList.add(aBeanTwo);\r\n    Email email = advMultiAction.sendMails(BeanList);\r\n    assertEquals(\" Patient: Andy Programmer (MID 2) Has Reported the following adverse event(s) Drug: Prioglitazone (647641512) Description: IM DYING! Drug: Prioglitazone (647641512) Description: IM DEAD!\", email.getBody());\r\n}"},
 {"id":805, "methodname":"testWorseEvent()", "methodnamerefined":"testWorseEvent", "methodabbreviation":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testWorseEvent", "fullmethod":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest.testWorseEvent()", "classid":137, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventActionTest", "shortclassname":"ReportAdverseEventActionTest", "method":"public void testWorseEvent() throws DBException, FormValidationException, iTrustException {\r\n    AdverseEventBean badBean = new AdverseEventBean();\r\n    badBean.setMID(\"2\");\r\n    badBean.setDrug(\"Rat Posion\");\r\n    badBean.setCode(\"999999999\");\r\n    badBean.setDescription(\">\");\r\n    badBean.setPrescriber(\"9000000000\");\r\n    String results = advAction.addReport(badBean);\r\n    assertEquals(\"This form has not been validated correctly. The following field are not properly filled in: [comment: Up to 2000 alphanumeric characters and .-,!;:()?]\", results);\r\n}"},
 {"id":806, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "shortclassname":"ResetPasswordAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n */\r\npublic ResetPasswordAction(DAOFactory factory) {\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.factory = factory;\r\n}"},
 {"id":807, "methodname":"checkAnswerNull(java.lang.String)", "methodnamerefined":"checkAnswerNull", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordAction.checkAnswerNull", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordAction.checkAnswerNull(java.lang.String)", "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "shortclassname":"ResetPasswordAction", "method":"/**\r\n * Checks if the answer param is null\r\n *\r\n * @param answer\r\n * \t\tthe users security answer\r\n * @return answer if not null, else return null\r\n */\r\npublic String checkAnswerNull(String answer) {\r\n    if ((answer == null) || (\"\".equals(answer)))\r\n        return null;\r\n    else\r\n        return answer;\r\n\r\n}"},
 {"id":808, "methodname":"checkMID(java.lang.String)", "methodnamerefined":"checkMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordAction.checkMID", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordAction.checkMID(java.lang.String)", "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "shortclassname":"ResetPasswordAction", "method":"/**\r\n * Checks to see if a user exists with the given mid\r\n *\r\n * @param midString\r\n * \t\tThe users MID to check for.\r\n * @return 0 if the user does not exist, else the mid of the user as a long\r\n */\r\npublic long checkMID(String midString) {\r\n    try {\r\n        long mid = Long.valueOf(midString);\r\n        if (!(authDAO.checkUserExists(mid)))\r\n            return 0;\r\n\r\n        return mid;\r\n    } catch (NumberFormatException e) {\r\n        return 0L;\r\n    } catch (DBException e) {\r\n        return 0L;\r\n    }\r\n}"},
 {"id":809, "methodname":"checkRole(long,java.lang.String)", "methodnamerefined":"checkRole", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordAction.checkRole", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordAction.checkRole(long,java.lang.String)", "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "shortclassname":"ResetPasswordAction", "method":"/**\r\n * Checks if the given mid matches the given role\r\n *\r\n * @param mid\r\n * \t\tthe mid to be checked\r\n * @param role\r\n * \t\tthe role to be checked\r\n * @return true if the mid and role match\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String checkRole(long mid, String role) throws iTrustException {\r\n    try {\r\n        if (((((((\"patient\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"patient\"))) || ((\"hcp\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"hcp\")))) || ((\"uap\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"uap\")))) || ((\"pha\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"pha\")))) || ((\"er\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"er\")))) || ((\"lt\".equals(role)) && (patientDAO.getRole(mid, role).equals(\"lt\"))))\r\n            return role;\r\n        else\r\n            return null;\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        throw e;\r\n    }\r\n    return null;\r\n}"},
 {"id":810, "methodname":"getSecurityQuestion(long)", "methodnamerefined":"getSecurityQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordAction.getSecurityQuestion", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordAction.getSecurityQuestion(long)", "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "shortclassname":"ResetPasswordAction", "method":"/**\r\n * Returns the security question for the mid param\r\n *\r\n * @param mid\r\n * \t\tMID of the user\r\n * @return the security question or \"\" if DBException thrown\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getSecurityQuestion(long mid) throws iTrustException {\r\n    try {\r\n        if ((null == (authDAO.getSecurityQuestion(mid))) || (authDAO.getSecurityQuestion(mid).equals(\"\")))\r\n            throw new iTrustException(\"No security question or answer for this user has been set.\");\r\n        else\r\n            return authDAO.getSecurityQuestion(mid);\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return \"\";\r\n    }\r\n}"},
 {"id":811, "methodname":"isMaxedOut(java.lang.String)", "methodnamerefined":"isMaxedOut", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordAction.isMaxedOut", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordAction.isMaxedOut(java.lang.String)", "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "shortclassname":"ResetPasswordAction", "method":"/**\r\n * Checks to see if the number of reset password attempts has been exceeded for the given ipAddress\r\n *\r\n * @param ipAddress\r\n * \t\tThe IPv4 or IPv6 IP address as a String.\r\n * @return true if the the number of reset attempts is greater than or equal to MAX_RESET_ATTEMPTS\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean isMaxedOut(String ipAddress) throws DBException {\r\n    return (authDAO.getResetPasswordFailures(ipAddress)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS);\r\n}"},
 {"id":812, "methodname":"makeEmailApp(long,java.lang.String)", "methodnamerefined":"makeEmailApp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordAction.makeEmailApp", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordAction.makeEmailApp(long,java.lang.String)", "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "shortclassname":"ResetPasswordAction", "method":"/**\r\n * Creates and sends an e-mail about the change\r\n *\r\n * @param mid\r\n * \t\tthe user whos password was changed\r\n * @param role\r\n * \t\twhat role they have in iTrust\r\n * @return the e-mial that is sent\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmailApp(long mid, String role) throws DBException {\r\n    if ((Role.parse(role)) == (Role.PATIENT)) {\r\n        PatientBean p = new PatientDAO(factory).getPatient(mid);\r\n        Email email = new Email();\r\n        email.setFrom(\"no-reply@itrust.com\");\r\n        email.setToList(Arrays.asList(p.getEmail()));\r\n        email.setSubject(\"Your password has been changed in iTrust\");\r\n        email.setBody(String.format(\"Dear %s, \n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n        return email;\r\n    } else {\r\n        // UAP or HCP - admin taken out in \"resetPassword\"\r\n        PersonnelBean p = new PersonnelDAO(factory).getPersonnel(mid);\r\n        Email email = new Email();\r\n        email.setFrom(\"no-reply@itrust.com\");\r\n        email.setToList(Arrays.asList(p.getEmail()));\r\n        email.setSubject(\"Your password has been changed in iTrust\");\r\n        email.setBody(String.format(\"Dear %s, \n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n        return email;\r\n    }\r\n}"},
 {"id":813, "methodname":"resetPassword(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"resetPassword", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordAction.resetPassword", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordAction.resetPassword(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "shortclassname":"ResetPasswordAction", "method":"/**\r\n * Resets the password for the given mid\r\n *\r\n * @param mid\r\n * \t\tof the user to have their password reset\r\n * @param role\r\n * \t\twhat role the user has in iTrust\r\n * @param answer\r\n * \t\tanswers to their security question\r\n * @param password\r\n * \t\ttheir password\r\n * @param confirmPassword\r\n * \t\ttheir password again\r\n * @param ipAddr\r\n * \t\tthe ip address the request is coming from\r\n * @return status message\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String resetPassword(long mid, String role, String answer, String password, String confirmPassword, String ipAddr) throws DBException, FormValidationException, iTrustException {\r\n    Role r = authDAO.getUserRole(mid);\r\n    try {\r\n        Role.parse(role);\r\n    } catch (IllegalArgumentException e) {\r\n        return \"Invalid role\";\r\n    }\r\n    if (r.equals(Role.ADMIN))\r\n        return \"This role cannot be changed here\";\r\n\r\n    if (!(r.equals(Role.parse(role))))\r\n        return \"Role mismatch\";\r\n\r\n    if ((authDAO.getResetPasswordFailures(ipAddr)) >= (ResetPasswordAction.MAX_RESET_ATTEMPTS)) {\r\n        return \"Too many retries\";\r\n    }\r\n    try {\r\n        validatePassword(password, confirmPassword);\r\n        if (answer.equals(authDAO.getSecurityAnswer(mid))) {\r\n            authDAO.resetPassword(mid, password);\r\n            new EmailUtil(factory).sendEmail(makeEmailApp(mid, role));\r\n            return \"Password changed\";\r\n        } else {\r\n            authDAO.recordResetPasswordFailure(ipAddr);\r\n            return \"Answer did not match\";\r\n        }\r\n    } catch (DBException e) {\r\n        return \"Error in validation of security answer\";\r\n    }\r\n}"},
 {"id":814, "methodname":"validatePassword(java.lang.String,java.lang.String)", "methodnamerefined":"validatePassword", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordAction.validatePassword", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordAction.validatePassword(java.lang.String,java.lang.String)", "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "shortclassname":"ResetPasswordAction", "method":"/**\r\n * Checks to make sure the password is correctly entered twice.\r\n *\r\n * @param password\r\n * \t\tthe password\r\n * @param confirmPassword\r\n * \t\tthe password again for confirmation\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\nprivate void validatePassword(String password, String confirmPassword) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((password == null) || (\"\".equals(password))) {\r\n        errorList.addIfNotNull(\"Password cannot be empty\");\r\n    } else {\r\n        if (!(password.equals(confirmPassword)))\r\n            errorList.addIfNotNull(\"Passwords dont match\");\r\n\r\n        if (!(ValidationFormat.PASSWORD.getRegex().matcher(password).matches())) {\r\n            errorList.addIfNotNull((\"Password must be in the following format: \" + (ValidationFormat.PASSWORD.getDescription())));\r\n        }\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":815, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.-init-()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"ResetPasswordActionTest() {\r\n}"},
 {"id":816, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.setUp()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    action = new ResetPasswordAction(factory);\r\n}"},
 {"id":817, "methodname":"testCheckAnswerNull()", "methodnamerefined":"testCheckAnswerNull", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckAnswerNull", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckAnswerNull()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testCheckAnswerNull() throws Exception {\r\n    assertEquals(\"empty\", null, action.checkAnswerNull(\"\"));\r\n    assertEquals(\"null\", null, action.checkAnswerNull(null));\r\n    assertEquals(\"answer\", action.checkAnswerNull(\"answer\"));\r\n}"},
 {"id":818, "methodname":"testCheckMID()", "methodnamerefined":"testCheckMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckMID", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckMID()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testCheckMID() throws Exception {\r\n    gen.patient1();\r\n    gen.hcp0();\r\n    assertEquals(\"empty\", 0, action.checkMID(\"\"));\r\n    assertEquals(\"null\", 0, action.checkMID(null));\r\n    assertEquals(\"not a number\", 0, action.checkMID(\"a\"));\r\n    assertEquals(\"non-existant\", 0, action.checkMID(\"200\"));\r\n    assertEquals(\"existant\", 1, action.checkMID(\"1\"));\r\n    assertEquals(\"existant\", 9000000000L, action.checkMID(\"9000000000\"));\r\n}"},
 {"id":819, "methodname":"testCheckMIDEvil()", "methodnamerefined":"testCheckMIDEvil", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckMIDEvil", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckMIDEvil()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testCheckMIDEvil() throws Exception {\r\n    action = new ResetPasswordAction(evil);\r\n    assertEquals(0L, action.checkMID(\"\"));\r\n}"},
 {"id":820, "methodname":"testCheckMIDEvil2()", "methodnamerefined":"testCheckMIDEvil2", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckMIDEvil2", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckMIDEvil2()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testCheckMIDEvil2() throws Exception {\r\n    action = new ResetPasswordAction(evil);\r\n    assertEquals(0L, action.checkMID(\"a\"));\r\n}"},
 {"id":821, "methodname":"testCheckRole()", "methodnamerefined":"testCheckRole", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckRole", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckRole()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testCheckRole() throws Exception {\r\n    gen.patient2();\r\n    gen.hcp0();\r\n    gen.uap1();\r\n    assertEquals(\"patient\", action.checkRole(2L, \"patient\"));\r\n    assertEquals(\"hcp\", action.checkRole(9000000000L, \"hcp\"));\r\n    assertEquals(\"uap\", action.checkRole(8000000009L, \"uap\"));\r\n    assertEquals(null, action.checkRole(0L, \"admin\"));\r\n    assertEquals(null, action.checkRole(0L, \"HCP\"));\r\n}"},
 {"id":822, "methodname":"testCheckWrongRole()", "methodnamerefined":"testCheckWrongRole", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckWrongRole", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testCheckWrongRole()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testCheckWrongRole() {\r\n    try {\r\n        action.checkRole(9000000000L, \"patient\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"User does not exist with the designated role\", e.getMessage());\r\n    }\r\n}"},
 {"id":823, "methodname":"testGetSecurityQuestion()", "methodnamerefined":"testGetSecurityQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testGetSecurityQuestion", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testGetSecurityQuestion()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testGetSecurityQuestion() throws Exception {\r\n    gen.patient1();\r\n    gen.hcp0();\r\n    assertEquals(\"what is your favorite color?\", action.getSecurityQuestion(1L));\r\n    assertEquals(\"first letter?\", action.getSecurityQuestion(9000000000L));\r\n    assertEquals(\"first letter?\", action.getSecurityQuestion(9000000000L));\r\n    // assertEquals(\"\", action.getSecurityQuestion(9000000000L));\r\n}"},
 {"id":824, "methodname":"testGetSecurityQuestionEvil()", "methodnamerefined":"testGetSecurityQuestionEvil", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testGetSecurityQuestionEvil", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testGetSecurityQuestionEvil()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testGetSecurityQuestionEvil() throws Exception {\r\n    action = new ResetPasswordAction(EvilDAOFactory.getEvilInstance());\r\n    assertEquals(\"\", action.getSecurityQuestion(1L));\r\n}"},
 {"id":825, "methodname":"testResetForHCP()", "methodnamerefined":"testResetForHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testResetForHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testResetForHCP()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testResetForHCP() throws Exception {\r\n    gen.hcp0();\r\n    assertEquals(\"Password changed\", action.resetPassword(9000000000L, \"hcp\", \"a\", \"12345678\", \"12345678\", \"127.0.0.1\"));\r\n    List<Email> list = feDAO.getAllEmails();\r\n    assertEquals(\"Dear Kelly Doctor, \n You have chosen to change your iTrust password for user 9000000000\", list.get(0).getBody());\r\n}"},
 {"id":826, "methodname":"testResetPassword()", "methodnamerefined":"testResetPassword", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testResetPassword", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testResetPassword()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testResetPassword() throws Exception {\r\n    gen.patient1();\r\n    gen.hcp0();\r\n    assertEquals(\"Answer did not match\", action.resetPassword(1L, \"patient\", \"wrong\", \"12345678\", \"12345678\", \"127.0.0.1\"));\r\n    assertEquals(\"Answer did not match\", action.resetPassword(9000000000L, \"hcp\", \"wrong\", \"12345678\", \"12345678\", \"127.0.0.1\"));\r\n    assertEquals(\"Invalid role\", action.resetPassword(9000000000L, \"a\", \"a\", \"12345678\", \"12345678\", \"127.0.0.1\"));\r\n    assertEquals(\"Password changed\", action.resetPassword(1L, \"patient\", \"blue\", \"12345678\", \"12345678\", \"127.0.0.1\"));\r\n    List<Email> list = feDAO.getAllEmails();\r\n    assertEquals(\"Dear Random Person, \n You have chosen to change your iTrust password for user 1\", list.get(0).getBody());\r\n    assertEquals(\"Role mismatch\", action.resetPassword(9000000000L, \"uap\", \"a\", \"12345678\", \"12345678\", \"127.0.0.1\"));\r\n}"},
 {"id":827, "methodname":"testValidatePasswordEmpty()", "methodnamerefined":"testValidatePasswordEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testValidatePasswordEmpty", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testValidatePasswordEmpty()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testValidatePasswordEmpty() throws Exception {\r\n    gen.patient1();\r\n    try {\r\n        action.resetPassword(1L, \"patient\", \"blue\", \"\", \"12345678\", \"127.0.0.1\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"Password cannot be empty\", e.getErrorList().get(0));\r\n        assertEquals(1, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":828, "methodname":"testValidatePasswordNull()", "methodnamerefined":"testValidatePasswordNull", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testValidatePasswordNull", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testValidatePasswordNull()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testValidatePasswordNull() throws Exception {\r\n    gen.patient1();\r\n    try {\r\n        action.resetPassword(1L, \"patient\", \"blue\", null, \"12345678\", \"127.0.0.1\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"Password cannot be empty\", e.getErrorList().get(0));\r\n        assertEquals(1, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":829, "methodname":"testValidatePasswordWrong()", "methodnamerefined":"testValidatePasswordWrong", "methodabbreviation":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testValidatePasswordWrong", "fullmethod":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest.testValidatePasswordWrong()", "classid":139, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordActionTest", "shortclassname":"ResetPasswordActionTest", "method":"public void testValidatePasswordWrong() throws Exception {\r\n    gen.patient1();\r\n    try {\r\n        action.resetPassword(1L, \"patient\", \"blue\", \"1234567\", \"12345678\", \"127.0.0.1\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"Passwords dont match\", e.getErrorList().get(0));\r\n        assertEquals((\"Password must be in the following format: \" + (ValidationFormat.PASSWORD.getDescription())), e.getErrorList().get(1));\r\n        assertEquals(2, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":830, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":140, "classname":"edu.ncsu.csc.itrust.action.SearchUsersAction", "shortclassname":"SearchUsersAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is performing the search.\r\n */\r\npublic SearchUsersAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":831, "methodname":"fuzzySearchForPatients(java.lang.String)", "methodnamerefined":"fuzzySearchForPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersAction.fuzzySearchForPatients", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersAction.fuzzySearchForPatients(java.lang.String)", "classid":140, "classname":"edu.ncsu.csc.itrust.action.SearchUsersAction", "shortclassname":"SearchUsersAction", "method":"/**\r\n * Search for all patients with first name and last name given in parameters.\r\n *\r\n * @param firstName\r\n * \t\tThe first name of the patient being searched.\r\n * @param lastName\r\n * \t\tThe last name of the patient being searched.\r\n * @return A java.util.List of PatientBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientBean> fuzzySearchForPatients(String query) {\r\n    return fuzzySearchForPatients(query, false);\r\n}"},
 {"id":832, "methodname":"fuzzySearchForPatients(java.lang.String,boolean)", "methodnamerefined":"fuzzySearchForPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersAction.fuzzySearchForPatients", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersAction.fuzzySearchForPatients(java.lang.String,boolean)", "classid":140, "classname":"edu.ncsu.csc.itrust.action.SearchUsersAction", "shortclassname":"SearchUsersAction", "method":"/**\r\n * Search for all patients with first name and last name given in parameters.\r\n *\r\n * @param firstName\r\n * \t\tThe first name of the patient being searched.\r\n * @param lastName\r\n * \t\tThe last name of the patient being searched.\r\n * @return A java.util.List of PatientBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientBean> fuzzySearchForPatients(String query, boolean allowDeactivated) {\r\n    String[] subqueries = null;\r\n    Set<PatientBean> patientsSet = new TreeSet<PatientBean>();\r\n    if ((query != null) && ((query.length()) > 0)) {\r\n        subqueries = query.split(\" \");\r\n        Set<PatientBean>[] patients = new Set[subqueries.length];\r\n        int i = 0;\r\n        for (String q : subqueries) {\r\n            try {\r\n                patients[i] = new TreeSet<PatientBean>();\r\n                List<PatientBean> first = patientDAO.fuzzySearchForPatientsWithName(q, \"\");\r\n                List<PatientBean> last = patientDAO.fuzzySearchForPatientsWithName(\"\", q);\r\n                patients[i].addAll(first);\r\n                patients[i].addAll(last);\r\n                try {\r\n                    long mid = Long.valueOf(q);\r\n                    patients[i].add(patientDAO.getPatient(mid));\r\n                } catch (NumberFormatException e) {\r\n                }\r\n                i++;\r\n            } catch (DBException e1) {\r\n                e1.printStackTrace();\r\n            }\r\n        }\r\n        patientsSet.addAll(patients[0]);\r\n        for (Set<PatientBean> results : patients) {\r\n            try {\r\n                patientsSet.retainAll(results);\r\n            } catch (NullPointerException e) {\r\n            }\r\n        }\r\n    }\r\n    ArrayList<PatientBean> results = new ArrayList<PatientBean>(patientsSet);\r\n    if (allowDeactivated == false) {\r\n        for (int i = (results.size()) - 1; i >= 0; i--) {\r\n            if (!(results.get(i).getDateOfDeactivationStr().equals(\"\"))) {\r\n                results.remove(i);\r\n            }\r\n        }\r\n    }\r\n    return results;\r\n}"},
 {"id":833, "methodname":"searchForPatientsWithName(java.lang.String,java.lang.String)", "methodnamerefined":"searchForPatientsWithName", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersAction.searchForPatientsWithName", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersAction.searchForPatientsWithName(java.lang.String,java.lang.String)", "classid":140, "classname":"edu.ncsu.csc.itrust.action.SearchUsersAction", "shortclassname":"SearchUsersAction", "method":"/**\r\n * Search for all patients with first name and last name given in parameters.\r\n *\r\n * @param firstName\r\n * \t\tThe first name of the patient being searched.\r\n * @param lastName\r\n * \t\tThe last name of the patient being searched.\r\n * @return A java.util.List of PatientBeans\r\n */\r\npublic List<PatientBean> searchForPatientsWithName(String firstName, String lastName) {\r\n    try {\r\n        if (\"\".equals(firstName))\r\n            firstName = \"%\";\r\n\r\n        if (\"\".equals(lastName))\r\n            lastName = \"%\";\r\n\r\n        return patientDAO.searchForPatientsWithName(firstName, lastName);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"},
 {"id":834, "methodname":"searchForPersonnelWithName(java.lang.String,java.lang.String)", "methodnamerefined":"searchForPersonnelWithName", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersAction.searchForPersonnelWithName", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersAction.searchForPersonnelWithName(java.lang.String,java.lang.String)", "classid":140, "classname":"edu.ncsu.csc.itrust.action.SearchUsersAction", "shortclassname":"SearchUsersAction", "method":"/**\r\n * Searches for all personnel with the first name and last name specified in the parameter list.\r\n *\r\n * @param firstName\r\n * \t\tThe first name to be searched.\r\n * @param lastName\r\n * \t\tThe last name to be searched.\r\n * @return A java.util.List of PersonnelBeans for the users who matched.\r\n */\r\npublic List<PersonnelBean> searchForPersonnelWithName(String firstName, String lastName) {\r\n    try {\r\n        if (\"\".equals(firstName))\r\n            firstName = \"%\";\r\n\r\n        if (\"\".equals(lastName))\r\n            lastName = \"%\";\r\n\r\n        return personnelDAO.searchForPersonnelWithName(firstName, lastName);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"},
 {"id":835, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.-init-()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"SearchUsersActionTest() {\r\n}"},
 {"id":836, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.setUp()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"@Override\r\npublic void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patientDeactivate();\r\n}"},
 {"id":837, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.tearDown()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"@Override\r\npublic void tearDown() throws Exception {\r\n}"},
 {"id":838, "methodname":"testFuzzySearchForPatient1()", "methodnamerefined":"testFuzzySearchForPatient1", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatient1", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatient1()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testFuzzySearchForPatient1() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000003L);\r\n    List<PatientBean> patient = act.fuzzySearchForPatients(\"Andy\");\r\n    assertEquals(\"Andy Programmer\", patient.get(0).getFullName());\r\n}"},
 {"id":839, "methodname":"testFuzzySearchForPatient2()", "methodnamerefined":"testFuzzySearchForPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatient2", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatient2()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testFuzzySearchForPatient2() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000003L);\r\n    List<PatientBean> patient = act.fuzzySearchForPatients(\"nd grammer\");\r\n    assertEquals(\"Andy Programmer\", patient.get(0).getFullName());\r\n}"},
 {"id":840, "methodname":"testFuzzySearchForPatient3()", "methodnamerefined":"testFuzzySearchForPatient3", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatient3", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatient3()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testFuzzySearchForPatient3() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000003L);\r\n    List<PatientBean> patient = act.fuzzySearchForPatients(\"2\");\r\n    assertEquals(\"Andy Programmer\", patient.get(0).getFullName());\r\n}"},
 {"id":841, "methodname":"testFuzzySearchForPatientDeactivated()", "methodnamerefined":"testFuzzySearchForPatientDeactivated", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatientDeactivated", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatientDeactivated()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testFuzzySearchForPatientDeactivated() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000003L);\r\n    List<PatientBean> patient = act.fuzzySearchForPatients(\"314159\");\r\n    assertEquals(patient.size(), 0);\r\n}"},
 {"id":842, "methodname":"testFuzzySearchForPatientDeactivatedOverride()", "methodnamerefined":"testFuzzySearchForPatientDeactivatedOverride", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatientDeactivatedOverride", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testFuzzySearchForPatientDeactivatedOverride()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testFuzzySearchForPatientDeactivatedOverride() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000003L);\r\n    List<PatientBean> patient = act.fuzzySearchForPatients(\"314159\", true);\r\n    assertEquals(\"Fake Baby\", patient.get(0).getFullName());\r\n}"},
 {"id":843, "methodname":"testSearchForPatientsWithName()", "methodnamerefined":"testSearchForPatientsWithName", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPatientsWithName", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPatientsWithName()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testSearchForPatientsWithName() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000000L);\r\n    List<PatientBean> patients = act.searchForPatientsWithName(\"Random\", \"Person\");\r\n    assertEquals(\"Random Person\", patients.get(0).getFullName());\r\n}"},
 {"id":844, "methodname":"testSearchForPatientsWithName2()", "methodnamerefined":"testSearchForPatientsWithName2", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPatientsWithName2", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPatientsWithName2()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testSearchForPatientsWithName2() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000003L);\r\n    List<PatientBean> patient = act.searchForPatientsWithName(\"Andy\", \"Programmer\");\r\n    assertEquals(\"Andy Programmer\", patient.get(0).getFullName());\r\n}"},
 {"id":845, "methodname":"testSearchForPatientsWithName3()", "methodnamerefined":"testSearchForPatientsWithName3", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPatientsWithName3", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPatientsWithName3()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testSearchForPatientsWithName3() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000003L);\r\n    List<PatientBean> patient = act.searchForPatientsWithName(\"\", \"\");\r\n    assertEquals(0, patient.size());\r\n}"},
 {"id":846, "methodname":"testSearchForPersonnelWithName()", "methodnamerefined":"testSearchForPersonnelWithName", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPersonnelWithName", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPersonnelWithName()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testSearchForPersonnelWithName() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000000L);\r\n    List<PersonnelBean> personnel = act.searchForPersonnelWithName(\"Kelly\", \"Doctor\");\r\n    assertEquals(\"Kelly Doctor\", personnel.get(0).getFullName());\r\n}"},
 {"id":847, "methodname":"testSearchForPersonnelWithName2()", "methodnamerefined":"testSearchForPersonnelWithName2", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPersonnelWithName2", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPersonnelWithName2()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testSearchForPersonnelWithName2() {\r\n    SearchUsersAction act = new SearchUsersAction(factory, 9000000003L);\r\n    List<PersonnelBean> personnel = act.searchForPersonnelWithName(\"\", \"\");\r\n    assertEquals(0, personnel.size());\r\n}"},
 {"id":848, "methodname":"testSearchForPersonnelWithName3()", "methodnamerefined":"testSearchForPersonnelWithName3", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPersonnelWithName3", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testSearchForPersonnelWithName3()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testSearchForPersonnelWithName3() {\r\n    SearchUsersAction act = new SearchUsersAction(evil, 2L);\r\n    List<PersonnelBean> personnel = act.searchForPersonnelWithName(\"null\", \"null\");\r\n    assertEquals(null, personnel);\r\n}"},
 {"id":849, "methodname":"testZeroPatients()", "methodnamerefined":"testZeroPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testZeroPatients", "fullmethod":"edu.ncsu.csc.itrust.action.SearchUsersActionTest.testZeroPatients()", "classid":141, "classname":"edu.ncsu.csc.itrust.action.SearchUsersActionTest", "shortclassname":"SearchUsersActionTest", "method":"public void testZeroPatients() throws Exception {\r\n    SearchUsersAction action = new SearchUsersAction(factory, 9990000000L);\r\n    List<PatientBean> patients = action.searchForPatientsWithName(\"A\", \"B\");\r\n    assertNotNull(patients);\r\n    assertEquals(0, patients.size());\r\n}"},
 {"id":850, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "shortclassname":"SendMessageAction", "method":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user sending the message.\r\n */\r\npublic SendMessageAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.emailVal = new EMailValidator();\r\n    this.messVal = new MessageValidator();\r\n}"},
 {"id":851, "methodname":"getDLHCPByMID(long)", "methodnamerefined":"getDLHCPByMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageAction.getDLHCPByMID", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageAction.getDLHCPByMID(long)", "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "shortclassname":"SendMessageAction", "method":"public PersonnelBean getDLHCPByMID(long mid) throws iTrustException {\r\n    return personnelDAO.getPersonnel(mid);\r\n}"},
 {"id":852, "methodname":"getDLHCPsFor(long)", "methodnamerefined":"getDLHCPsFor", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageAction.getDLHCPsFor", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageAction.getDLHCPsFor(long)", "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "shortclassname":"SendMessageAction", "method":"/**\r\n * Returns the designated HCPs for the given patient.\r\n *\r\n * @return designated HCPs for the given patient.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getDLHCPsFor(long pid) throws iTrustException {\r\n    List<PersonnelBean> dlhcps = new ArrayList<PersonnelBean>();\r\n    try {\r\n        dlhcps = patientDAO.getDeclaredHCPs(pid);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return dlhcps;\r\n}"},
 {"id":853, "methodname":"getMyDLHCPs()", "methodnamerefined":"getMyDLHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageAction.getMyDLHCPs", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageAction.getMyDLHCPs()", "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "shortclassname":"SendMessageAction", "method":"/**\r\n * Returns the designated HCPs for the logged in patient.\r\n *\r\n * @return designated HCPs for the logged in patient.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getMyDLHCPs() throws iTrustException {\r\n    return getDLHCPsFor(loggedInMID);\r\n}"},
 {"id":854, "methodname":"getMyRepresentees()", "methodnamerefined":"getMyRepresentees", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageAction.getMyRepresentees", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageAction.getMyRepresentees()", "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "shortclassname":"SendMessageAction", "method":"/**\r\n * Returns a list of the patients that the logged in HCP represents\r\n *\r\n * @return list of the patients that the logged in HCP represents\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getMyRepresentees() throws iTrustException {\r\n    List<PatientBean> representees = new ArrayList<PatientBean>();\r\n    try {\r\n        representees = patientDAO.getRepresented(loggedInMID);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return representees;\r\n}"},
 {"id":855, "methodname":"getPatientName(long)", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageAction.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageAction.getPatientName(long)", "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "shortclassname":"SendMessageAction", "method":"/**\r\n * Returns the patients name\r\n *\r\n * @param mid\r\n * \t\tMId of the patient\r\n * @return the name of the patient\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(long mid) throws iTrustException {\r\n    return patientDAO.getName(mid);\r\n}"},
 {"id":856, "methodname":"getPersonnelName(long)", "methodnamerefined":"getPersonnelName", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageAction.getPersonnelName", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageAction.getPersonnelName(long)", "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "shortclassname":"SendMessageAction", "method":"/**\r\n * Returns the personnels name\r\n *\r\n * @param mid\r\n * \t\tMId of the personnel\r\n * @return the name of the personnel\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPersonnelName(long mid) throws iTrustException {\r\n    return personnelDAO.getName(mid);\r\n}"},
 {"id":857, "methodname":"sendMessage(edu.ncsu.csc.itrust.beans.MessageBean)", "methodnamerefined":"sendMessage", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageAction.sendMessage", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageAction.sendMessage(edu.ncsu.csc.itrust.beans.MessageBean)", "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "shortclassname":"SendMessageAction", "method":"/**\r\n * Sends a message\r\n *\r\n * @param mBean\r\n * \t\tmessage to be sent\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic void sendMessage(MessageBean mBean) throws FormValidationException, iTrustException, SQLException {\r\n    messVal.validate(mBean);\r\n    emailVal.validate(mBean);\r\n    messageDAO.addMessage(mBean);\r\n    Email email = new Email();\r\n    String senderName;\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    if ((8999999999L < (mBean.getFrom())) && (8999999999L < (mBean.getTo()))) {\r\n        // when from and to are LHCPs\r\n        PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n        PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n        toList.add(receiver.getEmail());\r\n        senderName = sender.getFullName();\r\n        fromEmail = sender.getEmail();\r\n        email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n    } else {\r\n        if (6999999999L < (mBean.getFrom())) {\r\n            PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n            if (6999999999L < (mBean.getTo())) {\r\n                // when from is any personnel and to is any personnel\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            } else {\r\n                // when from is any personnel and to is patient\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/patient/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            }\r\n            fromEmail = sender.getEmail();\r\n        } else {\r\n            PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n            if (6999999999L < (mBean.getTo())) {\r\n                // when from is patient and to is any personnel\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            } else {\r\n                // when from is patient and to is patient\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/patient/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            }\r\n            fromEmail = sender.getEmail();\r\n        }\r\n    }\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"A new message from %s\", senderName));\r\n    emailer.sendEmail(email);\r\n}"},
 {"id":858, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageActionTest.-init-()", "classid":143, "classname":"edu.ncsu.csc.itrust.action.SendMessageActionTest", "shortclassname":"SendMessageActionTest", "method":"SendMessageActionTest() {\r\n}"},
 {"id":859, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageActionTest.setUp()", "classid":143, "classname":"edu.ncsu.csc.itrust.action.SendMessageActionTest", "shortclassname":"SendMessageActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    this.pateientId = 2L;\r\n    this.hcpId = 9000000000L;\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.messageDAO = new MessageDAO(this.factory);\r\n    this.smAction = new SendMessageAction(this.factory, this.pateientId);\r\n    this.gCal = new GregorianCalendar();\r\n}"},
 {"id":860, "methodname":"testGetDLCHPsFor()", "methodnamerefined":"testGetDLCHPsFor", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetDLCHPsFor", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetDLCHPsFor()", "classid":143, "classname":"edu.ncsu.csc.itrust.action.SendMessageActionTest", "shortclassname":"SendMessageActionTest", "method":"public void testGetDLCHPsFor() throws iTrustException {\r\n    List<PersonnelBean> pbList = this.smAction.getDLHCPsFor(this.pateientId);\r\n    assertEquals(1, pbList.size());\r\n}"},
 {"id":861, "methodname":"testGetMyDLHCPs()", "methodnamerefined":"testGetMyDLHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetMyDLHCPs", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetMyDLHCPs()", "classid":143, "classname":"edu.ncsu.csc.itrust.action.SendMessageActionTest", "shortclassname":"SendMessageActionTest", "method":"public void testGetMyDLHCPs() throws iTrustException {\r\n    List<PersonnelBean> pbList = this.smAction.getDLHCPsFor(this.pateientId);\r\n    assertEquals(1, pbList.size());\r\n}"},
 {"id":862, "methodname":"testGetMyDLHCPs2()", "methodnamerefined":"testGetMyDLHCPs2", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetMyDLHCPs2", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetMyDLHCPs2()", "classid":143, "classname":"edu.ncsu.csc.itrust.action.SendMessageActionTest", "shortclassname":"SendMessageActionTest", "method":"public void testGetMyDLHCPs2() throws iTrustException {\r\n    List<PersonnelBean> pbList = this.smAction.getMyDLHCPs();\r\n    assertEquals(1, pbList.size());\r\n}"},
 {"id":863, "methodname":"testGetMyRepresentees()", "methodnamerefined":"testGetMyRepresentees", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetMyRepresentees", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetMyRepresentees()", "classid":143, "classname":"edu.ncsu.csc.itrust.action.SendMessageActionTest", "shortclassname":"SendMessageActionTest", "method":"public void testGetMyRepresentees() throws iTrustException {\r\n    List<PatientBean> pbList = this.smAction.getMyRepresentees();\r\n    assertEquals(\"Random Person\", pbList.get(0).getFullName());\r\n    assertEquals(\"05/10/1950\", pbList.get(0).getDateOfBirthStr());\r\n    assertEquals(\"Care Needs\", pbList.get(1).getFullName());\r\n    assertEquals(\"Baby Programmer\", pbList.get(2).getFullName());\r\n    assertEquals(\"Baby A\", pbList.get(3).getFullName());\r\n    assertEquals(\"Baby B\", pbList.get(4).getFullName());\r\n    assertEquals(\"Baby C\", pbList.get(5).getFullName());\r\n    assertEquals(6, pbList.size());\r\n}"},
 {"id":864, "methodname":"testGetPatientName()", "methodnamerefined":"testGetPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetPatientName()", "classid":143, "classname":"edu.ncsu.csc.itrust.action.SendMessageActionTest", "shortclassname":"SendMessageActionTest", "method":"public void testGetPatientName() throws iTrustException {\r\n    assertEquals(\"Andy Programmer\", this.smAction.getPatientName(this.pateientId));\r\n}"},
 {"id":865, "methodname":"testGetPersonnelName()", "methodnamerefined":"testGetPersonnelName", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetPersonnelName", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testGetPersonnelName()", "classid":143, "classname":"edu.ncsu.csc.itrust.action.SendMessageActionTest", "shortclassname":"SendMessageActionTest", "method":"public void testGetPersonnelName() throws iTrustException {\r\n    assertEquals(\"Kelly Doctor\", this.smAction.getPersonnelName(this.hcpId));\r\n}"},
 {"id":866, "methodname":"testSendMessage()", "methodnamerefined":"testSendMessage", "methodabbreviation":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testSendMessage", "fullmethod":"edu.ncsu.csc.itrust.action.SendMessageActionTest.testSendMessage()", "classid":143, "classname":"edu.ncsu.csc.itrust.action.SendMessageActionTest", "shortclassname":"SendMessageActionTest", "method":"public void testSendMessage() throws FormValidationException, iTrustException, SQLException {\r\n    String body = \"UNIT TEST - SendMessageActionText\";\r\n    MessageBean mBean = new MessageBean();\r\n    Timestamp timestamp = new Timestamp(this.gCal.getTimeInMillis());\r\n    mBean.setFrom(this.pateientId);\r\n    mBean.setTo(this.hcpId);\r\n    mBean.setSubject(body);\r\n    mBean.setSentDate(timestamp);\r\n    mBean.setBody(body);\r\n    this.smAction.sendMessage(mBean);\r\n    List<MessageBean> mbList = this.messageDAO.getMessagesFor(this.hcpId);\r\n    assertEquals(15, mbList.size());\r\n    MessageBean mBeanDB = mbList.get(0);\r\n    assertEquals(body, mBeanDB.getBody());\r\n}"},
 {"id":867, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":144, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction", "shortclassname":"SetSecurityQuestionAction", "method":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param rLoggedInMID\r\n * \t\tThe MID of the user who is setting their security question.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic SetSecurityQuestionAction(DAOFactory factory, long rLoggedInMID) throws iTrustException {\r\n    this.authDAO = factory.getAuthDAO();\r\n    loggedInMID = checkMID(rLoggedInMID);\r\n}"},
 {"id":868, "methodname":"checkMID(long)", "methodnamerefined":"checkMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.checkMID", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.checkMID(long)", "classid":144, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction", "shortclassname":"SetSecurityQuestionAction", "method":"/**\r\n * Checks to make sure the MID exists in iTrust\r\n *\r\n * @param mid\r\n * \t\tMID to check\r\n * @return returns the MID if the user is valid, otherwise, throws an exception\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate long checkMID(long mid) throws iTrustException {\r\n    if (!(authDAO.checkUserExists(mid)))\r\n        throw new iTrustException(((\"MID \" + mid) + \" is not a user!\"));\r\n\r\n    return mid;\r\n}"},
 {"id":869, "methodname":"retrieveInformation()", "methodnamerefined":"retrieveInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.retrieveInformation", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.retrieveInformation()", "classid":144, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction", "shortclassname":"SetSecurityQuestionAction", "method":"/**\r\n * Returns a SecurityQA bean holding the security info for the currently logged in user\r\n *\r\n * @return SecurityQA for loggedInMid\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic SecurityQA retrieveInformation() throws iTrustException {\r\n    SecurityQA toRet = new SecurityQA();\r\n    toRet.setAnswer(authDAO.getSecurityAnswer(loggedInMID));\r\n    toRet.setQuestion(authDAO.getSecurityQuestion(loggedInMID));\r\n    return toRet;\r\n}"},
 {"id":870, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.SecurityQA)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.updateInformation(edu.ncsu.csc.itrust.beans.SecurityQA)", "classid":144, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction", "shortclassname":"SetSecurityQuestionAction", "method":"/**\r\n * Updates information in the database from the information held in the SecurityQA bean passed as a param\r\n *\r\n * @param a\r\n * \t\tSecurityQuestionBean that holds new information\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void updateInformation(SecurityQA a) throws Exception {\r\n    SecurityQAValidator sqav = new SecurityQAValidator();\r\n    sqav.validate(a);\r\n    authDAO.setSecurityQuestionAnswer(a.getQuestion(), a.getAnswer(), loggedInMID);\r\n}"},
 {"id":871, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.-init-()", "classid":145, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest", "shortclassname":"SetSecurityQuestionTest", "method":"SetSecurityQuestionTest() {\r\n}"},
 {"id":872, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.setUp()", "classid":145, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest", "shortclassname":"SetSecurityQuestionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n}"},
 {"id":873, "methodname":"testBadConnection()", "methodnamerefined":"testBadConnection", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.testBadConnection", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.testBadConnection()", "classid":145, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest", "shortclassname":"SetSecurityQuestionTest", "method":"public void testBadConnection() throws Exception {\r\n    gen.patient2();\r\n    try {\r\n        action = new SetSecurityQuestionAction(evil, 2L);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":874, "methodname":"testNotUserID()", "methodnamerefined":"testNotUserID", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.testNotUserID", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.testNotUserID()", "classid":145, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest", "shortclassname":"SetSecurityQuestionTest", "method":"public void testNotUserID() throws Exception {\r\n    try {\r\n        action = new SetSecurityQuestionAction(factory, 500L);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"MID 500 is not a user!\", e.getMessage());\r\n    }\r\n}"},
 {"id":875, "methodname":"testRetriveInformation()", "methodnamerefined":"testRetriveInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.testRetriveInformation", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.testRetriveInformation()", "classid":145, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest", "shortclassname":"SetSecurityQuestionTest", "method":"public void testRetriveInformation() throws Exception {\r\n    gen.patient2();\r\n    action = new SetSecurityQuestionAction(factory, 2L);\r\n    SecurityQA qa = action.retrieveInformation();\r\n    assertEquals(\"how you doin?\", qa.getQuestion());\r\n    assertEquals(\"good\", qa.getAnswer());\r\n}"},
 {"id":876, "methodname":"testUpdateInformationCorrectly()", "methodnamerefined":"testUpdateInformationCorrectly", "methodabbreviation":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.testUpdateInformationCorrectly", "fullmethod":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest.testUpdateInformationCorrectly()", "classid":145, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionTest", "shortclassname":"SetSecurityQuestionTest", "method":"public void testUpdateInformationCorrectly() throws Exception {\r\n    gen.patient2();\r\n    action = new SetSecurityQuestionAction(factory, 2L);\r\n    SecurityQA qa = action.retrieveInformation();\r\n    qa.setAnswer(\"12345678\");\r\n    qa.setConfirmAnswer(\"12345678\");\r\n    qa.setQuestion(\"12345678\");\r\n    action.updateInformation(qa);\r\n    qa = action.retrieveInformation();\r\n    assertEquals(\"12345678\", qa.getAnswer());\r\n    assertEquals(\"12345678\", qa.getQuestion());\r\n}"},
 {"id":877, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.SurveyAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.SurveyAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":146, "classname":"edu.ncsu.csc.itrust.action.SurveyAction", "shortclassname":"SurveyAction", "method":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user taking the survey.\r\n */\r\npublic SurveyAction(DAOFactory factory, long loggedInMID) {\r\n    surveyDAO = factory.getSurveyDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":878, "methodname":"addSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,long)", "methodnamerefined":"addSurvey", "methodabbreviation":"edu.ncsu.csc.itrust.action.SurveyAction.addSurvey", "fullmethod":"edu.ncsu.csc.itrust.action.SurveyAction.addSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,long)", "classid":146, "classname":"edu.ncsu.csc.itrust.action.SurveyAction", "shortclassname":"SurveyAction", "method":"/**\r\n * Pass the OfficeVistBean along with SurveyBean\r\n *\r\n * @param surveyBean\r\n * \t\tcontains data to be added to database\r\n * @param visitID\r\n * \t\tThe Office Visit ID corresponding to this Survey.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void addSurvey(SurveyBean surveyBean, long visitID) throws DBException {\r\n    surveyBean.setVisitID(visitID);// now set visit ID in the survey bean\r\n\r\n    surveyDAO.addCompletedSurvey(surveyBean, Calendar.getInstance().getTime());\r\n}"},
 {"id":879, "methodname":"getPatientMID(long)", "methodnamerefined":"getPatientMID", "methodabbreviation":"edu.ncsu.csc.itrust.action.SurveyAction.getPatientMID", "fullmethod":"edu.ncsu.csc.itrust.action.SurveyAction.getPatientMID(long)", "classid":146, "classname":"edu.ncsu.csc.itrust.action.SurveyAction", "shortclassname":"SurveyAction", "method":"public long getPatientMID(long ovID) throws DBException, NumberFormatException {\r\n    return ovDAO.getOfficeVisit(ovID).getPatientID();\r\n}"},
 {"id":880, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":147, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction", "shortclassname":"UpdateCPTCodeListAction", "method":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the administrator who is updating the CPTs.\r\n */\r\npublic UpdateCPTCodeListAction(DAOFactory factory, long loggedInMID) {\r\n    this.cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":881, "methodname":"addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"addCPTCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.addCPTCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":147, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction", "shortclassname":"UpdateCPTCodeListAction", "method":"/**\r\n * Adds a new cpt code (med procedure)\r\n *\r\n * @param proc\r\n * \t\tProcedureBean that holds the new cpt code\r\n * @return status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addCPTCode(ProcedureBean proc) throws FormValidationException {\r\n    validator.validate(proc);\r\n    try {\r\n        if (cptDAO.addCPTCode(proc)) {\r\n            return (((\"Success: \" + (proc.getCPTCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":882, "methodname":"updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"updateCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":147, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction", "shortclassname":"UpdateCPTCodeListAction", "method":"/**\r\n * Updates the cpt code\r\n *\r\n * @param proc\r\n * \t\tthe code to be updated\r\n * @return updated code\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate int updateCode(ProcedureBean proc) throws DBException {\r\n    return cptDAO.updateCode(proc);\r\n}"},
 {"id":883, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":147, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction", "shortclassname":"UpdateCPTCodeListAction", "method":"/**\r\n * Updates a procedure with new information from the ProcedureBean\r\n *\r\n * @param proc\r\n * \t\tProcedureBean with new information (but same CPT code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(ProcedureBean proc) throws FormValidationException {\r\n    validator.validate(proc);\r\n    try {\r\n        int rows = updateCode(proc);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found. To edit an actual code, \" + \"change the description and add a new code with the old description\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":884, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.-init-()", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"UpdateCPTCodeListActionTest() {\r\n}"},
 {"id":885, "methodname":"addEmpty(java.lang.String)", "methodnamerefined":"addEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.addEmpty", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.addEmpty(java.lang.String)", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"private void addEmpty(String code) throws Exception {\r\n    ProcedureBean proc = new ProcedureBean(code, \" \");\r\n    assertEquals(getAddCodeSuccessString(proc), action.addCPTCode(proc));\r\n    proc = factory.getCPTCodesDAO().getCPTCode(code);\r\n    assertEquals(\" \", proc.getDescription());\r\n}"},
 {"id":886, "methodname":"getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"getAddCodeSuccessString", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.getAddCodeSuccessString", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"private String getAddCodeSuccessString(ProcedureBean proc) {\r\n    return (((\"Success: \" + (proc.getCPTCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":887, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.setUp()", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    new TestDataGenerator().admin1();\r\n    action = new UpdateCPTCodeListAction(factory, UpdateCPTCodeListActionTest.performingAdmin);\r\n}"},
 {"id":888, "methodname":"testAddCPTCode()", "methodnamerefined":"testAddCPTCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testAddCPTCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testAddCPTCode()", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"public void testAddCPTCode() throws Exception {\r\n    final String code = \"9999F\";\r\n    final String desc = \"testAddCPTCode\";\r\n    ProcedureBean proc = new ProcedureBean(code, desc);\r\n    assertEquals(getAddCodeSuccessString(proc), action.addCPTCode(proc));\r\n    proc = factory.getCPTCodesDAO().getCPTCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n}"},
 {"id":889, "methodname":"testAddCPTCode2()", "methodnamerefined":"testAddCPTCode2", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testAddCPTCode2", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testAddCPTCode2()", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"public void testAddCPTCode2() throws Exception {\r\n    final String code = \"9999B\";\r\n    final String desc = \"testAddCPTCode2\";\r\n    final String attr = \"immunization\";\r\n    ProcedureBean proc = new ProcedureBean(code, desc, attr);\r\n    assertEquals(getAddCodeSuccessString(proc), action.addCPTCode(proc));\r\n    proc = factory.getCPTCodesDAO().getCPTCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n}"},
 {"id":890, "methodname":"testAddCPTCodeEvil()", "methodnamerefined":"testAddCPTCodeEvil", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testAddCPTCodeEvil", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testAddCPTCodeEvil()", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"public void testAddCPTCodeEvil() throws FormValidationException {\r\n    action = new UpdateCPTCodeListAction(evil, UpdateCPTCodeListActionTest.performingAdmin);\r\n    final String code = \"9999F\";\r\n    final String desc = \"testAddCPTCode\";\r\n    ProcedureBean proc = new ProcedureBean(code, desc);\r\n    assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", action.addCPTCode(proc));\r\n}"},
 {"id":891, "methodname":"testAddDuplicate()", "methodnamerefined":"testAddDuplicate", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testAddDuplicate", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testAddDuplicate()", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"public void testAddDuplicate() throws Exception {\r\n    final String code = \"0000F\";\r\n    final String descrip0 = \"description 0\";\r\n    ProcedureBean proc = new ProcedureBean(code, descrip0);\r\n    assertEquals(getAddCodeSuccessString(proc), action.addCPTCode(proc));\r\n    proc.setDescription(\"description 1\");\r\n    assertEquals(\"Error: Code already exists.\", action.addCPTCode(proc));\r\n    proc = factory.getCPTCodesDAO().getCPTCode(code);\r\n    assertEquals(descrip0, proc.getDescription());\r\n}"},
 {"id":892, "methodname":"testUpdateCPTInformation0()", "methodnamerefined":"testUpdateCPTInformation0", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testUpdateCPTInformation0", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testUpdateCPTInformation0()", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"public void testUpdateCPTInformation0() throws Exception {\r\n    final String code = \"8888F\";\r\n    final String desc = \"new descrip 0\";\r\n    ProcedureBean proc = new ProcedureBean(code);\r\n    addEmpty(code);\r\n    proc.setDescription(desc);\r\n    assertEquals(\"Success: 1 row(s) updated\", action.updateInformation(proc));\r\n    proc = factory.getCPTCodesDAO().getCPTCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n}"},
 {"id":893, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.testUpdateNonExistent()", "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "shortclassname":"UpdateCPTCodeListActionTest", "method":"public void testUpdateNonExistent() throws Exception {\r\n    new TestDataGenerator().clearAllTables();\r\n    final String code = \"9999F\";\r\n    ProcedureBean proc = new ProcedureBean(code, \"shouldnt be here\");\r\n    assertEquals(\"Error: Code not found. To edit an actual code, change the description and add a new code with the old description\", action.updateInformation(proc));\r\n    assertEquals(null, factory.getCPTCodesDAO().getCPTCode(code));\r\n    assertEquals(0, factory.getCPTCodesDAO().getAllCPTCodes().size());\r\n}"},
 {"id":894, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":149, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction", "shortclassname":"UpdateHospitalListAction", "method":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * \t\tThe MID of the person updating the hospitals.\r\n */\r\npublic UpdateHospitalListAction(DAOFactory factory, long performerID) {\r\n    this.hospDAO = factory.getHospitalsDAO();\r\n}"},
 {"id":895, "methodname":"addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "methodnamerefined":"addHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.addHospital", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "classid":149, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction", "shortclassname":"UpdateHospitalListAction", "method":"/**\r\n * Adds a hospital using the HospitalBean passed as a parameter\r\n *\r\n * @param hosp\r\n * \t\tthe new hospital listing\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addHospital(HospitalBean hosp) throws FormValidationException {\r\n    new HospitalBeanValidator().validate(hosp);\r\n    try {\r\n        if (hospDAO.addHospital(hosp)) {\r\n            return (((\"Success: \" + (hosp.getHospitalID())) + \" - \") + (hosp.getHospitalName())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":896, "methodname":"updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "methodnamerefined":"updateHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateHospital", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "classid":149, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction", "shortclassname":"UpdateHospitalListAction", "method":"/**\r\n * Updates hospital\r\n *\r\n * @param hosp\r\n * \t\tnew information\r\n * @return id for the updated hospital\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate int updateHospital(HospitalBean hosp) throws DBException {\r\n    return hospDAO.updateHospital(hosp);\r\n}"},
 {"id":897, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.HospitalBean)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateInformation(edu.ncsu.csc.itrust.beans.HospitalBean)", "classid":149, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction", "shortclassname":"UpdateHospitalListAction", "method":"/**\r\n * Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a\r\n * parameter\r\n *\r\n * @param hosp\r\n * \t\tthe new hospital information with the same hospital id\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(HospitalBean hosp) throws FormValidationException {\r\n    new HospitalBeanValidator().validate(hosp);\r\n    try {\r\n        int rows = 0;\r\n        return 0 == (rows = updateHospital(hosp)) ? \"Error: Hospital not found.\" : (\"Success: \" + rows) + \" row(s) updated\";\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":898, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.-init-()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"UpdateHospitalListActionTest() {\r\n}"},
 {"id":899, "methodname":"addEmpty(java.lang.String)", "methodnamerefined":"addEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.addEmpty", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.addEmpty(java.lang.String)", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"private void addEmpty(String id) throws Exception {\r\n    HospitalBean hosp = new HospitalBean(id, \" \");\r\n    assertEquals(getAddHospitalSuccessString(hosp), action.addHospital(hosp));\r\n    hosp = factory.getHospitalsDAO().getHospital(id);\r\n    assertEquals(\" \", hosp.getHospitalName());\r\n}"},
 {"id":900, "methodname":"getAddHospitalSuccessString(edu.ncsu.csc.itrust.beans.HospitalBean)", "methodnamerefined":"getAddHospitalSuccessString", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.getAddHospitalSuccessString", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.getAddHospitalSuccessString(edu.ncsu.csc.itrust.beans.HospitalBean)", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"private String getAddHospitalSuccessString(HospitalBean proc) {\r\n    return (((\"Success: \" + (proc.getHospitalID())) + \" - \") + (proc.getHospitalName())) + \" added\";\r\n}"},
 {"id":901, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.setUp()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    action = new UpdateHospitalListAction(factory, performingAdmin);\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n    gen.hospitals();\r\n}"},
 {"id":902, "methodname":"testAddAddress()", "methodnamerefined":"testAddAddress", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testAddAddress", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testAddAddress()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"public void testAddAddress() throws Exception {\r\n    String id = \"9999999999\";\r\n    HospitalBean hosp = new HospitalBean(id, \"shouldnt be here\", \"Address\", \"City\", \"ST\", \"00000-0000\");\r\n    action.addHospital(hosp);\r\n    hosp = factory.getHospitalsDAO().getHospital(id);\r\n    assertEquals(\"Address\", hosp.getHospitalAddress());\r\n    assertEquals(\"City\", hosp.getHospitalCity());\r\n    assertEquals(\"ST\", hosp.getHospitalState());\r\n    assertEquals(\"00000-0000\", hosp.getHospitalZip());\r\n}"},
 {"id":903, "methodname":"testAddDuplicate()", "methodnamerefined":"testAddDuplicate", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testAddDuplicate", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testAddDuplicate()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"public void testAddDuplicate() throws Exception {\r\n    String id = \"0000000000\";\r\n    String name0 = \"hospital 0\";\r\n    HospitalBean hosp = new HospitalBean(id, name0);\r\n    assertEquals(getAddHospitalSuccessString(hosp), action.addHospital(hosp));\r\n    hosp.setHospitalName(\"hospital 1\");\r\n    assertEquals(\"Error: Hospital already exists.\", action.addHospital(hosp));\r\n    hosp = factory.getHospitalsDAO().getHospital(id);\r\n    assertEquals(name0, hosp.getHospitalName());\r\n}"},
 {"id":904, "methodname":"testAddHospital()", "methodnamerefined":"testAddHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testAddHospital", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testAddHospital()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"public void testAddHospital() throws Exception {\r\n    String id = \"9999999999\";\r\n    String name = \"testAddHospital Hospital\";\r\n    HospitalBean hosp = new HospitalBean(id, name);\r\n    assertEquals(getAddHospitalSuccessString(hosp), action.addHospital(hosp));\r\n    hosp = factory.getHospitalsDAO().getHospital(id);\r\n    assertEquals(name, hosp.getHospitalName());\r\n}"},
 {"id":905, "methodname":"testAddHospital2()", "methodnamerefined":"testAddHospital2", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testAddHospital2", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testAddHospital2()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"/**\r\n * Kills: M FAIL: edu.ncsu.csc.itrust.action.UpdateHospitalListAction:27: CP[64] \"added hospital \" ->\r\n * \"___jumble___\" M FAIL: edu.ncsu.csc.itrust.action.UpdateHospitalListAction:27: 0L -> 1L\r\n */\r\npublic void testAddHospital2() throws Exception {\r\n    String id = \"88888888\";\r\n    String name = \"Test Hospital\";\r\n    HospitalBean hosp = new HospitalBean(id, name);\r\n    assertEquals(getAddHospitalSuccessString(hosp), action.addHospital(hosp));\r\n    hosp = factory.getHospitalsDAO().getHospital(id);\r\n    assertEquals(name, hosp.getHospitalName());\r\n}"},
 {"id":906, "methodname":"testEvilFactory()", "methodnamerefined":"testEvilFactory", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testEvilFactory", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testEvilFactory()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"/**\r\n * KILLS-- M FAIL: edu.ncsu.csc.itrust.action.UpdateHospitalListAction:35: changed return value (areturn)\r\n */\r\npublic void testEvilFactory() {\r\n    action = new UpdateHospitalListAction(EvilDAOFactory.getEvilInstance(), 0L);\r\n    HospitalBean db = new HospitalBean(\"2223\", \"ananana\");\r\n    try {\r\n        String x = action.addHospital(db);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":907, "methodname":"testEvilFactory2()", "methodnamerefined":"testEvilFactory2", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testEvilFactory2", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testEvilFactory2()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"/**\r\n * KILLS-- M FAIL: edu.ncsu.csc.itrust.action.UpdateHospitalListAction:49: changed return value (areturn)\r\n */\r\npublic void testEvilFactory2() {\r\n    action = new UpdateHospitalListAction(EvilDAOFactory.getEvilInstance(), 0L);\r\n    HospitalBean db = new HospitalBean(\"2223\", \"ananana\");\r\n    try {\r\n        String x = action.updateInformation(db);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":908, "methodname":"testUpdateAddress()", "methodnamerefined":"testUpdateAddress", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testUpdateAddress", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testUpdateAddress()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"public void testUpdateAddress() throws Exception {\r\n    String id = \"8888888888\";\r\n    String name = \"new hospital 8...\";\r\n    HospitalBean hosp = new HospitalBean(id, name, \"Address\", \"City\", \"ST\", \"00000-0000\");\r\n    addEmpty(id);\r\n    hosp.setHospitalName(name);\r\n    assertEquals(\"Success: 1 row(s) updated\", action.updateInformation(hosp));\r\n    hosp = factory.getHospitalsDAO().getHospital(id);\r\n    assertEquals(\"Address\", hosp.getHospitalAddress());\r\n    assertEquals(\"City\", hosp.getHospitalCity());\r\n    assertEquals(\"ST\", hosp.getHospitalState());\r\n    assertEquals(\"00000-0000\", hosp.getHospitalZip());\r\n}"},
 {"id":909, "methodname":"testUpdateICDInformation0()", "methodnamerefined":"testUpdateICDInformation0", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testUpdateICDInformation0", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testUpdateICDInformation0()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"public void testUpdateICDInformation0() throws Exception {\r\n    String id = \"8888888888\";\r\n    String name = \"new hospital 8...\";\r\n    HospitalBean hosp = new HospitalBean(id);\r\n    addEmpty(id);\r\n    hosp.setHospitalName(name);\r\n    assertEquals(\"Success: 1 row(s) updated\", action.updateInformation(hosp));\r\n    hosp = factory.getHospitalsDAO().getHospital(id);\r\n    assertEquals(name, hosp.getHospitalName());\r\n}"},
 {"id":910, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.testUpdateNonExistent()", "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "shortclassname":"UpdateHospitalListActionTest", "method":"public void testUpdateNonExistent() throws Exception {\r\n    String id = \"9999999999\";\r\n    HospitalBean hosp = new HospitalBean(id, \"shouldnt be here\");\r\n    assertEquals(\"Error: Hospital not found.\", action.updateInformation(hosp));\r\n    assertEquals(null, factory.getHospitalsDAO().getHospital(id));\r\n    assertEquals(9, factory.getHospitalsDAO().getAllHospitals().size());\r\n}"},
 {"id":911, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":151, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction", "shortclassname":"UpdateICDCodeListAction", "method":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * \t\tThe MID of the person udpating the ICDs.\r\n */\r\npublic UpdateICDCodeListAction(DAOFactory factory, long performerID) {\r\n    icdDAO = factory.getICDCodesDAO();\r\n}"},
 {"id":912, "methodname":"addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"addICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.addICDCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":151, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction", "shortclassname":"UpdateICDCodeListAction", "method":"/**\r\n * Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n * \t\tThe new diagnosis (ICD code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addICDCode(DiagnosisBean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        if (icdDAO.addICDCode(diagn)) {\r\n            return (((\"Success: \" + (diagn.getICDCode())) + \" - \") + (diagn.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":913, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":151, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction", "shortclassname":"UpdateICDCodeListAction", "method":"/**\r\n * Updates a diagnosis with new information from the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n * \t\tnew information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(DiagnosisBean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = icdDAO.updateCode(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":914, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.-init-()", "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "shortclassname":"UpdateICDCodeListActionTest", "method":"UpdateICDCodeListActionTest() {\r\n}"},
 {"id":915, "methodname":"getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"getAddCodeSuccessString", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.getAddCodeSuccessString", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "shortclassname":"UpdateICDCodeListActionTest", "method":"private String getAddCodeSuccessString(DiagnosisBean proc) {\r\n    return (((\"Success: \" + (proc.getICDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":916, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.setUp()", "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "shortclassname":"UpdateICDCodeListActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n    action = new UpdateICDCodeListAction(factory, UpdateICDCodeListActionTest.performingAdmin);\r\n}"},
 {"id":917, "methodname":"testAddDuplicate()", "methodnamerefined":"testAddDuplicate", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testAddDuplicate", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testAddDuplicate()", "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "shortclassname":"UpdateICDCodeListActionTest", "method":"public void testAddDuplicate() throws Exception {\r\n    gen.icd9cmCodes();\r\n    final String code = \"000.00\";\r\n    final String descrip0 = \"description 0\";\r\n    DiagnosisBean proc = new DiagnosisBean(code, descrip0, \"Short Term\");\r\n    assertEquals(getAddCodeSuccessString(proc), action.addICDCode(proc));\r\n    proc.setDescription(\"description 1\");\r\n    assertEquals(\"Error: Code already exists.\", action.addICDCode(proc));\r\n    proc = factory.getICDCodesDAO().getICDCode(code);\r\n    assertEquals(descrip0, proc.getDescription());\r\n}"},
 {"id":918, "methodname":"testAddICDCode()", "methodnamerefined":"testAddICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testAddICDCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testAddICDCode()", "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "shortclassname":"UpdateICDCodeListActionTest", "method":"public void testAddICDCode() throws Exception {\r\n    gen.icd9cmCodes();\r\n    final String code = \"999.99\";\r\n    final String desc = \"testAddICDCode\";\r\n    final String classification = \"Long Term\";\r\n    DiagnosisBean proc = new DiagnosisBean(code, desc, classification);\r\n    assertEquals(getAddCodeSuccessString(proc), action.addICDCode(proc));\r\n    proc = factory.getICDCodesDAO().getICDCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n}"},
 {"id":919, "methodname":"testDiagnosisBeanStringConstructor()", "methodnamerefined":"testDiagnosisBeanStringConstructor", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testDiagnosisBeanStringConstructor", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testDiagnosisBeanStringConstructor()", "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "shortclassname":"UpdateICDCodeListActionTest", "method":"public void testDiagnosisBeanStringConstructor() throws Exception {\r\n    DiagnosisBean bean = new DiagnosisBean(\"999.99\", \"Test OK\", \"Long Term\");\r\n    assertEquals(\"999.99\", bean.getICDCode());\r\n    assertEquals(\"Test OK\", bean.getDescription());\r\n    bean = new DiagnosisBean(\"0\", \"Test OK\", \"Long Term\");\r\n    assertEquals(\"0\", bean.getICDCode());\r\n    assertEquals(\"Test OK\", bean.getDescription());\r\n}"},
 {"id":920, "methodname":"testEvilFactory()", "methodnamerefined":"testEvilFactory", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testEvilFactory", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testEvilFactory()", "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "shortclassname":"UpdateICDCodeListActionTest", "method":"public void testEvilFactory() {\r\n    action = new UpdateICDCodeListAction(EvilDAOFactory.getEvilInstance(), 0L);\r\n    DiagnosisBean db = new DiagnosisBean(\"10.3\", \"a crazy diagnosis\", \"true\");\r\n    try {\r\n        String x = action.addICDCode(db);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n    try {\r\n        String x = action.updateInformation(db);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":921, "methodname":"testUpdateICDInformation0()", "methodnamerefined":"testUpdateICDInformation0", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testUpdateICDInformation0", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testUpdateICDInformation0()", "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "shortclassname":"UpdateICDCodeListActionTest", "method":"public void testUpdateICDInformation0() throws Exception {\r\n    final String code = \"888.88\";\r\n    final String desc = \"new descrip 0\";\r\n    final String desc_new = \"new descrip 1\";\r\n    final String classification = \"Long Term\";\r\n    DiagnosisBean proc = new DiagnosisBean(code, desc, classification);\r\n    action.addICDCode(proc);\r\n    proc.setDescription(desc_new);\r\n    assertEquals(\"Success: 1 row(s) updated\", action.updateInformation(proc));\r\n    proc = factory.getICDCodesDAO().getICDCode(code);\r\n    assertEquals(desc_new, proc.getDescription());\r\n}"},
 {"id":922, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.testUpdateNonExistent()", "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "shortclassname":"UpdateICDCodeListActionTest", "method":"public void testUpdateNonExistent() throws Exception {\r\n    gen.icd9cmCodes();\r\n    DiagnosisBean proc = new DiagnosisBean(\"999.99\", \"shouldnt be here\", \"Long Term\");\r\n    assertEquals(\"Error: Code not found.\", action.updateInformation(proc));\r\n    assertEquals(null, factory.getICDCodesDAO().getICDCode(\"999.99\"));\r\n    assertEquals(13, factory.getICDCodesDAO().getAllICDCodes().size());\r\n}"},
 {"id":923, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":153, "classname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction", "shortclassname":"UpdateLOINCListAction", "method":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n */\r\npublic UpdateLOINCListAction(DAOFactory factory) {\r\n    lDAO = factory.getLOINCDAO();\r\n}"},
 {"id":924, "methodname":"add(edu.ncsu.csc.itrust.beans.LOINCbean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.add", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.add(edu.ncsu.csc.itrust.beans.LOINCbean)", "classid":153, "classname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction", "shortclassname":"UpdateLOINCListAction", "method":"/**\r\n * Adds a new LOINC\r\n *\r\n * @param diagn\r\n * \t\tNew LOINC\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String add(LOINCbean diagn) throws FormValidationException, iTrustException {\r\n    validator.validate(diagn);\r\n    List<LOINCbean> lblist = lDAO.getProcedures(diagn.getLabProcedureCode());\r\n    if (!(lblist.isEmpty())) {\r\n        throw new FormValidationException(\"Error: Code already exists.\");\r\n    }\r\n    lDAO.addLOINC(diagn);\r\n    return (\"Success: \" + (diagn.getLabProcedureCode())) + \" added\";\r\n}"},
 {"id":925, "methodname":"createBean(java.lang.String[])", "methodnamerefined":"createBean", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.createBean", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.createBean(java.lang.String[])", "classid":153, "classname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction", "shortclassname":"UpdateLOINCListAction", "method":"/**\r\n *\r\n *\r\n * @param beanInfo\r\n * \t\tan array of string data to add to the LOINC bean\r\n * @return a LOINCbean created from the beanInfo\r\n */\r\nprivate LOINCbean createBean(String[] beanInfo) {\r\n    LOINCbean bean = new LOINCbean();\r\n    for (int i = 0; i < (beanInfo.length); i++) {\r\n        boolean empty = ((beanInfo[i]) == null) || (beanInfo[i].isEmpty());\r\n        if (empty) {\r\n            beanInfo[i] = null;\r\n        }\r\n        switch (i) {\r\n            case 0 :\r\n                bean.setLabProcedureCode(beanInfo[i]);\r\n                break;\r\n            case 1 :\r\n                bean.setComponent(beanInfo[i]);\r\n                break;\r\n            case 2 :\r\n                bean.setKindOfProperty(beanInfo[i]);\r\n                break;\r\n            case 3 :\r\n                bean.setTimeAspect(beanInfo[i]);\r\n                break;\r\n            case 4 :\r\n                bean.setSystem(beanInfo[i]);\r\n                break;\r\n            case 5 :\r\n                bean.setScaleType(beanInfo[i]);\r\n                break;\r\n            case 6 :\r\n                bean.setMethodType(beanInfo[i]);\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n    return bean;\r\n}"},
 {"id":926, "methodname":"parseLOINCFile(java.io.InputStream,boolean)", "methodnamerefined":"parseLOINCFile", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.parseLOINCFile", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.parseLOINCFile(java.io.InputStream,boolean)", "classid":153, "classname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction", "shortclassname":"UpdateLOINCListAction", "method":"/**\r\n * Reads a LOINC data file line by line, looking for valid LOINC data to add to the database.\r\n *\r\n * @param data\r\n * \t\tan InputStream associated with the file to parse\r\n * @param ignoreDupData\r\n * \t\tfalse if existing in the database should be updated if new data exists in the file\r\n * @return a list of messages concerning the parsing of the file\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<String> parseLOINCFile(InputStream data, boolean ignoreDupData) throws DBException {\r\n    ArrayList<String> results = new ArrayList<String>();\r\n    BufferedReader buf = new BufferedReader(new InputStreamReader(data));\r\n    String line = null;\r\n    int linesInserted = 0;\r\n    int dupDataSkipped = 0;\r\n    int dupDataUpdated = 0;\r\n    int lnum = 1;\r\n    // Match for starting with a LOINC code: \"NUMBERS AND DASHES\"\r\n    String labRegEx = \"^\"([\\d-]*)\"\\t\";\r\n    Pattern req = Pattern.compile(labRegEx);\r\n    try {\r\n        while ((line = buf.readLine()) != null) {\r\n            try {\r\n                Matcher reqMatch = req.matcher(line);\r\n                // The line must start with a LOINC code to be further processed\r\n                boolean found = (((line.length()) > 0) && ((line.charAt(0)) == \")) && (reqMatch.find());\r\n                if (!found) {\r\n                    results.add((((\"IGNORED LINE \" + lnum) + \": \") + line));\r\n                } else {\r\n                    String[] beanInfo = new String[7];\r\n                    // split the line along tabs\r\n                    String[] parts = line.split(\"\t\");\r\n                    // the line must have been split into at least 2 parts to continue\r\n                    if ((parts != null) && (!(parts[0].equals(line)))) {\r\n                        for (int i = 0; (i < (beanInfo.length)) && (i < (parts.length)); i++) {\r\n                            // this was an empty field\r\n                            if ((parts[i].length()) <= 2) {\r\n                                beanInfo[i] = \"\";\r\n                            } else\r\n                                if (((parts[i].charAt(0)) != \") || ((parts[i].charAt(((parts[i].length()) - 1))) != \")) {\r\n                                    // The first 7 fields of LOINC data must be surrounded by quotes. If they arent then its wrong.\r\n                                    throw new FormValidationException(\"Bad LOINC data line. All fields must be surrounded by quotation marks.\");\r\n                                } else {\r\n                                    // strip quotes\r\n                                    beanInfo[i] = parts[i].substring(1, ((parts[i].length()) - 1));\r\n                                }\r\n\r\n                        }\r\n                        LOINCbean bean = createBean(beanInfo);\r\n                        boolean duplicate = false;\r\n                        try {\r\n                            add(bean);\r\n                            // success\r\n                            linesInserted++;\r\n                        } catch (Exception e) {\r\n                            if (!(e.getMessage().contains(\"Code already exists\"))) {\r\n                                results.add((((((\"ERROR, LINE \" + lnum) + \": \") + line) + \" \") + (e.getMessage())));\r\n                            } else {\r\n                                duplicate = true;\r\n                            }\r\n                        }\r\n                        if (duplicate) {\r\n                            if (!ignoreDupData) {\r\n                                String res = \"\";\r\n                                res = updateInformation(bean);\r\n                                if (res.contains(\"Error\")) {\r\n                                    throw new FormValidationException(res);\r\n                                } else {\r\n                                    // We updated some data\r\n                                    dupDataUpdated++;\r\n                                }\r\n                            } else {\r\n                                // We skipped a line\r\n                                dupDataSkipped++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (FormValidationException e) {\r\n                // If we got this we should report the line as an error\r\n                results.add((((((\"ERROR, LINE \" + lnum) + \": \") + line) + \" \") + (e.getMessage())));\r\n            }\r\n            lnum++;\r\n        } \r\n    } catch (IOException e) {\r\n        // this is an IO error and not a data error\r\n        // treat it differently\r\n        results.add((\"ERROR: \" + (e.getMessage())));\r\n    }\r\n    // No data was changed\r\n    if ((linesInserted <= 0) && (dupDataUpdated <= 0)) {\r\n        // Files are only invalid if we didnt add any new data nor update any existing data.\r\n        if ((dupDataUpdated <= 0) && (dupDataSkipped <= 0)) {\r\n            results.add(\"File invalid. No LOINC data added.\");\r\n        } else {\r\n            // Otherwise, we just skipped existing data lines.\r\n            results.add(((\"No new LOINC data added. \" + dupDataSkipped) + \" lines detected as duplicate data.\"));\r\n        }\r\n    } else {\r\n        // Tell the user how many lines were updated/inserted.\r\n        results.add(((((\"Successfully added \" + linesInserted) + \" lines of new LOINC data. Updated \") + dupDataUpdated) + \" lines of existing LOINC data.\"));\r\n    }\r\n    return results;\r\n}"},
 {"id":927, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.LOINCbean)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.updateInformation(edu.ncsu.csc.itrust.beans.LOINCbean)", "classid":153, "classname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction", "shortclassname":"UpdateLOINCListAction", "method":"/**\r\n * Updates a LOINC\r\n *\r\n * @param diagn\r\n * \t\tnew information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(LOINCbean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = lDAO.update(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + (diagn.getLabProcedureCode())) + \" updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":928, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.-init-()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"UpdateLabProcListActionTest() {\r\n}"},
 {"id":929, "methodname":"getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.LOINCbean)", "methodnamerefined":"getAddCodeSuccessString", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.getAddCodeSuccessString", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.LOINCbean)", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"private String getAddCodeSuccessString(LOINCbean proc) {\r\n    return (\"Success: \" + (proc.getLabProcedureCode())) + \" added\";\r\n}"},
 {"id":930, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.setUp()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    dao = factory.getLOINCDAO();\r\n    action = new UpdateLOINCListAction(factory);\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n    gen.loincs();\r\n}"},
 {"id":931, "methodname":"testAddDuplicate()", "methodnamerefined":"testAddDuplicate", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testAddDuplicate", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testAddDuplicate()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testAddDuplicate() throws Exception {\r\n    String code = \"73823-7\";\r\n    String com = \"Yellow Tooth\";\r\n    String kop = \"VOL\";\r\n    LOINCbean proc = new LOINCbean();\r\n    proc.setLabProcedureCode(code);\r\n    proc.setComponent(com);\r\n    proc.setKindOfProperty(kop);\r\n    assertEquals(getAddCodeSuccessString(proc), action.add(proc));\r\n    proc.setKindOfProperty(\"VIL\");\r\n    try {\r\n        action.add(proc);\r\n        fail(\"FormValidationException should have been thrown\");\r\n    } catch (Exception ex) {\r\n        assertEquals(\"This form has not been validated correctly. The following field are not properly filled in: [Error: Code already exists.]\", ex.getMessage());\r\n    }\r\n    proc = factory.getLOINCDAO().getProcedures(code).get(0);\r\n    assertEquals(kop, proc.getKindOfProperty());\r\n}"},
 {"id":932, "methodname":"testAddICDCode()", "methodnamerefined":"testAddICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testAddICDCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testAddICDCode()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testAddICDCode() throws Exception {\r\n    String code = \"78743-7\";\r\n    String com = \"Poison Oak\";\r\n    String kop = \"VOL\";\r\n    LOINCbean proc = new LOINCbean();\r\n    proc.setLabProcedureCode(code);\r\n    proc.setComponent(com);\r\n    proc.setKindOfProperty(kop);\r\n    assertEquals(getAddCodeSuccessString(proc), action.add(proc));\r\n    proc = factory.getLOINCDAO().getProcedures(code).get(0);\r\n    assertEquals(com, proc.getComponent());\r\n    assertEquals(kop, proc.getKindOfProperty());\r\n}"},
 {"id":933, "methodname":"testEvilFactory()", "methodnamerefined":"testEvilFactory", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testEvilFactory", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testEvilFactory()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testEvilFactory() throws Exception {\r\n    action = new UpdateLOINCListAction(EvilDAOFactory.getEvilInstance());\r\n    String code = \"28473-7\";\r\n    String com = \"Poison Ivy\";\r\n    String kop = \"VOL\";\r\n    LOINCbean db = new LOINCbean();\r\n    db.setLabProcedureCode(code);\r\n    db.setComponent(com);\r\n    db.setKindOfProperty(kop);\r\n    try {\r\n        action.add(db);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getExtendedMessage());\r\n    }\r\n    assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", action.updateInformation(db));\r\n}"},
 {"id":934, "methodname":"testParseBadLOINCFile()", "methodnamerefined":"testParseBadLOINCFile", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseBadLOINCFile", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseBadLOINCFile()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testParseBadLOINCFile() throws Exception {\r\n    List<String> expected = new ArrayList<String>();\r\n    expected.add(\"IGNORED LINE 1: This file contains no LOINC data and should fail the LOINC file verification process.\");\r\n    expected.add(\"File invalid. No LOINC data added.\");\r\n    String filename = \"./testing-files/sample_loinc/badLoincFile.txt\";\r\n    FileInputStream stream = new FileInputStream(filename);\r\n    List<String> actual = action.parseLOINCFile(stream, false);\r\n    assertEquals(expected, actual);\r\n}"},
 {"id":935, "methodname":"testParseInvalidLOINCFile()", "methodnamerefined":"testParseInvalidLOINCFile", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseInvalidLOINCFile", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseInvalidLOINCFile()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testParseInvalidLOINCFile() throws Exception {\r\n    List<String> expected = new ArrayList<String>();\r\n    expected.add(\"ERROR, LINE 2: \"10054-5\"\t\"I skip rest of fields\" This form has not been validated correctly. The following field are not properly filled in: [You must have a Lab Procedure Code, Component and Kind Of Property]\");\r\n    expected.add(\"Successfully added 2 lines of new LOINC data. Updated 0 lines of existing LOINC data.\");\r\n    String filename = \"./testing-files/sample_loinc/invalidLine.txt\";\r\n    FileInputStream stream = new FileInputStream(filename);\r\n    List<String> actual = action.parseLOINCFile(stream, false);\r\n    assertEquals(expected, actual);\r\n}"},
 {"id":936, "methodname":"testParseInvalidLOINCFile2()", "methodnamerefined":"testParseInvalidLOINCFile2", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseInvalidLOINCFile2", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseInvalidLOINCFile2()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testParseInvalidLOINCFile2() throws Exception {\r\n    List<String> expected = new ArrayList<String>();\r\n    expected.add(\"ERROR, LINE 2: \"10054-5\"\toh no! bad quoting\"\t\"Time\"\t\"Pt\"\t\"Heart\"\t\"Qn\"\t\"EKG\"\t\"EKG.MEAS\"\t\"CH\"\t\"19980820\"\t\"NAM\"\t\t\"ACTIVE\" This form has not been validated correctly. The following field are not properly filled in: [Bad LOINC data line. All fields must be surrounded by quotation marks.]\");\r\n    expected.add(\"Successfully added 2 lines of new LOINC data. Updated 0 lines of existing LOINC data.\");\r\n    String filename = \"./testing-files/sample_loinc/invalidLine2.txt\";\r\n    FileInputStream stream = new FileInputStream(filename);\r\n    List<String> actual = action.parseLOINCFile(stream, false);\r\n    assertEquals(expected, actual);\r\n}"},
 {"id":937, "methodname":"testParseLOINCFile()", "methodnamerefined":"testParseLOINCFile", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseLOINCFile", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseLOINCFile()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testParseLOINCFile() throws Exception {\r\n    gen.clearAllTables();\r\n    List<String> expected = new ArrayList<String>();\r\n    expected.add(\"IGNORED LINE 1: \");\r\n    expected.add(\"IGNORED LINE 2: the use of this data in direct clinical care, research and practice management.\");\r\n    expected.add(\"IGNORED LINE 3: <----Clip Here for Data----->\");\r\n    expected.add(\"IGNORED LINE 4: \"LOINC_NUM\"\t\"COMPONENT\"\t\"PROPERTY\"\t\"TIME_ASPCT\"\t\"SYSTEM\"\t\"SCALE_TYP\"\t\"METHOD_TYP\"\t\"CLASS\"\t\"SOURCE\"\t\"DATE_LAST_CHANGED\"\t\"CHNG_TYPE\"\t\"COMMENTS\"\t\"STATUS\"\t\"MAP_TO\"\t\"CONSUMER_NAME\"\t\"MOLAR_MASS\"\t\"CLASSTYPE\"\t\"FORMULA\"\t\"SPECIES\"\t\"EXMPL_ANSWERS\"\t\"ACSSYM\"\t\"BASE_NAME\"\t\"NAACCR_ID\"\t\"CODE_TABLE\"\t\"SURVEY_QUEST_TEXT\"\t\"SURVEY_QUEST_SRC\"\t\"UNITSREQUIRED\"\t\"SUBMITTED_UNITS\"\t\"RELATEDNAMES2\"\t\"SHORTNAME\"\t\"ORDER_OBS\"\t\"CDISC_COMMON_TESTS\"\t\"HL7_FIELD_SUBFIELD_ID\"\t\"EXTERNAL_COPYRIGHT_NOTICE\"\t\"EXAMPLE_UNITS\"\t\"LONG_COMMON_NAME\"\t\"HL7_V2_DATATYPE\"\t\"HL7_V3_DATATYPE\"\t\"CURATED_RANGE_AND_UNITS\"\t\"DOCUMENT_SECTION\"\t\"EXAMPLE_UCUM_UNITS\"\t\"EXAMPLE_SI_UCUM_UNITS\"\t\"STATUS_REASON\"\t\"STATUS_TEXT\"\t\"CHANGE_REASON_PUBLIC\"\t\"COMMON_TEST_RANK\"\t\"COMMON_ORDER_RANK\"\");\r\n    expected.add(\"Successfully added 29 lines of new LOINC data. Updated 0 lines of existing LOINC data.\");\r\n    String filename = \"./testing-files/sample_loinc/sampleLoinc.txt\";\r\n    FileInputStream stream = new FileInputStream(filename);\r\n    List<String> actual = action.parseLOINCFile(stream, true);\r\n    assertEquals(expected, actual);\r\n    assertEquals(29, dao.getAllLOINC().size());\r\n    assertTrue(dao.getProcedures(\"10053-7\").get(0).getComponent().equals(\"S wave duration.lead V2\"));\r\n}"},
 {"id":938, "methodname":"testParseLOINCFile2()", "methodnamerefined":"testParseLOINCFile2", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseLOINCFile2", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseLOINCFile2()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testParseLOINCFile2() throws Exception {\r\n    gen.clearAllTables();\r\n    List<String> expected = new ArrayList<String>();\r\n    expected.add(\"Successfully added 3 lines of new LOINC data. Updated 0 lines of existing LOINC data.\");\r\n    String filename = \"./testing-files/sample_loinc/sampleLoinc2.txt\";\r\n    FileInputStream stream = new FileInputStream(filename);\r\n    List<String> actual = action.parseLOINCFile(stream, false);\r\n    assertEquals(expected, actual);\r\n    assertEquals(3, dao.getAllLOINC().size());\r\n    assertTrue(dao.getProcedures(\"10053-7\").get(0).getComponent().equals(\"S wave duration.lead V2\"));\r\n}"},
 {"id":939, "methodname":"testParseLOINCFileIgnore()", "methodnamerefined":"testParseLOINCFileIgnore", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseLOINCFileIgnore", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseLOINCFileIgnore()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testParseLOINCFileIgnore() throws Exception {\r\n    gen.clearAllTables();\r\n    String filename1 = \"./testing-files/sample_loinc/sampleLoinc.txt\";\r\n    String filename2 = \"./testing-files/sample_loinc/sampleLoinc2.txt\";\r\n    FileInputStream stream1 = new FileInputStream(filename1);\r\n    FileInputStream stream2 = new FileInputStream(filename2);\r\n    action.parseLOINCFile(stream1, true);\r\n    assertEquals(29, dao.getAllLOINC().size());\r\n    action.parseLOINCFile(stream2, true);\r\n    assertEquals(29, dao.getAllLOINC().size());\r\n    assertTrue(dao.getProcedures(\"10054-5\").get(0).getComponent().equals(\"S wave duration.lead V3\"));\r\n}"},
 {"id":940, "methodname":"testParseLOINCFileReplace()", "methodnamerefined":"testParseLOINCFileReplace", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseLOINCFileReplace", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testParseLOINCFileReplace()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testParseLOINCFileReplace() throws Exception {\r\n    gen.clearAllTables();\r\n    String filename1 = \"./testing-files/sample_loinc/sampleLoinc.txt\";\r\n    String filename2 = \"./testing-files/sample_loinc/sampleLoinc2.txt\";\r\n    FileInputStream stream1 = new FileInputStream(filename1);\r\n    FileInputStream stream2 = new FileInputStream(filename2);\r\n    action.parseLOINCFile(stream1, false);\r\n    assertEquals(29, dao.getAllLOINC().size());\r\n    action.parseLOINCFile(stream2, false);\r\n    assertEquals(29, dao.getAllLOINC().size());\r\n    assertTrue(((dao.getProcedures(\"10054-5\").get(0).getSystem()) == null));\r\n}"},
 {"id":941, "methodname":"testUpdateICDInformation0()", "methodnamerefined":"testUpdateICDInformation0", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testUpdateICDInformation0", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testUpdateICDInformation0()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testUpdateICDInformation0() throws Exception {\r\n    String code = \"98323-7\";\r\n    String com = \"Malaria\";\r\n    String kop = \"VOL\";\r\n    LOINCbean proc = new LOINCbean();\r\n    proc.setLabProcedureCode(code);\r\n    proc.setComponent(com);\r\n    proc.setKindOfProperty(kop);\r\n    assertEquals(getAddCodeSuccessString(proc), action.add(proc));\r\n    proc.setKindOfProperty(\"Per\");\r\n    assertEquals(((\"Success: \" + (proc.getLabProcedureCode())) + \" updated\"), action.updateInformation(proc));\r\n    proc = factory.getLOINCDAO().getProcedures(code).get(0);\r\n    assertEquals(\"Per\", proc.getKindOfProperty());\r\n}"},
 {"id":942, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.testUpdateNonExistent()", "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "shortclassname":"UpdateLabProcListActionTest", "method":"public void testUpdateNonExistent() throws Exception {\r\n    String code = \"99999-9\";\r\n    String com = \"Malaria\";\r\n    String kop = \"VOL\";\r\n    LOINCbean proc = new LOINCbean();\r\n    proc.setLabProcedureCode(code);\r\n    proc.setComponent(com);\r\n    proc.setKindOfProperty(kop);\r\n    assertEquals(\"Error: Code not found.\", action.updateInformation(proc));\r\n    assertTrue(factory.getLOINCDAO().getProcedures(code).isEmpty());\r\n}"},
 {"id":943, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "shortclassname":"UpdateNDCodeListAction", "method":"/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * \t\tThe MID of the user updating the ND lists.\r\n */\r\npublic UpdateNDCodeListAction(DAOFactory factory, long performerID) {\r\n    ndDAO = factory.getNDCodesDAO();\r\n}"},
 {"id":944, "methodname":"addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"addNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.addNDCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "shortclassname":"UpdateNDCodeListAction", "method":"/**\r\n * Adds a new ND Code (prescription) to the list\r\n *\r\n * @param med\r\n * \t\tThe new ND Code to be added\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addNDCode(MedicationBean med) throws FormValidationException {\r\n    validator.validate(med);\r\n    try {\r\n        if (ndDAO.addNDCode(med)) {\r\n            return (((\"Success: \" + (med.getNDCode())) + \" - \") + (med.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":945, "methodname":"removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"removeNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.removeNDCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "shortclassname":"UpdateNDCodeListAction", "method":"/**\r\n * Removes a ND Code (prescription) from the list\r\n *\r\n * @param med\r\n * \t\tThe ND Code to be removed\r\n * @return Status message\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String removeNDCode(MedicationBean med) throws DBException {\r\n    try {\r\n        if ((ndDAO.getNDCode(med.getNDCode())) == null) {\r\n            return \"Drug does not exist or already has been removed from the database.\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n    try {\r\n        if (ndDAO.removeNDCode(med)) {\r\n            return (((\"Success: \" + (med.getNDCode())) + \" - \") + (med.getDescription())) + \" removed\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":946, "methodname":"updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"updateCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "shortclassname":"UpdateNDCodeListAction", "method":"/**\r\n * Medication information should already be validated\r\n *\r\n * @param med\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate int updateCode(MedicationBean med) throws DBException {\r\n    return ndDAO.updateCode(med);\r\n}"},
 {"id":947, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "shortclassname":"UpdateNDCodeListAction", "method":"/**\r\n * Updates the ND Code with new information from the MedicationBean\r\n *\r\n * @param med\r\n * \t\tthe MedicationBean that holds new information but the same code\r\n * @return status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(MedicationBean med) throws FormValidationException {\r\n    validator.validate(med);\r\n    try {\r\n        int rows = updateCode(med);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":948, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.-init-()", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"UpdateNDCodeListActionTest() {\r\n}"},
 {"id":949, "methodname":"addEmpty(java.lang.String)", "methodnamerefined":"addEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.addEmpty", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.addEmpty(java.lang.String)", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"private void addEmpty(String code) throws Exception {\r\n    MedicationBean med = new MedicationBean(code, \" \");\r\n    assertEquals(getAddCodeSuccessString(med), action.addNDCode(med));\r\n    med = factory.getNDCodesDAO().getNDCode(code);\r\n    assertEquals(\" \", med.getDescription());\r\n}"},
 {"id":950, "methodname":"getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"getAddCodeSuccessString", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.getAddCodeSuccessString", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":951, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.setUp()", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    action = new UpdateNDCodeListAction(factory, UpdateNDCodeListActionTest.performingAdmin);\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n    gen.ndCodes();\r\n}"},
 {"id":952, "methodname":"testAddDuplicate()", "methodnamerefined":"testAddDuplicate", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testAddDuplicate", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testAddDuplicate()", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"public void testAddDuplicate() throws DBException, FormValidationException {\r\n    final String code = \"999999999\";\r\n    final String descrip0 = \"description 0\";\r\n    MedicationBean proc = new MedicationBean(code, descrip0);\r\n    assertEquals(getAddCodeSuccessString(proc), action.addNDCode(proc));\r\n    proc.setDescription(\"description 1\");\r\n    assertEquals(\"Error: Code already exists.\", action.addNDCode(proc));\r\n    proc = factory.getNDCodesDAO().getNDCode(code);\r\n    assertEquals(descrip0, proc.getDescription());\r\n}"},
 {"id":953, "methodname":"testAddNDCode()", "methodnamerefined":"testAddNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testAddNDCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testAddNDCode()", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"public void testAddNDCode() throws Exception {\r\n    final String code = \"999999999\";\r\n    final String desc = \"UpdateNDCodeListActionTest testAddNDCode\";\r\n    MedicationBean proc = new MedicationBean(code, desc);\r\n    assertEquals(getAddCodeSuccessString(proc), action.addNDCode(proc));\r\n    proc = factory.getNDCodesDAO().getNDCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n}"},
 {"id":954, "methodname":"testEvilFactory()", "methodnamerefined":"testEvilFactory", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testEvilFactory", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testEvilFactory()", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"public void testEvilFactory() {\r\n    action = new UpdateNDCodeListAction(EvilDAOFactory.getEvilInstance(), 0L);\r\n    MedicationBean mb = new MedicationBean();\r\n    mb.setDescription(\"description\");\r\n    mb.setNDCode(\"3657\");\r\n    try {\r\n        String x = action.addNDCode(mb);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n    try {\r\n        String x = action.updateInformation(mb);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":955, "methodname":"testRemoveNDCode()", "methodnamerefined":"testRemoveNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testRemoveNDCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testRemoveNDCode()", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"public void testRemoveNDCode() throws Exception {\r\n    final String code = \"999999999\";\r\n    final String desc = \"UpdateNDCodeListActionTest testAddNDCode\";\r\n    MedicationBean proc = new MedicationBean(code, desc);\r\n    assertEquals(getAddCodeSuccessString(proc), action.addNDCode(proc));\r\n    proc = factory.getNDCodesDAO().getNDCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n    action.removeNDCode(proc);\r\n    assertNull(factory.getNDCodesDAO().getNDCode(code));\r\n}"},
 {"id":956, "methodname":"testUpdateNDInformation0()", "methodnamerefined":"testUpdateNDInformation0", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testUpdateNDInformation0", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testUpdateNDInformation0()", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"public void testUpdateNDInformation0() throws Exception {\r\n    final String code = \"888888888\";\r\n    final String desc = \"new descrip 0\";\r\n    MedicationBean proc = new MedicationBean(code);\r\n    addEmpty(code);\r\n    proc.setDescription(desc);\r\n    assertEquals(\"Success: 1 row(s) updated\", action.updateInformation(proc));\r\n    proc = factory.getNDCodesDAO().getNDCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n}"},
 {"id":957, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.testUpdateNonExistent()", "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "shortclassname":"UpdateNDCodeListActionTest", "method":"public void testUpdateNonExistent() throws Exception {\r\n    final String code = \"999999999\";\r\n    MedicationBean proc = new MedicationBean(code, \"shouldnt be here\");\r\n    assertEquals(\"Error: Code not found.\", action.updateInformation(proc));\r\n    assertEquals(null, factory.getNDCodesDAO().getNDCode(code));\r\n    assertEquals(5, factory.getNDCodesDAO().getAllNDCodes().size());\r\n}"},
 {"id":958, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.-init-()", "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "shortclassname":"UpdateORCListActionTest", "method":"UpdateORCListActionTest() {\r\n}"},
 {"id":959, "methodname":"addEmpty(java.lang.String)", "methodnamerefined":"addEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.addEmpty", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.addEmpty(java.lang.String)", "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "shortclassname":"UpdateORCListActionTest", "method":"private void addEmpty(String code) throws Exception {\r\n    OverrideReasonBean orc = new OverrideReasonBean(code, \"0\");\r\n    String result = action.addORCode(orc);\r\n    assert result.contains(\"Success\");\r\n    orc = factory.getORCodesDAO().getORCode(code);\r\n    assertEquals(\"0\", orc.getDescription());\r\n}"},
 {"id":960, "methodname":"getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"getAddCodeSuccessString", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.getAddCodeSuccessString", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "shortclassname":"UpdateORCListActionTest", "method":"private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":961, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.setUp()", "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "shortclassname":"UpdateORCListActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    action = new UpdateReasonCodeListAction(factory, UpdateORCListActionTest.performingAdmin);\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n}"},
 {"id":962, "methodname":"testAddDuplicate()", "methodnamerefined":"testAddDuplicate", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testAddDuplicate", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testAddDuplicate()", "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "shortclassname":"UpdateORCListActionTest", "method":"public void testAddDuplicate() throws DBException, FormValidationException {\r\n    final String code = \"99997\";\r\n    final String descrip0 = \"description 0\";\r\n    OverrideReasonBean orc = new OverrideReasonBean(code, descrip0);\r\n    String result = action.addORCode(orc);\r\n    assert result.contains(\"Success\");\r\n    orc.setDescription(\"description 1\");\r\n    result = action.addORCode(orc);\r\n    assertEquals(\"Error: Code already exists.\", result);\r\n    orc = factory.getORCodesDAO().getORCode(code);\r\n    assertEquals(descrip0, orc.getDescription());\r\n}"},
 {"id":963, "methodname":"testAddORCode()", "methodnamerefined":"testAddORCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testAddORCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testAddORCode()", "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "shortclassname":"UpdateORCListActionTest", "method":"public void testAddORCode() throws Exception {\r\n    final String code = \"99998\";\r\n    final String desc = \"UpdateORCodeListActionTest testAddORCode\";\r\n    OverrideReasonBean orb = new OverrideReasonBean(code, desc);\r\n    /* DO NOT REMOVE! This must be stored in a variable. DO NO QUESTION THE JAVA! */\r\n    String result = action.addORCode(orb);\r\n    assert result.contains(\"Success\");\r\n    orb = factory.getORCodesDAO().getORCode(code);\r\n    assertEquals(desc, orb.getDescription());\r\n}"},
 {"id":964, "methodname":"testEvilFactory()", "methodnamerefined":"testEvilFactory", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testEvilFactory", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testEvilFactory()", "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "shortclassname":"UpdateORCListActionTest", "method":"public void testEvilFactory() {\r\n    action = new UpdateReasonCodeListAction(EvilDAOFactory.getEvilInstance(), 0L);\r\n    OverrideReasonBean mb = new OverrideReasonBean();\r\n    mb.setDescription(\"description\");\r\n    mb.setORCode(\"00010\");\r\n    try {\r\n        String x = action.addORCode(mb);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n    try {\r\n        String x = action.updateInformation(mb);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":965, "methodname":"testUpdateNDInformation0()", "methodnamerefined":"testUpdateNDInformation0", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testUpdateNDInformation0", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testUpdateNDInformation0()", "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "shortclassname":"UpdateORCListActionTest", "method":"public void testUpdateNDInformation0() throws Exception {\r\n    final String code = \"88888\";\r\n    final String desc = \"new descrip 0\";\r\n    OverrideReasonBean orc = new OverrideReasonBean(code);\r\n    addEmpty(code);\r\n    orc.setDescription(desc);\r\n    String result = action.updateInformation(orc);\r\n    assertEquals(\"Success: 1 row(s) updated\", result);\r\n    orc = factory.getORCodesDAO().getORCode(code);\r\n    assertEquals(desc, orc.getDescription());\r\n}"},
 {"id":966, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.testUpdateNonExistent()", "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "shortclassname":"UpdateORCListActionTest", "method":"public void testUpdateNonExistent() throws Exception {\r\n    final String code = \"99996\";\r\n    OverrideReasonBean orc = new OverrideReasonBean(code, \"shouldnt be here\");\r\n    String result = action.updateInformation(orc);\r\n    assertEquals(\"Error: Code not found.\", result);\r\n    OverrideReasonBean orc2 = new OverrideReasonBean(\"99995\", \"Test\");\r\n    String result2 = action.addORCode(orc2);\r\n    assert result2.contains(\"Success\");\r\n    assertEquals(null, factory.getORCodesDAO().getORCode(code));\r\n    assertEquals(1, factory.getORCodesDAO().getAllORCodes().size());\r\n}"},
 {"id":967, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":158, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction", "shortclassname":"UpdateReasonCodeListAction", "method":"/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * \t\tThe MID of the user updating the ND lists.\r\n */\r\npublic UpdateReasonCodeListAction(DAOFactory factory, long performerID) {\r\n    orcDAO = factory.getORCodesDAO();\r\n}"},
 {"id":968, "methodname":"addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"addORCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.addORCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":158, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction", "shortclassname":"UpdateReasonCodeListAction", "method":"/**\r\n * Adds a new ND Code (prescription) to the list\r\n *\r\n * @param orc\r\n * \t\tThe new ND Code to be added\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addORCode(OverrideReasonBean orc) throws FormValidationException {\r\n    validator.validate(orc);\r\n    try {\r\n        if (orcDAO.addORCode(orc)) {\r\n            return (((\"Success: \" + (orc.getORCode())) + \" - \") + (orc.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":969, "methodname":"updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"updateCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":158, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction", "shortclassname":"UpdateReasonCodeListAction", "method":"/**\r\n * Override Reason information should already be validated\r\n *\r\n * @param orc\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate int updateCode(OverrideReasonBean orc) throws DBException {\r\n    return orcDAO.updateCode(orc);\r\n}"},
 {"id":970, "methodname":"updateInformation(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"updateInformation", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateInformation", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":158, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction", "shortclassname":"UpdateReasonCodeListAction", "method":"/**\r\n * Updates the ND Code with new information from the OverrideReasonBean\r\n *\r\n * @param orc\r\n * \t\tthe OverrideReasonBean that holds new information but the same code\r\n * @return status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(OverrideReasonBean orc) throws FormValidationException {\r\n    validator.validate(orc);\r\n    try {\r\n        int rows = updateCode(orc);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":971, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.-init-()", "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "shortclassname":"UpdateReasonCodeListActionTest", "method":"UpdateReasonCodeListActionTest() {\r\n}"},
 {"id":972, "methodname":"addEmpty(java.lang.String)", "methodnamerefined":"addEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.addEmpty", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.addEmpty(java.lang.String)", "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "shortclassname":"UpdateReasonCodeListActionTest", "method":"private void addEmpty(String code) throws Exception {\r\n    MedicationBean med = new MedicationBean(code, \" \");\r\n    assertEquals(getAddCodeSuccessString(med), action.addNDCode(med));\r\n    med = factory.getNDCodesDAO().getNDCode(code);\r\n    assertEquals(\" \", med.getDescription());\r\n}"},
 {"id":973, "methodname":"getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"getAddCodeSuccessString", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.getAddCodeSuccessString", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "shortclassname":"UpdateReasonCodeListActionTest", "method":"private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":974, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.setUp()", "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "shortclassname":"UpdateReasonCodeListActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    action = new UpdateNDCodeListAction(factory, UpdateReasonCodeListActionTest.performingAdmin);\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n    gen.ndCodes();\r\n}"},
 {"id":975, "methodname":"testAddDuplicate()", "methodnamerefined":"testAddDuplicate", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testAddDuplicate", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testAddDuplicate()", "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "shortclassname":"UpdateReasonCodeListActionTest", "method":"public void testAddDuplicate() throws DBException, FormValidationException {\r\n    final String code = \"999999999\";\r\n    final String descrip0 = \"description 0\";\r\n    MedicationBean proc = new MedicationBean(code, descrip0);\r\n    assertEquals(getAddCodeSuccessString(proc), action.addNDCode(proc));\r\n    proc.setDescription(\"description 1\");\r\n    assertEquals(\"Error: Code already exists.\", action.addNDCode(proc));\r\n    proc = factory.getNDCodesDAO().getNDCode(code);\r\n    assertEquals(descrip0, proc.getDescription());\r\n}"},
 {"id":976, "methodname":"testAddNDCode()", "methodnamerefined":"testAddNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testAddNDCode", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testAddNDCode()", "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "shortclassname":"UpdateReasonCodeListActionTest", "method":"public void testAddNDCode() throws Exception {\r\n    final String code = \"999999999\";\r\n    final String desc = \"UpdateNDCodeListActionTest testAddNDCode\";\r\n    MedicationBean proc = new MedicationBean(code, desc);\r\n    assertEquals(getAddCodeSuccessString(proc), action.addNDCode(proc));\r\n    proc = factory.getNDCodesDAO().getNDCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n}"},
 {"id":977, "methodname":"testEvilFactory()", "methodnamerefined":"testEvilFactory", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testEvilFactory", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testEvilFactory()", "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "shortclassname":"UpdateReasonCodeListActionTest", "method":"public void testEvilFactory() {\r\n    action = new UpdateNDCodeListAction(EvilDAOFactory.getEvilInstance(), 0L);\r\n    MedicationBean mb = new MedicationBean();\r\n    mb.setDescription(\"description\");\r\n    mb.setNDCode(\"3657\");\r\n    try {\r\n        String x = action.addNDCode(mb);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n    try {\r\n        String x = action.updateInformation(mb);\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", x);\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":978, "methodname":"testUpdateNDInformation0()", "methodnamerefined":"testUpdateNDInformation0", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testUpdateNDInformation0", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testUpdateNDInformation0()", "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "shortclassname":"UpdateReasonCodeListActionTest", "method":"public void testUpdateNDInformation0() throws Exception {\r\n    final String code = \"888888888\";\r\n    final String desc = \"new descrip 0\";\r\n    MedicationBean proc = new MedicationBean(code);\r\n    addEmpty(code);\r\n    proc.setDescription(desc);\r\n    assertEquals(\"Success: 1 row(s) updated\", action.updateInformation(proc));\r\n    proc = factory.getNDCodesDAO().getNDCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n}"},
 {"id":979, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.testUpdateNonExistent()", "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "shortclassname":"UpdateReasonCodeListActionTest", "method":"public void testUpdateNonExistent() throws Exception {\r\n    final String code = \"999999999\";\r\n    MedicationBean proc = new MedicationBean(code, \"shouldnt be here\");\r\n    assertEquals(\"Error: Code not found.\", action.updateInformation(proc));\r\n    assertEquals(null, factory.getNDCodesDAO().getNDCode(code));\r\n    assertEquals(5, factory.getNDCodesDAO().getAllNDCodes().size());\r\n}"},
 {"id":980, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":160, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction", "shortclassname":"ViewAdverseEventAction", "method":"public ViewAdverseEventAction(DAOFactory factory) {\r\n    this.adEventDAO = factory.getAdverseEventDAO();\r\n}"},
 {"id":981, "methodname":"getAdverseEvent(int)", "methodnamerefined":"getAdverseEvent", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getAdverseEvent", "fullmethod":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getAdverseEvent(int)", "classid":160, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction", "shortclassname":"ViewAdverseEventAction", "method":"public AdverseEventBean getAdverseEvent(int id) throws DBException {\r\n    return adEventDAO.getReport(id);\r\n}"},
 {"id":982, "methodname":"getNameForCode(java.lang.String)", "methodnamerefined":"getNameForCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getNameForCode", "fullmethod":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getNameForCode(java.lang.String)", "classid":160, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction", "shortclassname":"ViewAdverseEventAction", "method":"public String getNameForCode(String code) throws DBException {\r\n    return adEventDAO.getNameForCode(code);\r\n}"},
 {"id":983, "methodname":"getUnremovedAdverseEventsByCode(java.lang.String)", "methodnamerefined":"getUnremovedAdverseEventsByCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getUnremovedAdverseEventsByCode", "fullmethod":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction.getUnremovedAdverseEventsByCode(java.lang.String)", "classid":160, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction", "shortclassname":"ViewAdverseEventAction", "method":"public List<AdverseEventBean> getUnremovedAdverseEventsByCode(String code) throws DBException {\r\n    return adEventDAO.getUnremovedAdverseEventsByCode(code);\r\n}"},
 {"id":984, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.-init-()", "classid":161, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest", "shortclassname":"ViewAdverseEventActionTest", "method":"ViewAdverseEventActionTest() {\r\n}"},
 {"id":985, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.setUp()", "classid":161, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest", "shortclassname":"ViewAdverseEventActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    action = new ViewAdverseEventAction(factory);\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.adverseEvent1();\r\n}"},
 {"id":986, "methodname":"testGetAdverseEvent()", "methodnamerefined":"testGetAdverseEvent", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.testGetAdverseEvent", "fullmethod":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.testGetAdverseEvent()", "classid":161, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest", "shortclassname":"ViewAdverseEventActionTest", "method":"public void testGetAdverseEvent() throws Exception {\r\n    AdverseEventBean bean = action.getAdverseEvent(1);\r\n    assertNotNull(bean);\r\n}"},
 {"id":987, "methodname":"testGetNameForCode()", "methodnamerefined":"testGetNameForCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.testGetNameForCode", "fullmethod":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.testGetNameForCode()", "classid":161, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest", "shortclassname":"ViewAdverseEventActionTest", "method":"public void testGetNameForCode() throws Exception {\r\n    String name = action.getNameForCode(\"548684985\");\r\n    assertEquals(name, \"Citalopram Hydrobromide\");\r\n}"},
 {"id":988, "methodname":"testGetUnremovedAdverseEventsByCode()", "methodnamerefined":"testGetUnremovedAdverseEventsByCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.testGetUnremovedAdverseEventsByCode", "fullmethod":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest.testGetUnremovedAdverseEventsByCode()", "classid":161, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventActionTest", "shortclassname":"ViewAdverseEventActionTest", "method":"public void testGetUnremovedAdverseEventsByCode() throws Exception {\r\n    List<AdverseEventBean> beanList = action.getUnremovedAdverseEventsByCode(\"548684985\");\r\n    assertNotNull(beanList);\r\n    assertFalse(beanList.isEmpty());\r\n    assertEquals(beanList.get(0).getDescription(), \"Stomach cramps and migraine headaches after taking this drug\");\r\n}"},
 {"id":989, "methodname":"-init-(long,edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.-init-(long,edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":162, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction", "shortclassname":"ViewApptRequestsAction", "method":"public ViewApptRequestsAction(long hcpid, DAOFactory factory) {\r\n    arDAO = factory.getApptRequestDAO();\r\n    aDAO = factory.getApptDAO();\r\n    pnDAO = factory.getPersonnelDAO();\r\n    this.hcpid = hcpid;\r\n    msgAction = new SendMessageAction(factory, hcpid);\r\n}"},
 {"id":990, "methodname":"acceptApptRequest(int)", "methodnamerefined":"acceptApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.acceptApptRequest", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.acceptApptRequest(int)", "classid":162, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction", "shortclassname":"ViewApptRequestsAction", "method":"public String acceptApptRequest(int reqID) throws SQLException {\r\n    ApptRequestBean req = arDAO.getApptRequest(reqID);\r\n    if ((req.isPending()) && (!(req.isAccepted()))) {\r\n        req.setPending(false);\r\n        req.setAccepted(true);\r\n        arDAO.updateApptRequest(req);\r\n        aDAO.scheduleAppt(req.getRequestedAppt());\r\n        try {\r\n            MessageBean msg = constructMessage(req.getRequestedAppt(), req.isAccepted());\r\n            msgAction.sendMessage(msg);\r\n        } catch (Exception e) {\r\n        }\r\n        return \"The appointment request you selected has been accepted and scheduled.\";\r\n    } else {\r\n        return \"The appointment request you selected has already been acted upon.\";\r\n    }\r\n}"},
 {"id":991, "methodname":"constructMessage(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "methodnamerefined":"constructMessage", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.constructMessage", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.constructMessage(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "classid":162, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction", "shortclassname":"ViewApptRequestsAction", "method":"private MessageBean constructMessage(ApptBean appt, boolean accepted) throws DBException, FormValidationException, iTrustException, SQLException {\r\n    MessageBean msg = new MessageBean();\r\n    msg.setFrom(appt.getHcp());\r\n    msg.setTo(appt.getPatient());\r\n    msg.setSubject(\"Your appointment request\");\r\n    msg.setSentDate(new Timestamp(System.currentTimeMillis()));\r\n    String body = (((\"Your appointment request with \" + (pnDAO.getName(appt.getHcp()))) + \" on \") + (appt.getDate())) + \" has been \";\r\n    if (accepted)\r\n        body += \"accepted.\";\r\n    else\r\n        body += \"rejected.\";\r\n\r\n    msg.setBody(body);\r\n    return msg;\r\n}"},
 {"id":992, "methodname":"getApptRequests()", "methodnamerefined":"getApptRequests", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.getApptRequests", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.getApptRequests()", "classid":162, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction", "shortclassname":"ViewApptRequestsAction", "method":"public List<ApptRequestBean> getApptRequests() throws SQLException {\r\n    List<ApptRequestBean> reqs = arDAO.getApptRequestsFor(hcpid);\r\n    return reqs;\r\n}"},
 {"id":993, "methodname":"getNumRequests(java.util.List)", "methodnamerefined":"getNumRequests", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.getNumRequests", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.getNumRequests(java.util.List)", "classid":162, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction", "shortclassname":"ViewApptRequestsAction", "method":"/**\r\n *\r\n *\r\n * @param reqs\r\n * \t\t\r\n * @return int\r\n\r\nReturns the number of times in the appointment request list\r\n */\r\npublic int getNumRequests(List<ApptRequestBean> reqs) {\r\n    int numOfPendingAppointments = 0;\r\n    for (int i = 0; i < (reqs.size()); i++) {\r\n        if ((reqs.get(i).isPending()) == true) {\r\n            numOfPendingAppointments++;\r\n        }\r\n    }\r\n    return numOfPendingAppointments;\r\n}"},
 {"id":994, "methodname":"rejectApptRequest(int)", "methodnamerefined":"rejectApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.rejectApptRequest", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.rejectApptRequest(int)", "classid":162, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction", "shortclassname":"ViewApptRequestsAction", "method":"public String rejectApptRequest(int reqID) throws SQLException {\r\n    ApptRequestBean req = arDAO.getApptRequest(reqID);\r\n    if ((req.isPending()) && (!(req.isAccepted()))) {\r\n        req.setPending(false);\r\n        req.setAccepted(false);\r\n        arDAO.updateApptRequest(req);\r\n        try {\r\n            MessageBean msg = constructMessage(req.getRequestedAppt(), req.isAccepted());\r\n            msgAction.sendMessage(msg);\r\n        } catch (Exception e) {\r\n        }\r\n        return \"The appointment request you selected has been rejected.\";\r\n    } else {\r\n        return \"The appointment request you selected has already been acted upon.\";\r\n    }\r\n}"},
 {"id":995, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.-init-()", "classid":163, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest", "shortclassname":"ViewApptRequestsActionTest", "method":"ViewApptRequestsActionTest() {\r\n}"},
 {"id":996, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.setUp()", "classid":163, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest", "shortclassname":"ViewApptRequestsActionTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.apptRequestConflicts();\r\n    action = new ViewApptRequestsAction(9000000000L, TestDAOFactory.getTestInstance());\r\n    mDAO = TestDAOFactory.getTestInstance().getMessageDAO();\r\n}"},
 {"id":997, "methodname":"testAcceptApptRequest()", "methodnamerefined":"testAcceptApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.testAcceptApptRequest", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.testAcceptApptRequest()", "classid":163, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest", "shortclassname":"ViewApptRequestsActionTest", "method":"public void testAcceptApptRequest() throws Exception {\r\n    List<ApptRequestBean> list = action.getApptRequests();\r\n    assertEquals(1, list.size());\r\n    assertEquals(2L, list.get(0).getRequestedAppt().getPatient());\r\n    String res = action.acceptApptRequest(list.get(0).getRequestedAppt().getApptID());\r\n    assertEquals(\"The appointment request you selected has been accepted and scheduled.\", res);\r\n    list = action.getApptRequests();\r\n    assertEquals(1, list.size());\r\n    assertEquals(2L, list.get(0).getRequestedAppt().getPatient());\r\n    assertTrue(list.get(0).isAccepted());\r\n    List<MessageBean> msgs = mDAO.getMessagesFor(list.get(0).getRequestedAppt().getPatient());\r\n    assertEquals(list.get(0).getRequestedAppt().getHcp(), msgs.get(0).getFrom());\r\n    assertTrue(msgs.get(0).getBody().contains(\"has been accepted.\"));\r\n}"},
 {"id":998, "methodname":"testGetApptRequests()", "methodnamerefined":"testGetApptRequests", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.testGetApptRequests", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.testGetApptRequests()", "classid":163, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest", "shortclassname":"ViewApptRequestsActionTest", "method":"public void testGetApptRequests() throws Exception {\r\n    List<ApptRequestBean> list = action.getApptRequests();\r\n    assertEquals(1, list.size());\r\n    assertEquals(2L, list.get(0).getRequestedAppt().getPatient());\r\n}"},
 {"id":999, "methodname":"testRejectApptRequest()", "methodnamerefined":"testRejectApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.testRejectApptRequest", "fullmethod":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest.testRejectApptRequest()", "classid":163, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsActionTest", "shortclassname":"ViewApptRequestsActionTest", "method":"public void testRejectApptRequest() throws Exception {\r\n    List<ApptRequestBean> list = action.getApptRequests();\r\n    assertEquals(1, list.size());\r\n    assertEquals(2L, list.get(0).getRequestedAppt().getPatient());\r\n    String res = action.rejectApptRequest(list.get(0).getRequestedAppt().getApptID());\r\n    assertEquals(\"The appointment request you selected has been rejected.\", res);\r\n    list = action.getApptRequests();\r\n    assertEquals(1, list.size());\r\n    assertEquals(2L, list.get(0).getRequestedAppt().getPatient());\r\n    assertFalse(list.get(0).isAccepted());\r\n    List<MessageBean> msgs = mDAO.getMessagesFor(list.get(0).getRequestedAppt().getPatient());\r\n    assertEquals(list.get(0).getRequestedAppt().getHcp(), msgs.get(0).getFrom());\r\n    assertTrue(msgs.get(0).getBody().contains(\"has been rejected.\"));\r\n}"},
 {"id":1000, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":164, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction", "shortclassname":"ViewDiagnosisStatisticsAction", "method":"/**\r\n * Constructor for the action. Initializes DAO fields\r\n *\r\n * @param factory\r\n * \t\tThe sessions factory for DAOs\r\n */\r\npublic ViewDiagnosisStatisticsAction(DAOFactory factory) {\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.diagnosesDAO = factory.getDiagnosesDAO();\r\n}"},
 {"id":1001, "methodname":"calcThreshold(double)", "methodnamerefined":"calcThreshold", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.calcThreshold", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.calcThreshold(double)", "classid":164, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction", "shortclassname":"ViewDiagnosisStatisticsAction", "method":"/**\r\n * Calculates the threshold of an influenza epidemic\r\n *\r\n * @param weekNumber\r\n * \t\tthe week of the year\r\n * @return the epidemic threshold for flu cases\r\n */\r\nprivate double calcThreshold(double weekNumber) {\r\n    return ((5.34 + (0.271 * weekNumber)) + (3.45 * (Math.sin((((2 * (Math.PI)) * weekNumber) / 52.0))))) + (8.41 * (Math.cos((((2 * (Math.PI)) * weekNumber) / 52.0))));\r\n}"},
 {"id":1002, "methodname":"getDiagnosisCodes()", "methodnamerefined":"getDiagnosisCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getDiagnosisCodes", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getDiagnosisCodes()", "classid":164, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction", "shortclassname":"ViewDiagnosisStatisticsAction", "method":"/**\r\n * Gets all the diagnosis codes in iTrust and returns them in a list of beans.\r\n *\r\n * @return List of DiagnosisBeans correlating to all ICDCodes\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<DiagnosisBean> getDiagnosisCodes() throws DBException, iTrustException {\r\n    return icdDAO.getAllICDCodes();\r\n}"},
 {"id":1003, "methodname":"getDiagnosisStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"getDiagnosisStatistics", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getDiagnosisStatistics", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getDiagnosisStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "classid":164, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction", "shortclassname":"ViewDiagnosisStatisticsAction", "method":"/**\r\n * Gets the counts of local and regional diagnoses for the specified input\r\n *\r\n * @param lowerDate\r\n * \t\tThe beginning date for the time range\r\n * @param upperDate\r\n * \t\tThe ending date for the time range\r\n * @param icdCode\r\n * \t\tThe diagnosis code to examine\r\n * @param zip\r\n * \t\tThe zip code to examine\r\n * @return A bean containing the local and regional counts\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisStatistics(String lowerDate, String upperDate, String icdCode, String zip) throws DBException, FormValidationException, iTrustException {\r\n    DiagnosisStatisticsBean dsBean;\r\n    try {\r\n        if (((lowerDate == null) || (upperDate == null)) || (icdCode == null))\r\n            return null;\r\n\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n            throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n        boolean validCode = false;\r\n        for (DiagnosisBean diag : getDiagnosisCodes()) {\r\n            if (diag.getICDCode().equals(icdCode))\r\n                validCode = true;\r\n\r\n        }\r\n        if (validCode == false) {\r\n            throw new FormValidationException(\"ICDCode must be valid diagnosis!\");\r\n        }\r\n        dsBean = diagnosesDAO.getDiagnosisCounts(icdCode, zip, lower, upper);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return dsBean;\r\n}"},
 {"id":1004, "methodname":"getEpidemicStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"getEpidemicStatistics", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getEpidemicStatistics", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.getEpidemicStatistics(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "classid":164, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction", "shortclassname":"ViewDiagnosisStatisticsAction", "method":"/**\r\n * Gets the local and regional counts for the specified week and calculates the prior average.\r\n *\r\n * @param startDate\r\n * \t\ta date in the week to analyze\r\n * @param icdCode\r\n * \t\tthe diagnosis to analyze\r\n * @param zip\r\n * \t\tthe area to analyze\r\n * @param threshold\r\n * \t\t\r\n * @return statistics for the week and previous averages\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getEpidemicStatistics(String startDate, String icdCode, String zip, String threshold) throws DBException, FormValidationException {\r\n    if ((startDate == null) || (icdCode == null))\r\n        return null;\r\n\r\n    if (!((icdCode.equals(\"84.50\")) || (icdCode.equals(\"487.00\")))) {\r\n        throw new FormValidationException(\"Exception\");\r\n    }\r\n    if (ViewDiagnosisStatisticsAction.ICD_MALARIA.equals(icdCode)) {\r\n        try {\r\n            Integer.parseInt(threshold);\r\n        } catch (NumberFormatException e) {\r\n            throw new FormValidationException(\"Threshold must be an integer.\");\r\n        }\r\n    }\r\n    Date lower;// lower, which is parsed to startDate\r\n\r\n    try {\r\n        lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    if (!(zip.matches(\"([0-9]{5})|([0-9]{5}-[0-9]{4})\")))\r\n        throw new FormValidationException(\"Zip Code must be 5 digits!\");\r\n\r\n    DiagnosisStatisticsBean dbWeek = diagnosesDAO.getCountForWeekOf(icdCode, zip, lower);\r\n    DiagnosisStatisticsBean dbAvg = new DiagnosisStatisticsBean(zip, 0, 0, lower, lower);\r\n    Calendar cal = Calendar.getInstance();\r\n    Date start = diagnosesDAO.findEarliestIncident(icdCode);// start, which is set to earliest incident\r\n\r\n    Calendar startCal = Calendar.getInstance();\r\n    startCal.setTime(start);\r\n    ArrayList<DiagnosisStatisticsBean> ret = new ArrayList<DiagnosisStatisticsBean>();\r\n    if (start == null) {\r\n        ret.add(dbWeek);\r\n        ret.add(dbAvg);\r\n        return ret;\r\n    }\r\n    cal.setTime(lower);// cal, which is set to lower\r\n\r\n    Calendar lowerCal = Calendar.getInstance();\r\n    lowerCal.setTime(lower);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    cal.set(Calendar.YEAR, startCal.get(Calendar.YEAR));// cals year then gets set to starts year\r\n\r\n    ArrayList<DiagnosisStatisticsBean> dbList = new ArrayList<DiagnosisStatisticsBean>();\r\n    while ((cal.getTime().before(lower)) && ((cal.get(Calendar.YEAR)) != (lowerCal.get(Calendar.YEAR)))) {\r\n        dbList.add(diagnosesDAO.getCountForWeekOf(icdCode, zip, cal.getTime()));\r\n        cal.add(Calendar.YEAR, 1);\r\n        cal.set(Calendar.WEEK_OF_YEAR, weekOfYr);\r\n        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    } \r\n    long avg = 0;\r\n    long avgRegion = 0;\r\n    if ((dbList.size()) > 0) {\r\n        for (DiagnosisStatisticsBean d : dbList) {\r\n            avg += d.getZipStats();\r\n            avgRegion += d.getRegionStats();\r\n        }\r\n        avg /= dbList.size();\r\n        avgRegion /= dbList.size();\r\n    }\r\n    dbAvg.setRegionStats(avgRegion);\r\n    dbAvg.setZipStats(avg);\r\n    ret.add(dbWeek);\r\n    ret.add(dbAvg);\r\n    return ret;\r\n}"},
 {"id":1005, "methodname":"isFluEpidemic(java.lang.String,java.lang.String)", "methodnamerefined":"isFluEpidemic", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.isFluEpidemic", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.isFluEpidemic(java.lang.String,java.lang.String)", "classid":164, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction", "shortclassname":"ViewDiagnosisStatisticsAction", "method":"/**\r\n * Determines if an Influenza Epidemic is happening\r\n *\r\n * @param curDateStr\r\n * \t\ta date in the currently evaluated week\r\n * @param zip\r\n * \t\tthe zip code to analyze\r\n * @return whether or not there is an epidemic\r\n * @throws ParseException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean isFluEpidemic(String curDateStr, String zip) throws DBException, ParseException {\r\n    new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"01/04/1998\");\r\n    Date curDate = new SimpleDateFormat(\"MM/dd/yyyy\").parse(curDateStr);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(curDate);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    double threshold = calcThreshold(weekOfYr);\r\n    double thresholdL = calcThreshold((weekOfYr - 1));\r\n    double thresholdN = calcThreshold((weekOfYr + 1));\r\n    DiagnosisStatisticsBean dbNow = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());\r\n    cal.add(Calendar.HOUR, ((-12) * 7));\r\n    DiagnosisStatisticsBean dbLast = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());\r\n    cal.add(Calendar.HOUR, ((2 * 12) * 7));\r\n    DiagnosisStatisticsBean dbNext = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_INFLUENZA, zip, cal.getTime());\r\n    double weekNow = ((double) (dbNow.getRegionStats()));\r\n    double weekL = ((double) (dbLast.getRegionStats()));\r\n    double weekN = ((double) (dbNext.getRegionStats()));\r\n    if ((weekNow > threshold) && ((weekL > thresholdL) || (weekN > thresholdN))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"},
 {"id":1006, "methodname":"isMalariaEpidemic(java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"isMalariaEpidemic", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.isMalariaEpidemic", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.isMalariaEpidemic(java.lang.String,java.lang.String,java.lang.String)", "classid":164, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction", "shortclassname":"ViewDiagnosisStatisticsAction", "method":"/**\r\n * Determines whether a Malaria epidemic is happening\r\n *\r\n * @param weekDate\r\n * \t\ta date in the currently evaluated week\r\n * @param zip\r\n * \t\tthe zip code to analyze\r\n * @param thresholdStr\r\n * \t\tthe threshold for an epidemic\r\n * @return whether or not there is an epidemic\r\n * @throws DBException\r\n * \t\t\r\n * @throws ParseException\r\n * \t\t\r\n */\r\npublic boolean isMalariaEpidemic(String weekDate, String zip, String thresholdStr) throws DBException, ParseException {\r\n    Date wkDate = new SimpleDateFormat(\"MM/dd/yyyy\").parse(weekDate);\r\n    ArrayList<DiagnosisStatisticsBean> dbList = new ArrayList<DiagnosisStatisticsBean>();\r\n    ArrayList<DiagnosisStatisticsBean> dbListL = new ArrayList<DiagnosisStatisticsBean>();\r\n    ArrayList<DiagnosisStatisticsBean> dbListN = new ArrayList<DiagnosisStatisticsBean>();\r\n    int threshold = Integer.parseInt(thresholdStr);\r\n    DiagnosisStatisticsBean current = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, wkDate);\r\n    long weekTotal = current.getRegionStats();\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(wkDate);\r\n    cal.add(Calendar.HOUR, ((-7) * 24));\r\n    DiagnosisStatisticsBean last = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime());\r\n    long weekTotalL = last.getRegionStats();\r\n    cal.add(Calendar.HOUR, ((2 * 7) * 24));\r\n    DiagnosisStatisticsBean next = diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime());\r\n    long weekTotalN = next.getRegionStats();\r\n    cal.setTime(wkDate);\r\n    int weekOfYr = cal.get(Calendar.WEEK_OF_YEAR);\r\n    // Find earliest Malaria Case. Set calendars year to that year\r\n    Date startData = diagnosesDAO.findEarliestIncident(ViewDiagnosisStatisticsAction.ICD_MALARIA);\r\n    if (startData == null) {\r\n        if ((current.getRegionStats()) > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    Calendar startDateCal = Calendar.getInstance();\r\n    startDateCal.setTime(startData);\r\n    Calendar wkDateCal = Calendar.getInstance();\r\n    wkDateCal.setTime(wkDate);\r\n    cal.set(Calendar.YEAR, startDateCal.get(Calendar.YEAR));\r\n    while ((cal.getTime().before(wkDate)) && ((cal.get(Calendar.YEAR)) != (wkDateCal.get(Calendar.YEAR)))) {\r\n        dbList.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.HOUR, ((-7) * 24));\r\n        dbListL.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.HOUR, ((2 * 7) * 24));\r\n        dbListN.add(diagnosesDAO.getCountForWeekOf(ViewDiagnosisStatisticsAction.ICD_MALARIA, zip, cal.getTime()));\r\n        cal.add(Calendar.YEAR, 1);\r\n        cal.set(Calendar.WEEK_OF_YEAR, weekOfYr);\r\n        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    } \r\n    long total = 0;\r\n    for (DiagnosisStatisticsBean d : dbList) {\r\n        total += d.getRegionStats();\r\n    }\r\n    for (DiagnosisStatisticsBean d : dbListL) {\r\n        d.getRegionStats();\r\n    }\r\n    for (DiagnosisStatisticsBean d : dbListN) {\r\n        d.getRegionStats();\r\n    }\r\n    long avg = 0;\r\n    long avgL = 0;\r\n    long avgN = 0;\r\n    if ((dbList.size()) != 0) {\r\n        avg = total / (dbList.size());\r\n        avgL = total / (dbListL.size());\r\n        avgN = total / (dbListN.size());\r\n    }\r\n    if (((weekTotal != 0) && (((weekTotal * 100) / threshold) > avg)) && (((weekTotalL != 0) && (((weekTotalL * 100) / threshold) > avgL)) || ((weekTotalN != 0) && (((weekTotalN * 100) / threshold) > avgN)))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"},
 {"id":1007, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.-init-()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"ViewDiagnosisStatisticsActionTest() {\r\n}"},
 {"id":1008, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.setUp()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patient_hcp_vists();\r\n    gen.hcp_diagnosis_data();\r\n    action = new ViewDiagnosisStatisticsAction(TestDAOFactory.getTestInstance());\r\n}"},
 {"id":1009, "methodname":"testGetDiagnosisCodes()", "methodnamerefined":"testGetDiagnosisCodes", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisCodes", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisCodes()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testGetDiagnosisCodes() throws Exception {\r\n    List<DiagnosisBean> db = action.getDiagnosisCodes();\r\n    assertEquals(15, db.size());\r\n}"},
 {"id":1010, "methodname":"testGetDiagnosisStatisticsInvalidDate()", "methodnamerefined":"testGetDiagnosisStatisticsInvalidDate", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsInvalidDate", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsInvalidDate()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testGetDiagnosisStatisticsInvalidDate() throws Exception {\r\n    try {\r\n        action.getDiagnosisStatistics(\"06-28/2011\", \"09/28/2011\", \"487.00\", \"27606\");\r\n        fail(\"Should have failed but didnt\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Enter dates in MM/dd/yyyy\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":1011, "methodname":"testGetDiagnosisStatisticsInvalidICDCode()", "methodnamerefined":"testGetDiagnosisStatisticsInvalidICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsInvalidICDCode", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsInvalidICDCode()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testGetDiagnosisStatisticsInvalidICDCode() throws Exception {\r\n    try {\r\n        action.getDiagnosisStatistics(\"06/28/2011\", \"09/28/2011\", \"11114.00\", \"27606\");\r\n        fail(\"Should have failed but didnt\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"ICDCode must be valid diagnosis!\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":1012, "methodname":"testGetDiagnosisStatisticsInvalidZip()", "methodnamerefined":"testGetDiagnosisStatisticsInvalidZip", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsInvalidZip", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsInvalidZip()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testGetDiagnosisStatisticsInvalidZip() throws Exception {\r\n    try {\r\n        action.getDiagnosisStatistics(\"06/28/2011\", \"09/28/2011\", \"487.00\", \"2766\");\r\n        fail(\"Should have failed but didnt\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Zip Code must be 5 digits!\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":1013, "methodname":"testGetDiagnosisStatisticsReversedDates()", "methodnamerefined":"testGetDiagnosisStatisticsReversedDates", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsReversedDates", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsReversedDates()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testGetDiagnosisStatisticsReversedDates() throws Exception {\r\n    try {\r\n        action.getDiagnosisStatistics(\"09/28/2011\", \"06/28/2011\", \"487.00\", \"27606\");\r\n        fail(\"Should have failed but didnt\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Start date must be before end date!\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":1014, "methodname":"testGetDiagnosisStatisticsValid()", "methodnamerefined":"testGetDiagnosisStatisticsValid", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsValid", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsValid()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testGetDiagnosisStatisticsValid() throws Exception {\r\n    DiagnosisStatisticsBean dsBean = action.getDiagnosisStatistics(\"06/28/2011\", \"09/28/2011\", \"487.00\", \"27606-1234\");\r\n    assertEquals(2, dsBean.getZipStats());\r\n    assertEquals(5, dsBean.getRegionStats());\r\n}"},
 {"id":1015, "methodname":"testGetDiagnosisStatisticsValidNull()", "methodnamerefined":"testGetDiagnosisStatisticsValidNull", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsValidNull", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetDiagnosisStatisticsValidNull()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testGetDiagnosisStatisticsValidNull() throws Exception {\r\n    DiagnosisStatisticsBean dsBean = action.getDiagnosisStatistics(null, null, \"487.00\", \"27606\");\r\n    assertEquals(null, dsBean);\r\n}"},
 {"id":1016, "methodname":"testGetEpidemicStatistics()", "methodnamerefined":"testGetEpidemicStatistics", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetEpidemicStatistics", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetEpidemicStatistics()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testGetEpidemicStatistics() throws Exception {\r\n    gen.malaria_epidemic();\r\n    ArrayList<DiagnosisStatisticsBean> dsList = action.getEpidemicStatistics((\"11/02/\" + (thisYear)), \"84.50\", \"27606-1234\", \"1\");\r\n    assertEquals(5, dsList.get(0).getRegionStats());\r\n    assertEquals(4, dsList.get(0).getZipStats());\r\n}"},
 {"id":1017, "methodname":"testGetEpidemicStatisticsInvalidThreshold()", "methodnamerefined":"testGetEpidemicStatisticsInvalidThreshold", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetEpidemicStatisticsInvalidThreshold", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testGetEpidemicStatisticsInvalidThreshold()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testGetEpidemicStatisticsInvalidThreshold() {\r\n    try {\r\n        ArrayList<DiagnosisStatisticsBean> dsList = action.getEpidemicStatistics((\"11/02/\" + (thisYear)), \"84.50\", \"27606\", \"\");\r\n        fail(\"FormValidationException should have been thrown.\");\r\n    } catch (FormValidationException e) {\r\n        // This should be thrown\r\n    } catch (DBException e) {\r\n        fail(\"DB Exception thrown\");\r\n    }\r\n}"},
 {"id":1018, "methodname":"testIsFluEpidemic()", "methodnamerefined":"testIsFluEpidemic", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testIsFluEpidemic", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testIsFluEpidemic()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testIsFluEpidemic() throws Exception {\r\n    gen.influenza_epidemic();\r\n    assertTrue(action.isFluEpidemic((\"11/02/\" + (thisYear)), \"27606\"));\r\n    assertFalse(action.isFluEpidemic((\"11/16/\" + (thisYear)), \"27606\"));\r\n}"},
 {"id":1019, "methodname":"testIsMalariaEpidemic()", "methodnamerefined":"testIsMalariaEpidemic", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testIsMalariaEpidemic", "fullmethod":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest.testIsMalariaEpidemic()", "classid":165, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsActionTest", "shortclassname":"ViewDiagnosisStatisticsActionTest", "method":"public void testIsMalariaEpidemic() throws Exception {\r\n    gen.malaria_epidemic();\r\n    assertTrue(action.isMalariaEpidemic((\"11/02/\" + (thisYear)), \"27606\", \"110\"));\r\n    assertFalse(action.isMalariaEpidemic((\"11/16/\" + (thisYear)), \"27606\", \"110\"));\r\n}"},
 {"id":1020, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.-init-()", "classid":166, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest", "shortclassname":"ViewExpiredPrescriptionRecordsActionTest", "method":"ViewExpiredPrescriptionRecordsActionTest() {\r\n}"},
 {"id":1021, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.setUp()", "classid":166, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest", "shortclassname":"ViewExpiredPrescriptionRecordsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":1022, "methodname":"testGetPatient()", "methodnamerefined":"testGetPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.testGetPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.testGetPatient()", "classid":166, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest", "shortclassname":"ViewExpiredPrescriptionRecordsActionTest", "method":"public void testGetPatient() throws Exception {\r\n    action = new ViewExpiredPrescriptionsAction(factory, 9000000000L);\r\n    PatientBean patient = action.getPatient(1L);\r\n    assertEquals(\"Random\", patient.getFirstName());\r\n    assertEquals(\"Person\", patient.getLastName());\r\n}"},
 {"id":1023, "methodname":"testGetPrescribingDoctor()", "methodnamerefined":"testGetPrescribingDoctor", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.testGetPrescribingDoctor", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.testGetPrescribingDoctor()", "classid":166, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest", "shortclassname":"ViewExpiredPrescriptionRecordsActionTest", "method":"public void testGetPrescribingDoctor() throws Exception {\r\n    action = new ViewExpiredPrescriptionsAction(factory, 2L);\r\n    PrescriptionBean prescription = new PrescriptionBean();\r\n    prescription.setVisitID(955L);\r\n    PersonnelBean personnel = action.getPrescribingDoctor(prescription);\r\n    assertEquals(9000000000L, personnel.getMID());\r\n}"},
 {"id":1024, "methodname":"testGetPrescriptionsForPatient()", "methodnamerefined":"testGetPrescriptionsForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.testGetPrescriptionsForPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.testGetPrescriptionsForPatient()", "classid":166, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest", "shortclassname":"ViewExpiredPrescriptionRecordsActionTest", "method":"public void testGetPrescriptionsForPatient() throws Exception {\r\n    action = new ViewExpiredPrescriptionsAction(factory, 1L);\r\n    List<PrescriptionBean> prescriptions = action.getPrescriptionsForPatient(1L);\r\n    assertEquals(0, prescriptions.size());\r\n    action = new ViewExpiredPrescriptionsAction(factory, 2L);\r\n    prescriptions = action.getPrescriptionsForPatient(2L);\r\n    assertEquals(2, prescriptions.size());\r\n    assertEquals(\"009042407\", prescriptions.get(0).getMedication().getNDCode());\r\n    assertEquals(\"009042407\", prescriptions.get(1).getMedication().getNDCode());\r\n    prescriptions = action.getPrescriptionsForPatient(1L);\r\n    assertEquals(0, prescriptions.size());\r\n    action = new ViewExpiredPrescriptionsAction(factory, 9000000000L);\r\n    prescriptions = action.getPrescriptionsForPatient(2L);\r\n    assertEquals(3, prescriptions.size());\r\n    assertEquals(\"647641512\", prescriptions.get(2).getMedication().getNDCode());\r\n    assertEquals(\"009042407\", prescriptions.get(0).getMedication().getNDCode());\r\n    assertEquals(\"009042407\", prescriptions.get(1).getMedication().getNDCode());\r\n}"},
 {"id":1025, "methodname":"testGetRepresentees()", "methodnamerefined":"testGetRepresentees", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.testGetRepresentees", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest.testGetRepresentees()", "classid":166, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionRecordsActionTest", "shortclassname":"ViewExpiredPrescriptionRecordsActionTest", "method":"public void testGetRepresentees() throws Exception {\r\n    action = new ViewExpiredPrescriptionsAction(factory, 2L);\r\n    List<PatientBean> representees = action.getRepresentees();\r\n    assertEquals(6, representees.size());\r\n    assertEquals(1, representees.get(0).getMID());\r\n    assertEquals(3, representees.get(1).getMID());\r\n}"},
 {"id":1026, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":167, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction", "shortclassname":"ViewExpiredPrescriptionsAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the expired prescriptions.\r\n */\r\npublic ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":1027, "methodname":"getPatient(long)", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPatient(long)", "classid":167, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction", "shortclassname":"ViewExpiredPrescriptionsAction", "method":"/**\r\n * Gets a PatientBean from an MID\r\n *\r\n * @param patientID\r\n * \t\tMID of the patient\r\n * @return PatientBean for the MID given\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PatientBean getPatient(long patientID) throws iTrustException {\r\n    return patientDAO.getPatient(patientID);\r\n}"},
 {"id":1028, "methodname":"getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"getPrescribingDoctor", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescribingDoctor", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":167, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction", "shortclassname":"ViewExpiredPrescriptionsAction", "method":"/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * \t\titem in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}"},
 {"id":1029, "methodname":"getPrescriptionsForPatient(long)", "methodnamerefined":"getPrescriptionsForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescriptionsForPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "classid":167, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction", "shortclassname":"ViewExpiredPrescriptionsAction", "method":"/**\r\n * Returns all the prescriptions for a given patient\r\n *\r\n * @param patientID\r\n * \t\tpatient in question\r\n * @return list of all the prescriptions for that patient\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getPrescriptionsForPatient(long patientID) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(patientID);\r\n    if ((loggedInMID) == patientID) {\r\n        return patientDAO.getExpiredPrescriptions(patientID);\r\n    }\r\n    List<String> toList = new ArrayList<String>();\r\n    toList.add(patient.getEmail());\r\n    List<PatientBean> representatives = patientDAO.getRepresenting(patientID);\r\n    for (PatientBean representative : representatives) {\r\n        if ((loggedInMID) == (representative.getMID())) {\r\n            return patientDAO.getExpiredPrescriptions(patientID);\r\n        }\r\n        toList.add(representative.getEmail());\r\n    }\r\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);\r\n    for (PersonnelBean dlhcp : dlhcps) {\r\n        if ((loggedInMID) == (dlhcp.getMID())) {\r\n            return patientDAO.getExpiredPrescriptions(patientID);\r\n        }\r\n        List<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());\r\n        for (PersonnelBean uap : uaps) {\r\n            if ((loggedInMID) == (uap.getMID())) {\r\n                return patientDAO.getPrescriptions(patientID);\r\n            }\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    email.setToList(toList);\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    email.setSubject(\"Undesignated Personnel Have Accessed Your Prescription Records\");\r\n    email.setBody(\"An undesignated HCP or UAP has accessed your prescription records. For more information, please log in to iTrust.\");\r\n    emailer.sendEmail(email);\r\n    return patientDAO.getPrescriptions(patientID);\r\n}"},
 {"id":1030, "methodname":"getRepresentees()", "methodnamerefined":"getRepresentees", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getRepresentees", "fullmethod":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getRepresentees()", "classid":167, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction", "shortclassname":"ViewExpiredPrescriptionsAction", "method":"/**\r\n * Gets the logged in persons representees\r\n *\r\n * @return list of PatientBeans holding the representees\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getRepresentees() throws iTrustException {\r\n    return patientDAO.getRepresented(loggedInMID);\r\n}"},
 {"id":1031, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewHelperAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewHelperAction.-init-()", "classid":168, "classname":"edu.ncsu.csc.itrust.action.ViewHelperAction", "shortclassname":"ViewHelperAction", "method":"ViewHelperAction() {\r\n}"},
 {"id":1032, "methodname":"calculateColor(java.lang.String,java.lang.String,double)", "methodnamerefined":"calculateColor", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewHelperAction.calculateColor", "fullmethod":"edu.ncsu.csc.itrust.action.ViewHelperAction.calculateColor(java.lang.String,java.lang.String,double)", "classid":168, "classname":"edu.ncsu.csc.itrust.action.ViewHelperAction", "shortclassname":"ViewHelperAction", "method":"public static String calculateColor(String primaryColor, String secondaryColor, double ratio) {\r\n    double primeRed = Integer.parseInt(primaryColor.substring(0, 2), 16);\r\n    double primeGreen = Integer.parseInt(primaryColor.substring(2, 4), 16);\r\n    double primeBlue = Integer.parseInt(primaryColor.substring(4, 6), 16);\r\n    double secondRed = Integer.parseInt(secondaryColor.substring(0, 2), 16);\r\n    double secondGreen = Integer.parseInt(secondaryColor.substring(2, 4), 16);\r\n    double secondBlue = Integer.parseInt(secondaryColor.substring(4, 6), 16);\r\n    int newRed = ((int) ((secondRed * ratio) + (primeRed * (1 - ratio))));\r\n    int newGreen = ((int) ((secondGreen * ratio) + (primeGreen * (1 - ratio))));\r\n    int newBlue = ((int) ((secondBlue * ratio) + (primeBlue * (1 - ratio))));\r\n    return String.format(\"%06X\", (((newRed << 16) + (newGreen << 8)) + newBlue));\r\n}"},
 {"id":1033, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewHelperActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewHelperActionTest.-init-()", "classid":169, "classname":"edu.ncsu.csc.itrust.action.ViewHelperActionTest", "shortclassname":"ViewHelperActionTest", "method":"ViewHelperActionTest() {\r\n}"},
 {"id":1034, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewHelperActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewHelperActionTest.setUp()", "classid":169, "classname":"edu.ncsu.csc.itrust.action.ViewHelperActionTest", "shortclassname":"ViewHelperActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":1035, "methodname":"testUpdateUserPrefs()", "methodnamerefined":"testUpdateUserPrefs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewHelperActionTest.testUpdateUserPrefs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewHelperActionTest.testUpdateUserPrefs()", "classid":169, "classname":"edu.ncsu.csc.itrust.action.ViewHelperActionTest", "shortclassname":"ViewHelperActionTest", "method":"public void testUpdateUserPrefs() throws FormValidationException, iTrustException, SQLException {\r\n    assertTrue(ViewHelperAction.calculateColor(\"000000\", \"FFFFFF\", 0).equals(\"000000\"));\r\n    assertTrue(ViewHelperAction.calculateColor(\"000000\", \"FFFFFF\", 1.0).equals(\"FFFFFF\"));\r\n    assertTrue(ViewHelperAction.calculateColor(\"000000\", \"FFFFFF\", 0.5).equals(\"7F7F7F\"));\r\n}"},
 {"id":1036, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":170, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction", "shortclassname":"ViewMyAccessLogAction", "method":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving the logs.\r\n */\r\npublic ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}"},
 {"id":1037, "methodname":"getAccesses(java.lang.String,java.lang.String,java.lang.String,boolean)", "methodnamerefined":"getAccesses", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getAccesses", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getAccesses(java.lang.String,java.lang.String,java.lang.String,boolean)", "classid":170, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction", "shortclassname":"ViewMyAccessLogAction", "method":"/**\r\n * Returns a list of TransactionBeans between the two dates passed as params\r\n *\r\n * @param lowerDate\r\n * \t\tthe first date\r\n * @param upperDate\r\n * \t\tthe second date\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<TransactionBean> getAccesses(String lowerDate, String upperDate, String logMID, boolean getByRole) throws DBException, FormValidationException, iTrustException {\r\n    List<TransactionBean> accesses;// stores the log entries\r\n\r\n    List<PersonnelBean> dlhcps;\r\n    // get the medical dependents for a signed in user. If the selected user is not the\r\n    // signed in user or one of the dependents, then the user doesnt have access to the log\r\n    List<PatientBean> patientRelatives = getRepresented(loggedInMID);\r\n    long mid = loggedInMID;\r\n    try {\r\n        mid = Long.parseLong(logMID);\r\n    } catch (Exception e) {\r\n    }\r\n    dlhcps = patientDAO.getDeclaredHCPs(mid);\r\n    boolean midInScope = false;\r\n    for (PatientBean pb : patientRelatives) {\r\n        if ((pb.getMID()) == mid)\r\n            midInScope = true;\r\n\r\n    }\r\n    if ((mid != (loggedInMID)) && (!midInScope)) {\r\n        // the selected user in the form is out of scope and cant be shown to the user\r\n        throw new FormValidationException(\"Log to View.\");\r\n    }\r\n    // user has either 0 or 1 DLHCPs. Get one if exists so it can be filtered from results\r\n    long dlhcpID = -1;\r\n    if (!(dlhcps.isEmpty()))\r\n        dlhcpID = dlhcps.get(0).getMID();\r\n\r\n    if ((lowerDate == null) || (upperDate == null))\r\n        return transDAO.getAllRecordAccesses(mid, dlhcpID, getByRole);\r\n\r\n    try {\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n        accesses = transDAO.getRecordAccesses(mid, dlhcpID, lower, upper, getByRole);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return accesses;\r\n}"},
 {"id":1038, "methodname":"getDefaultEnd(java.util.List)", "methodnamerefined":"getDefaultEnd", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getDefaultEnd", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getDefaultEnd(java.util.List)", "classid":170, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction", "shortclassname":"ViewMyAccessLogAction", "method":"/**\r\n * Returns the date of the last Transaction in the list passed as a param if the list is not empty\r\n * otherwise, returns todays date\r\n *\r\n * @param accesses\r\n * \t\tA java.util.List of TransactionBeans storing the access.\r\n * @return A String representation of the date of the last transaction.\r\n */\r\npublic String getDefaultEnd(List<TransactionBean> accesses) {\r\n    String endDate = \"\";\r\n    if ((accesses.size()) > 0) {\r\n        endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(accesses.get(0).getTimeLogged().getTime()));\r\n    } else {\r\n        endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    }\r\n    return endDate;\r\n}"},
 {"id":1039, "methodname":"getDefaultStart(java.util.List)", "methodnamerefined":"getDefaultStart", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getDefaultStart", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getDefaultStart(java.util.List)", "classid":170, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction", "shortclassname":"ViewMyAccessLogAction", "method":"/**\r\n * Returns the date of the first Transaction in the list passed as a param if the list is not empty\r\n * otherwise, returns todays date\r\n *\r\n * @param accesses\r\n * \t\tA java.util.List of TransactionBeans for the accesses.\r\n * @return A String representing the date of the first transaction.\r\n */\r\npublic String getDefaultStart(List<TransactionBean> accesses) {\r\n    String startDate = \"\";\r\n    if ((accesses.size()) > 0) {\r\n        startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(accesses.get(((accesses.size()) - 1)).getTimeLogged().getTime()));\r\n    } else {\r\n        startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    }\r\n    return startDate;\r\n}"},
 {"id":1040, "methodname":"getRepresented(long)", "methodnamerefined":"getRepresented", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getRepresented", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.getRepresented(long)", "classid":170, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction", "shortclassname":"ViewMyAccessLogAction", "method":"/**\r\n * Return a list of patients that pid represents\r\n *\r\n * @param pid\r\n * \t\tThe id of the personnel we are looking up representees for.\r\n * @return a list of PatientBeans\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getRepresented(long pid) throws iTrustException {\r\n    return patientDAO.getRepresented(pid);\r\n}"},
 {"id":1041, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.-init-()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"ViewMyAccessLogActionTest() {\r\n}"},
 {"id":1042, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.setUp()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.hcp3();\r\n    gen.hcp8();\r\n    gen.er4();\r\n    gen.uap1();\r\n    gen.admin1();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient23();\r\n    gen.patient24();\r\n    action = new ViewMyAccessLogAction(TestDAOFactory.getTestInstance(), 2L);\r\n}"},
 {"id":1043, "methodname":"testDLHCPAccessesHidden()", "methodnamerefined":"testDLHCPAccessesHidden", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testDLHCPAccessesHidden", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testDLHCPAccessesHidden()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"/**\r\n * Verifies that none of the transactions returned in the access log are the patients DLHCP per use case 8\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testDLHCPAccessesHidden() throws Exception {\r\n    gen.transactionLog3();\r\n    action = new ViewMyAccessLogAction(TestDAOFactory.getTestInstance(), 1L);\r\n    List<TransactionBean> accesses = action.getAccesses(null, null, null, true);\r\n    for (TransactionBean tb : accesses)\r\n        assertFalse(tb.getRole().equals(\"DLHCP\"));\r\n\r\n}"},
 {"id":1044, "methodname":"testDefaultNoList()", "methodnamerefined":"testDefaultNoList", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testDefaultNoList", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testDefaultNoList()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"public void testDefaultNoList() throws Exception {\r\n    String today = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    assertEquals(today, action.getDefaultStart(new ArrayList<edu.ncsu.csc.itrust.beans.TransactionBean>()));\r\n    assertEquals(today, action.getDefaultEnd(new ArrayList<edu.ncsu.csc.itrust.beans.TransactionBean>()));\r\n}"},
 {"id":1045, "methodname":"testDefaultWithList()", "methodnamerefined":"testDefaultWithList", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testDefaultWithList", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testDefaultWithList()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"public void testDefaultWithList() throws Exception {\r\n    String today = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    ArrayList<TransactionBean> list = new ArrayList<TransactionBean>();\r\n    TransactionBean t = new TransactionBean();\r\n    t.setTimeLogged(new Timestamp(System.currentTimeMillis()));\r\n    list.add(t);\r\n    assertEquals(today, action.getDefaultStart(list));\r\n    assertEquals(today, action.getDefaultEnd(list));\r\n}"},
 {"id":1046, "methodname":"testGetAccessesBadData()", "methodnamerefined":"testGetAccessesBadData", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testGetAccessesBadData", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testGetAccessesBadData()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"public void testGetAccessesBadData() throws Exception {\r\n    gen.transactionLog();\r\n    List<TransactionBean> accesses = action.getAccesses(null, null, null, false);\r\n    assertEquals(5, accesses.size());\r\n    for (TransactionBean t : accesses) {\r\n        assertEquals(9000000000L, t.getLoggedInMID());\r\n        assertEquals(2L, t.getSecondaryMID());\r\n        assertEquals(\"Viewed patient records\", t.getAddedInfo());\r\n    }\r\n    // note: the actual bounding is not done here, see the DAO test\r\n    try {\r\n        action.getAccesses(\"\", \"\", null, false);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Enter dates in MM/dd/yyyy\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":1047, "methodname":"testGetAccessesByRole()", "methodnamerefined":"testGetAccessesByRole", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testGetAccessesByRole", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testGetAccessesByRole()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"public void testGetAccessesByRole() throws Exception {\r\n    gen.transactionLog3();\r\n    action = new ViewMyAccessLogAction(TestDAOFactory.getTestInstance(), 1L);\r\n    List<TransactionBean> accesses = action.getAccesses(null, null, null, true);\r\n    // assertEquals(\"DLHCP\", accesses.get(0).getRole());\r\n    // assertEquals(\"DLHCP\", accesses.get(1).getRole());\r\n    assertEquals(\"Emergency Responder\", accesses.get(0).getRole());\r\n    assertEquals(\"LHCP\", accesses.get(1).getRole());\r\n    assertEquals(\"LHCP\", accesses.get(2).getRole());\r\n    assertEquals(\"LHCP\", accesses.get(3).getRole());\r\n    assertEquals(\"Personal Health Representative\", accesses.get(4).getRole());\r\n    assertEquals(\"UAP\", accesses.get(5).getRole());\r\n    // assertEquals(\"UAP\", accesses.get(8).getRole());\r\n}"},
 {"id":1048, "methodname":"testGetAccessesIllegalUser()", "methodnamerefined":"testGetAccessesIllegalUser", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testGetAccessesIllegalUser", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testGetAccessesIllegalUser()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"public void testGetAccessesIllegalUser() throws Exception {\r\n    action = new ViewMyAccessLogAction(TestDAOFactory.getTestInstance(), 24L);\r\n    String today = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    try {\r\n        action.getAccesses(today, today, \"2\", false);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Log to View.\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":1049, "methodname":"testNoProblems()", "methodnamerefined":"testNoProblems", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testNoProblems", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testNoProblems()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"public void testNoProblems() throws Exception {\r\n    String today = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    List<TransactionBean> accesses = action.getAccesses(today, today, null, false);\r\n    assertEquals(0, accesses.size());\r\n}"},
 {"id":1050, "methodname":"testNoProblemsDependentLog()", "methodnamerefined":"testNoProblemsDependentLog", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testNoProblemsDependentLog", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest.testNoProblemsDependentLog()", "classid":171, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogActionTest", "shortclassname":"ViewMyAccessLogActionTest", "method":"public void testNoProblemsDependentLog() throws Exception {\r\n    action = new ViewMyAccessLogAction(TestDAOFactory.getTestInstance(), 24L);\r\n    String today = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    List<TransactionBean> accesses = action.getAccesses(today, today, \"23\", false);\r\n    assertEquals(0, accesses.size());\r\n}"},
 {"id":1051, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyApptsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyApptsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":172, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsAction", "shortclassname":"ViewMyApptsAction", "method":"public ViewMyApptsAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":1052, "methodname":"getAllMyAppointments()", "methodnamerefined":"getAllMyAppointments", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyApptsAction.getAllMyAppointments", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyApptsAction.getAllMyAppointments()", "classid":172, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsAction", "shortclassname":"ViewMyApptsAction", "method":"public List<ApptBean> getAllMyAppointments() throws SQLException {\r\n    return apptDAO.getAllApptsFor(loggedInMID);\r\n}"},
 {"id":1053, "methodname":"getAppointments(long)", "methodnamerefined":"getAppointments", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyApptsAction.getAppointments", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyApptsAction.getAppointments(long)", "classid":172, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsAction", "shortclassname":"ViewMyApptsAction", "method":"/**\r\n * Gets a users appointments\r\n *\r\n * @param mid\r\n * \t\tthe MID of the user\r\n * @return a list of the users appointments\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<ApptBean> getAppointments(long MID) throws SQLException {\r\n    return apptDAO.getApptsFor(MID);\r\n}"},
 {"id":1054, "methodname":"getMyAppointments()", "methodnamerefined":"getMyAppointments", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyApptsAction.getMyAppointments", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyApptsAction.getMyAppointments()", "classid":172, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsAction", "shortclassname":"ViewMyApptsAction", "method":"public List<ApptBean> getMyAppointments() throws SQLException {\r\n    return apptDAO.getApptsFor(loggedInMID);\r\n}"},
 {"id":1055, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.-init-()", "classid":173, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest", "shortclassname":"ViewMyApptsActionTest", "method":"ViewMyApptsActionTest() {\r\n}"},
 {"id":1056, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.setUp()", "classid":173, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest", "shortclassname":"ViewMyApptsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.action = new ViewMyApptsAction(this.factory, this.hcpId);\r\n}"},
 {"id":1057, "methodname":"testGetMyAppointments()", "methodnamerefined":"testGetMyAppointments", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.testGetMyAppointments", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.testGetMyAppointments()", "classid":173, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest", "shortclassname":"ViewMyApptsActionTest", "method":"public void testGetMyAppointments() throws SQLException {\r\n    assertEquals(15, action.getAllMyAppointments().size());\r\n}"},
 {"id":1058, "methodname":"testGetName()", "methodnamerefined":"testGetName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.testGetName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.testGetName()", "classid":173, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest", "shortclassname":"ViewMyApptsActionTest", "method":"public void testGetName() throws iTrustException {\r\n    assertEquals(\"Kelly Doctor\", action.getName(hcpId));\r\n}"},
 {"id":1059, "methodname":"testGetName2()", "methodnamerefined":"testGetName2", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.testGetName2", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest.testGetName2()", "classid":173, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsActionTest", "shortclassname":"ViewMyApptsActionTest", "method":"public void testGetName2() throws iTrustException {\r\n    assertEquals(\"Random Person\", action.getName(mid));\r\n}"},
 {"id":1060, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":174, "classname":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction", "shortclassname":"ViewMyLabProceduresAction", "method":"public ViewMyLabProceduresAction(DAOFactory factory, long loggedInMID) {\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    patient = loggedInMID;\r\n}"},
 {"id":1061, "methodname":"getLabProcedures()", "methodnamerefined":"getLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.getLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.getLabProcedures()", "classid":174, "classname":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction", "shortclassname":"ViewMyLabProceduresAction", "method":"public List<LabProcedureBean> getLabProcedures() throws DBException {\r\n    return labProcedureDAO.getLabProceduresForPatient(patient);\r\n}"},
 {"id":1062, "methodname":"getUnviewedCount()", "methodnamerefined":"getUnviewedCount", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.getUnviewedCount", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.getUnviewedCount()", "classid":174, "classname":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction", "shortclassname":"ViewMyLabProceduresAction", "method":"/**\r\n * Get the number of unviewed lab procedures that the current user has.\r\n *\r\n * @return The number of unviewed lab procedures.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic int getUnviewedCount() throws DBException {\r\n    return labProcedureDAO.getPatientUnviewedCount(patient);\r\n}"},
 {"id":1063, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest.-init-()", "classid":175, "classname":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest", "shortclassname":"ViewMyLabProceduresTest", "method":"ViewMyLabProceduresTest() {\r\n}"},
 {"id":1064, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest.setUp()", "classid":175, "classname":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest", "shortclassname":"ViewMyLabProceduresTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    action = new ViewMyLabProceduresAction(TestDAOFactory.getTestInstance(), this.mId);\r\n}"},
 {"id":1065, "methodname":"testGetLabProcedures()", "methodnamerefined":"testGetLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest.testGetLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest.testGetLabProcedures()", "classid":175, "classname":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest", "shortclassname":"ViewMyLabProceduresTest", "method":"public void testGetLabProcedures() throws DBException {\r\n    assertEquals(2, action.getLabProcedures().size());\r\n    assertEquals(LabProcedureBean.Allow, action.getLabProcedures().get(0).getRights());\r\n    assertEquals(LabProcedureBean.Allow, action.getLabProcedures().get(1).getRights());\r\n}"},
 {"id":1066, "methodname":"testGetPendingCount()", "methodnamerefined":"testGetPendingCount", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest.testGetPendingCount", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest.testGetPendingCount()", "classid":175, "classname":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresTest", "shortclassname":"ViewMyLabProceduresTest", "method":"public void testGetPendingCount() throws DBException {\r\n    assertEquals(1, action.getUnviewedCount());\r\n}"},
 {"id":1067, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is viewing their messages.\r\n */\r\npublic ViewMyMessagesAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.referralDAO = factory.getReferralDAO();\r\n}"},
 {"id":1068, "methodname":"filterMessages(java.util.List,java.lang.String)", "methodnamerefined":"filterMessages", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.filterMessages", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.filterMessages(java.util.List,java.lang.String)", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets a list of messages for a user based on their filter criteria.\r\n *\r\n * @param messages\r\n * \t\tList of all of a users MessageBeans\r\n * @param filter\r\n * \t\tString containing a users filter criteria.\r\n * @return a List of MessageBeans that meet the criteria of the filter.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws ParseException\r\n * \t\t\r\n */\r\npublic List<MessageBean> filterMessages(List<MessageBean> messages, String filter) throws iTrustException, ParseException {\r\n    List<MessageBean> filtered = new ArrayList<MessageBean>();\r\n    String[] f = filter.split(\",\", (-1));\r\n    for (MessageBean m : messages) {\r\n        /**\r\n         * Check the sender filter field.\r\n         * Exclude if this MessageBean does not match the\r\n         * requested sender, if one is specified.\r\n         */\r\n        if (!(f[0].equals(\"\"))) {\r\n            if (!(this.getName(m.getFrom()).equalsIgnoreCase(f[0])))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the subject filter field.\r\n         * Exclude if this MessageBean does not match the\r\n         * requested subject, if one is specified.\r\n         */\r\n        if (!(f[1].equals(\"\"))) {\r\n            if (!(m.getSubject().equalsIgnoreCase(f[1])))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the body of the message for certain words.\r\n         * Exclude if this MessageBean if it does not contain\r\n         * those words in the message body.\r\n         */\r\n        if (!(f[2].equals(\"\"))) {\r\n            if ((!(m.getSubject().toLowerCase().contains(f[2].toLowerCase()))) && (!(m.getBody().toLowerCase().contains(f[2].toLowerCase()))))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the body of the message for certain words.\r\n         * Exclude if this MessageBean if it does contain\r\n         * those words in the message body.\r\n         */\r\n        if (!(f[3].equals(\"\"))) {\r\n            if ((m.getSubject().toLowerCase().contains(f[3].toLowerCase())) || (m.getBody().toLowerCase().contains(f[3].toLowerCase())))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the start date filter field.\r\n         * Exclude if this MessageBean was not sent after\r\n         * this date.\r\n         */\r\n        if (!(f[4].equals(\"\"))) {\r\n            DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            Date s = format.parse(f[4]);\r\n            if (s.after(m.getSentDate()))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * Check the end date filter field.\r\n         * Exclude if this MessageBean was not sent before\r\n         * this date.\r\n         */\r\n        if (!(f[5].equals(\"\"))) {\r\n            DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            Date s = format.parse(f[5]);\r\n            Calendar c = Calendar.getInstance();\r\n            c.setTime(s);\r\n            c.add(Calendar.DAY_OF_MONTH, 1);\r\n            s = c.getTime();\r\n            if (s.before(m.getSentDate()))\r\n                continue;\r\n\r\n        }\r\n        /**\r\n         * If the message has not been eliminated by any\r\n         * of the filter fields, add it to the new list\r\n         * of messages.\r\n         */\r\n        filtered.add(m);\r\n    }\r\n    return filtered;\r\n}"},
 {"id":1069, "methodname":"getAllMyMessages()", "methodnamerefined":"getAllMyMessages", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMyMessages", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMyMessages()", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets all the messages for the logged in user\r\n *\r\n * @return a list of all the users messages\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getAllMyMessages() throws SQLException {\r\n    return messageDAO.getMessagesFor(loggedInMID);\r\n}"},
 {"id":1070, "methodname":"getAllMyMessagesNameAscending()", "methodnamerefined":"getAllMyMessagesNameAscending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMyMessagesNameAscending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMyMessagesNameAscending()", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets all the messages for the logged in user and sorts names in ascending order\r\n *\r\n * @return a list of all the users messages\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getAllMyMessagesNameAscending() throws SQLException {\r\n    return messageDAO.getMessagesNameAscending(loggedInMID);\r\n}"},
 {"id":1071, "methodname":"getAllMyMessagesNameDescending()", "methodnamerefined":"getAllMyMessagesNameDescending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMyMessagesNameDescending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMyMessagesNameDescending()", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets all the messages for the logged in user and sorts name in descending order\r\n *\r\n * @return a list of all the users messages\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getAllMyMessagesNameDescending() throws SQLException {\r\n    return messageDAO.getMessagesNameDescending(loggedInMID);\r\n}"},
 {"id":1072, "methodname":"getAllMyMessagesTimeAscending()", "methodnamerefined":"getAllMyMessagesTimeAscending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMyMessagesTimeAscending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMyMessagesTimeAscending()", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets all the messages for the logged in user and sorts by ascending time\r\n *\r\n * @return a list of all the users messages\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getAllMyMessagesTimeAscending() throws SQLException {\r\n    return messageDAO.getMessagesTimeAscending(loggedInMID);\r\n}"},
 {"id":1073, "methodname":"getAllMySentMessages()", "methodnamerefined":"getAllMySentMessages", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMySentMessages", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMySentMessages()", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets all the sent messages for the logged in user\r\n *\r\n * @return a list of all the users sent messages\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getAllMySentMessages() throws SQLException {\r\n    return messageDAO.getMessagesFrom(loggedInMID);\r\n}"},
 {"id":1074, "methodname":"getAllMySentMessagesNameAscending()", "methodnamerefined":"getAllMySentMessagesNameAscending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMySentMessagesNameAscending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMySentMessagesNameAscending()", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets all the messages for the logged in user and sorts names in ascending order\r\n *\r\n * @return a list of all the users messages\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getAllMySentMessagesNameAscending() throws SQLException {\r\n    return messageDAO.getMessagesFromNameAscending(loggedInMID);\r\n}"},
 {"id":1075, "methodname":"getAllMySentMessagesNameDescending()", "methodnamerefined":"getAllMySentMessagesNameDescending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMySentMessagesNameDescending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMySentMessagesNameDescending()", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets all the messages for the logged in user and sorts name in descending order\r\n *\r\n * @return a list of all the users messages\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getAllMySentMessagesNameDescending() throws SQLException {\r\n    return messageDAO.getMessagesFromNameDescending(loggedInMID);\r\n}"},
 {"id":1076, "methodname":"getAllMySentMessagesTimeAscending()", "methodnamerefined":"getAllMySentMessagesTimeAscending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMySentMessagesTimeAscending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getAllMySentMessagesTimeAscending()", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets all the messages for the logged in user and sorts by ascending time\r\n *\r\n * @return a list of all the users messages\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getAllMySentMessagesTimeAscending() throws SQLException {\r\n    return messageDAO.getMessagesFromTimeAscending(loggedInMID);\r\n}"},
 {"id":1077, "methodname":"getCCdMessages(long)", "methodnamerefined":"getCCdMessages", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getCCdMessages", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getCCdMessages(long)", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"public List<MessageBean> getCCdMessages(long refID) throws SQLException {\r\n    return messageDAO.getCCdMessages(refID);\r\n}"},
 {"id":1078, "methodname":"getName(long)", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getName(long)", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets a patients name from their MID\r\n *\r\n * @param mid\r\n * \t\tthe MID of the patient\r\n * @return the patients name\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getName(long mid) throws iTrustException {\r\n    if (mid < 7000000000L)\r\n        return patientDAO.getName(mid);\r\n    else\r\n        return personnelDAO.getName(mid);\r\n\r\n}"},
 {"id":1079, "methodname":"getPersonnelName(long)", "methodnamerefined":"getPersonnelName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getPersonnelName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getPersonnelName(long)", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Gets a personnels name from their MID\r\n *\r\n * @param mid\r\n * \t\tthe MID of the personnel\r\n * @return the personnels name\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPersonnelName(long mid) throws iTrustException {\r\n    return personnelDAO.getName(mid);\r\n}"},
 {"id":1080, "methodname":"getUnreadCount()", "methodnamerefined":"getUnreadCount", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getUnreadCount", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.getUnreadCount()", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Get the number of unread messages that the current user has.\r\n *\r\n * @return The number of unread messages.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic int getUnreadCount() throws SQLException {\r\n    List<MessageBean> messages = getAllMyMessages();\r\n    int count = 0;\r\n    for (MessageBean mb : messages) {\r\n        if ((mb.getRead()) == 0) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}"},
 {"id":1081, "methodname":"linkedToReferral(long)", "methodnamerefined":"linkedToReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.linkedToReferral", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.linkedToReferral(long)", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"public long linkedToReferral(long id) throws DBException {\r\n    return referralDAO.isReferralMessage(id);\r\n}"},
 {"id":1082, "methodname":"setRead(edu.ncsu.csc.itrust.beans.MessageBean)", "methodnamerefined":"setRead", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.setRead", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.setRead(edu.ncsu.csc.itrust.beans.MessageBean)", "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "shortclassname":"ViewMyMessagesAction", "method":"/**\r\n * Set the state of the MessageBean to read, after\r\n * it is read by a user.\r\n *\r\n * @param mBean\r\n * \t\tMessageBean to be read\r\n */\r\npublic void setRead(MessageBean mBean) {\r\n    try {\r\n        messageDAO.updateRead(mBean);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":1083, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.-init-()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"ViewMyMessagesActionTest() {\r\n}"},
 {"id":1084, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.setUp()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.action = new ViewMyMessagesAction(this.factory, this.mId);\r\n    this.action2 = new ViewMyMessagesAction(this.factory, this.hcpId);\r\n}"},
 {"id":1085, "methodname":"testAddMessage()", "methodnamerefined":"testAddMessage", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testAddMessage", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testAddMessage()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testAddMessage() throws SQLException {\r\n    MessageDAO test = new MessageDAO(factory);\r\n    List<MessageBean> mbList = action.getAllMyMessages();\r\n    test.addMessage(mbList.get(0));\r\n    mbList = action.getAllMyMessages();\r\n    assertEquals(2, mbList.size());\r\n}"},
 {"id":1086, "methodname":"testFilterMessages()", "methodnamerefined":"testFilterMessages", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testFilterMessages", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testFilterMessages()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testFilterMessages() throws iTrustException, SQLException, ParseException {\r\n    List<MessageBean> mbList = action2.getAllMyMessages();\r\n    mbList = action2.filterMessages(mbList, \"Random Person,Appointment,Appointment,Lab,01/01/2010,01/31/2010\");\r\n    assertEquals(1, mbList.size());\r\n}"},
 {"id":1087, "methodname":"testGetAllMyMessages()", "methodnamerefined":"testGetAllMyMessages", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessages", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessages()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetAllMyMessages() throws SQLException {\r\n    List<MessageBean> mbList = action.getAllMyMessages();\r\n    assertEquals(1, mbList.size());\r\n    // Should send a message and recheck later.\r\n}"},
 {"id":1088, "methodname":"testGetAllMyMessagesFromNameAscending()", "methodnamerefined":"testGetAllMyMessagesFromNameAscending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesFromNameAscending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesFromNameAscending()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetAllMyMessagesFromNameAscending() throws SQLException {\r\n    List<MessageBean> mbList = action2.getAllMySentMessagesNameAscending();\r\n    List<MessageBean> mbList2 = action.getAllMySentMessagesNameAscending();\r\n    assertEquals(2, mbList.size());\r\n    assertEquals(3, mbList2.size());\r\n    try {\r\n        assertTrue(((action2.getName(mbList.get(0).getFrom()).compareTo(action2.getName(mbList.get(1).getFrom()))) >= 0));\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":1089, "methodname":"testGetAllMyMessagesFromNameDescending()", "methodnamerefined":"testGetAllMyMessagesFromNameDescending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesFromNameDescending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesFromNameDescending()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetAllMyMessagesFromNameDescending() throws SQLException {\r\n    List<MessageBean> mbList = action2.getAllMySentMessagesNameDescending();\r\n    List<MessageBean> mbList2 = action.getAllMySentMessagesNameDescending();\r\n    assertEquals(2, mbList.size());\r\n    assertEquals(3, mbList2.size());\r\n    try {\r\n        assertTrue(((action2.getName(mbList.get(1).getFrom()).compareTo(action2.getName(mbList.get(0).getFrom()))) >= 0));\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":1090, "methodname":"testGetAllMyMessagesFromTimeAscending()", "methodnamerefined":"testGetAllMyMessagesFromTimeAscending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesFromTimeAscending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesFromTimeAscending()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetAllMyMessagesFromTimeAscending() throws SQLException {\r\n    List<MessageBean> mbList = action2.getAllMySentMessagesTimeAscending();\r\n    assertEquals(2, mbList.size());\r\n    assertTrue(mbList.get(0).getSentDate().before(mbList.get(1).getSentDate()));\r\n}"},
 {"id":1091, "methodname":"testGetAllMyMessagesNameAscending()", "methodnamerefined":"testGetAllMyMessagesNameAscending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesNameAscending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesNameAscending()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetAllMyMessagesNameAscending() throws SQLException {\r\n    List<MessageBean> mbList = action2.getAllMyMessagesNameAscending();\r\n    List<MessageBean> mbList2 = action.getAllMyMessagesNameAscending();\r\n    assertEquals(14, mbList.size());\r\n    assertEquals(1, mbList2.size());\r\n    try {\r\n        assertTrue(((action2.getName(mbList.get(0).getFrom()).compareTo(action2.getName(mbList.get(13).getFrom()))) >= 0));\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":1092, "methodname":"testGetAllMyMessagesNameDescending()", "methodnamerefined":"testGetAllMyMessagesNameDescending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesNameDescending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesNameDescending()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetAllMyMessagesNameDescending() throws SQLException {\r\n    List<MessageBean> mbList = action2.getAllMyMessagesNameDescending();\r\n    List<MessageBean> mbList2 = action.getAllMyMessagesNameDescending();\r\n    assertEquals(14, mbList.size());\r\n    assertEquals(1, mbList2.size());\r\n    try {\r\n        assertTrue(((action2.getName(mbList.get(13).getFrom()).compareTo(action2.getName(mbList.get(0).getFrom()))) >= 0));\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":1093, "methodname":"testGetAllMyMessagesTimeAscending()", "methodnamerefined":"testGetAllMyMessagesTimeAscending", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesTimeAscending", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMyMessagesTimeAscending()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetAllMyMessagesTimeAscending() throws SQLException {\r\n    List<MessageBean> mbList = action2.getAllMyMessagesTimeAscending();\r\n    assertEquals(14, mbList.size());\r\n    assertTrue(mbList.get(0).getSentDate().before(mbList.get(1).getSentDate()));\r\n}"},
 {"id":1094, "methodname":"testGetAllMySentMessages()", "methodnamerefined":"testGetAllMySentMessages", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMySentMessages", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetAllMySentMessages()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetAllMySentMessages() throws SQLException {\r\n    List<MessageBean> mbList = action2.getAllMySentMessages();\r\n    assertEquals(2, mbList.size());\r\n}"},
 {"id":1095, "methodname":"testGetPatientName()", "methodnamerefined":"testGetPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetPatientName()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetPatientName() throws iTrustException {\r\n    assertEquals(\"Andy Programmer\", action.getName(this.mId));\r\n}"},
 {"id":1096, "methodname":"testGetPersonnelName()", "methodnamerefined":"testGetPersonnelName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetPersonnelName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetPersonnelName()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetPersonnelName() throws iTrustException {\r\n    assertEquals(\"Kelly Doctor\", action.getPersonnelName(this.hcpId));\r\n}"},
 {"id":1097, "methodname":"testGetUnreadCount()", "methodnamerefined":"testGetUnreadCount", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetUnreadCount", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testGetUnreadCount()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testGetUnreadCount() throws SQLException {\r\n    assertEquals(1, action.getUnreadCount());\r\n    assertEquals(12, action2.getUnreadCount());\r\n}"},
 {"id":1098, "methodname":"testLinkedToReferral()", "methodnamerefined":"testLinkedToReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testLinkedToReferral", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testLinkedToReferral()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testLinkedToReferral() throws DBException {\r\n    assertEquals(0, action.linkedToReferral(1));\r\n}"},
 {"id":1099, "methodname":"testUpdateRead()", "methodnamerefined":"testUpdateRead", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testUpdateRead", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest.testUpdateRead()", "classid":177, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesActionTest", "shortclassname":"ViewMyMessagesActionTest", "method":"public void testUpdateRead() throws FormValidationException, iTrustException, SQLException {\r\n    List<MessageBean> mbList = action.getAllMyMessages();\r\n    assertEquals(0, mbList.get(0).getRead());\r\n    action.setRead(mbList.get(0));\r\n    mbList = action.getAllMyMessages();\r\n    assertEquals(1, mbList.get(0).getRead());\r\n}"},
 {"id":1100, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the records.\r\n */\r\npublic ViewMyRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labDAO = factory.getLabProcedureDAO();\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.loincDAO = factory.getLOINCDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":1101, "methodname":"doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveCancer", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveCancer", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Checks to see if family members have cancer\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"199\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":1102, "methodname":"doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveDiabetes", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveDiabetes", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Checks to see if family members have diabetes\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"250\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":1103, "methodname":"doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveHeartDisease", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHeartDisease", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Checks to see if family members have heart disease\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"402\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":1104, "methodname":"doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveHighBP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighBP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Checks to see if family members have high blood pressure\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getBloodPressureSystolic()) > 240) || ((record.getBloodPressureDiastolic()) > 120))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":1105, "methodname":"doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"doesFamilyMemberHaveHighCholesterol", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Checks to see if family members have high cholesterol\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getCholesterolHDL()) < 35) || ((record.getCholesterolLDL()) > 250))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":1106, "methodname":"getAllHealthRecords()", "methodnamerefined":"getAllHealthRecords", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getAllHealthRecords", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getAllHealthRecords()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a list of HealthRecords for the currently logged in patient\r\n *\r\n * @return a list of HealthRecords for the currently logged in patient\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<HealthRecord> getAllHealthRecords() throws iTrustException {\r\n    return hrDAO.getAllHealthRecords(loggedInMID);\r\n}"},
 {"id":1107, "methodname":"getAllOfficeVisits()", "methodnamerefined":"getAllOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getAllOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getAllOfficeVisits()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a list of OfficeVisitBeans for all office visits for the currently logged in patient\r\n *\r\n * @return a list of OfficeVisitBeans for all office visits for the currently logged in patient\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisits() throws iTrustException {\r\n    return ovDAO.getAllOfficeVisits(loggedInMID);\r\n}"},
 {"id":1108, "methodname":"getAllergies()", "methodnamerefined":"getAllergies", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getAllergies", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getAllergies()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a list of AllergyBeans for the currently logged in patient\r\n *\r\n * @return a list of AllergyBeans for the currently logged in patient\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<AllergyBean> getAllergies() throws iTrustException {\r\n    return allergyDAO.getAllergies(loggedInMID);\r\n}"},
 {"id":1109, "methodname":"getCompleteOfficeVisit(long)", "methodnamerefined":"getCompleteOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getCompleteOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getCompleteOfficeVisit(long)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a complete OfficeVisitBean given a visitID\r\n *\r\n * @return a complete OfficeVisitBean given a visitID\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(visitID);\r\n}"},
 {"id":1110, "methodname":"getEmailHistory()", "methodnamerefined":"getEmailHistory", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getEmailHistory", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getEmailHistory()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a PatientBean for the currently logged in patient\r\n *\r\n * @return PatientBean for the currently logged in patient\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<Email> getEmailHistory() throws iTrustException {\r\n    return emailDAO.getEmailsByPerson(getPatient().getEmail());\r\n}"},
 {"id":1111, "methodname":"getFamily()", "methodnamerefined":"getFamily", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamily", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamily()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a list of Parents, Siblings, and Children of the currently logged in patient\r\n *\r\n * @return list of FamilyMemberBeans\r\n */\r\npublic List<FamilyMemberBean> getFamily() throws iTrustException {\r\n    List<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();\r\n    List<FamilyMemberBean> parents = null;\r\n    try {\r\n        parents = familyDAO.getParents(loggedInMID);\r\n        fam.addAll(parents);\r\n        fam.addAll(familyDAO.getSiblings(loggedInMID));\r\n        fam.addAll(familyDAO.getChildren(loggedInMID));\r\n    } catch (DBException e) {\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    if (parents != null) {\r\n        List<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();\r\n        for (FamilyMemberBean parent : parents) {\r\n            try {\r\n                grandparents.addAll(familyDAO.getParents(parent.getMid()));\r\n            } catch (DBException e) {\r\n                throw new iTrustException(e.getMessage());\r\n            }\r\n        }\r\n        fam.addAll(grandparents);\r\n        for (FamilyMemberBean gp : grandparents) {\r\n            gp.setRelation(\"Grandparent\");\r\n        }\r\n    }\r\n    return fam;\r\n}"},
 {"id":1112, "methodname":"getFamilyHealthRecords(long)", "methodnamerefined":"getFamilyHealthRecords", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyHealthRecords", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyHealthRecords(long)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a list of HealthRecords for the specified family member\r\n *\r\n * @return a list of HealthRecords for the specified family member\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<HealthRecord> getFamilyHealthRecords(long mid) throws iTrustException {\r\n    return hrDAO.getAllHealthRecords(mid);\r\n}"},
 {"id":1113, "methodname":"getFamilyHistory()", "methodnamerefined":"getFamilyHistory", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyHistory", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyHistory()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a list of Parents, Siblings, and Grand Parents of the currently logged in patient\r\n *\r\n * @return list of FamilyMemberBeans\r\n */\r\npublic List<FamilyMemberBean> getFamilyHistory() throws iTrustException {\r\n    List<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();\r\n    List<FamilyMemberBean> parents = null;\r\n    try {\r\n        parents = familyDAO.getParents(loggedInMID);\r\n        fam.addAll(parents);\r\n        fam.addAll(familyDAO.getSiblings(loggedInMID));\r\n    } catch (DBException e) {\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    if (parents != null) {\r\n        List<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();\r\n        for (FamilyMemberBean parent : parents) {\r\n            try {\r\n                grandparents.addAll(familyDAO.getParents(parent.getMid()));\r\n            } catch (DBException e) {\r\n                throw new iTrustException(e.getMessage());\r\n            }\r\n        }\r\n        fam.addAll(grandparents);\r\n        for (FamilyMemberBean gp : grandparents) {\r\n            gp.setRelation(\"Grandparent\");\r\n        }\r\n    }\r\n    return fam;\r\n}"},
 {"id":1114, "methodname":"getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"getFamilyMemberCOD", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyMemberCOD", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Checks to see if family member is dead, and if so, what their cause of death was\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return the cause of death for the family member\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(member.getMid());\r\n    if ((patient.getCauseOfDeath()) == null)\r\n        return \"\";\r\n\r\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\r\n    if (diag == null)\r\n        return \"\";\r\n\r\n    return diag.getDescription();\r\n}"},
 {"id":1115, "methodname":"getLabs()", "methodnamerefined":"getLabs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getLabs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getLabs()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a list of lab procedures\r\n *\r\n * @return a list of lab procedures for the logged in patient\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getLabs() throws iTrustException {\r\n    return labDAO.getLabProceduresForPatient(loggedInMID);\r\n}"},
 {"id":1116, "methodname":"getPatient()", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPatient()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a PatientBean for the currently logged in patient\r\n *\r\n * @return PatientBean for the currently logged in patient\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PatientBean getPatient() throws iTrustException {\r\n    return patientDAO.getPatient(loggedInMID);\r\n}"},
 {"id":1117, "methodname":"getPatient(long)", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPatient(long)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a PatientBean for the specified MID\r\n *\r\n * @param mid\r\n * \t\tid of the requested bean\r\n * @return PatientBean for the specified MID\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PatientBean getPatient(long mid) throws iTrustException {\r\n    return patientDAO.getPatient(mid);\r\n}"},
 {"id":1118, "methodname":"getPersonnel(long)", "methodnamerefined":"getPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getPersonnel(long)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a PersonnelBean for the requested MID\r\n *\r\n * @param mid\r\n * \t\tid of the requested bean\r\n * @return a PersonnelBean for the requested MID\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPersonnel(long mid) throws iTrustException {\r\n    return personnelDAO.getPersonnel(mid);\r\n}"},
 {"id":1119, "methodname":"getProcedureName(java.lang.String)", "methodnamerefined":"getProcedureName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getProcedureName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getProcedureName(java.lang.String)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"public List<LOINCbean> getProcedureName(String labCode) throws DBException {\r\n    return loincDAO.getProcedures(labCode);\r\n}"},
 {"id":1120, "methodname":"getProcedures(long)", "methodnamerefined":"getProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getProcedures(long)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"public List<ProcedureBean> getProcedures(long visitID) throws DBException {\r\n    return procDAO.getList(visitID);\r\n}"},
 {"id":1121, "methodname":"getReportRequests()", "methodnamerefined":"getReportRequests", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getReportRequests", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getReportRequests()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns all the report requests for the logged in patient\r\n *\r\n * @return the report requests for the logged in patient\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<ReportRequestBean> getReportRequests() throws iTrustException {\r\n    return reportRequestDAO.getAllReportRequestsForPatient(loggedInMID);\r\n}"},
 {"id":1122, "methodname":"getRepresented()", "methodnamerefined":"getRepresented", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getRepresented", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getRepresented()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a list of PatientBeans of all patients the currently logged in patient represents\r\n *\r\n * @return a list of PatientBeans of all patients the currently logged in patient represents\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getRepresented() throws iTrustException {\r\n    return patientDAO.getRepresented(loggedInMID);\r\n}"},
 {"id":1123, "methodname":"getRepresenting()", "methodnamerefined":"getRepresenting", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getRepresenting", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getRepresenting()", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Returns a list of PatientBeans of all patients the currently logged in patient represents\r\n *\r\n * @return a list of PatientBeans of all patients the currently logged in patient represents\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getRepresenting() throws iTrustException {\r\n    return patientDAO.getRepresenting(loggedInMID);\r\n}"},
 {"id":1124, "methodname":"getSpecificLabs(long,java.lang.String)", "methodnamerefined":"getSpecificLabs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getSpecificLabs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getSpecificLabs(long,java.lang.String)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"public List<LabProcedureBean> getSpecificLabs(long id, String loincID) throws DBException {\r\n    return labDAO.getAllLabProceduresLOINC(id, loincID);\r\n}"},
 {"id":1125, "methodname":"isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"isFamilyMemberSmoker", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.isFamilyMemberSmoker", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Checks to see if family members smoke\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (record.isSmoker())\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":1126, "methodname":"isSurveyCompleted(long)", "methodnamerefined":"isSurveyCompleted", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.isSurveyCompleted", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.isSurveyCompleted(long)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Has a survey been created for this office visit\r\n *\r\n * @param visitID\r\n * \t\tID of the office visit in question\r\n * @return true if the survey has been completed, otherwise false\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean isSurveyCompleted(long visitID) throws iTrustException {\r\n    return surveyDAO.isSurveyCompleted(visitID);\r\n}"},
 {"id":1127, "methodname":"representPatient(java.lang.String)", "methodnamerefined":"representPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.representPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.representPatient(java.lang.String)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"/**\r\n * Takes the patients representee as a param and returns it as a long if the patient represents the input\r\n * param\r\n *\r\n * @param input\r\n * \t\tthe patients representee mid\r\n * @return representees mid as a long\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long representPatient(String input) throws iTrustException {\r\n    try {\r\n        long reppeeMID = Long.valueOf(input);\r\n        if (patientDAO.represents(loggedInMID, reppeeMID)) {\r\n            loggedInMID = reppeeMID;\r\n            return reppeeMID;\r\n        } else\r\n            throw new iTrustException((\"You do not represent patient \" + reppeeMID));\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"MID is not a number\");\r\n    }\r\n}"},
 {"id":1128, "methodname":"setViewed(java.util.List)", "methodnamerefined":"setViewed", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.setViewed", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.setViewed(java.util.List)", "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "shortclassname":"ViewMyRecordsAction", "method":"public void setViewed(List<LabProcedureBean> procs) throws DBException {\r\n    for (LabProcedureBean b : procs) {\r\n        b.setViewedByPatient(true);\r\n        labDAO.markViewed(b);\r\n    }\r\n}"},
 {"id":1129, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.-init-()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"ViewMyRecordsActionTest() {\r\n}"},
 {"id":1130, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.setUp()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    action = new ViewMyRecordsAction(factory, pid);\r\n    fmbList = famDAO.getParents(5);\r\n    fmBean = fmbList.get(0);\r\n}"},
 {"id":1131, "methodname":"testDoesFamilyMemberHaveCancer()", "methodnamerefined":"testDoesFamilyMemberHaveCancer", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveCancer", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveCancer()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testDoesFamilyMemberHaveCancer() throws iTrustException {\r\n    assertFalse(action.doesFamilyMemberHaveCancer(fmBean));\r\n}"},
 {"id":1132, "methodname":"testDoesFamilyMemberHaveDiabetes()", "methodnamerefined":"testDoesFamilyMemberHaveDiabetes", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveDiabetes", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveDiabetes()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testDoesFamilyMemberHaveDiabetes() throws iTrustException {\r\n    assertTrue(action.doesFamilyMemberHaveDiabetes(fmBean));\r\n}"},
 {"id":1133, "methodname":"testDoesFamilyMemberHaveHeartDisease()", "methodnamerefined":"testDoesFamilyMemberHaveHeartDisease", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveHeartDisease", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveHeartDisease()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testDoesFamilyMemberHaveHeartDisease() throws iTrustException {\r\n    assertFalse(action.doesFamilyMemberHaveHeartDisease(fmBean));\r\n}"},
 {"id":1134, "methodname":"testDoesFamilyMemberHaveHighBP()", "methodnamerefined":"testDoesFamilyMemberHaveHighBP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveHighBP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveHighBP()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testDoesFamilyMemberHaveHighBP() throws iTrustException {\r\n    assertTrue(action.doesFamilyMemberHaveHighBP(fmBean));\r\n}"},
 {"id":1135, "methodname":"testDoesFamilyMemberHaveHighCholesterol()", "methodnamerefined":"testDoesFamilyMemberHaveHighCholesterol", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveHighCholesterol", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testDoesFamilyMemberHaveHighCholesterol()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testDoesFamilyMemberHaveHighCholesterol() throws iTrustException {\r\n    assertFalse(action.doesFamilyMemberHaveHighCholesterol(fmBean));\r\n}"},
 {"id":1136, "methodname":"testGetAllHealthRecords()", "methodnamerefined":"testGetAllHealthRecords", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetAllHealthRecords", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetAllHealthRecords()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetAllHealthRecords() throws iTrustException {\r\n    List<HealthRecord> hrList = action.getAllHealthRecords();\r\n    assertEquals(2, hrList.size());\r\n}"},
 {"id":1137, "methodname":"testGetAllOfficeVisits()", "methodnamerefined":"testGetAllOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetAllOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetAllOfficeVisits()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetAllOfficeVisits() throws iTrustException {\r\n    List<OfficeVisitBean> ovbList = action.getAllOfficeVisits();\r\n    assertEquals(10, ovbList.size());\r\n}"},
 {"id":1138, "methodname":"testGetAllergies()", "methodnamerefined":"testGetAllergies", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetAllergies", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetAllergies()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetAllergies() throws iTrustException {\r\n    List<AllergyBean> abList = action.getAllergies();\r\n    assertEquals(2, abList.size());\r\n}"},
 {"id":1139, "methodname":"testGetEmailHistory()", "methodnamerefined":"testGetEmailHistory", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetEmailHistory", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetEmailHistory()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetEmailHistory() throws iTrustException {\r\n    List<Email> eList = action.getEmailHistory();\r\n    assertEquals(2, eList.size());\r\n}"},
 {"id":1140, "methodname":"testGetFamily()", "methodnamerefined":"testGetFamily", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetFamily", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetFamily()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetFamily() throws iTrustException {\r\n    List<FamilyMemberBean> fmbList = action.getFamily();\r\n    assertEquals(9, fmbList.size());\r\n}"},
 {"id":1141, "methodname":"testGetFamilyHealthRecords()", "methodnamerefined":"testGetFamilyHealthRecords", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetFamilyHealthRecords", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetFamilyHealthRecords()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetFamilyHealthRecords() throws iTrustException {\r\n    List<HealthRecord> hrList = action.getFamilyHealthRecords(this.pid);\r\n    assertEquals(2, hrList.size());\r\n}"},
 {"id":1142, "methodname":"testGetFamilyHistory()", "methodnamerefined":"testGetFamilyHistory", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetFamilyHistory", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetFamilyHistory()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetFamilyHistory() throws iTrustException {\r\n    List<FamilyMemberBean> fmbList = action.getFamilyHistory();\r\n    assertEquals(5, fmbList.size());\r\n}"},
 {"id":1143, "methodname":"testGetFamilyMemberCOD()", "methodnamerefined":"testGetFamilyMemberCOD", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetFamilyMemberCOD", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetFamilyMemberCOD()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetFamilyMemberCOD() throws iTrustException {\r\n    assertEquals(\"Diabetes with ketoacidosis\", action.getFamilyMemberCOD(fmBean));\r\n}"},
 {"id":1144, "methodname":"testGetLabs()", "methodnamerefined":"testGetLabs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetLabs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetLabs()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetLabs() throws iTrustException {\r\n    List<LabProcedureBean> lpbList = action.getLabs();\r\n    assertEquals(1, lpbList.size());\r\n}"},
 {"id":1145, "methodname":"testGetPatient()", "methodnamerefined":"testGetPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetPatient()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetPatient() throws iTrustException {\r\n    PatientBean pBean = action.getPatient();\r\n    assertEquals(2L, pBean.getMID());\r\n    pBean = action.getPatient(2L);\r\n    assertEquals(2L, pBean.getMID());\r\n}"},
 {"id":1146, "methodname":"testGetPersonnel()", "methodnamerefined":"testGetPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetPersonnel()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetPersonnel() throws iTrustException {\r\n    PersonnelBean pBean = action.getPersonnel(hcpId);\r\n    assertEquals(hcpId, pBean.getMID());\r\n}"},
 {"id":1147, "methodname":"testGetReportRequests()", "methodnamerefined":"testGetReportRequests", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetReportRequests", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetReportRequests()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetReportRequests() throws iTrustException {\r\n    List<ReportRequestBean> rrbList = action.getReportRequests();\r\n    assertEquals(4, rrbList.size());\r\n}"},
 {"id":1148, "methodname":"testGetRepresented()", "methodnamerefined":"testGetRepresented", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetRepresented", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetRepresented()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetRepresented() throws iTrustException {\r\n    List<PatientBean> pbList = action.getRepresented();\r\n    assertEquals(6, pbList.size());\r\n}"},
 {"id":1149, "methodname":"testGetRepresenting()", "methodnamerefined":"testGetRepresenting", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetRepresenting", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetRepresenting()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetRepresenting() throws iTrustException {\r\n    List<PatientBean> pbList = action.getRepresenting();\r\n    assertEquals(0, pbList.size());\r\n}"},
 {"id":1150, "methodname":"testGetSpecificLabs()", "methodnamerefined":"testGetSpecificLabs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetSpecificLabs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testGetSpecificLabs()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testGetSpecificLabs() throws iTrustException {\r\n    List<LabProcedureBean> lpbList = action.getSpecificLabs(pid, \"10640-1\");\r\n    assertEquals(1, lpbList.size());\r\n}"},
 {"id":1151, "methodname":"testIsFamilyMemberSmoker()", "methodnamerefined":"testIsFamilyMemberSmoker", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testIsFamilyMemberSmoker", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testIsFamilyMemberSmoker()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testIsFamilyMemberSmoker() throws iTrustException {\r\n    assertTrue(action.isFamilyMemberSmoker(fmBean));\r\n}"},
 {"id":1152, "methodname":"testIsSurveyCompleted()", "methodnamerefined":"testIsSurveyCompleted", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testIsSurveyCompleted", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testIsSurveyCompleted()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testIsSurveyCompleted() throws iTrustException {\r\n    List<OfficeVisitBean> ovbList = action.getAllOfficeVisits();\r\n    OfficeVisitBean ovBean = ovbList.get(0);\r\n    assertFalse(action.isSurveyCompleted(ovBean.getID()));\r\n}"},
 {"id":1153, "methodname":"testRepresentPatient()", "methodnamerefined":"testRepresentPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testRepresentPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testRepresentPatient()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testRepresentPatient() throws iTrustException {\r\n    String StrRep = \"3\";\r\n    long longRep = new Long(StrRep).longValue();\r\n    long mid = action.representPatient(\"3\");\r\n    assertEquals(longRep, mid);\r\n}"},
 {"id":1154, "methodname":"testViewMyRecords()", "methodnamerefined":"testViewMyRecords", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testViewMyRecords", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testViewMyRecords()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testViewMyRecords() throws Exception {\r\n    assertEquals(pid, action.getPatient().getMID());\r\n    assertEquals(2, action.getAllergies().size());\r\n    assertEquals(9, action.getFamily().size());\r\n    assertEquals(2, action.getAllHealthRecords().size());\r\n    assertEquals(10, action.getAllOfficeVisits().size());\r\n    assertEquals(6, action.getRepresented().size());\r\n    assertEquals(0, action.getRepresenting().size());\r\n    assertTrue(action.isSurveyCompleted(952));\r\n    assertEquals(1, action.getLabs().size());\r\n    action.representPatient(\"1\");\r\n    assertEquals(1L, action.getPatient().getMID());\r\n    assertTrue(action.doesFamilyMemberHaveHighBP(fmBean));\r\n    assertTrue(action.doesFamilyMemberHaveDiabetes(fmBean));\r\n    assertTrue(action.isFamilyMemberSmoker(fmBean));\r\n    assertFalse(action.doesFamilyMemberHaveCancer(fmBean));\r\n    assertFalse(action.doesFamilyMemberHaveHighCholesterol(fmBean));\r\n    assertFalse(action.doesFamilyMemberHaveHeartDisease(fmBean));\r\n    assertTrue(action.getFamilyMemberCOD(fmBean).contains(\"Diabetes\"));\r\n    assertEquals(5, new ViewMyRecordsAction(factory, 5L).getFamilyHistory().size());\r\n}"},
 {"id":1155, "methodname":"testViewNonExistantRecords()", "methodnamerefined":"testViewNonExistantRecords", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testViewNonExistantRecords", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest.testViewNonExistantRecords()", "classid":179, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsActionTest", "shortclassname":"ViewMyRecordsActionTest", "method":"public void testViewNonExistantRecords() {\r\n    action = new ViewMyRecordsAction(evil, 0L);\r\n    try {\r\n        action.getFamilyHistory();\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", e.getMessage());\r\n    }\r\n    try {\r\n        action.getFamily();\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", e.getMessage());\r\n    }\r\n}"},
 {"id":1156, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":180, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction", "shortclassname":"ViewMyRemoteMonitoringListAction", "method":"/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the HCP retrieving the patient data.\r\n */\r\npublic ViewMyRemoteMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":1157, "methodname":"getMonitoringHCPs()", "methodnamerefined":"getMonitoringHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getMonitoringHCPs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getMonitoringHCPs()", "classid":180, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction", "shortclassname":"ViewMyRemoteMonitoringListAction", "method":"/**\r\n * Useful to figure out who is monitoring a given patient\r\n *\r\n * @return list of HCPs monitoring this patient\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getMonitoringHCPs() throws DBException, iTrustException {\r\n    return rmDAO.getMonitoringHCPs(loggedInMID);\r\n}"},
 {"id":1158, "methodname":"getPatientDataByDate(long,java.lang.String,java.lang.String)", "methodnamerefined":"getPatientDataByDate", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataByDate", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataByDate(long,java.lang.String,java.lang.String)", "classid":180, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction", "shortclassname":"ViewMyRemoteMonitoringListAction", "method":"/**\r\n * Returns a list of RemoteMonitoringDataBeans for the logged in HCP\r\n *\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, String startDate, String endDate) throws DBException, FormValidationException {\r\n    Date lower;\r\n    Date upper;\r\n    try {\r\n        lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDate);\r\n        upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(endDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return rmDAO.getPatientDataByDate(patientMID, lower, upper);\r\n}"},
 {"id":1159, "methodname":"getPatientDataByType(long,java.lang.String)", "methodnamerefined":"getPatientDataByType", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataByType", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataByType(long,java.lang.String)", "classid":180, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction", "shortclassname":"ViewMyRemoteMonitoringListAction", "method":"/**\r\n * Returns a list of RemoteMonitoringDataBeans for the logged in HCP based on a certain data type\r\n *\r\n * @param patientMID\r\n * \t\t\r\n * @param dataType\r\n * \t\t\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByType(long patientMID, String dataType) throws DBException, FormValidationException {\r\n    String[] types = new String[]{ \"weight\", \"systolicBloodPressure\", \"diastolicBloodPressure\", \"glucoseLevel\", \"pedometerReading\" };\r\n    boolean valid = false;\r\n    for (String dType : types) {\r\n        if (dType.equals(dataType)) {\r\n            valid = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!valid) {\r\n        throw new FormValidationException(\"Input must be a valid telemedicine data type!\");\r\n    }\r\n    return rmDAO.getPatientDataByType(patientMID, dataType);\r\n}"},
 {"id":1160, "methodname":"getPatientDataWithoutLogging()", "methodnamerefined":"getPatientDataWithoutLogging", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataWithoutLogging", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientDataWithoutLogging()", "classid":180, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction", "shortclassname":"ViewMyRemoteMonitoringListAction", "method":"public List<RemoteMonitoringDataBean> getPatientDataWithoutLogging() throws DBException {\r\n    return rmDAO.getPatientsData(loggedInMID);\r\n}"},
 {"id":1161, "methodname":"getPatientName(long)", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientName(long)", "classid":180, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction", "shortclassname":"ViewMyRemoteMonitoringListAction", "method":"/**\r\n * returns the patient name\r\n *\r\n * @return patient name\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(long pid) throws DBException, iTrustException {\r\n    return authDAO.getUserName(pid);\r\n}"},
 {"id":1162, "methodname":"getPatientsData()", "methodnamerefined":"getPatientsData", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientsData", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.getPatientsData()", "classid":180, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction", "shortclassname":"ViewMyRemoteMonitoringListAction", "method":"/**\r\n * Returns a list of RemoteMonitoringDataBeans for the logged in HCP\r\n *\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientsData() throws DBException {\r\n    return rmDAO.getPatientsData(loggedInMID);\r\n}"},
 {"id":1163, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.-init-()", "classid":181, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest", "shortclassname":"ViewMyRemoteMonitoringListActionTest", "method":"ViewMyRemoteMonitoringListActionTest() {\r\n}"},
 {"id":1164, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.setUp()", "classid":181, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest", "shortclassname":"ViewMyRemoteMonitoringListActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.patient1();\r\n    action = new ViewMyRemoteMonitoringListAction(TestDAOFactory.getTestInstance(), 9000000000L);\r\n}"},
 {"id":1165, "methodname":"testGetPatientData()", "methodnamerefined":"testGetPatientData", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testGetPatientData", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testGetPatientData()", "classid":181, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest", "shortclassname":"ViewMyRemoteMonitoringListActionTest", "method":"public void testGetPatientData() throws Exception {\r\n    gen.remoteMonitoring3();\r\n    List<RemoteMonitoringDataBean> data = action.getPatientsData();\r\n    assertEquals(1L, data.get(0).getPatientMID());\r\n    assertEquals(160, data.get(0).getSystolicBloodPressure());\r\n    assertEquals(110, data.get(0).getDiastolicBloodPressure());\r\n    assertEquals(60, data.get(0).getGlucoseLevel());\r\n    assertTrue(data.get(0).getTime().toString().contains(\"08:00:00\"));\r\n    assertEquals(1L, data.get(1).getPatientMID());\r\n    assertEquals(100, data.get(1).getSystolicBloodPressure());\r\n    assertEquals(70, data.get(1).getDiastolicBloodPressure());\r\n    assertEquals(90, data.get(1).getGlucoseLevel());\r\n    assertTrue(data.get(1).getTime().toString().contains(\"07:15:00\"));\r\n    assertEquals(1L, data.get(2).getPatientMID());\r\n    assertEquals(90, data.get(2).getSystolicBloodPressure());\r\n    assertEquals(60, data.get(2).getDiastolicBloodPressure());\r\n    assertEquals(80, data.get(2).getGlucoseLevel());\r\n    assertTrue(data.get(2).getTime().toString().contains(\"05:30:00\"));\r\n    assertEquals(5L, data.get(3).getPatientMID());\r\n    assertEquals(0, data.get(3).getSystolicBloodPressure());\r\n    assertEquals(0, data.get(3).getDiastolicBloodPressure());\r\n    assertEquals(0, data.get(3).getGlucoseLevel());\r\n    assertNull(data.get(3).getTime());\r\n    gen.remoteMonitoring3();\r\n    data = action.getPatientDataWithoutLogging();\r\n    assertEquals(1L, data.get(0).getPatientMID());\r\n    assertEquals(160, data.get(0).getSystolicBloodPressure());\r\n    assertEquals(110, data.get(0).getDiastolicBloodPressure());\r\n    assertEquals(60, data.get(0).getGlucoseLevel());\r\n    assertTrue(data.get(0).getTime().toString().contains(\"08:00:00\"));\r\n    assertEquals(1L, data.get(1).getPatientMID());\r\n    assertEquals(100, data.get(1).getSystolicBloodPressure());\r\n    assertEquals(70, data.get(1).getDiastolicBloodPressure());\r\n    assertEquals(90, data.get(1).getGlucoseLevel());\r\n    assertTrue(data.get(1).getTime().toString().contains(\"07:15:00\"));\r\n    assertEquals(1L, data.get(2).getPatientMID());\r\n    assertEquals(90, data.get(2).getSystolicBloodPressure());\r\n    assertEquals(60, data.get(2).getDiastolicBloodPressure());\r\n    assertEquals(80, data.get(2).getGlucoseLevel());\r\n    assertTrue(data.get(2).getTime().toString().contains(\"05:30:00\"));\r\n    assertEquals(5L, data.get(3).getPatientMID());\r\n    assertEquals(0, data.get(3).getSystolicBloodPressure());\r\n    assertEquals(0, data.get(3).getDiastolicBloodPressure());\r\n    assertEquals(0, data.get(3).getGlucoseLevel());\r\n    assertNull(data.get(3).getTime());\r\n}"},
 {"id":1166, "methodname":"testGetPatientDataByDate()", "methodnamerefined":"testGetPatientDataByDate", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testGetPatientDataByDate", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testGetPatientDataByDate()", "classid":181, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest", "shortclassname":"ViewMyRemoteMonitoringListActionTest", "method":"public void testGetPatientDataByDate() throws Exception {\r\n    gen.remoteMonitoring3();\r\n    DateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    Date date = new Date();\r\n    String currentDate = dateFormat.format(date);\r\n    List<RemoteMonitoringDataBean> data = action.getPatientDataByDate(1L, currentDate, currentDate);\r\n    assertEquals(1L, data.get(0).getPatientMID());\r\n    assertEquals(160, data.get(0).getSystolicBloodPressure());\r\n    assertEquals(110, data.get(0).getDiastolicBloodPressure());\r\n    assertEquals(60, data.get(0).getGlucoseLevel());\r\n    assertTrue(data.get(0).getTime().toString().contains(\"08:00:00\"));\r\n    assertEquals(2L, data.get(0).getReporterMID());\r\n    assertEquals(1L, data.get(1).getPatientMID());\r\n    assertEquals(100, data.get(1).getSystolicBloodPressure());\r\n    assertEquals(70, data.get(1).getDiastolicBloodPressure());\r\n    assertEquals(90, data.get(1).getGlucoseLevel());\r\n    assertTrue(data.get(1).getTime().toString().contains(\"07:15:00\"));\r\n    assertEquals(8000000009L, data.get(1).getReporterMID());\r\n    assertEquals(1L, data.get(2).getPatientMID());\r\n    assertEquals(90, data.get(2).getSystolicBloodPressure());\r\n    assertEquals(60, data.get(2).getDiastolicBloodPressure());\r\n    assertEquals(80, data.get(2).getGlucoseLevel());\r\n    assertTrue(data.get(2).getTime().toString().contains(\"05:30:00\"));\r\n    assertEquals(1L, data.get(2).getReporterMID());\r\n}"},
 {"id":1167, "methodname":"testGetPatientDataByType()", "methodnamerefined":"testGetPatientDataByType", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testGetPatientDataByType", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testGetPatientDataByType()", "classid":181, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest", "shortclassname":"ViewMyRemoteMonitoringListActionTest", "method":"public void testGetPatientDataByType() throws Exception {\r\n    gen.remoteMonitoring5();\r\n    List<RemoteMonitoringDataBean> data = action.getPatientDataByType(1L, \"weight\");\r\n    assertEquals(1L, data.get(0).getPatientMID());\r\n    assertEquals(180.0F, data.get(0).getWeight());\r\n    assertTrue(data.get(0).getTime().toString().contains(\"08:19:00\"));\r\n    assertEquals(1L, data.get(0).getReporterMID());\r\n    assertEquals(1L, data.get(1).getPatientMID());\r\n    assertEquals(177.0F, data.get(1).getWeight());\r\n    assertTrue(data.get(1).getTime().toString().contains(\"07:48:00\"));\r\n    assertEquals(2L, data.get(1).getReporterMID());\r\n    assertEquals(1L, data.get(2).getPatientMID());\r\n    assertEquals(186.5F, data.get(2).getWeight());\r\n    assertTrue(data.get(2).getTime().toString().contains(\"07:17:00\"));\r\n    assertEquals(1L, data.get(2).getReporterMID());\r\n}"},
 {"id":1168, "methodname":"testGetPatientName()", "methodnamerefined":"testGetPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testGetPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testGetPatientName()", "classid":181, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest", "shortclassname":"ViewMyRemoteMonitoringListActionTest", "method":"public void testGetPatientName() throws Exception {\r\n    assertEquals(\"Random Person\", action.getPatientName(1L));\r\n}"},
 {"id":1169, "methodname":"testIllegalGetPatientDataByDate1()", "methodnamerefined":"testIllegalGetPatientDataByDate1", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testIllegalGetPatientDataByDate1", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest.testIllegalGetPatientDataByDate1()", "classid":181, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListActionTest", "shortclassname":"ViewMyRemoteMonitoringListActionTest", "method":"public void testIllegalGetPatientDataByDate1() throws Exception {\r\n    DateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    Date date = new Date();\r\n    String currentDate = dateFormat.format(date);\r\n    try {\r\n        List<RemoteMonitoringDataBean> data = action.getPatientDataByDate(1L, currentDate, \"01/01/2009\");\r\n        fail(\"Start Date is After End Date, Illegal!\");\r\n        // Here to remove warning about data not being read\r\n        data.get(0).getPatientMID();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":1170, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":182, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction", "shortclassname":"ViewMyReportRequestsAction", "method":"// private DAOFactory factory;\r\n/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing their report requests.\r\n */\r\npublic ViewMyReportRequestsAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    // this.factory = factory;\r\n}"},
 {"id":1171, "methodname":"addReportRequest(long)", "methodnamerefined":"addReportRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.addReportRequest", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.addReportRequest(long)", "classid":182, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction", "shortclassname":"ViewMyReportRequestsAction", "method":"// /**\r\n// * Returns a list of *all* reports\r\n// *\r\n// * @return list of all reports\r\n// * @throws iTrustException\r\n// */\r\n// public List<ReportRequestBean> getAllReportRequests() throws iTrustException {\r\n// return reportRequestDAO.getAllReportRequests();\r\n// }\r\n/**\r\n * Adds a report request to the list\r\n *\r\n * @param patientMID\r\n * \t\tID of the patient that the report request is for\r\n * @return \r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long addReportRequest(long patientMID) throws iTrustException {\r\n    long id = reportRequestDAO.addReportRequest(loggedInMID, patientMID, Calendar.getInstance().getTime());\r\n    return id;\r\n}"},
 {"id":1172, "methodname":"getAllReportRequestsForRequester()", "methodnamerefined":"getAllReportRequestsForRequester", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.getAllReportRequestsForRequester", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.getAllReportRequestsForRequester()", "classid":182, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction", "shortclassname":"ViewMyReportRequestsAction", "method":"/**\r\n * Returns all the reports for the currently logged in HCP\r\n *\r\n * @return list of all reports for the logged in HCP\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<ReportRequestBean> getAllReportRequestsForRequester() throws iTrustException {\r\n    return reportRequestDAO.getAllReportRequestsForRequester(loggedInMID);\r\n}"},
 {"id":1173, "methodname":"getLongStatus(long)", "methodnamerefined":"getLongStatus", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.getLongStatus", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.getLongStatus(long)", "classid":182, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction", "shortclassname":"ViewMyReportRequestsAction", "method":"// /**\r\n// *\r\n// * Sends e-mail regarding the request to the patient.\r\n// *\r\n// * @param adminID admin who approved the request\r\n// * @param hcpID HCP the request is for\r\n// * @param pid ID of the patient the report is about\r\n// * @return the sent e-mail\r\n// * @throws DBException\r\n// */\r\n// private Email makeEmailView(long adminID, long hcpID, long pid) throws DBException {\r\n// \r\n// PatientBean p = new PatientDAO(factory).getPatient(pid);\r\n// \r\n// Email email = new Email();\r\n// email.setFrom(\"no-reply@itrust.com\");\r\n// email.setToList(Arrays.asList(p.getEmail()));\r\n// email.setSubject(\"A Report has been generated in iTrust\");\r\n// email\r\n// .setBody(String\r\n// .format(\r\n// \"Dear %s, \n The iTrust Health Care Provider (%s) has chosen to view your full medical report, which was approved by an iTrust administrator (%s).  This report was only viewable one time and is no longer available.\",\r\n// p.getFullName(), hcpID, adminID));\r\n// return email;\r\n// }\r\n/**\r\n * Gets the status of the request\r\n *\r\n * @param id\r\n * \t\tid of the request\r\n * @return the requests status\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getLongStatus(long id) throws iTrustException {\r\n    StringBuilder s = new StringBuilder();\r\n    ReportRequestBean r = reportRequestDAO.getReportRequest(id);\r\n    if (r.getStatus().equals(ReportRequestBean.Requested)) {\r\n        PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n        s.append(String.format(\"Request was requested on %s by %s\", r.getRequestedDateString(), p.getFullName()));\r\n    }\r\n    if (r.getStatus().equals(ReportRequestBean.Viewed)) {\r\n        PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n        String fullName = \"Unknown\";\r\n        if (p != null) {\r\n            fullName = p.getFullName();\r\n            s.append(String.format(\"Request was requested on %s by %s, \", r.getRequestedDateString(), p.getFullName()));\r\n        }\r\n        s.append(\"\");// removed \"<br />\" because it caused unit test to fail and seems to have no\r\n\r\n        // purpose\r\n        s.append(String.format(\"and viewed on %s by %s\", r.getViewedDateString(), fullName));\r\n    }\r\n    return s.toString();\r\n}"},
 {"id":1174, "methodname":"getReportRequest(int)", "methodnamerefined":"getReportRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.getReportRequest", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.getReportRequest(int)", "classid":182, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction", "shortclassname":"ViewMyReportRequestsAction", "method":"// /**\r\n// * Approves a report request from the list.  E-mail is sent when the request is approved.\r\n// *\r\n// * @param ID id of the request\r\n// * @throws iTrustException\r\n// */\r\n// public void approveReportRequest(long ID) throws iTrustException {\r\n// ReportRequestBean rr = reportRequestDAO.getReportRequest(ID);\r\n// reportRequestDAO.approveReportRequest(ID, loggedInMID, Calendar.getInstance().getTime());\r\n// new EmailUtil(factory).sendEmail(makeEmailApp(loggedInMID, rr.getRequesterMID(), rr.getPatientMID()));\r\n// \r\n// }\r\n// /**\r\n// *\r\n// * Sends e-mail regarding the approved request.\r\n// *\r\n// * @param adminID admin who approved the request\r\n// * @param hcpID HCP the request is for\r\n// * @param pid ID of the patient the report is about\r\n// * @return the sent e-mail\r\n// * @throws DBException\r\n// */\r\n// private Email makeEmailApp(long adminID, long hcpID, long pid) throws DBException {\r\n// \r\n// PatientBean p = new PatientDAO(factory).getPatient(pid);\r\n// \r\n// Email email = new Email();\r\n// email.setFrom(\"no-reply@itrust.com\");\r\n// email.setToList(Arrays.asList(p.getEmail()));\r\n// email.setSubject(\"A Report has been generated in iTrust\");\r\n// email\r\n// .setBody(String\r\n// .format(\r\n// \"Dear %s, \n The iTrust Health Care Provider (%s) submitted a request to view your full medical records.  The iTrust administrator (%s) approved a one-time viewing of this report.  You will be notified when the HCP chooses to view it.\",\r\n// p.getFullName(), hcpID, adminID));\r\n// return email;\r\n// }\r\n// /**\r\n// * Rejects a request from the list.\r\n// *\r\n// * @param ID id of the rejected request\r\n// * @param comment why the request was rejected\r\n// * @throws iTrustException\r\n// */\r\n// public void rejectReportRequest(long ID, String comment) throws iTrustException {\r\n// reportRequestDAO.rejectReportRequest(ID, loggedInMID, Calendar.getInstance().getTime(), comment);\r\n// }\r\n/**\r\n * Returns the requested report\r\n *\r\n * @param ID\r\n * \t\tid of the requested report\r\n * @return the requested report\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic ReportRequestBean getReportRequest(int ID) throws iTrustException {\r\n    return reportRequestDAO.getReportRequest(ID);\r\n}"},
 {"id":1175, "methodname":"setViewed(int)", "methodnamerefined":"setViewed", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.setViewed", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.setViewed(int)", "classid":182, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction", "shortclassname":"ViewMyReportRequestsAction", "method":"/**\r\n * Sets the viewed status of the report.  If the report is \"viewed\" the HCP must request a new one to see it again.\r\n *\r\n * @param ID\r\n * \t\tid of the report\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void setViewed(int ID) throws iTrustException {\r\n    // ReportRequestBean rr = reportRequestDAO.getReportRequest(ID);\r\n    reportRequestDAO.setViewed(ID, Calendar.getInstance().getTime());\r\n    // new EmailUtil(factory).sendEmail(makeEmailView(rr.getApproverMID(), rr.getRequesterMID(), rr\r\n    // .getPatientMID()));\r\n}"},
 {"id":1176, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.-init-()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"ViewMyReportRequestsActionTest() {\r\n}"},
 {"id":1177, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.setUp()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"// private FakeEmailDAO feDAO = factory.getFakeEmailDAO();\r\n@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.hcp0();\r\n    gen.admin1();\r\n    gen.fakeEmail();\r\n    gen.reportRequests();\r\n}"},
 {"id":1178, "methodname":"testGetEvilReportRequest()", "methodnamerefined":"testGetEvilReportRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetEvilReportRequest", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetEvilReportRequest()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"public void testGetEvilReportRequest() throws Exception {\r\n    action = new ViewMyReportRequestsAction(evilFactory, 9000000000L);\r\n    try {\r\n        action.getReportRequest(1);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException ex) {\r\n        DBException dbe = ((DBException) (ex));\r\n        assertEquals(EvilDAOFactory.MESSAGE, dbe.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":1179, "methodname":"testGetLongStatus()", "methodnamerefined":"testGetLongStatus", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetLongStatus", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetLongStatus()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"// public void testSetViewed2() throws Exception {\r\n// action = new ViewMyReportRequestsAction(factory, 9000000000L);\r\n// long id = action.addReportRequest(2);\r\n// action = new ViewMyReportRequestsAction(factory, 9000000001L);\r\n// action.setViewed((int) id);\r\n// assertEquals(\r\n// \"Dear Andy Programmer, \n The iTrust Health Care Provider (9000000000) has chosen to view your full medical report, which was approved by an iTrust administrator (9000000001).  This report was only viewable one time and is no longer available.\",\r\n// list.get(0).getBody());\r\n// ReportRequestBean b2 = action.getReportRequest((int) id);\r\n// assertEquals(ReportRequestBean.Viewed, b2.getStatus());\r\n// }\r\npublic void testGetLongStatus() throws Exception {\r\n    ViewMyReportRequestsAction action = new ViewMyReportRequestsAction(factory, 2L);\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.admin1();\r\n    assertEquals(\"Request was requested on 01/01/2008 12:00 by Kelly Doctor\", action.getLongStatus(1L));\r\n    assertEquals(\"Request was requested on 01/04/2008 12:00 by Kelly Doctor, and viewed on 03/04/2008 12:00 by Kelly Doctor\", action.getLongStatus(4L));\r\n}"},
 {"id":1180, "methodname":"testGetReportRequestForID3()", "methodnamerefined":"testGetReportRequestForID3", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetReportRequestForID3", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetReportRequestForID3()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"public void testGetReportRequestForID3() throws Exception {\r\n    action = new ViewMyReportRequestsAction(factory, 9000000000L);\r\n    ReportRequestBean b = action.getReportRequest(3);\r\n    assertEquals(3, b.getID());\r\n    assertEquals(9000000000L, b.getRequesterMID());\r\n    assertEquals(2, b.getPatientMID());\r\n    assertEquals(\"01/03/2008 12:00\", b.getRequestedDateString());\r\n}"},
 {"id":1181, "methodname":"testGetReportRequestForID4()", "methodnamerefined":"testGetReportRequestForID4", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetReportRequestForID4", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetReportRequestForID4()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"public void testGetReportRequestForID4() throws Exception {\r\n    action = new ViewMyReportRequestsAction(factory, 9000000000L);\r\n    ReportRequestBean b = action.getReportRequest(4);\r\n    assertEquals(4, b.getID());\r\n    assertEquals(9000000000L, b.getRequesterMID());\r\n    assertEquals(2, b.getPatientMID());\r\n    assertEquals(\"01/04/2008 12:00\", b.getRequestedDateString());\r\n    assertEquals(\"03/04/2008 12:00\", b.getViewedDateString());\r\n    assertEquals(ReportRequestBean.Viewed, b.getStatus());\r\n}"},
 {"id":1182, "methodname":"testGetReportRequests3()", "methodnamerefined":"testGetReportRequests3", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetReportRequests3", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testGetReportRequests3()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"public void testGetReportRequests3() throws Exception {\r\n    action = new ViewMyReportRequestsAction(factory, 9000000000L);\r\n    List<ReportRequestBean> list = action.getAllReportRequestsForRequester();\r\n    assertEquals(6, list.size());\r\n    assertEquals(ReportRequestBean.Requested, list.get(0).getStatus());\r\n}"},
 {"id":1183, "methodname":"testInsertReport1()", "methodnamerefined":"testInsertReport1", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testInsertReport1", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testInsertReport1()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"public void testInsertReport1() throws Exception {\r\n    action = new ViewMyReportRequestsAction(evilFactory, 9000000000L);\r\n    try {\r\n        action.addReportRequest(0);\r\n        fail(\"Should have throw exception\");\r\n    } catch (iTrustException e) {\r\n        DBException dbe = ((DBException) (e));\r\n        assertEquals(EvilDAOFactory.MESSAGE, dbe.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":1184, "methodname":"testInsertReport2()", "methodnamerefined":"testInsertReport2", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testInsertReport2", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testInsertReport2()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"public void testInsertReport2() throws Exception {\r\n    action = new ViewMyReportRequestsAction(factory, 9000000000L);\r\n    long id = action.addReportRequest(2);\r\n    ReportRequestBean b2 = action.getReportRequest(((int) (id)));\r\n    assertEquals(9000000000L, b2.getRequesterMID());\r\n    assertEquals(2, b2.getPatientMID());\r\n    assertEquals(ReportRequestBean.Requested, b2.getStatus());\r\n}"},
 {"id":1185, "methodname":"testSetViewedToZero()", "methodnamerefined":"testSetViewedToZero", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testSetViewedToZero", "fullmethod":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest.testSetViewedToZero()", "classid":183, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsActionTest", "shortclassname":"ViewMyReportRequestsActionTest", "method":"public void testSetViewedToZero() throws Exception {\r\n    action = new ViewMyReportRequestsAction(factory, 9000000000L);\r\n    try {\r\n        action.setViewed(0);\r\n        fail(\"Should have throw exception\");\r\n    } catch (iTrustException ex) {\r\n        assertEquals(\"A database exception has occurred. Please see the log in the console for stacktrace\", ex.getMessage());\r\n    }\r\n}"},
 {"id":1186, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewNumberOfPendingAppointmentsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewNumberOfPendingAppointmentsActionTest.-init-()", "classid":184, "classname":"edu.ncsu.csc.itrust.action.ViewNumberOfPendingAppointmentsActionTest", "shortclassname":"ViewNumberOfPendingAppointmentsActionTest", "method":"ViewNumberOfPendingAppointmentsActionTest() {\r\n}"},
 {"id":1187, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewNumberOfPendingAppointmentsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewNumberOfPendingAppointmentsActionTest.setUp()", "classid":184, "classname":"edu.ncsu.csc.itrust.action.ViewNumberOfPendingAppointmentsActionTest", "shortclassname":"ViewNumberOfPendingAppointmentsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.pendingAppointmentAlert();\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n    this.action = new ViewApptRequestsAction(this.hcpId, this.factory);\r\n}"},
 {"id":1188, "methodname":"testGetNumRequest()", "methodnamerefined":"testGetNumRequest", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewNumberOfPendingAppointmentsActionTest.testGetNumRequest", "fullmethod":"edu.ncsu.csc.itrust.action.ViewNumberOfPendingAppointmentsActionTest.testGetNumRequest()", "classid":184, "classname":"edu.ncsu.csc.itrust.action.ViewNumberOfPendingAppointmentsActionTest", "shortclassname":"ViewNumberOfPendingAppointmentsActionTest", "method":"public void testGetNumRequest() throws SQLException {\r\n    List<ApptRequestBean> reqs = action.getApptRequests();\r\n    assertEquals(1, action.getNumRequests(reqs));\r\n}"},
 {"id":1189, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"/**\r\n * Super class handles validating the loggedInMid and ovIDString\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing their office visits.\r\n * @param ovIDString\r\n * \t\tThe unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String ovIDString) throws iTrustException {\r\n    super(factory, String.valueOf(loggedInMID), ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n}"},
 {"id":1190, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"/**\r\n * Super class handles validating the pidString and ovIDString. Usually used for representing a patient.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param repPIDString\r\n * \t\tThe MID of the representative viewing the records.\r\n * @param ovIDString\r\n * \t\tThe unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String repPIDString, String ovIDString) throws iTrustException {\r\n    super(factory, repPIDString, ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    checkRepresented(loggedInMID, repPIDString);\r\n}"},
 {"id":1191, "methodname":"checkRepresented(long,java.lang.String)", "methodnamerefined":"checkRepresented", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.checkRepresented", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.checkRepresented(long,java.lang.String)", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"private void checkRepresented(long loggedInMID, String repPIDString) throws iTrustException {\r\n    try {\r\n        long repee = Long.valueOf(repPIDString);\r\n        if (!(patientDAO.represents(loggedInMID, repee)))\r\n            throw new iTrustException(Messages.getString(\"ViewOfficeVisitAction.0\"));\r\n        // $NON-NLS-1$\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(Messages.getString(\"ViewOfficeVisitAction.1\"));// $NON-NLS-1$\r\n\r\n    }\r\n}"},
 {"id":1192, "methodname":"getAllProcedures()", "methodnamerefined":"getAllProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getAllProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getAllProcedures()", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"public List<ProcedureBean> getAllProcedures() throws DBException {\r\n    return proceduresDAO.getList(ovID);\r\n}"},
 {"id":1193, "methodname":"getDiagnoses()", "methodnamerefined":"getDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getDiagnoses()", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"public List<DiagnosisBean> getDiagnoses() throws DBException {\r\n    return diagnosesDAO.getList(ovID);\r\n}"},
 {"id":1194, "methodname":"getHCPName(long)", "methodnamerefined":"getHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getHCPName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getHCPName(long)", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"/**\r\n * Returns the name of the HCP for the hcpID passed as a param\r\n *\r\n * @param hcpID\r\n * \t\t\r\n * @return the name of the HCP\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getHCPName(long hcpID) throws iTrustException {\r\n    String name = null;\r\n    try {\r\n        name = personnelDAO.getName(hcpID);\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        name = e.getMessage();\r\n    }\r\n    return name;\r\n}"},
 {"id":1195, "methodname":"getImmunizations()", "methodnamerefined":"getImmunizations", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getImmunizations", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getImmunizations()", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"public List<ProcedureBean> getImmunizations() throws DBException {\r\n    return proceduresDAO.getImmunizationList(ovID);\r\n}"},
 {"id":1196, "methodname":"getLabProcedures()", "methodnamerefined":"getLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getLabProcedures()", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"public List<LabProcedureBean> getLabProcedures() throws DBException {\r\n    return labProceduresDAO.getLabProceduresForPatientOV(ovID);\r\n}"},
 {"id":1197, "methodname":"getOfficeVisit()", "methodnamerefined":"getOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getOfficeVisit()", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"/**\r\n * Returns the office visit as an OfficeVisitBean for the ovID that was initially passed to the\r\n * constructor\r\n *\r\n * @return the OfficeVisitBean for the ovID\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic OfficeVisitBean getOfficeVisit() throws iTrustException {\r\n    return ovDAO.getOfficeVisit(ovID);\r\n}"},
 {"id":1198, "methodname":"getPrescriptions()", "methodnamerefined":"getPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getPrescriptions()", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"/**\r\n * Returns the prescriptions associated with the ovID initially passed to the constructor\r\n *\r\n * @return list of PrescriptionBeans for the ovID\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getPrescriptions() throws DBException {\r\n    return prescriptionsDAO.getList(ovID);\r\n}"},
 {"id":1199, "methodname":"getProcedures()", "methodnamerefined":"getProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.getProcedures()", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"public List<ProcedureBean> getProcedures() throws DBException {\r\n    return proceduresDAO.getMedProceduresList(ovID);\r\n}"},
 {"id":1200, "methodname":"setViewed(java.util.List)", "methodnamerefined":"setViewed", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.setViewed", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.setViewed(java.util.List)", "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "shortclassname":"ViewOfficeVisitAction", "method":"public void setViewed(List<LabProcedureBean> procs) throws DBException {\r\n    for (LabProcedureBean b : procs) {\r\n        b.setViewedByPatient(true);\r\n        labProceduresDAO.markViewed(b);\r\n    }\r\n}"},
 {"id":1201, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.-init-()", "classid":186, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest", "shortclassname":"ViewOfficeVisitActionTest", "method":"ViewOfficeVisitActionTest() {\r\n}"},
 {"id":1202, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.setUp()", "classid":186, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest", "shortclassname":"ViewOfficeVisitActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":1203, "methodname":"testCanRepresent()", "methodnamerefined":"testCanRepresent", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.testCanRepresent", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.testCanRepresent()", "classid":186, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest", "shortclassname":"ViewOfficeVisitActionTest", "method":"public void testCanRepresent() throws Exception {\r\n    try {\r\n        action = new ViewOfficeVisitAction(factory, 2L, \"1\", \"11\");\r\n    } catch (Exception e) {\r\n        fail((\"No exception should be thrown; exception: \" + (e.toString())));\r\n    }\r\n}"},
 {"id":1204, "methodname":"testCannotRepresent()", "methodnamerefined":"testCannotRepresent", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.testCannotRepresent", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.testCannotRepresent()", "classid":186, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest", "shortclassname":"ViewOfficeVisitActionTest", "method":"public void testCannotRepresent() throws Exception {\r\n    try {\r\n        action = new ViewOfficeVisitAction(factory, 1L, \"2\", \"955\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"You do not represent this patient, contact your HCP to represent this patient\", e.getMessage());\r\n    }\r\n}"},
 {"id":1205, "methodname":"testOfficeVisitSubActions()", "methodnamerefined":"testOfficeVisitSubActions", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.testOfficeVisitSubActions", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.testOfficeVisitSubActions()", "classid":186, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest", "shortclassname":"ViewOfficeVisitActionTest", "method":"public void testOfficeVisitSubActions() throws Exception {\r\n    action = new ViewOfficeVisitAction(factory, 2L, \"955\");\r\n    assertEquals(1, action.getAllProcedures().size());\r\n    assertEquals(1, action.getDiagnoses().size());\r\n    assertEquals(0, action.getImmunizations().size());\r\n    assertEquals(2, action.getLabProcedures().size());\r\n    assertEquals(3, action.getPrescriptions().size());\r\n    assertEquals(1, action.getProcedures().size());\r\n}"},
 {"id":1206, "methodname":"testViewOfficeVisit()", "methodnamerefined":"testViewOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.testViewOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest.testViewOfficeVisit()", "classid":186, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitActionTest", "shortclassname":"ViewOfficeVisitActionTest", "method":"/**\r\n * Test view office visit\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testViewOfficeVisit() throws Exception {\r\n    String hcp = null;\r\n    action = new ViewOfficeVisitAction(factory, 2L, \"955\");\r\n    assertEquals(955L, action.getOvID());\r\n    assertEquals(2L, action.getPid());\r\n    assertEquals(955L, action.getOfficeVisit().getID());\r\n    // assertEquals(3, action.getPrescriptions().size());\r\n    hcp = action.getHCPName(9000000000L);\r\n    assertNotNull(hcp);\r\n    hcp = action.getHCPName(9000000099L);\r\n    assertEquals(\"User does not exist\", hcp);\r\n    try {\r\n        action = new ViewOfficeVisitAction(factory, 2L, \"0\");\r\n        fail(\"should have been iTrustException\");\r\n    } catch (DBException dbe) {\r\n    } catch (iTrustException e) {\r\n        assertEquals(((\"Office Visit \" + (Long.valueOf(\"0\"))) + \" with Patient MID 2 does not exist\"), e.getMessage());\r\n    }\r\n}"},
 {"id":1207, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "classid":187, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction", "shortclassname":"ViewPatientInstructionsAction", "method":"/**\r\n * Construct a ViewPatientInstructionsAction for a given patient.\r\n *\r\n * @param factory\r\n * \t\tThe DAO Factory.\r\n * @param pidString\r\n * \t\tThe patient ID as a string.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic ViewPatientInstructionsAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.instructionsDAO = new PatientInstructionsDAO(factory);\r\n    this.personnelDAO = new PersonnelDAO(factory);\r\n    this.ovDAO = new OfficeVisitDAO(factory);\r\n}"},
 {"id":1208, "methodname":"getHCPNameLookup()", "methodnamerefined":"getHCPNameLookup", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.getHCPNameLookup", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.getHCPNameLookup()", "classid":187, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction", "shortclassname":"ViewPatientInstructionsAction", "method":"/**\r\n * Get a map in which to lookup HCP names from an HCP id.\r\n *\r\n * @return A map which associated HCP ids with their names.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic Map<Long, String> getHCPNameLookup() throws iTrustException {\r\n    HashMap<Long, String> map = new HashMap<Long, String>();\r\n    List<OfficeVisitBean> ovisits = ovDAO.getAllOfficeVisits(getPid());\r\n    for (OfficeVisitBean ovisit : ovisits) {\r\n        if (!(map.containsKey(ovisit.getHcpID()))) {\r\n            map.put(ovisit.getHcpID(), personnelDAO.getName(ovisit.getHcpID()));\r\n        }\r\n    }\r\n    return map;\r\n}"},
 {"id":1209, "methodname":"getInstructionsForOfficeVisit(long)", "methodnamerefined":"getInstructionsForOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.getInstructionsForOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.getInstructionsForOfficeVisit(long)", "classid":187, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction", "shortclassname":"ViewPatientInstructionsAction", "method":"/**\r\n * Get a list of patient instructions for a given office vsiit.\r\n *\r\n * @param ovid\r\n * \t\tThe office visit id to check.\r\n * @return A list of patient instructions beans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientInstructionsBean> getInstructionsForOfficeVisit(long ovid) throws DBException {\r\n    return instructionsDAO.getList(ovid);\r\n}"},
 {"id":1210, "methodname":"getOfficeVisitsWithInstructions()", "methodnamerefined":"getOfficeVisitsWithInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.getOfficeVisitsWithInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.getOfficeVisitsWithInstructions()", "classid":187, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction", "shortclassname":"ViewPatientInstructionsAction", "method":"/**\r\n * Get all office visits for this patient that contain instructions.\r\n *\r\n * @return A list of office visit beans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getOfficeVisitsWithInstructions() throws DBException {\r\n    return instructionsDAO.getOfficeVisitsWithInstructions(getPid());\r\n}"},
 {"id":1211, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.-init-()", "classid":188, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest", "shortclassname":"ViewPatientInstructionsActionTest", "method":"ViewPatientInstructionsActionTest() {\r\n}"},
 {"id":1212, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.setUp()", "classid":188, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest", "shortclassname":"ViewPatientInstructionsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":1213, "methodname":"testGetHCPNameLookup()", "methodnamerefined":"testGetHCPNameLookup", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.testGetHCPNameLookup", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.testGetHCPNameLookup()", "classid":188, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest", "shortclassname":"ViewPatientInstructionsActionTest", "method":"public void testGetHCPNameLookup() throws Exception {\r\n    action = new ViewPatientInstructionsAction(factory, \"20\");\r\n    assertEquals(0, action.getHCPNameLookup().size());\r\n    gen.uc44_acceptance_scenario_2();\r\n    gen.hcp4();\r\n    action = new ViewPatientInstructionsAction(factory, \"1\");\r\n    assertEquals(3, action.getHCPNameLookup().size());\r\n    assertEquals(\"Kelly Doctor\", action.getHCPNameLookup().get(9000000000L));\r\n    assertEquals(\"Antonio Medico\", action.getHCPNameLookup().get(9000000004L));\r\n}"},
 {"id":1214, "methodname":"testGetInstructionsForOfficeVisit()", "methodnamerefined":"testGetInstructionsForOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.testGetInstructionsForOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.testGetInstructionsForOfficeVisit()", "classid":188, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest", "shortclassname":"ViewPatientInstructionsActionTest", "method":"public void testGetInstructionsForOfficeVisit() throws Exception {\r\n    action = new ViewPatientInstructionsAction(factory, \"2\");\r\n    assertEquals(0, action.getInstructionsForOfficeVisit(952).size());\r\n    gen.uc44_acceptance_scenario_2();\r\n    gen.hcp4();\r\n    action = new ViewPatientInstructionsAction(factory, \"1\");\r\n    assertEquals(1, action.getInstructionsForOfficeVisit(44100).size());\r\n    assertEquals(\"Flu Diet\", action.getInstructionsForOfficeVisit(44100).get(0).getName());\r\n}"},
 {"id":1215, "methodname":"testGetOfficeVisitsWithInstructions()", "methodnamerefined":"testGetOfficeVisitsWithInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.testGetOfficeVisitsWithInstructions", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest.testGetOfficeVisitsWithInstructions()", "classid":188, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsActionTest", "shortclassname":"ViewPatientInstructionsActionTest", "method":"public void testGetOfficeVisitsWithInstructions() throws Exception {\r\n    action = new ViewPatientInstructionsAction(factory, \"5\");\r\n    assertEquals(0, action.getOfficeVisitsWithInstructions().size());\r\n    gen.uc44_acceptance_scenario_2();\r\n    gen.hcp4();\r\n    action = new ViewPatientInstructionsAction(factory, \"1\");\r\n    assertEquals(1, action.getOfficeVisitsWithInstructions().size());\r\n}"},
 {"id":1216, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":189, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction", "shortclassname":"ViewPatientOfficeVisitHistoryAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the office visits.\r\n */\r\npublic ViewPatientOfficeVisitHistoryAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    officevisitDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    visits = new ArrayList<PatientVisitBean>();\r\n}"},
 {"id":1217, "methodname":"PatientInList(edu.ncsu.csc.itrust.beans.PatientBean,java.lang.String)", "methodnamerefined":"PatientInList", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.PatientInList", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.PatientInList(edu.ncsu.csc.itrust.beans.PatientBean,java.lang.String)", "classid":189, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction", "shortclassname":"ViewPatientOfficeVisitHistoryAction", "method":"/**\r\n * Checks to see if a patient is in the list of  visits\r\n *\r\n * @param pb\r\n * \t\tpatient to check\r\n * @param date\r\n * \t\tdate of the visit\r\n * @return True if the patient is in the list of visits.\r\n */\r\nprivate boolean PatientInList(PatientBean pb, String date) {\r\n    Iterator<PatientVisitBean> it = visits.iterator();\r\n    PatientVisitBean visitBean;\r\n    while (it.hasNext()) {\r\n        visitBean = it.next();\r\n        if (visitBean.getPatientName().equals(pb.getFullName())) {\r\n            if ((visitBean.getLastOVDateY().compareTo(date)) < 0) {\r\n                visitBean.setLastOVDate(date);\r\n            }\r\n            return true;\r\n        }\r\n    } \r\n    return false;\r\n}"},
 {"id":1218, "methodname":"getPatients()", "methodnamerefined":"getPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.getPatients", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.getPatients()", "classid":189, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction", "shortclassname":"ViewPatientOfficeVisitHistoryAction", "method":"/**\r\n * Get the list of patients an HCP has had office visits with\r\n *\r\n * @return the list of patients an HCP has had office visits with\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientVisitBean> getPatients() throws DBException {\r\n    try {\r\n        processOfficeVisits();\r\n    } catch (iTrustException ie) {\r\n    }\r\n    return visits;\r\n}"},
 {"id":1219, "methodname":"getPersonnel()", "methodnamerefined":"getPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.getPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.getPersonnel()", "classid":189, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction", "shortclassname":"ViewPatientOfficeVisitHistoryAction", "method":"/**\r\n * Returns a PersonnelBean for the logged in HCP\r\n *\r\n * @return PersonnelBean for the logged in HCP\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPersonnel() throws iTrustException {\r\n    return personnelDAO.getPersonnel(loggedInMID);\r\n}"},
 {"id":1220, "methodname":"processOfficeVisits()", "methodnamerefined":"processOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.processOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.processOfficeVisits()", "classid":189, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction", "shortclassname":"ViewPatientOfficeVisitHistoryAction", "method":"/**\r\n * Adds all the office visits for the logged in HCP to a list.\r\n *\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate void processOfficeVisits() throws iTrustException {\r\n    try {\r\n        List<PatientBean> plist = patientDAO.getAllPatients();\r\n        for (PatientBean pb : plist) {\r\n            // Create a new visit bean\r\n            PatientVisitBean visitBean = new PatientVisitBean();\r\n            // Add patients information to the visit\r\n            visitBean.setPatient(pb);\r\n            visitBean.setPatientName(pb.getFullName());\r\n            visitBean.setAddress1((((pb.getStreetAddress1()) + \" \") + (pb.getStreetAddress2())));\r\n            visitBean.setAddress2((((((pb.getCity()) + \" \") + (pb.getState())) + \" \") + (pb.getZip())));\r\n            // Get this patients office visit history\r\n            List<OfficeVisitBean> ovlist = officevisitDAO.getAllOfficeVisits(pb.getMID());\r\n            // If theyve had an office visit previously, get the date of the latest visit\r\n            if (!(ovlist.isEmpty())) {\r\n                // The list is ordered DESC, so the first entry will be the latest\r\n                OfficeVisitBean ov = ovlist.get(0);\r\n                String date = ov.getVisitDateStr();\r\n                Scanner sc = new Scanner(date);\r\n                sc.useDelimiter(\"/\");\r\n                String month = sc.next();\r\n                String day = sc.next();\r\n                String year = sc.next();\r\n                visitBean.setLastOVDateM(month);\r\n                visitBean.setLastOVDateD(day);\r\n                visitBean.setLastOVDateY(year);\r\n                visitBean.setLastOVDate(((((year + \"-\") + month) + \"-\") + date));\r\n            } else {\r\n                // The patient hasnt had an office visit, so set the date to null\r\n                visitBean.setLastOVDateM(null);\r\n                visitBean.setLastOVDateD(null);\r\n                visitBean.setLastOVDateY(null);\r\n                visitBean.setLastOVDate(null);\r\n            }\r\n            visits.add(visitBean);\r\n        }\r\n    } catch (DBException dbe) {\r\n        throw new iTrustException(dbe.getMessage());\r\n    }\r\n}"},
 {"id":1221, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest.-init-()", "classid":190, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest", "shortclassname":"ViewPatientOfficeVisitHistoryActionTest", "method":"ViewPatientOfficeVisitHistoryActionTest() {\r\n}"},
 {"id":1222, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest.setUp()", "classid":190, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest", "shortclassname":"ViewPatientOfficeVisitHistoryActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    action = new ViewPatientOfficeVisitHistoryAction(factory, 9000000000L);\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":1223, "methodname":"testGetPatients()", "methodnamerefined":"testGetPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest.testGetPatients", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest.testGetPatients()", "classid":190, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest", "shortclassname":"ViewPatientOfficeVisitHistoryActionTest", "method":"public void testGetPatients() throws Exception {\r\n    List<PatientVisitBean> list = action.getPatients();\r\n    assertEquals(19, list.size());\r\n    assertEquals(\"31\", list.get(17).getLastOVDateD());\r\n    assertEquals(\"03\", list.get(17).getLastOVDateM());\r\n}"},
 {"id":1224, "methodname":"testGetPersonnel()", "methodnamerefined":"testGetPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest.testGetPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest.testGetPersonnel()", "classid":190, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryActionTest", "shortclassname":"ViewPatientOfficeVisitHistoryActionTest", "method":"public void testGetPersonnel() throws Exception {\r\n    PersonnelBean hcp = action.getPersonnel();\r\n    assertNotNull(hcp.getFirstName(), \"Kelly\");\r\n}"},
 {"id":1225, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "shortclassname":"ViewPatientReferralsAction", "method":"public ViewPatientReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientID = patientID;\r\n}"},
 {"id":1226, "methodname":"getOVDate(long)", "methodnamerefined":"getOVDate", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getOVDate", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getOVDate(long)", "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "shortclassname":"ViewPatientReferralsAction", "method":"/**\r\n * This method returns an office visit bean given its id. The purpose is to use the bean in the related\r\n * JSP to get the office visit date.\r\n *\r\n * @param id\r\n * \t\t\r\n * @return an office visit bean\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic OfficeVisitBean getOVDate(long id) throws DBException {\r\n    return ovDAO.getOfficeVisit(id);\r\n}"},
 {"id":1227, "methodname":"getReferralByID(int)", "methodnamerefined":"getReferralByID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferralByID", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferralByID(int)", "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "shortclassname":"ViewPatientReferralsAction", "method":"/**\r\n * This method gets a referral by its id\r\n *\r\n * @param id\r\n * \t\t\r\n * @return a referral bean\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic ReferralBean getReferralByID(int id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}"},
 {"id":1228, "methodname":"getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "methodnamerefined":"getReferrals", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferrals", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "shortclassname":"ViewPatientReferralsAction", "method":"/**\r\n * Get all referrals for a patient sorted by the given field and in the given direction.\r\n *\r\n * @param field\r\n * \t\tThe name of the pseudo-field to sort by.\r\n * @param dir\r\n * \t\tThe direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getPatientQuery(patientID).query(field, dir);\r\n}"},
 {"id":1229, "methodname":"getReferralsForPatientUnread()", "methodnamerefined":"getReferralsForPatientUnread", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferralsForPatientUnread", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferralsForPatientUnread()", "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "shortclassname":"ViewPatientReferralsAction", "method":"/**\r\n * This method returns the number of messages for a given patient that have not been read.\r\n *\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int getReferralsForPatientUnread() throws DBException {\r\n    return referralDAO.getReferralsForPatientUnread(patientID).size();\r\n}"},
 {"id":1230, "methodname":"setReferralMessage(long,long)", "methodnamerefined":"setReferralMessage", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.setReferralMessage", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.setReferralMessage(long,long)", "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "shortclassname":"ViewPatientReferralsAction", "method":"/**\r\n * This method updates the referral in the DAO\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return a boolean expression used for testability\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean setReferralMessage(long messageID, long referralID) throws DBException {\r\n    referralDAO.setReferralMessage(messageID, referralID);\r\n    return true;\r\n}"},
 {"id":1231, "methodname":"updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"updateReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.updateReferral", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "shortclassname":"ViewPatientReferralsAction", "method":"/**\r\n * This method updates the referral in the DAO\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return a boolean expression used for testability\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean updateReferral(ReferralBean bean) throws DBException {\r\n    referralDAO.editReferral(bean);\r\n    return true;\r\n}"},
 {"id":1232, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.-init-()", "classid":192, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest", "shortclassname":"ViewPatientReferralsActionTest", "method":"ViewPatientReferralsActionTest() {\r\n}"},
 {"id":1233, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.setUp()", "classid":192, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest", "shortclassname":"ViewPatientReferralsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    action = new ViewPatientReferralsAction(factory, 2L);\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":1234, "methodname":"testGetOVDate()", "methodnamerefined":"testGetOVDate", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testGetOVDate", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testGetOVDate()", "classid":192, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest", "shortclassname":"ViewPatientReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#getOVDate(long)}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testGetOVDate() throws DBException {\r\n    OfficeVisitBean b = action.getOVDate(955L);\r\n    assertEquals(955, b.getID());\r\n    assertEquals(9000000000L, b.getHcpID());\r\n    assertEquals(2L, b.getPatientID());\r\n    assertEquals(\"Yet another office visit.\", b.getNotes());\r\n    assertEquals(\"06/10/2007\", b.getVisitDateStr());\r\n}"},
 {"id":1235, "methodname":"testGetReferralByID()", "methodnamerefined":"testGetReferralByID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testGetReferralByID", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testGetReferralByID()", "classid":192, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest", "shortclassname":"ViewPatientReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#getReferralByID(int)}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testGetReferralByID() throws DBException {\r\n    ReferralBean b = action.getReferralByID(1);\r\n    assertEquals(1, b.getId());\r\n    assertEquals(1, b.getPriority());\r\n    assertEquals(2L, b.getPatientID());\r\n    assertEquals(9000000000L, b.getSenderID());\r\n    assertEquals(9000000003L, b.getReceiverID());\r\n    assertEquals(\"Gandalf will make sure that the virus does not get past your immune system\", b.getReferralDetails());\r\n    assertEquals(955L, b.getOvid());\r\n    assertFalse(b.isViewedByHCP());\r\n    assertFalse(b.isViewedByPatient());\r\n}"},
 {"id":1236, "methodname":"testGetReferralsForPatientUnread()", "methodnamerefined":"testGetReferralsForPatientUnread", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testGetReferralsForPatientUnread", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testGetReferralsForPatientUnread()", "classid":192, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest", "shortclassname":"ViewPatientReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#getReferralsForPatientUnread()}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testGetReferralsForPatientUnread() throws DBException {\r\n    int number = action.getReferralsForPatientUnread();\r\n    assertEquals(5, number);\r\n    ReferralBean b = action.getReferralByID(1);\r\n    b.setViewedByPatient(true);\r\n    action.updateReferral(b);\r\n    number = action.getReferralsForPatientUnread();\r\n    assertEquals(4, number);\r\n}"},
 {"id":1237, "methodname":"testGetReferralsStringSortDirection()", "methodnamerefined":"testGetReferralsStringSortDirection", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testGetReferralsStringSortDirection", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testGetReferralsStringSortDirection()", "classid":192, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest", "shortclassname":"ViewPatientReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#getReferrals(java.lang.String, edu.ncsu.csc.itrust.enums.SortDirection)}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testGetReferralsStringSortDirection() throws DBException {\r\n    List<VerboseReferralBean> bean = action.getReferrals(\"priority\", SortDirection.parse(\"ascending\"));\r\n    assertEquals(5, bean.size());\r\n    assertEquals(1, bean.get(0).getPriority());\r\n    assertEquals(1, bean.get(1).getPriority());\r\n    assertEquals(1, bean.get(2).getPriority());\r\n    assertEquals(2, bean.get(3).getPriority());\r\n    assertEquals(1, bean.get(0).getId());\r\n    assertEquals(1, bean.get(0).getPriority());\r\n    assertEquals(2L, bean.get(0).getPatientID());\r\n    assertEquals(9000000000L, bean.get(0).getSenderID());\r\n    assertEquals(9000000003L, bean.get(0).getReceiverID());\r\n    assertEquals(\"Gandalf will make sure that the virus does not get past your immune system\", bean.get(0).getReferralDetails());\r\n    assertEquals(955L, bean.get(0).getOvid());\r\n    assertFalse(bean.get(0).isViewedByHCP());\r\n    assertFalse(bean.get(0).isViewedByPatient());\r\n    assertEquals(\"07/15/2007 00:00 AM\", bean.get(0).getTimeStamp());\r\n    assertEquals(\"Kelly Doctor\", bean.get(0).getSenderName());\r\n    assertEquals(\"06/10/2007\", bean.get(0).getOvDate());\r\n    ReferralBean other = action.getReferralByID(1);\r\n    ReferralBean verbBean = bean.get(0).toReferralBean();\r\n    assertTrue(other.equals(verbBean));\r\n    VerboseReferralBean nextOther = new VerboseReferralBean();\r\n    nextOther.setId(1L);\r\n    nextOther.setSenderID(9000000000L);\r\n    nextOther.setReceiverID(9000000003L);\r\n    nextOther.setOvid(955);\r\n    nextOther.setViewedByHCP(false);\r\n    nextOther.setViewedByPatient(false);\r\n    nextOther.setTimeStamp(\"07/15/2007 00:00 AM\");\r\n    nextOther.setReferralDetails(\"Gandalf will make sure that the virus does not get past your immune system\");\r\n    assertTrue(nextOther.equals(bean.get(0)));\r\n    bean.clear();\r\n    bean = action.getReferrals(\"priority\", SortDirection.parse(\"descending\"));\r\n    assertEquals(5, bean.size());\r\n    assertEquals(1, bean.get(3).getPriority());\r\n    assertEquals(1, bean.get(2).getPriority());\r\n    assertEquals(2, bean.get(1).getPriority());\r\n    assertEquals(3, bean.get(0).getPriority());\r\n}"},
 {"id":1238, "methodname":"testUpdateReferral()", "methodnamerefined":"testUpdateReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testUpdateReferral", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest.testUpdateReferral()", "classid":192, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsActionTest", "shortclassname":"ViewPatientReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testUpdateReferral() throws DBException {\r\n    ReferralBean b = action.getReferralByID(1);\r\n    assertEquals(1, b.getId());\r\n    assertEquals(1, b.getPriority());\r\n    assertEquals(2L, b.getPatientID());\r\n    assertEquals(9000000000L, b.getSenderID());\r\n    assertEquals(9000000003L, b.getReceiverID());\r\n    assertEquals(\"Gandalf will make sure that the virus does not get past your immune system\", b.getReferralDetails());\r\n    assertEquals(955L, b.getOvid());\r\n    assertFalse(b.isViewedByHCP());\r\n    assertFalse(b.isViewedByPatient());\r\n    b.setPriority(2);\r\n    b.setViewedByHCP(true);\r\n    b.setViewedByPatient(true);\r\n    action.updateReferral(b);\r\n    b = action.getReferralByID(1);\r\n    assertEquals(1, b.getId());\r\n    assertEquals(2, b.getPriority());\r\n    assertEquals(2L, b.getPatientID());\r\n    assertEquals(9000000000L, b.getSenderID());\r\n    assertEquals(9000000003L, b.getReceiverID());\r\n    assertEquals(\"Gandalf will make sure that the virus does not get past your immune system\", b.getReferralDetails());\r\n    assertEquals(955L, b.getOvid());\r\n    assertTrue(b.isViewedByHCP());\r\n    assertTrue(b.isViewedByPatient());\r\n}"},
 {"id":1239, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPersonnelAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":193, "classname":"edu.ncsu.csc.itrust.action.ViewPersonnelAction", "shortclassname":"ViewPersonnelAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving personnel beans.\r\n */\r\npublic ViewPersonnelAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":1240, "methodname":"getEmailHistory()", "methodnamerefined":"getEmailHistory", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPersonnelAction.getEmailHistory", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPersonnelAction.getEmailHistory()", "classid":193, "classname":"edu.ncsu.csc.itrust.action.ViewPersonnelAction", "shortclassname":"ViewPersonnelAction", "method":"/**\r\n * Returns a PatientBean for the currently logged in personnel\r\n *\r\n * @return The PatientBean\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<Email> getEmailHistory() throws iTrustException {\r\n    return emailDAO.getEmailsByPerson(personnelDAO.getPersonnel(loggedInMID).getEmail());\r\n}"},
 {"id":1241, "methodname":"getPersonnel(java.lang.String)", "methodnamerefined":"getPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPersonnelAction.getPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPersonnelAction.getPersonnel(java.lang.String)", "classid":193, "classname":"edu.ncsu.csc.itrust.action.ViewPersonnelAction", "shortclassname":"ViewPersonnelAction", "method":"/**\r\n * Retrieves a PersonnelBean for the mid passed as a param\r\n *\r\n * @param input\r\n * \t\tthe mid for which the PersonnelBean will be returned\r\n * @return PersonnelBean\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPersonnel(String input) throws iTrustException {\r\n    try {\r\n        long mid = Long.valueOf(input);\r\n        PersonnelBean personnel = personnelDAO.getPersonnel(mid);\r\n        if (personnel != null) {\r\n            return personnel;\r\n        }// $NON-NLS-1$\r\n         else\r\n            throw new iTrustException(Messages.getString(\"ViewPersonnelAction.1\"));\r\n        // $NON-NLS-1$\r\n\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(Messages.getString(\"ViewPersonnelAction.2\"));// $NON-NLS-1$\r\n\r\n    }\r\n}"},
 {"id":1242, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.-init-()", "classid":194, "classname":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest", "shortclassname":"ViewPersonnelActionTest", "method":"ViewPersonnelActionTest() {\r\n}"},
 {"id":1243, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.setUp()", "classid":194, "classname":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest", "shortclassname":"ViewPersonnelActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient4();\r\n    gen.hcp3();\r\n}"},
 {"id":1244, "methodname":"testNoPersonnel()", "methodnamerefined":"testNoPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.testNoPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.testNoPersonnel()", "classid":194, "classname":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest", "shortclassname":"ViewPersonnelActionTest", "method":"public void testNoPersonnel() throws Exception {\r\n    action = new ViewPersonnelAction(factory, 4L);\r\n    try {\r\n        action.getPersonnel(\"9000000000\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"No personnel record exists for this MID\", e.getMessage());\r\n    }\r\n}"},
 {"id":1245, "methodname":"testNotANumber()", "methodnamerefined":"testNotANumber", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.testNotANumber", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.testNotANumber()", "classid":194, "classname":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest", "shortclassname":"ViewPersonnelActionTest", "method":"public void testNotANumber() throws Exception {\r\n    action = new ViewPersonnelAction(factory, 4L);\r\n    try {\r\n        action.getPersonnel(\"a\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"MID not a number\", e.getMessage());\r\n    }\r\n}"},
 {"id":1246, "methodname":"testViewPersonnel()", "methodnamerefined":"testViewPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.testViewPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest.testViewPersonnel()", "classid":194, "classname":"edu.ncsu.csc.itrust.action.ViewPersonnelActionTest", "shortclassname":"ViewPersonnelActionTest", "method":"public void testViewPersonnel() throws Exception {\r\n    action = new ViewPersonnelAction(factory, 4L);\r\n    PersonnelBean hcp = action.getPersonnel(\"9000000003\");\r\n    assertEquals(9000000003L, hcp.getMID());\r\n}"},
 {"id":1247, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":195, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction", "shortclassname":"ViewPrescriptionRecordsAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing prescription records.\r\n */\r\npublic ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":1248, "methodname":"getPatient(long)", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPatient(long)", "classid":195, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction", "shortclassname":"ViewPrescriptionRecordsAction", "method":"/**\r\n * Gets a PatientBean from an MID\r\n *\r\n * @param patientID\r\n * \t\tMID of the patient\r\n * @return PatientBean for the MID given\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PatientBean getPatient(long patientID) throws iTrustException {\r\n    return patientDAO.getPatient(patientID);\r\n}"},
 {"id":1249, "methodname":"getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"getPrescribingDoctor", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescribingDoctor", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":195, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction", "shortclassname":"ViewPrescriptionRecordsAction", "method":"/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * \t\titem in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}"},
 {"id":1250, "methodname":"getPrescriptionsForPatient(long)", "methodnamerefined":"getPrescriptionsForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescriptionsForPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "classid":195, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction", "shortclassname":"ViewPrescriptionRecordsAction", "method":"/**\r\n * Returns all the prescriptions for a given patient\r\n *\r\n * @param patientID\r\n * \t\tpatient in question\r\n * @return list of all the prescriptions for that patient\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getPrescriptionsForPatient(long patientID) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(patientID);\r\n    if ((loggedInMID) == patientID) {\r\n        return patientDAO.getPrescriptions(patientID);\r\n    }\r\n    List<String> toList = new ArrayList<String>();\r\n    toList.add(patient.getEmail());\r\n    List<PatientBean> representatives = patientDAO.getRepresenting(patientID);\r\n    for (PatientBean representative : representatives) {\r\n        if ((loggedInMID) == (representative.getMID())) {\r\n            return patientDAO.getPrescriptions(patientID);\r\n        }\r\n        toList.add(representative.getEmail());\r\n    }\r\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);\r\n    for (PersonnelBean dlhcp : dlhcps) {\r\n        if ((loggedInMID) == (dlhcp.getMID())) {\r\n            return patientDAO.getPrescriptions(patientID);\r\n        }\r\n        List<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());\r\n        for (PersonnelBean uap : uaps) {\r\n            if ((loggedInMID) == (uap.getMID())) {\r\n                return patientDAO.getPrescriptions(patientID);\r\n            }\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    email.setToList(toList);\r\n    email.setFrom(\"noreply@itrust.com\");// $NON-NLS-1$\r\n\r\n    email.setSubject(Messages.getString(\"ViewPrescriptionRecordsAction.1\"));// $NON-NLS-1$\r\n\r\n    email.setBody(Messages.getString(\"ViewPrescriptionRecordsAction.2\"));// $NON-NLS-1$\r\n\r\n    emailer.sendEmail(email);\r\n    return patientDAO.getPrescriptions(patientID);\r\n}"},
 {"id":1251, "methodname":"getRepresentees()", "methodnamerefined":"getRepresentees", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getRepresentees", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getRepresentees()", "classid":195, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction", "shortclassname":"ViewPrescriptionRecordsAction", "method":"/**\r\n * Gets the logged in persons representees\r\n *\r\n * @return list of PatientBeans holding the representees\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getRepresentees() throws iTrustException {\r\n    return patientDAO.getRepresented(loggedInMID);\r\n}"},
 {"id":1252, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.-init-()", "classid":196, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest", "shortclassname":"ViewPrescriptionRecordsActionTest", "method":"ViewPrescriptionRecordsActionTest() {\r\n}"},
 {"id":1253, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.setUp()", "classid":196, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest", "shortclassname":"ViewPrescriptionRecordsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":1254, "methodname":"testGetPatient()", "methodnamerefined":"testGetPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.testGetPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.testGetPatient()", "classid":196, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest", "shortclassname":"ViewPrescriptionRecordsActionTest", "method":"public void testGetPatient() throws Exception {\r\n    action = new ViewPrescriptionRecordsAction(factory, 9000000000L);\r\n    PatientBean patient = action.getPatient(1L);\r\n    assertEquals(\"Random\", patient.getFirstName());\r\n    assertEquals(\"Person\", patient.getLastName());\r\n}"},
 {"id":1255, "methodname":"testGetPrescribingDoctor()", "methodnamerefined":"testGetPrescribingDoctor", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.testGetPrescribingDoctor", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.testGetPrescribingDoctor()", "classid":196, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest", "shortclassname":"ViewPrescriptionRecordsActionTest", "method":"public void testGetPrescribingDoctor() throws Exception {\r\n    action = new ViewPrescriptionRecordsAction(factory, 2L);\r\n    PrescriptionBean prescription = new PrescriptionBean();\r\n    prescription.setVisitID(955L);\r\n    PersonnelBean personnel = action.getPrescribingDoctor(prescription);\r\n    assertEquals(9000000000L, personnel.getMID());\r\n}"},
 {"id":1256, "methodname":"testGetPrescriptionsForPatient()", "methodnamerefined":"testGetPrescriptionsForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.testGetPrescriptionsForPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.testGetPrescriptionsForPatient()", "classid":196, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest", "shortclassname":"ViewPrescriptionRecordsActionTest", "method":"public void testGetPrescriptionsForPatient() throws Exception {\r\n    action = new ViewPrescriptionRecordsAction(factory, 1L);\r\n    List<PrescriptionBean> prescriptions = action.getPrescriptionsForPatient(1L);\r\n    assertEquals(0, prescriptions.size());\r\n    action = new ViewPrescriptionRecordsAction(factory, 2L);\r\n    prescriptions = action.getPrescriptionsForPatient(2L);\r\n    assertEquals(3, prescriptions.size());\r\n    assertEquals(\"647641512\", prescriptions.get(2).getMedication().getNDCode());\r\n    assertEquals(\"009042407\", prescriptions.get(0).getMedication().getNDCode());\r\n    assertEquals(\"009042407\", prescriptions.get(1).getMedication().getNDCode());\r\n    prescriptions = action.getPrescriptionsForPatient(1L);\r\n    assertEquals(0, prescriptions.size());\r\n    action = new ViewPrescriptionRecordsAction(factory, 9000000000L);\r\n    prescriptions = action.getPrescriptionsForPatient(2L);\r\n    assertEquals(3, prescriptions.size());\r\n    assertEquals(\"647641512\", prescriptions.get(2).getMedication().getNDCode());\r\n    assertEquals(\"009042407\", prescriptions.get(0).getMedication().getNDCode());\r\n    assertEquals(\"009042407\", prescriptions.get(1).getMedication().getNDCode());\r\n}"},
 {"id":1257, "methodname":"testGetRepresentees()", "methodnamerefined":"testGetRepresentees", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.testGetRepresentees", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest.testGetRepresentees()", "classid":196, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsActionTest", "shortclassname":"ViewPrescriptionRecordsActionTest", "method":"public void testGetRepresentees() throws Exception {\r\n    action = new ViewPrescriptionRecordsAction(factory, 2L);\r\n    List<PatientBean> representees = action.getRepresentees();\r\n    assertEquals(6, representees.size());\r\n    assertEquals(1, representees.get(0).getMID());\r\n    assertEquals(3, representees.get(1).getMID());\r\n}"},
 {"id":1258, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":197, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction", "shortclassname":"ViewPrescriptionRenewalNeedsAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the prescription renewals.\r\n */\r\npublic ViewPrescriptionRenewalNeedsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":1259, "methodname":"getRenewalNeedsPatients()", "methodnamerefined":"getRenewalNeedsPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction.getRenewalNeedsPatients", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction.getRenewalNeedsPatients()", "classid":197, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction", "shortclassname":"ViewPrescriptionRenewalNeedsAction", "method":"/**\r\n * Uses PatientDAO as a helper class to return a list of patients with a special-diagnosis-history who\r\n * have the logged in HCP as a DHCP and whose medications are going to\r\n * expire within seven days.\r\n *\r\n * @return A list of PatientBeans\r\n */\r\npublic List<PatientBean> getRenewalNeedsPatients() {\r\n    try {\r\n        return patientDAO.getRenewalNeedsPatients(loggedInMID);\r\n    } catch (DBException e) {\r\n        System.out.println(Messages.getString(\"ViewPrescriptionRenewalNeedsAction.1\"));// $NON-NLS-1$\r\n\r\n        System.out.println(e);\r\n        return null;\r\n    }\r\n}"},
 {"id":1260, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.-init-()", "classid":198, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest", "shortclassname":"ViewPrescriptionRenewalNeedsActionTest", "method":"ViewPrescriptionRenewalNeedsActionTest() {\r\n}"},
 {"id":1261, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.setUp()", "classid":198, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest", "shortclassname":"ViewPrescriptionRenewalNeedsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hospitals();\r\n    gen.hcp2();\r\n    gen.hcp1();\r\n    gen.hcp3();\r\n    gen.hcp0();\r\n    gen.ndCodes();\r\n    gen.icd9cmCodes();\r\n    gen.patient9();\r\n    gen.patient11();\r\n    gen.patient14();\r\n    gen.UC32Acceptance();\r\n}"},
 {"id":1262, "methodname":"testDBException()", "methodnamerefined":"testDBException", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.testDBException", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.testDBException()", "classid":198, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest", "shortclassname":"ViewPrescriptionRenewalNeedsActionTest", "method":"public void testDBException() throws Exception {\r\n    factory = EvilDAOFactory.getEvilInstance();\r\n    action = new ViewPrescriptionRenewalNeedsAction(factory, (-1L));\r\n    List<PatientBean> patients = action.getRenewalNeedsPatients();\r\n    assert (patients.size()) == 0;\r\n}"},
 {"id":1263, "methodname":"testThreePatients()", "methodnamerefined":"testThreePatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.testThreePatients", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.testThreePatients()", "classid":198, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest", "shortclassname":"ViewPrescriptionRenewalNeedsActionTest", "method":"public void testThreePatients() throws Exception {\r\n    action = new ViewPrescriptionRenewalNeedsAction(factory, 9900000000L);\r\n    List<PatientBean> patients = action.getRenewalNeedsPatients();\r\n    assertEquals(3, patients.size());\r\n    assertEquals(\"Zack\", patients.get(0).getFirstName());\r\n    assertEquals(\"Darryl\", patients.get(1).getFirstName());\r\n    assertEquals(\"Marie\", patients.get(2).getFirstName());\r\n}"},
 {"id":1264, "methodname":"testTwoPatients()", "methodnamerefined":"testTwoPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.testTwoPatients", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.testTwoPatients()", "classid":198, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest", "shortclassname":"ViewPrescriptionRenewalNeedsActionTest", "method":"public void testTwoPatients() throws Exception {\r\n    action = new ViewPrescriptionRenewalNeedsAction(factory, 9000000003L);\r\n    List<PatientBean> patients = action.getRenewalNeedsPatients();\r\n    assertEquals(\"Andy\", patients.get(0).getFirstName());\r\n    assertEquals(\"Koopa\", patients.get(0).getLastName());\r\n    assertEquals(\"919-212-3433\", patients.get(1).getPhone());\r\n    assertEquals(\"prince@gmail.com\", patients.get(1).getEmail());\r\n}"},
 {"id":1265, "methodname":"testZeroPatients()", "methodnamerefined":"testZeroPatients", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.testZeroPatients", "fullmethod":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest.testZeroPatients()", "classid":198, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsActionTest", "shortclassname":"ViewPrescriptionRenewalNeedsActionTest", "method":"public void testZeroPatients() throws Exception {\r\n    action = new ViewPrescriptionRenewalNeedsAction(factory, 9990000000L);\r\n    List<PatientBean> patients = action.getRenewalNeedsPatients();\r\n    assertNotNull(patients);\r\n    assertEquals(0, patients.size());\r\n}"},
 {"id":1266, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":199, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction", "shortclassname":"ViewReceivingReferralsAction", "method":"public ViewReceivingReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.hcpID = patientID;\r\n}"},
 {"id":1267, "methodname":"getOVDate(long)", "methodnamerefined":"getOVDate", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getOVDate", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getOVDate(long)", "classid":199, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction", "shortclassname":"ViewReceivingReferralsAction", "method":"public OfficeVisitBean getOVDate(long id) throws DBException {\r\n    return ovDAO.getOfficeVisit(id);\r\n}"},
 {"id":1268, "methodname":"getReferralByID(int)", "methodnamerefined":"getReferralByID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getReferralByID", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getReferralByID(int)", "classid":199, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction", "shortclassname":"ViewReceivingReferralsAction", "method":"public ReferralBean getReferralByID(int id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}"},
 {"id":1269, "methodname":"getReferralsForReceivingHCP()", "methodnamerefined":"getReferralsForReceivingHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getReferralsForReceivingHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getReferralsForReceivingHCP()", "classid":199, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction", "shortclassname":"ViewReceivingReferralsAction", "method":"public List<ReferralBean> getReferralsForReceivingHCP() throws DBException {\r\n    return referralDAO.getReferralsForReceivingHCP(hcpID);\r\n}"},
 {"id":1270, "methodname":"getReferralsForReceivingHCPUnread()", "methodnamerefined":"getReferralsForReceivingHCPUnread", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getReferralsForReceivingHCPUnread", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.getReferralsForReceivingHCPUnread()", "classid":199, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction", "shortclassname":"ViewReceivingReferralsAction", "method":"public int getReferralsForReceivingHCPUnread() throws DBException {\r\n    return referralDAO.getReferralsForReceivingHCPUnread(hcpID).size();\r\n}"},
 {"id":1271, "methodname":"updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"updateReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.updateReferral", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":199, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction", "shortclassname":"ViewReceivingReferralsAction", "method":"public boolean updateReferral(ReferralBean bean) throws DBException {\r\n    referralDAO.editReferral(bean);\r\n    return true;\r\n}"},
 {"id":1272, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.-init-()", "classid":200, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest", "shortclassname":"ViewReceivingReferralsActionTest", "method":"ViewReceivingReferralsActionTest() {\r\n}"},
 {"id":1273, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.setUp()", "classid":200, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest", "shortclassname":"ViewReceivingReferralsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    action = new ViewReceivingReferralsAction(factory, 9000000003L);\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":1274, "methodname":"testGetOVDate()", "methodnamerefined":"testGetOVDate", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testGetOVDate", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testGetOVDate()", "classid":200, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest", "shortclassname":"ViewReceivingReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#getOVDate(long)}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testGetOVDate() throws DBException {\r\n    OfficeVisitBean b = action.getOVDate(955L);\r\n    assertEquals(955, b.getID());\r\n    assertEquals(9000000000L, b.getHcpID());\r\n    assertEquals(2L, b.getPatientID());\r\n    assertEquals(\"Yet another office visit.\", b.getNotes());\r\n    assertEquals(\"06/10/2007\", b.getVisitDateStr());\r\n}"},
 {"id":1275, "methodname":"testGetReferralByID()", "methodnamerefined":"testGetReferralByID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testGetReferralByID", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testGetReferralByID()", "classid":200, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest", "shortclassname":"ViewReceivingReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#getReferralByID(int)}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testGetReferralByID() throws DBException {\r\n    ReferralBean b = action.getReferralByID(1);\r\n    assertEquals(1, b.getId());\r\n    assertEquals(1, b.getPriority());\r\n    assertEquals(2L, b.getPatientID());\r\n    assertEquals(9000000000L, b.getSenderID());\r\n    assertEquals(9000000003L, b.getReceiverID());\r\n    assertEquals(\"Gandalf will make sure that the virus does not get past your immune system\", b.getReferralDetails());\r\n    assertEquals(955L, b.getOvid());\r\n    assertFalse(b.isViewedByHCP());\r\n    assertFalse(b.isViewedByPatient());\r\n}"},
 {"id":1276, "methodname":"testGetReferralsForReceivingHCP()", "methodnamerefined":"testGetReferralsForReceivingHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testGetReferralsForReceivingHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testGetReferralsForReceivingHCP()", "classid":200, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest", "shortclassname":"ViewReceivingReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#getReferralsForReceivingHCP()}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testGetReferralsForReceivingHCP() throws DBException {\r\n    List<ReferralBean> bean = action.getReferralsForReceivingHCP();\r\n    assertEquals(9, bean.size());\r\n    assertEquals(1, bean.get(0).getPriority());\r\n    assertEquals(1, bean.get(1).getPriority());\r\n    assertEquals(1, bean.get(2).getPriority());\r\n    assertEquals(1, bean.get(3).getPriority());\r\n    assertEquals(2, bean.get(4).getPriority());\r\n    assertEquals(2, bean.get(5).getPriority());\r\n    assertEquals(3, bean.get(6).getPriority());\r\n    assertEquals(1, bean.get(1).getId());\r\n    assertEquals(1, bean.get(1).getPriority());\r\n    assertEquals(2L, bean.get(1).getPatientID());\r\n    assertEquals(9000000000L, bean.get(1).getSenderID());\r\n    assertEquals(9000000003L, bean.get(1).getReceiverID());\r\n    assertEquals(\"Gandalf will make sure that the virus does not get past your immune system\", bean.get(1).getReferralDetails());\r\n    assertEquals(955L, bean.get(1).getOvid());\r\n    assertFalse(bean.get(1).isViewedByHCP());\r\n    assertFalse(bean.get(1).isViewedByPatient());\r\n}"},
 {"id":1277, "methodname":"testGetReferralsForReceivingHCPUnread()", "methodnamerefined":"testGetReferralsForReceivingHCPUnread", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testGetReferralsForReceivingHCPUnread", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testGetReferralsForReceivingHCPUnread()", "classid":200, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest", "shortclassname":"ViewReceivingReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#getReferralsForReceivingHCPUnread()}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testGetReferralsForReceivingHCPUnread() throws DBException {\r\n    int number = action.getReferralsForReceivingHCPUnread();\r\n    assertEquals(7, number);\r\n    ReferralBean b = action.getReferralByID(1);\r\n    b.setViewedByHCP(true);\r\n    action.updateReferral(b);\r\n    number = action.getReferralsForReceivingHCPUnread();\r\n    assertEquals(6, number);\r\n}"},
 {"id":1278, "methodname":"testUpdateReferral()", "methodnamerefined":"testUpdateReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testUpdateReferral", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest.testUpdateReferral()", "classid":200, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsActionTest", "shortclassname":"ViewReceivingReferralsActionTest", "method":"/**\r\n * Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)}.\r\n *\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void testUpdateReferral() throws DBException {\r\n    ReferralBean b = action.getReferralByID(1);\r\n    assertEquals(1, b.getId());\r\n    assertEquals(1, b.getPriority());\r\n    assertEquals(2L, b.getPatientID());\r\n    assertEquals(9000000000L, b.getSenderID());\r\n    assertEquals(9000000003L, b.getReceiverID());\r\n    assertEquals(\"Gandalf will make sure that the virus does not get past your immune system\", b.getReferralDetails());\r\n    assertEquals(955L, b.getOvid());\r\n    assertFalse(b.isViewedByHCP());\r\n    assertFalse(b.isViewedByPatient());\r\n    b.setPriority(2);\r\n    b.setViewedByHCP(true);\r\n    b.setViewedByPatient(true);\r\n    action.updateReferral(b);\r\n    b = action.getReferralByID(1);\r\n    assertEquals(1, b.getId());\r\n    assertEquals(2, b.getPriority());\r\n    assertEquals(2L, b.getPatientID());\r\n    assertEquals(9000000000L, b.getSenderID());\r\n    assertEquals(9000000003L, b.getReceiverID());\r\n    assertEquals(\"Gandalf will make sure that the virus does not get past your immune system\", b.getReferralDetails());\r\n    assertEquals(955L, b.getOvid());\r\n    assertTrue(b.isViewedByHCP());\r\n    assertTrue(b.isViewedByPatient());\r\n}"},
 {"id":1279, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":201, "classname":"edu.ncsu.csc.itrust.action.ViewReportAction", "shortclassname":"ViewReportAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the report.\r\n */\r\npublic ViewReportAction(DAOFactory factory, long loggedInMID) {\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":1280, "methodname":"getDeclaredHCPs(long)", "methodnamerefined":"getDeclaredHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportAction.getDeclaredHCPs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportAction.getDeclaredHCPs(long)", "classid":201, "classname":"edu.ncsu.csc.itrust.action.ViewReportAction", "shortclassname":"ViewReportAction", "method":"/**\r\n * Get declared HCPs list for the given patient\r\n *\r\n * @param pid\r\n * \t\tthe patient of interest\r\n * @return list of declared HCPs\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getDeclaredHCPs(long pid) throws iTrustException {\r\n    return patientDAO.getDeclaredHCPs(pid);\r\n}"},
 {"id":1281, "methodname":"getDiagnoses(long)", "methodnamerefined":"getDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportAction.getDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportAction.getDiagnoses(long)", "classid":201, "classname":"edu.ncsu.csc.itrust.action.ViewReportAction", "shortclassname":"ViewReportAction", "method":"/**\r\n * Get diagnosis list for the given patient\r\n *\r\n * @param pid\r\n * \t\tthe patient of interest\r\n * @return list of diagnoses\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<DiagnosisBean> getDiagnoses(long pid) throws iTrustException {\r\n    return patientDAO.getDiagnoses(pid);\r\n}"},
 {"id":1282, "methodname":"getPatient(long)", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportAction.getPatient", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportAction.getPatient(long)", "classid":201, "classname":"edu.ncsu.csc.itrust.action.ViewReportAction", "shortclassname":"ViewReportAction", "method":"/**\r\n * Returns a PaitentBean when given an MID\r\n *\r\n * @param mid\r\n * \t\tpatient of interest\r\n * @return PatientBean of the given HCP\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PatientBean getPatient(long mid) throws iTrustException {\r\n    return patientDAO.getPatient(mid);\r\n}"},
 {"id":1283, "methodname":"getPersonnel(long)", "methodnamerefined":"getPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportAction.getPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportAction.getPersonnel(long)", "classid":201, "classname":"edu.ncsu.csc.itrust.action.ViewReportAction", "shortclassname":"ViewReportAction", "method":"/**\r\n * Returns a PersonnelBean when given an MID\r\n *\r\n * @param mid\r\n * \t\tHCP of interest\r\n * @return PersonnelBean of the given HCP\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPersonnel(long mid) throws iTrustException {\r\n    return personnelDAO.getPersonnel(mid);\r\n}"},
 {"id":1284, "methodname":"getPrescriptions(long)", "methodnamerefined":"getPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportAction.getPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportAction.getPrescriptions(long)", "classid":201, "classname":"edu.ncsu.csc.itrust.action.ViewReportAction", "shortclassname":"ViewReportAction", "method":"/**\r\n * Get prescription list for the given patient\r\n *\r\n * @param pid\r\n * \t\tthe patient of interest\r\n * @return list of prescriptions\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getPrescriptions(long pid) throws iTrustException {\r\n    return patientDAO.getCurrentPrescriptions(pid);\r\n}"},
 {"id":1285, "methodname":"getProcedures(long)", "methodnamerefined":"getProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportAction.getProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportAction.getProcedures(long)", "classid":201, "classname":"edu.ncsu.csc.itrust.action.ViewReportAction", "shortclassname":"ViewReportAction", "method":"/**\r\n * Get procedure list for the given patient\r\n *\r\n * @param pid\r\n * \t\tthe patient of interest\r\n * @return list of procedures\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic List<ProcedureBean> getProcedures(long pid) throws iTrustException {\r\n    return patientDAO.getProcedures(pid);\r\n}"},
 {"id":1286, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportActionTest.-init-()", "classid":202, "classname":"edu.ncsu.csc.itrust.action.ViewReportActionTest", "shortclassname":"ViewReportActionTest", "method":"ViewReportActionTest() {\r\n}"},
 {"id":1287, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportActionTest.setUp()", "classid":202, "classname":"edu.ncsu.csc.itrust.action.ViewReportActionTest", "shortclassname":"ViewReportActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n}"},
 {"id":1288, "methodname":"testGetDeclaredHCPs()", "methodnamerefined":"testGetDeclaredHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetDeclaredHCPs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetDeclaredHCPs()", "classid":202, "classname":"edu.ncsu.csc.itrust.action.ViewReportActionTest", "shortclassname":"ViewReportActionTest", "method":"public void testGetDeclaredHCPs() throws Exception {\r\n    gen.hcp3();\r\n    List<PersonnelBean> list = action.getDeclaredHCPs(2L);\r\n    assertEquals(1, list.size());\r\n}"},
 {"id":1289, "methodname":"testGetDiagnoses()", "methodnamerefined":"testGetDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetDiagnoses()", "classid":202, "classname":"edu.ncsu.csc.itrust.action.ViewReportActionTest", "shortclassname":"ViewReportActionTest", "method":"public void testGetDiagnoses() throws Exception {\r\n    gen.icd9cmCodes();\r\n    List<DiagnosisBean> list = action.getDiagnoses(2L);\r\n    assertEquals(6, list.size());\r\n    DiagnosisBean bean = list.get(0);\r\n    assertEquals(\"250.10\", bean.getICDCode());\r\n    assertEquals(\"Diabetes with ketoacidosis\", bean.getDescription());\r\n}"},
 {"id":1290, "methodname":"testGetPatientl()", "methodnamerefined":"testGetPatientl", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetPatientl", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetPatientl()", "classid":202, "classname":"edu.ncsu.csc.itrust.action.ViewReportActionTest", "shortclassname":"ViewReportActionTest", "method":"public void testGetPatientl() throws iTrustException {\r\n    PatientBean bean = action.getPatient(2L);\r\n    assertEquals(\"Andy Programmer\", bean.getFullName());\r\n}"},
 {"id":1291, "methodname":"testGetPersonnel()", "methodnamerefined":"testGetPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetPersonnel()", "classid":202, "classname":"edu.ncsu.csc.itrust.action.ViewReportActionTest", "shortclassname":"ViewReportActionTest", "method":"public void testGetPersonnel() throws iTrustException {\r\n    PersonnelBean bean = action.getPersonnel(9000000000L);\r\n    assertEquals(\"Kelly Doctor\", bean.getFullName());\r\n    assertEquals(\"surgeon\", bean.getSpecialty());\r\n}"},
 {"id":1292, "methodname":"testGetPrescriptions()", "methodnamerefined":"testGetPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetPrescriptions()", "classid":202, "classname":"edu.ncsu.csc.itrust.action.ViewReportActionTest", "shortclassname":"ViewReportActionTest", "method":"public void testGetPrescriptions() throws Exception {\r\n    gen.ndCodes();\r\n    List<PrescriptionBean> list = action.getPrescriptions(2L);\r\n    assertEquals(1, list.size());\r\n    PrescriptionBean bean = list.get(0);\r\n    assertEquals(\"647641512\", bean.getMedication().getNDCode());\r\n    assertEquals(\"10/10/2006\", bean.getStartDateStr());\r\n    assertEquals(\"10/11/2020\", bean.getEndDateStr());\r\n    assertEquals(5, bean.getDosage());\r\n    assertEquals(\"Take twice daily\", bean.getInstructions());\r\n}"},
 {"id":1293, "methodname":"testGetProcedures()", "methodnamerefined":"testGetProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetProcedures", "fullmethod":"edu.ncsu.csc.itrust.action.ViewReportActionTest.testGetProcedures()", "classid":202, "classname":"edu.ncsu.csc.itrust.action.ViewReportActionTest", "shortclassname":"ViewReportActionTest", "method":"public void testGetProcedures() throws Exception {\r\n    gen.cptCodes();\r\n    List<ProcedureBean> list = action.getProcedures(2L);\r\n    assertEquals(1, list.size());\r\n    ProcedureBean bean = list.get(0);\r\n    assertEquals(\"1270F\", bean.getCPTCode());\r\n    assertEquals(\"Injection procedure\", bean.getDescription());\r\n}"},
 {"id":1294, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":203, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction", "shortclassname":"ViewSentReferralsAction", "method":"public ViewSentReferralsAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    this.hcpid = hcpid;\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":1295, "methodname":"getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":203, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction", "shortclassname":"ViewSentReferralsAction", "method":"/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void editReferral(ReferralBean bean) throws iTrustException {\nreferralDAO.editReferral(bean);\n}\n */\r\n/**\r\n * Delete an existing referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void deleteReferral(ReferralBean bean) throws iTrustException {\nreferralDAO.removeReferral(bean.getId());\n}\n */\r\n/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}"},
 {"id":1296, "methodname":"getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"getReceivingHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReceivingHCPName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":203, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction", "shortclassname":"ViewSentReferralsAction", "method":"/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}"},
 {"id":1297, "methodname":"getReferral(long)", "methodnamerefined":"getReferral", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferral", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferral(long)", "classid":203, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction", "shortclassname":"ViewSentReferralsAction", "method":"/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    return referralDAO.getReferral(id);\r\n}"},
 {"id":1298, "methodname":"getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "methodnamerefined":"getReferrals", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferrals", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "classid":203, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction", "shortclassname":"ViewSentReferralsAction", "method":"/**\r\n * Get all sent referrals sorted by the time they were created.\r\n *\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\n/* public List<VerboseReferralBean> getReferrals() throws DBException {\nreturn referralDAO.getSenderQuery(hcpid).query(\"timestamp\", SortDirection.DESCENDING);\n}\n */\r\n/**\r\n * Get all sent referrals sorted by the given field and in the given\r\n * direction.\r\n *\r\n * @param field\r\n * \t\tThe name of the pseudo-field to sort by.\r\n * @param dir\r\n * \t\tThe direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getSenderQuery(hcpid).query(field, dir);\r\n}"},
 {"id":1299, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.-init-()", "classid":204, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest", "shortclassname":"ViewSentReferralsActionTest", "method":"ViewSentReferralsActionTest() {\r\n}"},
 {"id":1300, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.setUp()", "classid":204, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest", "shortclassname":"ViewSentReferralsActionTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":1301, "methodname":"testGetPatientName()", "methodnamerefined":"testGetPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.testGetPatientName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.testGetPatientName()", "classid":204, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest", "shortclassname":"ViewSentReferralsActionTest", "method":"public void testGetPatientName() throws Exception {\r\n    long hcpid = 9000000000L;\r\n    action = new ViewSentReferralsAction(factory, hcpid);\r\n    ReferralBean bean = action.getReferral(2L);\r\n    assertEquals(\"Andy Programmer\", action.getPatientName(bean));\r\n}"},
 {"id":1302, "methodname":"testGetReceivingHCPName()", "methodnamerefined":"testGetReceivingHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.testGetReceivingHCPName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.testGetReceivingHCPName()", "classid":204, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest", "shortclassname":"ViewSentReferralsActionTest", "method":"public void testGetReceivingHCPName() throws Exception {\r\n    long hcpid = 9000000000L;\r\n    action = new ViewSentReferralsAction(factory, hcpid);\r\n    ReferralBean bean = action.getReferral(3L);\r\n    assertEquals(\"Gandalf Stormcrow\", action.getReceivingHCPName(bean));\r\n}"},
 {"id":1303, "methodname":"testGetReferrals()", "methodnamerefined":"testGetReferrals", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.testGetReferrals", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest.testGetReferrals()", "classid":204, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsActionTest", "shortclassname":"ViewSentReferralsActionTest", "method":"public void testGetReferrals() throws Exception {\r\n    long hcpid = 9000000000L;\r\n    action = new ViewSentReferralsAction(factory, hcpid);\r\n    String field = \"priority\";\r\n    SortDirection dir = SortDirection.ASCENDING;\r\n    List<VerboseReferralBean> list = action.getReferrals(field, dir);\r\n    assertEquals(1, list.get(0).getPriority());\r\n    assertEquals(1, list.get(1).getPriority());\r\n    assertEquals(1, list.get(2).getPriority());\r\n    assertEquals(1, list.get(3).getPriority());\r\n}"},
 {"id":1304, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":205, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction", "shortclassname":"ViewSurveyResultAction", "method":"/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving survey results.\r\n */\r\npublic ViewSurveyResultAction(DAOFactory factory, long loggedInMID) {\r\n    surveyResultDAO = factory.getSurveyResultDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new SurveySearchValidator();\r\n}"},
 {"id":1305, "methodname":"getSurveyResultsForHospital(edu.ncsu.csc.itrust.beans.SurveyResultBean)", "methodnamerefined":"getSurveyResultsForHospital", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForHospital", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForHospital(edu.ncsu.csc.itrust.beans.SurveyResultBean)", "classid":205, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction", "shortclassname":"ViewSurveyResultAction", "method":"/**\r\n * Retrieves survey results for a whole hospital.\r\n *\r\n * @param bean\r\n * \t\tThe SurveyResultBean containing the survey result specs.\r\n * @return A java.util.List of Survey Results.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForHospital(SurveyResultBean bean) throws FormValidationException, iTrustException {\r\n    return surveyResultDAO.getSurveyResultsForHospital(bean.getHCPhospital(), bean.getHCPspecialty());\r\n}"},
 {"id":1306, "methodname":"getSurveyResultsForZip(edu.ncsu.csc.itrust.beans.SurveyResultBean)", "methodnamerefined":"getSurveyResultsForZip", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForZip", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForZip(edu.ncsu.csc.itrust.beans.SurveyResultBean)", "classid":205, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction", "shortclassname":"ViewSurveyResultAction", "method":"/**\r\n * Retrieves survey results for a given zip code.\r\n *\r\n * @param bean\r\n * \t\tThe SurveyResultBean containing the survey result specs.\r\n * @return A java.util.List of Survey Results.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForZip(SurveyResultBean bean) throws FormValidationException, iTrustException {\r\n    validator.validate(bean);\r\n    return surveyResultDAO.getSurveyResultsForZip(bean.getHCPzip(), bean.getHCPspecialty());\r\n}"},
 {"id":1307, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.-init-()", "classid":206, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest", "shortclassname":"ViewSurveyResultsActionTest", "method":"ViewSurveyResultsActionTest() {\r\n}"},
 {"id":1308, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.setUp()", "classid":206, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest", "shortclassname":"ViewSurveyResultsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.surveyResults();\r\n}"},
 {"id":1309, "methodname":"testGetResultsByHopsitalID()", "methodnamerefined":"testGetResultsByHopsitalID", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.testGetResultsByHopsitalID", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.testGetResultsByHopsitalID()", "classid":206, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest", "shortclassname":"ViewSurveyResultsActionTest", "method":"public void testGetResultsByHopsitalID() throws Exception {\r\n    SurveyResultBean bean = new SurveyResultBean();\r\n    bean.setHCPhospital(\"9191919191\");\r\n    bean.setHCPspecialty(SurveyResultBean.ANY_SPECIALTY);\r\n    List<SurveyResultBean> list = action.getSurveyResultsForHospital(bean);\r\n    SurveyResultBean bean0 = list.get(0);\r\n    assertEquals(\"12345-1234\", bean0.getHCPzip());\r\n    assertEquals(\"Doctor\", bean0.getHCPLastName());\r\n    assertEquals(\"surgeon\", bean0.getHCPspecialty());// hardcoded surgeon b/c of the capitalization\r\n\r\n    // difference\r\n}"},
 {"id":1310, "methodname":"testGetResultsByWrongZip()", "methodnamerefined":"testGetResultsByWrongZip", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.testGetResultsByWrongZip", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.testGetResultsByWrongZip()", "classid":206, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest", "shortclassname":"ViewSurveyResultsActionTest", "method":"public void testGetResultsByWrongZip() throws Exception {\r\n    SurveyResultBean bean = new SurveyResultBean();\r\n    bean.setHCPzip(\"12388a\");\r\n    bean.setHCPspecialty(SurveyResultBean.SURGEON_SPECIALTY);\r\n    try {\r\n        action.getSurveyResultsForZip(bean);\r\n        fail(\"Exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals((\"Zip Code: \" + (ValidationFormat.ZIPCODE.getDescription())), e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":1311, "methodname":"testGetResultsByZipAndSpecialty()", "methodnamerefined":"testGetResultsByZipAndSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.testGetResultsByZipAndSpecialty", "fullmethod":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest.testGetResultsByZipAndSpecialty()", "classid":206, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultsActionTest", "shortclassname":"ViewSurveyResultsActionTest", "method":"public void testGetResultsByZipAndSpecialty() throws Exception {\r\n    SurveyResultBean bean = new SurveyResultBean();\r\n    bean.setHCPzip(\"12388\");\r\n    bean.setHCPspecialty(SurveyResultBean.SURGEON_SPECIALTY);\r\n    List<SurveyResultBean> list = action.getSurveyResultsForZip(bean);\r\n    SurveyResultBean bean0 = list.get(0);\r\n    assertEquals(\"12345-1234\", bean0.getHCPzip());\r\n    assertEquals(\"Doctor\", bean0.getHCPLastName());\r\n    assertEquals(\"surgeon\", bean0.getHCPspecialty());// hardcoded surgeon b/c of the capitalization\r\n\r\n    // difference\r\n}"},
 {"id":1312, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the visited HCPs.\r\n */\r\npublic ViewVisitedHCPsAction(DAOFactory factory, long loggedInMID) {\r\n    patientMID = loggedInMID;\r\n    docDAO = factory.getPersonnelDAO();\r\n    visitDAO = factory.getOfficeVisitDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    // visits = new ArrayList<HCPVisitBean>();\r\n    declareAction = new DeclareHCPAction(factory, loggedInMID);\r\n}"},
 {"id":1313, "methodname":"checkDeclared(long)", "methodnamerefined":"checkDeclared", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.checkDeclared", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.checkDeclared(long)", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Check to see if a given HCP is declared\r\n *\r\n * @param mid\r\n * \t\tHCP to check\r\n * @return true if the HCP is declared, otherwise false\r\n */\r\npublic boolean checkDeclared(long mid) throws DBException {\r\n    return patientDAO.checkDeclaredHCP(patientMID, mid);\r\n}"},
 {"id":1314, "methodname":"declareHCP(java.lang.String)", "methodnamerefined":"declareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.declareHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.declareHCP(java.lang.String)", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Set a given HCP as declared\r\n *\r\n * @param name\r\n * \t\tHCP to declare\r\n * @return An empty string.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String declareHCP(String name) throws iTrustException {\r\n    boolean match = false;\r\n    for (HCPVisitBean visit : getVisitedHCPs()) {\r\n        if (0 == (visit.getHCPName().toLowerCase().compareTo(name.toLowerCase()))) {\r\n            match = true;\r\n            Long mid = Long.valueOf(visit.getHCPMID());\r\n            if (!(patientDAO.checkDeclaredHCP(patientMID, visit.getHCPMID()))) {\r\n                declareAction.declareHCP(mid.toString());\r\n            }\r\n            visit.setDesignated(true);\r\n        }\r\n    }\r\n    if (!match) {\r\n        List<PersonnelBean> doclist = docDAO.getAllPersonnel();\r\n        for (PersonnelBean ele : doclist) {\r\n            if (0 == (name.compareTo(ele.getFullName()))) {\r\n                HCPVisitBean visitBean;\r\n                visitBean = new HCPVisitBean();\r\n                visitBean.setHCPMID(ele.getMID());\r\n                visitBean.setHCPName(ele.getFullName());\r\n                visitBean.setOVDate(\"\");\r\n                visitBean.setHCPSpecialty(ele.getSpecialty());\r\n                visitBean.setHCPAddr((((((((((ele.getStreetAddress1()) + \" \") + (ele.getStreetAddress2())) + \" \") + (ele.getCity())) + \", \") + (ele.getState())) + \" \") + (ele.getZip())));\r\n                visitBean.setDesignated(true);\r\n                Long mid = Long.valueOf(ele.getMID());\r\n                if (!(patientDAO.checkDeclaredHCP(patientMID, mid))) {\r\n                    declareAction.declareHCP(mid.toString());\r\n                    // visits.add(visitBean);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return \"\";\r\n}"},
 {"id":1315, "methodname":"filterHCPList(java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"filterHCPList", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.filterHCPList", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.filterHCPList(java.lang.String,java.lang.String,java.lang.String)", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Filter the list of HCPs by last name, specialty, or zip code.\r\n *\r\n * @param doc\r\n * \t\tFilter by lastName.  May be null or the empty string to\r\n * \t\tignore.\r\n * @param specialty\r\n * \t\tFilter by specialty.  May be null or the empty string\r\n * \t\tto ignore.\r\n * @param zip\r\n * \t\tFilter by zip.  May be null or the empty string to ignore.\r\n * @return Filtered list of HCPs.\r\n */\r\npublic List<HCPVisitBean> filterHCPList(String lastName, String specialty, String zip) {\r\n    List<HCPVisitBean> visits;\r\n    try {\r\n        visits = getAllVisitedHCPs(lastName, specialty, zip);\r\n    } catch (iTrustException ie) {\r\n        visits = new ArrayList<HCPVisitBean>();\r\n    }\r\n    return visits;\r\n}"},
 {"id":1316, "methodname":"getAllVisitedHCPs(java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"getAllVisitedHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getAllVisitedHCPs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getAllVisitedHCPs(java.lang.String,java.lang.String,java.lang.String)", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Get a list of all HCPs visited and/or designated by by the current\r\n * user.  The list can optionally be filtered by the doctors last name,\r\n * specialty, or zip code.\r\n *\r\n * @param lastName\r\n * \t\tThe last name (or a part of it) of the doctor to search\r\n * \t\tfor, or null or an empty string to accept all doctors.\r\n * @param specialty\r\n * \t\tThe specialty of the doctor to search for, or null or\r\n * \t\tan empty string to accept all doctors.\r\n * @param zip\r\n * \t\tThe zip code of the doctor to search for, or null or an empty\r\n * \t\tstring to accept all doctors.\r\n * @return A list of HCPVisitBeans where each represents one HCP that has\r\nbeen visited or has been designated.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate List<HCPVisitBean> getAllVisitedHCPs(String lastName, String specialty, String zip) throws iTrustException {\r\n    // Visited HCPs in this case includes both HCPs visited *and* HCPs\r\n    // designated by the patient.  These two groups are retrieved in\r\n    // different ways, then combined.\r\n    List<HCPVisitBean> visits = new ArrayList<HCPVisitBean>();\r\n    try {\r\n        List<OfficeVisitBean> ovlist = visitDAO.getAllOfficeVisits(patientMID);\r\n        // get most recent office visit for each provider\r\n        LinkedHashMap<Long, OfficeVisitBean> mostRecentVisits = new LinkedHashMap<Long, OfficeVisitBean>();\r\n        for (OfficeVisitBean ov : ovlist) {\r\n            long id = ov.getHcpID();\r\n            if (!(mostRecentVisits.containsKey(id))) {\r\n                mostRecentVisits.put(id, ov);\r\n            } else {\r\n                OfficeVisitBean old = mostRecentVisits.get(id);\r\n                Date ovDate = ov.getVisitDate();\r\n                Date oldDate = old.getVisitDate();\r\n                if (oldDate.before(ovDate)) {\r\n                    mostRecentVisits.put(id, ov);\r\n                }\r\n            }\r\n        }\r\n        // Get visited HCPs.\r\n        for (OfficeVisitBean ov : mostRecentVisits.values()) {\r\n            long hcpid = ov.getHcpID();\r\n            PersonnelBean pb = docDAO.getPersonnel(hcpid);\r\n            if (matchPersonnel(pb, lastName, specialty, zip)) {\r\n                HCPVisitBean visitBean = makeHCPVisitBean(pb, mostRecentVisits.get(hcpid).getVisitDateStr());\r\n                visits.add(visitBean);\r\n            }\r\n        }\r\n        // Get all designated HCPs.  Because a designated HCP may have been\r\n        // visited, we will ensure the HCP is not already in the list.\r\n        List<PersonnelBean> dhcps = patientDAO.getDeclaredHCPs(patientMID);\r\n        next : for (PersonnelBean pb : dhcps) {\r\n            if (matchPersonnel(pb, lastName, specialty, zip)) {\r\n                long hcpid = pb.getMID();\r\n                // if HCP is already in visits list, skip here\r\n                for (HCPVisitBean hv : visits) {\r\n                    if ((hv.getHCPMID()) == hcpid) {\r\n                        continue next;\r\n                    }\r\n                }\r\n                String date = \"\";\r\n                HCPVisitBean visitBean = makeHCPVisitBean(pb, date);\r\n                visits.add(visitBean);\r\n            }\r\n        }\r\n    } catch (DBException dbe) {\r\n        throw new iTrustException(dbe.getMessage());\r\n    }\r\n    return visits;\r\n}"},
 {"id":1317, "methodname":"getNamedHCP(java.lang.String)", "methodnamerefined":"getNamedHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getNamedHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getNamedHCP(java.lang.String)", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Given an HCPs name, return the corresponding HCPVisitBean.\r\n *\r\n * @param name\r\n * \t\t\r\n * @return \r\n */\r\npublic HCPVisitBean getNamedHCP(String name) {\r\n    HCPVisitBean r = new HCPVisitBean();\r\n    for (HCPVisitBean bean : getVisitedHCPs()) {\r\n        if (name.equals(bean.getHCPName())) {\r\n            r = bean;\r\n            break;\r\n        }\r\n    }\r\n    return r;\r\n}"},
 {"id":1318, "methodname":"getVisitedHCPs()", "methodnamerefined":"getVisitedHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getVisitedHCPs", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.getVisitedHCPs()", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Returns a list of all the visited and/or designated HCPs.\r\n *\r\n * @return list of all the visited HCPs\r\n */\r\npublic List<HCPVisitBean> getVisitedHCPs() {\r\n    List<HCPVisitBean> visits;\r\n    try {\r\n        visits = getAllVisitedHCPs(null, null, null);\r\n    } catch (iTrustException ie) {\r\n        visits = new ArrayList<HCPVisitBean>();\r\n    }\r\n    return visits;\r\n}"},
 {"id":1319, "methodname":"makeHCPVisitBean(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String)", "methodnamerefined":"makeHCPVisitBean", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.makeHCPVisitBean", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.makeHCPVisitBean(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String)", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Create an HCPVisitBean from a given PersonnelBean and office visit date.\r\n *\r\n * @param pb\r\n * \t\tThe PersonnelBean that will be visited.\r\n * @param visitDate\r\n * \t\tThe date of the visit.  This may be the empty string.\r\n * @return The new HCPVisitBean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate HCPVisitBean makeHCPVisitBean(PersonnelBean pb, String visitDate) throws DBException {\r\n    long hcpid = pb.getMID();\r\n    HCPVisitBean visitBean = new HCPVisitBean();\r\n    visitBean.setHCPMID(hcpid);\r\n    visitBean.setHCPName(pb.getFullName());\r\n    visitBean.setOVDate(visitDate);\r\n    visitBean.setHCPSpecialty(pb.getSpecialty());\r\n    visitBean.setHCPAddr((((((((((pb.getStreetAddress1()) + \" \") + (pb.getStreetAddress2())) + \" \") + (pb.getCity())) + \", \") + (pb.getState())) + \" \") + (pb.getZip())));\r\n    visitBean.setDesignated(patientDAO.checkDeclaredHCP(patientMID, hcpid));\r\n    return visitBean;\r\n}"},
 {"id":1320, "methodname":"matchPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"matchPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.matchPersonnel", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.matchPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String,java.lang.String,java.lang.String)", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Checks to see if a PersonnelBean matches against a given set of\r\n * criteria.\r\n *\r\n * @param pb\r\n * \t\tThe PersonnelBean to check.\r\n * @param lastName\r\n * \t\tThe last name to check against.  May be null or the empty string to ignore.\r\n * @param specialty\r\n * \t\tThe specialty to check against.  May be null or the empty string to ignore.\r\n * @param zip\r\n * \t\tThe zip code to check against.  May be null or the empty string to ignore.\r\n * @return true if the PersonnelBean matches all the given parameters, or false otherwise.\r\n */\r\nprivate boolean matchPersonnel(PersonnelBean pb, String lastName, String specialty, String zip) {\r\n    if (((lastName != null) && (!(lastName.equals(\"\")))) && (!(pb.getLastName().startsWith(lastName)))) {\r\n        return false;\r\n    }\r\n    if (((specialty != null) && (!(specialty.equals(\"\")))) && (!(specialty.equals(pb.getSpecialty())))) {\r\n        return false;\r\n    }\r\n    if (((zip != null) && (!(zip.equals(\"\")))) && (!(zip.equals(pb.getZip())))) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":1321, "methodname":"undeclareHCP(java.lang.String)", "methodnamerefined":"undeclareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.undeclareHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.undeclareHCP(java.lang.String)", "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "shortclassname":"ViewVisitedHCPsAction", "method":"/**\r\n * Set a given HCP as undeclared.\r\n *\r\n * @param name\r\n * \t\tHCP to undeclare.\r\n * @return An empty string.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String undeclareHCP(String name) throws iTrustException {\r\n    for (HCPVisitBean visit : getVisitedHCPs()) {\r\n        if (0 == (visit.getHCPName().toLowerCase().compareTo(name.toLowerCase()))) {\r\n            Long mid = Long.valueOf(visit.getHCPMID());\r\n            declareAction.undeclareHCP(mid.toString());\r\n            // }\r\n            visit.setDesignated(false);\r\n            /* if (0 == visit.getOVDate().compareTo(\"\")) {\n            remove = visit;\n            }\n             */\r\n        }\r\n    }\r\n    return \"\";\r\n}"},
 {"id":1322, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.-init-()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"ViewVisitedHCPsActionTest() {\r\n}"},
 {"id":1323, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.setUp()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patient_hcp_vists();\r\n    action = new ViewVisitedHCPsAction(factory, 2L);\r\n    action2 = new ViewVisitedHCPsAction(factory, 1L);\r\n}"},
 {"id":1324, "methodname":"testCheckDeclared()", "methodnamerefined":"testCheckDeclared", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testCheckDeclared", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testCheckDeclared()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testCheckDeclared() throws Exception {\r\n    assertEquals(false, action.checkDeclared(0));\r\n    assertEquals(true, action.checkDeclared(9000000003L));\r\n    assertEquals(false, action.checkDeclared(9668301824L));\r\n    assertEquals(false, action.checkDeclared(9000000000L));\r\n}"},
 {"id":1325, "methodname":"testDeclareAndUndeclareHCP()", "methodnamerefined":"testDeclareAndUndeclareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testDeclareAndUndeclareHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testDeclareAndUndeclareHCP()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testDeclareAndUndeclareHCP() throws Exception {\r\n    action.declareHCP(\"Kelly Doctor\");\r\n    assertEquals(true, action.checkDeclared(9000000000L));\r\n    action.undeclareHCP(\"Kelly Doctor\");\r\n    assertEquals(false, action.checkDeclared(9000000000L));\r\n}"},
 {"id":1326, "methodname":"testDeclareHCP()", "methodnamerefined":"testDeclareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testDeclareHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testDeclareHCP()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testDeclareHCP() throws Exception {\r\n    assertEquals(false, action2.checkDeclared(9010000006L));\r\n    action2.declareHCP(\"Mary Shelley\");\r\n    assertEquals(true, action2.checkDeclared(9010000006L));\r\n}"},
 {"id":1327, "methodname":"testFilterHCPList1()", "methodnamerefined":"testFilterHCPList1", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPList1", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPList1()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testFilterHCPList1() {\r\n    // Get all visited HCPs without any filtering. (The empty strings are\r\n    // ignored.)\r\n    List<HCPVisitBean> beanslist = action.filterHCPList(\"\", \"\", \"\");\r\n    ArrayList<HCPVisitBean> beans = new ArrayList<HCPVisitBean>(beanslist);\r\n    assertEquals(5, beans.size());\r\n    assertEquals(\"Kelly Doctor\", beans.get(4).getHCPName());\r\n    assertEquals(\"Jason Frankenstein\", beans.get(3).getHCPName());\r\n    assertEquals(\"Lauren Frankenstein\", beans.get(2).getHCPName());\r\n    assertEquals(\"Mary Shelley\", beans.get(1).getHCPName());\r\n    assertEquals(\"Gandalf Stormcrow\", beans.get(0).getHCPName());\r\n}"},
 {"id":1328, "methodname":"testFilterHCPList2()", "methodnamerefined":"testFilterHCPList2", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPList2", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPList2()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testFilterHCPList2() {\r\n    // Get all visited HCPs without any filtering. (The nulls are ignored.)\r\n    List<HCPVisitBean> beanslist = action.filterHCPList(null, null, null);\r\n    ArrayList<HCPVisitBean> beans = new ArrayList<HCPVisitBean>(beanslist);\r\n    assertEquals(5, beans.size());\r\n    assertEquals(\"Kelly Doctor\", beans.get(4).getHCPName());\r\n    assertEquals(\"Jason Frankenstein\", beans.get(3).getHCPName());\r\n    assertEquals(\"Lauren Frankenstein\", beans.get(2).getHCPName());\r\n    assertEquals(\"Mary Shelley\", beans.get(1).getHCPName());\r\n    assertEquals(\"Gandalf Stormcrow\", beans.get(0).getHCPName());\r\n}"},
 {"id":1329, "methodname":"testFilterHCPList3()", "methodnamerefined":"testFilterHCPList3", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPList3", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPList3()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testFilterHCPList3() {\r\n    // Filter on last name and specialty.\r\n    List<HCPVisitBean> beanslist = action.filterHCPList(\"Frank\", \"surgeon\", \"\");\r\n    ArrayList<HCPVisitBean> beans = new ArrayList<HCPVisitBean>(beanslist);\r\n    assertEquals(1, beans.size());\r\n    assertEquals(\"Jason Frankenstein\", beans.get(0).getHCPName());\r\n}"},
 {"id":1330, "methodname":"testFilterHCPListByName()", "methodnamerefined":"testFilterHCPListByName", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPListByName", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPListByName()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testFilterHCPListByName() {\r\n    // Filter on last name only.\r\n    List<HCPVisitBean> beanslist = action.filterHCPList(\"Frank\", \"\", \"\");\r\n    ArrayList<HCPVisitBean> beans = new ArrayList<HCPVisitBean>(beanslist);\r\n    assertEquals(2, beans.size());\r\n    assertEquals(\"Jason Frankenstein\", beans.get(1).getHCPName());\r\n    assertEquals(\"Lauren Frankenstein\", beans.get(0).getHCPName());\r\n}"},
 {"id":1331, "methodname":"testFilterHCPListBySpecialty()", "methodnamerefined":"testFilterHCPListBySpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPListBySpecialty", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPListBySpecialty()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testFilterHCPListBySpecialty() {\r\n    // Filter on specialty only.\r\n    List<HCPVisitBean> beanslist = action.filterHCPList(\"\", \"surgeon\", \"\");\r\n    ArrayList<HCPVisitBean> beans = new ArrayList<HCPVisitBean>(beanslist);\r\n    assertEquals(3, beans.size());\r\n    assertEquals(\"Kelly Doctor\", beans.get(2).getHCPName());\r\n    assertEquals(\"Jason Frankenstein\", beans.get(1).getHCPName());\r\n    assertEquals(\"Mary Shelley\", beans.get(0).getHCPName());\r\n}"},
 {"id":1332, "methodname":"testFilterHCPListByZip()", "methodnamerefined":"testFilterHCPListByZip", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPListByZip", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testFilterHCPListByZip()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testFilterHCPListByZip() {\r\n    // Filter on zip only.\r\n    List<HCPVisitBean> beanslist = action.filterHCPList(\"\", \"\", \"27605\");\r\n    ArrayList<HCPVisitBean> beans = new ArrayList<HCPVisitBean>(beanslist);\r\n    assertEquals(1, beans.size());\r\n    assertEquals(\"Lauren Frankenstein\", beans.get(0).getHCPName());\r\n}"},
 {"id":1333, "methodname":"testGetNamedHCP()", "methodnamerefined":"testGetNamedHCP", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testGetNamedHCP", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testGetNamedHCP()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testGetNamedHCP() throws Exception {\r\n    HCPVisitBean bean = action.getNamedHCP(\"Kelly Doctor\");\r\n    assertEquals(\"Kelly Doctor\", bean.getHCPName());\r\n}"},
 {"id":1334, "methodname":"testGetVisitedHCPsRed()", "methodnamerefined":"testGetVisitedHCPsRed", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testGetVisitedHCPsRed", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testGetVisitedHCPsRed()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testGetVisitedHCPsRed() {\r\n    // Get all visited HCPs without any filtering.\r\n    List<HCPVisitBean> beans = action.getVisitedHCPs();\r\n    assertEquals(\"Gandalf Stormcrow\", beans.get(0).getHCPName());\r\n    assertEquals(\"Mary Shelley\", beans.get(1).getHCPName());\r\n    assertEquals(\"Lauren Frankenstein\", beans.get(2).getHCPName());\r\n    assertEquals(\"Jason Frankenstein\", beans.get(3).getHCPName());\r\n    assertEquals(\"Kelly Doctor\", beans.get(4).getHCPName());\r\n}"},
 {"id":1335, "methodname":"testGetVisitedHCPsRed2()", "methodnamerefined":"testGetVisitedHCPsRed2", "methodabbreviation":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testGetVisitedHCPsRed2", "fullmethod":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest.testGetVisitedHCPsRed2()", "classid":208, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsActionTest", "shortclassname":"ViewVisitedHCPsActionTest", "method":"public void testGetVisitedHCPsRed2() {\r\n    // Get all visited HCPs without any filtering.\r\n    List<HCPVisitBean> beans = action2.getVisitedHCPs();\r\n    assertEquals(\"Gandalf Stormcrow\", beans.get(0).getHCPName());\r\n    assertEquals(\"Kelly Doctor\", beans.get(1).getHCPName());\r\n}"},
 {"id":1336, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "classid":209, "classname":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction", "shortclassname":"EditOfficeVisitBaseAction", "method":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @param ovIDString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString, ovIDString);\r\n    this.hcpid = hcpid;\r\n}"},
 {"id":1337, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "classid":209, "classname":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction", "shortclassname":"EditOfficeVisitBaseAction", "method":"/**\r\n * An office visit that is initially unsaved.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param hcpid\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hcpid = hcpid;\r\n}"},
 {"id":1338, "methodname":"getHcpid()", "methodnamerefined":"getHcpid", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.getHcpid", "fullmethod":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.getHcpid()", "classid":209, "classname":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction", "shortclassname":"EditOfficeVisitBaseAction", "method":"/**\r\n * Get the HCP id.\r\n *\r\n * @return the HCP id\r\n */\r\npublic long getHcpid() {\r\n    return hcpid;\r\n}"},
 {"id":1339, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String,java.lang.String)", "classid":210, "classname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction", "shortclassname":"OfficeVisitBaseAction", "method":"/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * \t\tA database access object factory for supplying a runtime context.\r\n * @param pidString\r\n * \t\tThe patients MID as a String, to be passed to the super constructor (for PatientBaseAction)\r\n * @param ovIDString\r\n * \t\tThe unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * \t\tIf any of the supplied parameters is incorrect or there is a DB problem.\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = checkOfficeVisitID(ovIDString);\r\n}"},
 {"id":1340, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "classid":210, "classname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction", "shortclassname":"OfficeVisitBaseAction", "method":"/**\r\n * Constructs an action that is initially unsaved.  Like the three-argument\r\n * constructor except that the office visit id is a sentinel value and does\r\n * not represent a valid office visit.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = OfficeVisitBaseAction.UNSAVED_VISIT_ID;\r\n}"},
 {"id":1341, "methodname":"checkOfficeVisitID(java.lang.String)", "methodnamerefined":"checkOfficeVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.checkOfficeVisitID", "fullmethod":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.checkOfficeVisitID(java.lang.String)", "classid":210, "classname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction", "shortclassname":"OfficeVisitBaseAction", "method":"/**\r\n * Asserts whether this unique office visit identifier both exists and is associated with the patient in\r\n * the database.\r\n *\r\n * @param input\r\n * \t\tThe presumed identifier as a String.\r\n * @return The same identifier as a long of the existing office visit.\r\n * @throws iTrustException\r\n * \t\tIf the visit does not exist or if there is a DB problem.\r\n */\r\nprivate long checkOfficeVisitID(String input) throws iTrustException {\r\n    try {\r\n        encode(input);\r\n        long ovID = Long.valueOf(input);\r\n        if (ovDAO.checkOfficeVisitExists(ovID, pid))\r\n            return ovID;\r\n        else\r\n            throw new iTrustException(((((\"Office Visit \" + ovID) + \" with Patient MID \") + (pid)) + \" does not exist\"));\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"Office Visit ID is not a number: \" + (e.getMessage())));\r\n    }\r\n}"},
 {"id":1342, "methodname":"encode(java.lang.String)", "methodnamerefined":"encode", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.encode", "fullmethod":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.encode(java.lang.String)", "classid":210, "classname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction", "shortclassname":"OfficeVisitBaseAction", "method":"/**\r\n * Converts all characters of the input string to their HTML special characters equivalent representation.\r\n * Explicitly, the less than symbol becomes lt, the greater than symbol becomes gt and a newline feed\r\n * becomes br.\r\n *\r\n * @param input\r\n * \t\tThe string to encode.\r\n * @return The encoded string.\r\n */\r\npublic String encode(String input) {\r\n    String str = input.replaceAll(\"<\", \"&lt;\");\r\n    str = str.replaceAll(\">\", \"&gt;\");\r\n    str = str.replaceAll(\"\n\", \"<br />\");\r\n    return str;\r\n}"},
 {"id":1343, "methodname":"getOvID()", "methodnamerefined":"getOvID", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.getOvID", "fullmethod":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.getOvID()", "classid":210, "classname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction", "shortclassname":"OfficeVisitBaseAction", "method":"/**\r\n * For obtaining the unique identifier of the office visit this action is associated with.\r\n *\r\n * @return A long of the identifier.\r\n */\r\npublic long getOvID() {\r\n    return ovID;\r\n}"},
 {"id":1344, "methodname":"isUnsaved()", "methodnamerefined":"isUnsaved", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.isUnsaved", "fullmethod":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.isUnsaved()", "classid":210, "classname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction", "shortclassname":"OfficeVisitBaseAction", "method":"/**\r\n * Indicates if the office visit has been saved or not.\r\n *\r\n * @return boolean that indicates if this has been saved.\r\n */\r\npublic boolean isUnsaved() {\r\n    return (ovID) == (OfficeVisitBaseAction.UNSAVED_VISIT_ID);\r\n}"},
 {"id":1345, "methodname":"verifySaved()", "methodnamerefined":"verifySaved", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.verifySaved", "fullmethod":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.verifySaved()", "classid":210, "classname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction", "shortclassname":"OfficeVisitBaseAction", "method":"/**\r\n * Raises an exception if the office visit has not been saved.  Otherwise,\r\n * does nothing.\r\n *\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprotected void verifySaved() throws iTrustException {\r\n    if (isUnsaved()) {\r\n        throw new iTrustException(\"Cannot perform action.  OfficeVisit is not saved.\");\r\n    }\r\n}"},
 {"id":1346, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.PatientBaseAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.base.PatientBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "classid":211, "classname":"edu.ncsu.csc.itrust.action.base.PatientBaseAction", "shortclassname":"PatientBaseAction", "method":"/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * \t\tA factory to create a database access object.\r\n * @param pidString\r\n * \t\tThe patients ID to associate with this action.\r\n * @throws iTrustException\r\n * \t\tIf the patients ID is incorrect or there is a DB problem.\r\n */\r\npublic PatientBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPatientID(pidString);\r\n}"},
 {"id":1347, "methodname":"checkPatientID(java.lang.String)", "methodnamerefined":"checkPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.PatientBaseAction.checkPatientID", "fullmethod":"edu.ncsu.csc.itrust.action.base.PatientBaseAction.checkPatientID(java.lang.String)", "classid":211, "classname":"edu.ncsu.csc.itrust.action.base.PatientBaseAction", "shortclassname":"PatientBaseAction", "method":"/**\r\n * Asserts whether the input is a valid, existing patients MID.\r\n *\r\n * @param input\r\n * \t\tThe presumed MID\r\n * @return The existing patients ID as a long.\r\n * @throws iTrustException\r\n * \t\tIf the patient does not exist or there is a DB Problem.\r\n */\r\nprivate long checkPatientID(String input) throws iTrustException {\r\n    try {\r\n        long pid = Long.valueOf(input);\r\n        if (factory.getPatientDAO().checkPatientExists(pid))\r\n            return pid;\r\n        else\r\n            throw new iTrustException(\"Patient does not exist\");\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"Patient ID is not a number: \" + (HtmlEncoder.encode(input))));\r\n    }\r\n}"},
 {"id":1348, "methodname":"getFactory()", "methodnamerefined":"getFactory", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.PatientBaseAction.getFactory", "fullmethod":"edu.ncsu.csc.itrust.action.base.PatientBaseAction.getFactory()", "classid":211, "classname":"edu.ncsu.csc.itrust.action.base.PatientBaseAction", "shortclassname":"PatientBaseAction", "method":"protected DAOFactory getFactory() {\r\n    return factory;\r\n}"},
 {"id":1349, "methodname":"getPid()", "methodnamerefined":"getPid", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.PatientBaseAction.getPid", "fullmethod":"edu.ncsu.csc.itrust.action.base.PatientBaseAction.getPid()", "classid":211, "classname":"edu.ncsu.csc.itrust.action.base.PatientBaseAction", "shortclassname":"PatientBaseAction", "method":"/**\r\n * Retrieves the identifier of the patient as a long.\r\n *\r\n * @return The patients MID.\r\n */\r\npublic long getPid() {\r\n    return pid;\r\n}"},
 {"id":1350, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.-init-", "fullmethod":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "classid":212, "classname":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction", "shortclassname":"PersonnelBaseAction", "method":"/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * \t\tA factory to create a database access object.\r\n * @param pidString\r\n * \t\tThe personnels ID to associate with this action.\r\n * @throws iTrustException\r\n * \t\tIf the personnels ID is incorrect or there is a DB problem.\r\n */\r\npublic PersonnelBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPersonnelID(pidString);\r\n}"},
 {"id":1351, "methodname":"checkPersonnelID(java.lang.String)", "methodnamerefined":"checkPersonnelID", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.checkPersonnelID", "fullmethod":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.checkPersonnelID(java.lang.String)", "classid":212, "classname":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction", "shortclassname":"PersonnelBaseAction", "method":"/**\r\n * Asserts whether the input is a valid, existing personnels MID.\r\n *\r\n * @param input\r\n * \t\tThe presumed MID\r\n * @return The existing personnels ID as a long.\r\n * @throws iTrustException\r\n * \t\tIf the personnel does not exist or there is a DB Problem.\r\n */\r\nprivate long checkPersonnelID(String input) throws iTrustException {\r\n    try {\r\n        long pid = Long.valueOf(input);\r\n        if (factory.getPersonnelDAO().checkPersonnelExists(pid))\r\n            return pid;\r\n        else\r\n            throw new iTrustException(\"Personnel does not exist\");\r\n\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException((\"Personnel ID is not a number: \" + (e.getMessage())));\r\n    }\r\n}"},
 {"id":1352, "methodname":"getPid()", "methodnamerefined":"getPid", "methodabbreviation":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.getPid", "fullmethod":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.getPid()", "classid":212, "classname":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction", "shortclassname":"PersonnelBaseAction", "method":"/**\r\n * Retrieves the identifier of the patient as a long.\r\n *\r\n * @return The patients MID.\r\n */\r\npublic long getPid() {\r\n    return pid;\r\n}"},
 {"id":1353, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.AllergyBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.AllergyBeanTest.-init-()", "classid":213, "classname":"edu.ncsu.csc.itrust.bean.AllergyBeanTest", "shortclassname":"AllergyBeanTest", "method":"AllergyBeanTest() {\r\n}"},
 {"id":1354, "methodname":"testFirstFound()", "methodnamerefined":"testFirstFound", "methodabbreviation":"edu.ncsu.csc.itrust.bean.AllergyBeanTest.testFirstFound", "fullmethod":"edu.ncsu.csc.itrust.bean.AllergyBeanTest.testFirstFound()", "classid":213, "classname":"edu.ncsu.csc.itrust.bean.AllergyBeanTest", "shortclassname":"AllergyBeanTest", "method":"public void testFirstFound() throws Exception {\r\n    AllergyBean allergy = new AllergyBean();\r\n    allergy.setFirstFound(new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"05/19/1984\"));\r\n    assertEquals(\"05/19/1984\", allergy.getFirstFoundStr());\r\n}"},
 {"id":1355, "methodname":"testGetID()", "methodnamerefined":"testGetID", "methodabbreviation":"edu.ncsu.csc.itrust.bean.AllergyBeanTest.testGetID", "fullmethod":"edu.ncsu.csc.itrust.bean.AllergyBeanTest.testGetID()", "classid":213, "classname":"edu.ncsu.csc.itrust.bean.AllergyBeanTest", "shortclassname":"AllergyBeanTest", "method":"public void testGetID() {\r\n    AllergyBean allergy = new AllergyBean();\r\n    allergy.setId(7L);\r\n    assertEquals(7L, allergy.getId());\r\n    allergy.setDescription(\"testing\");\r\n    assertEquals(\"testing\", allergy.toString());\r\n}"},
 {"id":1356, "methodname":"testInvalidFirstFound()", "methodnamerefined":"testInvalidFirstFound", "methodabbreviation":"edu.ncsu.csc.itrust.bean.AllergyBeanTest.testInvalidFirstFound", "fullmethod":"edu.ncsu.csc.itrust.bean.AllergyBeanTest.testInvalidFirstFound()", "classid":213, "classname":"edu.ncsu.csc.itrust.bean.AllergyBeanTest", "shortclassname":"AllergyBeanTest", "method":"public void testInvalidFirstFound() {\r\n    AllergyBean allergy = new AllergyBean();\r\n    allergy.setFirstFound(null);\r\n    assertEquals(\"\", allergy.getFirstFoundStr());\r\n}"},
 {"id":1357, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.-init-()", "classid":214, "classname":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest", "shortclassname":"ApptRequestBeanTest", "method":"ApptRequestBeanTest() {\r\n}"},
 {"id":1358, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.setUp()", "classid":214, "classname":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest", "shortclassname":"ApptRequestBeanTest", "method":"protected void setUp() throws Exception {\r\n    req = new ApptRequestBean();\r\n    apt = new ApptBean();\r\n}"},
 {"id":1359, "methodname":"testAccepted()", "methodnamerefined":"testAccepted", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.testAccepted", "fullmethod":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.testAccepted()", "classid":214, "classname":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest", "shortclassname":"ApptRequestBeanTest", "method":"public void testAccepted() {\r\n    assertFalse(req.isAccepted());\r\n    req.setPending(false);\r\n    assertFalse(req.isAccepted());\r\n    req.setAccepted(true);\r\n    assertTrue(req.isAccepted());\r\n    req.setAccepted(false);\r\n    assertFalse(req.isAccepted());\r\n}"},
 {"id":1360, "methodname":"testGetRequestedAppt()", "methodnamerefined":"testGetRequestedAppt", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.testGetRequestedAppt", "fullmethod":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.testGetRequestedAppt()", "classid":214, "classname":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest", "shortclassname":"ApptRequestBeanTest", "method":"public void testGetRequestedAppt() {\r\n    ApptBean b = req.getRequestedAppt();\r\n    assertNull(b);\r\n    req.setRequestedAppt(apt);\r\n    b = req.getRequestedAppt();\r\n    assertEquals(apt, b);\r\n}"},
 {"id":1361, "methodname":"testPending()", "methodnamerefined":"testPending", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.testPending", "fullmethod":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest.testPending()", "classid":214, "classname":"edu.ncsu.csc.itrust.bean.ApptRequestBeanTest", "shortclassname":"ApptRequestBeanTest", "method":"public void testPending() {\r\n    assertTrue(req.isPending());\r\n    req.setPending(false);\r\n    assertFalse(req.isPending());\r\n    req.setPending(true);\r\n    assertTrue(req.isPending());\r\n}"},
 {"id":1362, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.BeanLoaderTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.BeanLoaderTest.-init-()", "classid":215, "classname":"edu.ncsu.csc.itrust.bean.BeanLoaderTest", "shortclassname":"BeanLoaderTest", "method":"BeanLoaderTest() {\r\n}"},
 {"id":1363, "methodname":"testLoadParameters()", "methodnamerefined":"testLoadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.bean.BeanLoaderTest.testLoadParameters", "fullmethod":"edu.ncsu.csc.itrust.bean.BeanLoaderTest.testLoadParameters()", "classid":215, "classname":"edu.ncsu.csc.itrust.bean.BeanLoaderTest", "shortclassname":"BeanLoaderTest", "method":"public void testLoadParameters() throws Exception {\r\n    try {\r\n        new AllergyBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new DiagnosisBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new FamilyBeanLoader(\"self\").loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new DiagnosisBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new HospitalBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new LabProcedureBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new LOINCBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new MedicationBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new OfficeVisitLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new OperationalProfileLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new PrescriptionReportBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new RemoteMonitoringListsBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new ReportRequestBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new SurveyLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new SurveyResultBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new TransactionBeanLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n    try {\r\n        new VisitReminderReturnFormLoader().loadParameters(null, null);\r\n        fail(\"Should have thrown Exception\");\r\n    } catch (IllegalStateException ex) {\r\n        assertEquals(\"unimplemented!\", ex.getMessage());\r\n    }\r\n}"},
 {"id":1364, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.-init-()", "classid":216, "classname":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest", "shortclassname":"DiagnosisStatisticsBeanTest", "method":"DiagnosisStatisticsBeanTest() {\r\n}"},
 {"id":1365, "methodname":"testAll()", "methodnamerefined":"testAll", "methodabbreviation":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.testAll", "fullmethod":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.testAll()", "classid":216, "classname":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest", "shortclassname":"DiagnosisStatisticsBeanTest", "method":"public void testAll() throws Exception {\r\n    DiagnosisStatisticsBean dsBean = new DiagnosisStatisticsBean(\"12346\", 2, 5);\r\n    assertEquals(\"12346\", dsBean.getZipCode());\r\n    assertEquals(2, dsBean.getZipStats());\r\n    assertEquals(5, dsBean.getRegionStats());\r\n}"},
 {"id":1366, "methodname":"testRegionCount()", "methodnamerefined":"testRegionCount", "methodabbreviation":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.testRegionCount", "fullmethod":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.testRegionCount()", "classid":216, "classname":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest", "shortclassname":"DiagnosisStatisticsBeanTest", "method":"public void testRegionCount() throws Exception {\r\n    DiagnosisStatisticsBean dsBean = new DiagnosisStatisticsBean();\r\n    dsBean.setRegionStats(4);\r\n    assertEquals(4, dsBean.getRegionStats());\r\n}"},
 {"id":1367, "methodname":"testZipCode()", "methodnamerefined":"testZipCode", "methodabbreviation":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.testZipCode", "fullmethod":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.testZipCode()", "classid":216, "classname":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest", "shortclassname":"DiagnosisStatisticsBeanTest", "method":"public void testZipCode() throws Exception {\r\n    DiagnosisStatisticsBean dsBean = new DiagnosisStatisticsBean();\r\n    dsBean.setZipCode(\"12345\");\r\n    assertEquals(\"12345\", dsBean.getZipCode());\r\n}"},
 {"id":1368, "methodname":"testZipCount()", "methodnamerefined":"testZipCount", "methodabbreviation":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.testZipCount", "fullmethod":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest.testZipCount()", "classid":216, "classname":"edu.ncsu.csc.itrust.bean.DiagnosisStatisticsBeanTest", "shortclassname":"DiagnosisStatisticsBeanTest", "method":"public void testZipCount() throws Exception {\r\n    DiagnosisStatisticsBean dsBean = new DiagnosisStatisticsBean();\r\n    dsBean.setZipStats(10);\r\n    assertEquals(10, dsBean.getZipStats());\r\n}"},
 {"id":1369, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.EmailBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.EmailBeanTest.-init-()", "classid":217, "classname":"edu.ncsu.csc.itrust.bean.EmailBeanTest", "shortclassname":"EmailBeanTest", "method":"EmailBeanTest() {\r\n}"},
 {"id":1370, "methodname":"getTestEmail()", "methodnamerefined":"getTestEmail", "methodabbreviation":"edu.ncsu.csc.itrust.bean.EmailBeanTest.getTestEmail", "fullmethod":"edu.ncsu.csc.itrust.bean.EmailBeanTest.getTestEmail()", "classid":217, "classname":"edu.ncsu.csc.itrust.bean.EmailBeanTest", "shortclassname":"EmailBeanTest", "method":"private Email getTestEmail() {\r\n    Email email = new Email();\r\n    email.setBody(\"this is the body\");\r\n    email.setFrom(\"from address\");\r\n    email.setSubject(\"this is the subject\");\r\n    email.setToList(Arrays.asList(\"first\", \"second\", \"third\"));\r\n    email.setTimeAdded(new Timestamp(date.getTime()));\r\n    return email;\r\n}"},
 {"id":1371, "methodname":"testAttributes()", "methodnamerefined":"testAttributes", "methodabbreviation":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testAttributes", "fullmethod":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testAttributes()", "classid":217, "classname":"edu.ncsu.csc.itrust.bean.EmailBeanTest", "shortclassname":"EmailBeanTest", "method":"public void testAttributes() throws Exception {\r\n    Email email = getTestEmail();\r\n    assertEquals(\"this is the body\", email.getBody());\r\n    assertEquals(\"from address\", email.getFrom());\r\n    assertEquals(\"this is the subject\", email.getSubject());\r\n    assertEquals(100000L, email.getTimeAdded().getTime());\r\n}"},
 {"id":1372, "methodname":"testEquals()", "methodnamerefined":"testEquals", "methodabbreviation":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testEquals", "fullmethod":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testEquals()", "classid":217, "classname":"edu.ncsu.csc.itrust.bean.EmailBeanTest", "shortclassname":"EmailBeanTest", "method":"public void testEquals() throws Exception {\r\n    Email email1 = getTestEmail();\r\n    Email email2 = getTestEmail();\r\n    assertEquals(email1, email2);\r\n    assertTrue(email1.equals(email2));\r\n    email1.setToList(Arrays.asList(\"first\", \"second\", \"thrd\"));\r\n    assertFalse(email1.equals(email2));\r\n    email1.setToList(Arrays.asList(\"first\", \"second\"));\r\n    assertFalse(email1.equals(email2));\r\n    email2.setSubject(\"\");\r\n    assertFalse(email1.equals(email2));\r\n}"},
 {"id":1373, "methodname":"testGetHashCode()", "methodnamerefined":"testGetHashCode", "methodabbreviation":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testGetHashCode", "fullmethod":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testGetHashCode()", "classid":217, "classname":"edu.ncsu.csc.itrust.bean.EmailBeanTest", "shortclassname":"EmailBeanTest", "method":"public void testGetHashCode() throws Exception {\r\n    Email email = getTestEmail();\r\n    assertEquals(42, email.hashCode());\r\n}"},
 {"id":1374, "methodname":"testMakeStr()", "methodnamerefined":"testMakeStr", "methodabbreviation":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testMakeStr", "fullmethod":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testMakeStr()", "classid":217, "classname":"edu.ncsu.csc.itrust.bean.EmailBeanTest", "shortclassname":"EmailBeanTest", "method":"public void testMakeStr() throws Exception {\r\n    Email email = new Email();\r\n    email.setToList(Arrays.asList(\"first\", \"second\"));\r\n    assertEquals(\"first,second\", email.getToListStr());\r\n}"},
 {"id":1375, "methodname":"testToList()", "methodnamerefined":"testToList", "methodabbreviation":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testToList", "fullmethod":"edu.ncsu.csc.itrust.bean.EmailBeanTest.testToList()", "classid":217, "classname":"edu.ncsu.csc.itrust.bean.EmailBeanTest", "shortclassname":"EmailBeanTest", "method":"public void testToList() throws Exception {\r\n    Email email = getTestEmail();\r\n    assertEquals(3, email.getToList().size());\r\n}"},
 {"id":1376, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.-init-()", "classid":218, "classname":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest", "shortclassname":"GroupReportBeanTest", "method":"GroupReportBeanTest() {\r\n}"},
 {"id":1377, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.setUp()", "classid":218, "classname":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest", "shortclassname":"GroupReportBeanTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    List<PatientBean> p = new ArrayList<PatientBean>();\r\n    p.add(pDAO.getPatient(1L));\r\n    List<ReportFilter> f = new ArrayList<ReportFilter>();\r\n    f.add(new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.LAST_NAME, \"Person\", factory));\r\n    bean = new GroupReportBean(p, f);\r\n}"},
 {"id":1378, "methodname":"testGetFilterStrings()", "methodnamerefined":"testGetFilterStrings", "methodabbreviation":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.testGetFilterStrings", "fullmethod":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.testGetFilterStrings()", "classid":218, "classname":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest", "shortclassname":"GroupReportBeanTest", "method":"public void testGetFilterStrings() {\r\n    List<String> f = bean.getFilterStrings();\r\n    assertTrue(((f.size()) == 1));\r\n    assertEquals(\"Filter by LAST NAME with value Person\", f.get(0));\r\n}"},
 {"id":1379, "methodname":"testGetFilters()", "methodnamerefined":"testGetFilters", "methodabbreviation":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.testGetFilters", "fullmethod":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.testGetFilters()", "classid":218, "classname":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest", "shortclassname":"GroupReportBeanTest", "method":"public void testGetFilters() {\r\n    List<ReportFilter> f = bean.getFilters();\r\n    assertTrue(((f.size()) == 1));\r\n    assertEquals(DemographicReportFilter.DemographicReportFilterType.LAST_NAME, ((DemographicReportFilter) (f.get(0))).getFilterType());\r\n}"},
 {"id":1380, "methodname":"testGetPatientNames()", "methodnamerefined":"testGetPatientNames", "methodabbreviation":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.testGetPatientNames", "fullmethod":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.testGetPatientNames()", "classid":218, "classname":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest", "shortclassname":"GroupReportBeanTest", "method":"public void testGetPatientNames() {\r\n    List<String> p = bean.getPatientNames();\r\n    assertTrue(((p.size()) == 1));\r\n    assertEquals(\"Random Person\", p.get(0));\r\n}"},
 {"id":1381, "methodname":"testGetPatients()", "methodnamerefined":"testGetPatients", "methodabbreviation":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.testGetPatients", "fullmethod":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest.testGetPatients()", "classid":218, "classname":"edu.ncsu.csc.itrust.bean.GroupReportBeanTest", "shortclassname":"GroupReportBeanTest", "method":"public void testGetPatients() {\r\n    List<PatientBean> p = bean.getPatients();\r\n    assertTrue(((p.size()) == 1));\r\n    assertTrue(((p.get(0).getMID()) == 1L));\r\n}"},
 {"id":1382, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest.-init-()", "classid":219, "classname":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest", "shortclassname":"HCPLinkBeanTest", "method":"HCPLinkBeanTest() {\r\n}"},
 {"id":1383, "methodname":"testChecked()", "methodnamerefined":"testChecked", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest.testChecked", "fullmethod":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest.testChecked()", "classid":219, "classname":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest", "shortclassname":"HCPLinkBeanTest", "method":"public void testChecked() {\r\n    HCPLinkBean hl = new HCPLinkBean();\r\n    hl.setChecked(true);\r\n    assertTrue(hl.isChecked());\r\n}"},
 {"id":1384, "methodname":"testGetDrug()", "methodnamerefined":"testGetDrug", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest.testGetDrug", "fullmethod":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest.testGetDrug()", "classid":219, "classname":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest", "shortclassname":"HCPLinkBeanTest", "method":"public void testGetDrug() throws Exception {\r\n    HCPLinkBean hl = new HCPLinkBean();\r\n    hl.setDrug(\"Penicillin\");\r\n    hl.setCode(\"blah\");\r\n    assertEquals(\"Penicillin\", hl.getDrug());\r\n    assertEquals(\"blah\", hl.getCode());\r\n}"},
 {"id":1385, "methodname":"testGetPresciberMID()", "methodnamerefined":"testGetPresciberMID", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest.testGetPresciberMID", "fullmethod":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest.testGetPresciberMID()", "classid":219, "classname":"edu.ncsu.csc.itrust.bean.HCPLinkBeanTest", "shortclassname":"HCPLinkBeanTest", "method":"public void testGetPresciberMID() {\r\n    HCPLinkBean hl = new HCPLinkBean();\r\n    hl.setPrescriberMID(900000000);\r\n    assertEquals(900000000, hl.getPrescriberMID());\r\n}"},
 {"id":1386, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest.-init-()", "classid":220, "classname":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest", "shortclassname":"HCPVisitBeanTest", "method":"HCPVisitBeanTest() {\r\n}"},
 {"id":1387, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest.setUp()", "classid":220, "classname":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest", "shortclassname":"HCPVisitBeanTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n}"},
 {"id":1388, "methodname":"testEqualsObject()", "methodnamerefined":"testEqualsObject", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest.testEqualsObject", "fullmethod":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest.testEqualsObject()", "classid":220, "classname":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest", "shortclassname":"HCPVisitBeanTest", "method":"public void testEqualsObject() {\r\n    HCPVisitBean a = new HCPVisitBean();\r\n    a.setDesignated(true);\r\n    a.setHCPAddr(\"abc\");\r\n    a.setHCPMID(1);\r\n    a.setHCPName(\"My HCP\");\r\n    a.setHCPSpecialty(\"Tree Surgeon\");\r\n    a.setOVDate(\"The day before tomorrow.\");\r\n    assertTrue(a.equals(a));\r\n    HCPVisitBean b = new HCPVisitBean();\r\n    b.setDesignated(true);\r\n    b.setHCPAddr(\"abc\");\r\n    b.setHCPMID(1);\r\n    b.setHCPName(\"My HCP\");\r\n    b.setHCPSpecialty(\"Tree Surgeon\");\r\n    b.setOVDate(\"The day before tomorrow.\");\r\n    assertTrue(b.equals(a));\r\n    // The order of the following statements is important.\r\n    b.setOVDate(\"The day after yesterday\");\r\n    assertFalse(b.equals(a));\r\n    b.setHCPSpecialty(\"Love Doctor\");\r\n    assertFalse(b.equals(a));\r\n    b.setHCPName(\"The best HCP\");\r\n    assertFalse(b.equals(a));\r\n    b.setHCPAddr(\"Elm Street\");\r\n    assertFalse(b.equals(a));\r\n    assertFalse(b.equals(\"string\"));\r\n}"},
 {"id":1389, "methodname":"testHashCode()", "methodnamerefined":"testHashCode", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest.testHashCode", "fullmethod":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest.testHashCode()", "classid":220, "classname":"edu.ncsu.csc.itrust.bean.HCPVisitBeanTest", "shortclassname":"HCPVisitBeanTest", "method":"public void testHashCode() {\r\n    HCPVisitBean a = new HCPVisitBean();\r\n    a.setDesignated(true);\r\n    a.setHCPAddr(\"abc\");\r\n    a.setHCPMID(1);\r\n    a.setHCPName(\"My HCP\");\r\n    a.setHCPSpecialty(\"Tree Surgeon\");\r\n    a.setOVDate(\"The day before tomorrow.\");\r\n    assertEquals(a.hashCode(), a.hashCode());\r\n    a.setDesignated(false);\r\n    assertEquals(a.hashCode(), a.hashCode());\r\n}"},
 {"id":1390, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HealthRecordTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.HealthRecordTest.-init-()", "classid":221, "classname":"edu.ncsu.csc.itrust.bean.HealthRecordTest", "shortclassname":"HealthRecordTest", "method":"HealthRecordTest() {\r\n}"},
 {"id":1391, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HealthRecordTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.HealthRecordTest.setUp()", "classid":221, "classname":"edu.ncsu.csc.itrust.bean.HealthRecordTest", "shortclassname":"HealthRecordTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":1392, "methodname":"testBodyMass()", "methodnamerefined":"testBodyMass", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HealthRecordTest.testBodyMass", "fullmethod":"edu.ncsu.csc.itrust.bean.HealthRecordTest.testBodyMass()", "classid":221, "classname":"edu.ncsu.csc.itrust.bean.HealthRecordTest", "shortclassname":"HealthRecordTest", "method":"public void testBodyMass() throws Exception {\r\n    HealthRecord r = new HealthRecord();\r\n    r.setHeight(71);\r\n    r.setWeight(200);\r\n    assertEquals(27.89, r.getBodyMassIndex(), 0.01);\r\n}"},
 {"id":1393, "methodname":"testGetBloodPressure()", "methodnamerefined":"testGetBloodPressure", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HealthRecordTest.testGetBloodPressure", "fullmethod":"edu.ncsu.csc.itrust.bean.HealthRecordTest.testGetBloodPressure()", "classid":221, "classname":"edu.ncsu.csc.itrust.bean.HealthRecordTest", "shortclassname":"HealthRecordTest", "method":"public void testGetBloodPressure() throws Exception {\r\n    HealthRecord r = new HealthRecord();\r\n    r.setBloodPressureN(80);\r\n    r.setBloodPressureD(120);\r\n    assertEquals(\"80/120\", r.getBloodPressure());\r\n    r.setBloodPressureSystolic(90);\r\n    r.setBloodPressureDiastolic(130);\r\n    assertEquals(\"90/130\", r.getBloodPressure());\r\n}"},
 {"id":1394, "methodname":"testTotalCholesterol()", "methodnamerefined":"testTotalCholesterol", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HealthRecordTest.testTotalCholesterol", "fullmethod":"edu.ncsu.csc.itrust.bean.HealthRecordTest.testTotalCholesterol()", "classid":221, "classname":"edu.ncsu.csc.itrust.bean.HealthRecordTest", "shortclassname":"HealthRecordTest", "method":"public void testTotalCholesterol() throws Exception {\r\n    HealthRecord r = new HealthRecord();\r\n    r.setCholesterolHDL(5);\r\n    r.setCholesterolLDL(6);\r\n    r.setCholesterolTri(7);\r\n}"},
 {"id":1395, "methodname":"testZeroHeight()", "methodnamerefined":"testZeroHeight", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HealthRecordTest.testZeroHeight", "fullmethod":"edu.ncsu.csc.itrust.bean.HealthRecordTest.testZeroHeight()", "classid":221, "classname":"edu.ncsu.csc.itrust.bean.HealthRecordTest", "shortclassname":"HealthRecordTest", "method":"public void testZeroHeight() throws Exception {\r\n    HealthRecord r = new HealthRecord();\r\n    r.setHeight(0);\r\n    r.setWeight(200);\r\n    assertTrue(Double.isInfinite(r.getBodyMassIndex()));\r\n}"},
 {"id":1396, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HospitalBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.HospitalBeanTest.-init-()", "classid":222, "classname":"edu.ncsu.csc.itrust.bean.HospitalBeanTest", "shortclassname":"HospitalBeanTest", "method":"HospitalBeanTest() {\r\n}"},
 {"id":1397, "methodname":"testFullConstructor()", "methodnamerefined":"testFullConstructor", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HospitalBeanTest.testFullConstructor", "fullmethod":"edu.ncsu.csc.itrust.bean.HospitalBeanTest.testFullConstructor()", "classid":222, "classname":"edu.ncsu.csc.itrust.bean.HospitalBeanTest", "shortclassname":"HospitalBeanTest", "method":"public void testFullConstructor() throws Exception {\r\n    HospitalBean h = new HospitalBean(\"id\", \"name\", \"address\", \"city\", \"ST\", \"12345-6789\");\r\n    assertEquals(\"id\", h.getHospitalID());\r\n    assertEquals(\"name\", h.getHospitalName());\r\n    assertEquals(\"address\", h.getHospitalAddress());\r\n    assertEquals(\"city\", h.getHospitalCity());\r\n    assertEquals(\"ST\", h.getHospitalState());\r\n    assertEquals(\"12345-6789\", h.getHospitalZip());\r\n    assertEquals(42, h.hashCode());\r\n}"},
 {"id":1398, "methodname":"testHospitalBean()", "methodnamerefined":"testHospitalBean", "methodabbreviation":"edu.ncsu.csc.itrust.bean.HospitalBeanTest.testHospitalBean", "fullmethod":"edu.ncsu.csc.itrust.bean.HospitalBeanTest.testHospitalBean()", "classid":222, "classname":"edu.ncsu.csc.itrust.bean.HospitalBeanTest", "shortclassname":"HospitalBeanTest", "method":"public void testHospitalBean() throws Exception {\r\n    HospitalBean h = new HospitalBean();\r\n    h.setHospitalID(\"id\");\r\n    h.setHospitalName(\"name\");\r\n    assertEquals(\"id\", h.getHospitalID());\r\n    assertEquals(\"name\", h.getHospitalName());\r\n    assertEquals(42, h.hashCode());\r\n}"},
 {"id":1399, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.-init-()", "classid":223, "classname":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest", "shortclassname":"LabProcedureBeanTest", "method":"LabProcedureBeanTest() {\r\n}"},
 {"id":1400, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.setUp()", "classid":223, "classname":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest", "shortclassname":"LabProcedureBeanTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    l = new LabProcedureBean();\r\n    l.setPid(1);\r\n    l.setProcedureID(10);\r\n    l.setLoinc(\"12345-6\");\r\n    l.statusInTransit();\r\n    l.setCommentary(\"Their blood is purple and orange.\");\r\n    l.setResults(\"Please call us for your results.\");\r\n    l.setOvID(10023);\r\n    Date date = new SimpleDateFormat(\"MM/dd/yyyy HH:mm\").parse(\"03/28/2008 12:00\");\r\n    l.setTimestamp(new Timestamp(date.getTime()));\r\n    l.allow();\r\n}"},
 {"id":1401, "methodname":"testBaseCaseBean()", "methodnamerefined":"testBaseCaseBean", "methodabbreviation":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testBaseCaseBean", "fullmethod":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testBaseCaseBean()", "classid":223, "classname":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest", "shortclassname":"LabProcedureBeanTest", "method":"public void testBaseCaseBean() throws Exception {\r\n    assertEquals(1, l.getPid());\r\n    assertEquals(10, l.getProcedureID());\r\n    assertEquals(\"12345-6\", l.getLoinc());\r\n    assertEquals(LabProcedureBean.In_Transit, l.getStatus());\r\n    assertEquals(\"Their blood is purple and orange.\", l.getCommentary());\r\n    assertEquals(\"Please call us for your results.\", l.getResults());\r\n    assertEquals(10023, l.getOvID());\r\n    Date date = new SimpleDateFormat(\"MM/dd/yyyy HH:mm\").parse(\"03/28/2008 12:00\");\r\n    assertEquals(date.getTime(), l.getTimestamp().getTime());\r\n    assertEquals(LabProcedureBean.Allow, l.getRights());\r\n}"},
 {"id":1402, "methodname":"testGetLowerBoundAsDouble()", "methodnamerefined":"testGetLowerBoundAsDouble", "methodabbreviation":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testGetLowerBoundAsDouble", "fullmethod":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testGetLowerBoundAsDouble()", "classid":223, "classname":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest", "shortclassname":"LabProcedureBeanTest", "method":"public void testGetLowerBoundAsDouble() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    assertEquals(\"\", lp.getLowerBound());\r\n    assertEquals(Double.NaN, lp.getLowerBoundAsDouble(), 1.0E-7);\r\n    lp.setLowerBound(\"0.0\");\r\n    assertEquals(\"0.0\", lp.getLowerBound());\r\n    assertEquals(0.0, lp.getLowerBoundAsDouble(), 1.0E-7);\r\n    lp.setLowerBound(\"0.1\");\r\n    assertEquals(\"0.1\", lp.getLowerBound());\r\n    assertEquals(0.1, lp.getLowerBoundAsDouble(), 1.0E-7);\r\n    lp.setLowerBound(\"-5.1\");\r\n    assertEquals(\"-5.1\", lp.getLowerBound());\r\n    assertEquals((-5.1), lp.getLowerBoundAsDouble(), 1.0E-7);\r\n}"},
 {"id":1403, "methodname":"testGetNumericalResultAsDouble()", "methodnamerefined":"testGetNumericalResultAsDouble", "methodabbreviation":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testGetNumericalResultAsDouble", "fullmethod":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testGetNumericalResultAsDouble()", "classid":223, "classname":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest", "shortclassname":"LabProcedureBeanTest", "method":"public void testGetNumericalResultAsDouble() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    assertEquals(\"\", lp.getNumericalResult());\r\n    assertEquals(Double.NaN, lp.getNumericalResultAsDouble(), 1.0E-7);\r\n    lp.setNumericalResult(\"0.0\");\r\n    assertEquals(\"0.0\", lp.getNumericalResult());\r\n    assertEquals(0.0, lp.getNumericalResultAsDouble(), 1.0E-7);\r\n    lp.setNumericalResult(\"0.1\");\r\n    assertEquals(\"0.1\", lp.getNumericalResult());\r\n    assertEquals(0.1, lp.getNumericalResultAsDouble(), 1.0E-7);\r\n    lp.setNumericalResult(\"-5.1\");\r\n    assertEquals(\"-5.1\", lp.getNumericalResult());\r\n    assertEquals((-5.1), lp.getNumericalResultAsDouble(), 1.0E-7);\r\n}"},
 {"id":1404, "methodname":"testGetNumericalResultUnit()", "methodnamerefined":"testGetNumericalResultUnit", "methodabbreviation":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testGetNumericalResultUnit", "fullmethod":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testGetNumericalResultUnit()", "classid":223, "classname":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest", "shortclassname":"LabProcedureBeanTest", "method":"public void testGetNumericalResultUnit() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    assertEquals(\"\", lp.getNumericalResultUnit());\r\n    lp.setNumericalResultUnit(\"grams\");\r\n    assertEquals(\"grams\", lp.getNumericalResultUnit());\r\n    lp.setNumericalResultUnit(\"ml\");\r\n    assertEquals(\"ml\", lp.getNumericalResultUnit());\r\n}"},
 {"id":1405, "methodname":"testGetUpperBoundAsDouble()", "methodnamerefined":"testGetUpperBoundAsDouble", "methodabbreviation":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testGetUpperBoundAsDouble", "fullmethod":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testGetUpperBoundAsDouble()", "classid":223, "classname":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest", "shortclassname":"LabProcedureBeanTest", "method":"public void testGetUpperBoundAsDouble() throws Exception {\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    assertEquals(\"\", lp.getUpperBound());\r\n    assertEquals(Double.NaN, lp.getUpperBoundAsDouble(), 1.0E-7);\r\n    lp.setUpperBound(\"0.0\");\r\n    assertEquals(\"0.0\", lp.getUpperBound());\r\n    assertEquals(0.0, lp.getUpperBoundAsDouble(), 1.0E-7);\r\n    lp.setUpperBound(\"0.1\");\r\n    assertEquals(\"0.1\", lp.getUpperBound());\r\n    assertEquals(0.1, lp.getUpperBoundAsDouble(), 1.0E-7);\r\n    lp.setUpperBound(\"-5.1\");\r\n    assertEquals(\"-5.1\", lp.getUpperBound());\r\n    assertEquals((-5.1), lp.getUpperBoundAsDouble(), 1.0E-7);\r\n}"},
 {"id":1406, "methodname":"testViewedByPatient()", "methodnamerefined":"testViewedByPatient", "methodabbreviation":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testViewedByPatient", "fullmethod":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest.testViewedByPatient()", "classid":223, "classname":"edu.ncsu.csc.itrust.bean.LabProcedureBeanTest", "shortclassname":"LabProcedureBeanTest", "method":"public void testViewedByPatient() throws Exception {\r\n    // In order to set the LP as viewed by patient, the status must be completed.\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setStatus(LabProcedureBean.In_Transit);\r\n    assertEquals(false, lp.isViewedByPatient());\r\n    lp.setViewedByPatient(true);\r\n    assertEquals(false, lp.isViewedByPatient());\r\n    lp.setStatus(LabProcedureBean.Completed);\r\n    lp.setViewedByPatient(true);\r\n    assertEquals(true, lp.isViewedByPatient());\r\n}"},
 {"id":1407, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.-init-()", "classid":224, "classname":"edu.ncsu.csc.itrust.bean.MedicationBeanTest", "shortclassname":"MedicationBeanTest", "method":"MedicationBeanTest() {\r\n}"},
 {"id":1408, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.setUp()", "classid":224, "classname":"edu.ncsu.csc.itrust.bean.MedicationBeanTest", "shortclassname":"MedicationBeanTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    med = new MedicationBean();\r\n    med.setDescription(\"blah\");\r\n    med.setNDCode(\"blah blah\");\r\n}"},
 {"id":1409, "methodname":"testGetFormatted()", "methodnamerefined":"testGetFormatted", "methodabbreviation":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.testGetFormatted", "fullmethod":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.testGetFormatted()", "classid":224, "classname":"edu.ncsu.csc.itrust.bean.MedicationBeanTest", "shortclassname":"MedicationBeanTest", "method":"public void testGetFormatted() {\r\n    med = new MedicationBean();\r\n    med.setNDCode(\"9283777777\");\r\n    assertEquals(\"92837-77777\", med.getNDCodeFormatted());\r\n}"},
 {"id":1410, "methodname":"testPrescriptionEquals()", "methodnamerefined":"testPrescriptionEquals", "methodabbreviation":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.testPrescriptionEquals", "fullmethod":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.testPrescriptionEquals()", "classid":224, "classname":"edu.ncsu.csc.itrust.bean.MedicationBeanTest", "shortclassname":"MedicationBeanTest", "method":"public void testPrescriptionEquals() throws Exception {\r\n    med = new MedicationBean();\r\n    med.setDescription(\"blah\");\r\n    med.setNDCode(\"blah blah\");\r\n    MedicationBean med2 = new MedicationBean();\r\n    med2.setDescription(\"blah\");\r\n    med2.setNDCode(\"blah blah\");\r\n    assertEquals(med2, med);\r\n}"},
 {"id":1411, "methodname":"testShortCode()", "methodnamerefined":"testShortCode", "methodabbreviation":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.testShortCode", "fullmethod":"edu.ncsu.csc.itrust.bean.MedicationBeanTest.testShortCode()", "classid":224, "classname":"edu.ncsu.csc.itrust.bean.MedicationBeanTest", "shortclassname":"MedicationBeanTest", "method":"public void testShortCode() {\r\n    med = new MedicationBean();\r\n    med.setNDCode(\"1\");\r\n    assertEquals(\"1\", med.getNDCodeFormatted());\r\n}"},
 {"id":1412, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.OfficeVisitBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.OfficeVisitBeanTest.-init-()", "classid":225, "classname":"edu.ncsu.csc.itrust.bean.OfficeVisitBeanTest", "shortclassname":"OfficeVisitBeanTest", "method":"OfficeVisitBeanTest() {\r\n}"},
 {"id":1413, "methodname":"testDateFailure()", "methodnamerefined":"testDateFailure", "methodabbreviation":"edu.ncsu.csc.itrust.bean.OfficeVisitBeanTest.testDateFailure", "fullmethod":"edu.ncsu.csc.itrust.bean.OfficeVisitBeanTest.testDateFailure()", "classid":225, "classname":"edu.ncsu.csc.itrust.bean.OfficeVisitBeanTest", "shortclassname":"OfficeVisitBeanTest", "method":"public void testDateFailure() {\r\n    OfficeVisitBean ov = new OfficeVisitBean();\r\n    ov.setVisitDateStr(\"bad date\");\r\n    assertNull(ov.getVisitDate());\r\n}"},
 {"id":1414, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.OverrideReasonBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.OverrideReasonBeanTest.-init-()", "classid":226, "classname":"edu.ncsu.csc.itrust.bean.OverrideReasonBeanTest", "shortclassname":"OverrideReasonBeanTest", "method":"OverrideReasonBeanTest() {\r\n}"},
 {"id":1415, "methodname":"testPrescriptionEquals()", "methodnamerefined":"testPrescriptionEquals", "methodabbreviation":"edu.ncsu.csc.itrust.bean.OverrideReasonBeanTest.testPrescriptionEquals", "fullmethod":"edu.ncsu.csc.itrust.bean.OverrideReasonBeanTest.testPrescriptionEquals()", "classid":226, "classname":"edu.ncsu.csc.itrust.bean.OverrideReasonBeanTest", "shortclassname":"OverrideReasonBeanTest", "method":"public void testPrescriptionEquals() throws Exception {\r\n    orb = new OverrideReasonBean();\r\n    orb.setDescription(\"blah\");\r\n    orb.setORCode(\"00001\");\r\n    orb.setID(1);\r\n    orb.setPresID(2);\r\n    OverrideReasonBean orb2 = new OverrideReasonBean();\r\n    orb2.setDescription(\"blah\");\r\n    orb2.setORCode(\"00001\");\r\n    orb2.setID(1);\r\n    orb2.setPresID(2);\r\n    assertTrue(orb2.equals(orb));\r\n}"},
 {"id":1416, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientBeanTest.-init-()", "classid":227, "classname":"edu.ncsu.csc.itrust.bean.PatientBeanTest", "shortclassname":"PatientBeanTest", "method":"PatientBeanTest() {\r\n}"},
 {"id":1417, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientBeanTest.setUp()", "classid":227, "classname":"edu.ncsu.csc.itrust.bean.PatientBeanTest", "shortclassname":"PatientBeanTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    today = new Date();\r\n}"},
 {"id":1418, "methodname":"testAge10()", "methodnamerefined":"testAge10", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientBeanTest.testAge10", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientBeanTest.testAge10()", "classid":227, "classname":"edu.ncsu.csc.itrust.bean.PatientBeanTest", "shortclassname":"PatientBeanTest", "method":"public void testAge10() throws Exception {\r\n    PatientBean kid = new PatientBean();\r\n    kid.setDateOfBirthStr(DateUtil.yearsAgo(10));\r\n    assertEquals(10, kid.getAge());\r\n}"},
 {"id":1419, "methodname":"testAgeZero()", "methodnamerefined":"testAgeZero", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientBeanTest.testAgeZero", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientBeanTest.testAgeZero()", "classid":227, "classname":"edu.ncsu.csc.itrust.bean.PatientBeanTest", "shortclassname":"PatientBeanTest", "method":"public void testAgeZero() throws Exception {\r\n    PatientBean baby = new PatientBean();\r\n    baby.setDateOfBirthStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(today));\r\n    assertEquals(0, baby.getAge());\r\n}"},
 {"id":1420, "methodname":"testBean()", "methodnamerefined":"testBean", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientBeanTest.testBean", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientBeanTest.testBean()", "classid":227, "classname":"edu.ncsu.csc.itrust.bean.PatientBeanTest", "shortclassname":"PatientBeanTest", "method":"public void testBean() {\r\n    PatientBean p = new PatientBean();\r\n    p.setBloodType(BloodType.ABNeg);\r\n    p.setDateOfBirthStr(\"bad date\");\r\n    p.setCity(\"Raleigh\");\r\n    p.setState(\"NC\");\r\n    p.setZip(\"27613-1234\");\r\n    p.setIcCity(\"Raleigh\");\r\n    p.setIcState(\"NC\");\r\n    p.setIcZip(\"27613-1234\");\r\n    p.setSecurityQuestion(\"Question\");\r\n    p.setSecurityAnswer(\"Answer\");\r\n    p.setPassword(\"password\");\r\n    p.setConfirmPassword(\"confirm\");\r\n    assertEquals(BloodType.ABNeg, p.getBloodType());\r\n    assertNull(p.getDateOfBirth());\r\n    assertEquals((-1), p.getAge());\r\n    assertEquals(\"Raleigh, NC 27613-1234\", p.getIcAddress3());\r\n    assertEquals(\"Raleigh, NC 27613-1234\", p.getStreetAddress3());\r\n    assertEquals(\"Question\", p.getSecurityQuestion());\r\n    assertEquals(\"Answer\", p.getSecurityAnswer());\r\n    assertEquals(\"password\", p.getPassword());\r\n    assertEquals(\"confirm\", p.getConfirmPassword());\r\n}"},
 {"id":1421, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.-init-()", "classid":228, "classname":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest", "shortclassname":"PatientHistoryBeanTest", "method":"PatientHistoryBeanTest() {\r\n}"},
 {"id":1422, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.setUp()", "classid":228, "classname":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest", "shortclassname":"PatientHistoryBeanTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    today = new Date();\r\n}"},
 {"id":1423, "methodname":"testAge10()", "methodnamerefined":"testAge10", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.testAge10", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.testAge10()", "classid":228, "classname":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest", "shortclassname":"PatientHistoryBeanTest", "method":"public void testAge10() throws Exception {\r\n    PatientHistoryBean kid = new PatientHistoryBean();\r\n    kid.setDateOfBirthStr(DateUtil.yearsAgo(10));\r\n    assertEquals(10, kid.getAge());\r\n}"},
 {"id":1424, "methodname":"testAgeZero()", "methodnamerefined":"testAgeZero", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.testAgeZero", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.testAgeZero()", "classid":228, "classname":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest", "shortclassname":"PatientHistoryBeanTest", "method":"public void testAgeZero() throws Exception {\r\n    PatientHistoryBean baby = new PatientHistoryBean();\r\n    baby.setDateOfBirthStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(today));\r\n    assertEquals(0, baby.getAge());\r\n}"},
 {"id":1425, "methodname":"testBean()", "methodnamerefined":"testBean", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.testBean", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.testBean()", "classid":228, "classname":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest", "shortclassname":"PatientHistoryBeanTest", "method":"public void testBean() {\r\n    PatientHistoryBean p = new PatientHistoryBean();\r\n    p.setBloodType(BloodType.ABNeg);\r\n    p.setFirstName(\"John\");\r\n    p.setLastName(\"Doe\");\r\n    p.setDateOfBirthStr(\"bad date\");\r\n    p.setDateOfDeathStr(\"another bad date\");\r\n    p.setCity(\"Raleigh\");\r\n    p.setState(\"NC\");\r\n    p.setZip(\"27613-1234\");\r\n    p.setIcCity(\"Raleigh\");\r\n    p.setIcState(\"NC\");\r\n    p.setIcZip(\"27613-1234\");\r\n    p.setEmergencyPhone(\"910-222-1212\");\r\n    p.setIcPhone(\"919-123-4567\");\r\n    p.setPhone(\"999-111-2222\");\r\n    p.setSecurityQuestion(\"Question\");\r\n    p.setSecurityAnswer(\"Answer\");\r\n    p.setPassword(\"password\");\r\n    p.setConfirmPassword(\"confirm\");\r\n    p.setCreditCardNumber(\"1234567812345678\");\r\n    p.setChangeDateStr(\"12/09/1991\");\r\n    p.setChangeMID(888L);\r\n    assertEquals(BloodType.ABNeg, p.getBloodType());\r\n    assertNull(p.getDateOfBirth());\r\n    assertNull(p.getDateOfDeath());\r\n    assertEquals(\"John Doe\", p.getFullName());\r\n    assertEquals(\"1234567812345678\", p.getCreditCardNumber());\r\n    assertEquals(\"919-123-4567\", p.getIcPhone());\r\n    assertEquals(\"919-123-4567\", p.getIcPhone());\r\n    assertEquals(\"999-111-2222\", p.getPhone());\r\n    assertEquals(\"910-222-1212\", p.getEmergencyPhone());\r\n    assertEquals((-1), p.getAge());\r\n    assertEquals((-1), p.getAgeInDays());\r\n    assertEquals((-1), p.getAgeInWeeks());\r\n    assertEquals(\"Raleigh, NC 27613-1234\", p.getIcAddress3());\r\n    assertEquals(\"Raleigh, NC 27613-1234\", p.getStreetAddress3());\r\n    assertEquals(\"Question\", p.getSecurityQuestion());\r\n    assertEquals(\"Answer\", p.getSecurityAnswer());\r\n    assertEquals(\"password\", p.getPassword());\r\n    assertEquals(\"confirm\", p.getConfirmPassword());\r\n    assertEquals(\"12/09/1991\", p.getChangeDateStr());\r\n    assertNotNull(p.getChangeDate());\r\n    assertEquals(888L, p.getChangeMID());\r\n}"},
 {"id":1426, "methodname":"testGetChangeDate()", "methodnamerefined":"testGetChangeDate", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.testGetChangeDate", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest.testGetChangeDate()", "classid":228, "classname":"edu.ncsu.csc.itrust.bean.PatientHistoryBeanTest", "shortclassname":"PatientHistoryBeanTest", "method":"public void testGetChangeDate() {\r\n    PatientHistoryBean b = new PatientHistoryBean();\r\n    b.setChangeDateStr(\"06/06/2009\");\r\n    assertEquals(\"06/06/2009\", b.getChangeDateStr());\r\n    assertEquals(\"06/06/2009\", new SimpleDateFormat(\"MM/dd/yyyy\").format(b.getChangeDate()));\r\n}"},
 {"id":1427, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.-init-()", "classid":229, "classname":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest", "shortclassname":"PatientVisitBeanTest", "method":"PatientVisitBeanTest() {\r\n}"},
 {"id":1428, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.setUp()", "classid":229, "classname":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest", "shortclassname":"PatientVisitBeanTest", "method":"protected void setUp() throws Exception {\r\n    p1 = new PatientVisitBean();\r\n    pat = new PatientBean();\r\n}"},
 {"id":1429, "methodname":"testAddress()", "methodnamerefined":"testAddress", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.testAddress", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.testAddress()", "classid":229, "classname":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest", "shortclassname":"PatientVisitBeanTest", "method":"public void testAddress() {\r\n    p1.setAddress1(\"Address 1\");\r\n    p1.setAddress2(\"Address 2\");\r\n    assertEquals(\"Address 1\", p1.getAddress1());\r\n    assertEquals(\"Address 2\", p1.getAddress2());\r\n}"},
 {"id":1430, "methodname":"testOVDate()", "methodnamerefined":"testOVDate", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.testOVDate", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.testOVDate()", "classid":229, "classname":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest", "shortclassname":"PatientVisitBeanTest", "method":"public void testOVDate() {\r\n    p1.setLastOVDate(\"date\");\r\n    assertEquals(\"date\", p1.getLastOVDate());\r\n}"},
 {"id":1431, "methodname":"testPatient()", "methodnamerefined":"testPatient", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.testPatient", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.testPatient()", "classid":229, "classname":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest", "shortclassname":"PatientVisitBeanTest", "method":"public void testPatient() {\r\n    p1.setPatient(pat);\r\n    assertEquals(pat, p1.getPatient());\r\n}"},
 {"id":1432, "methodname":"testPatientName()", "methodnamerefined":"testPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.testPatientName", "fullmethod":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest.testPatientName()", "classid":229, "classname":"edu.ncsu.csc.itrust.bean.PatientVisitBeanTest", "shortclassname":"PatientVisitBeanTest", "method":"public void testPatientName() {\r\n    p1.setPatientName(\"name\");\r\n    assertEquals(\"name\", p1.getPatientName());\r\n}"},
 {"id":1433, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PersonnelBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.PersonnelBeanTest.-init-()", "classid":230, "classname":"edu.ncsu.csc.itrust.bean.PersonnelBeanTest", "shortclassname":"PersonnelBeanTest", "method":"PersonnelBeanTest() {\r\n}"},
 {"id":1434, "methodname":"testPersonnelBeanSecurity()", "methodnamerefined":"testPersonnelBeanSecurity", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PersonnelBeanTest.testPersonnelBeanSecurity", "fullmethod":"edu.ncsu.csc.itrust.bean.PersonnelBeanTest.testPersonnelBeanSecurity()", "classid":230, "classname":"edu.ncsu.csc.itrust.bean.PersonnelBeanTest", "shortclassname":"PersonnelBeanTest", "method":"public void testPersonnelBeanSecurity() {\r\n    PersonnelBean p = new PersonnelBean();\r\n    PersonnelBean p1 = new PersonnelBean();\r\n    PersonnelBean p2 = new PersonnelBean();\r\n    p.setPassword(\"password\");\r\n    p.setConfirmPassword(\"confirm\");\r\n    p.setSecurityQuestion(\"Question\");\r\n    p.setSecurityAnswer(\"Answer\");\r\n    assertEquals(\"confirm\", p.getConfirmPassword());\r\n    assertEquals(\"password\", p.getPassword());\r\n    assertEquals(\"Question\", p.getSecurityQuestion());\r\n    assertEquals(\"Answer\", p.getSecurityAnswer());\r\n    p.setFirstName(\"John\");\r\n    p.setLastName(\"Doe\");\r\n    p.setEmail(\"email@email.com\");\r\n    p.setPhone(\"828-464-3333\");\r\n    p.setSpecialty(\"Special\");\r\n    assertEquals(\"John\", p.getFirstName());\r\n    assertEquals(\"Doe\", p.getLastName());\r\n    assertEquals(\"John Doe\", p.getFullName());\r\n    assertEquals(\"email@email.com\", p.getEmail());\r\n    assertEquals(\"828-464-3333\", p.getPhone());\r\n    assertEquals(\"828-464-3333\", p.getPhone());\r\n    assertEquals(\"Special\", p.getSpecialty());\r\n    p.setCity(\"City\");\r\n    p.setState(\"NC\");\r\n    p.setZip(\"28658-2760\");\r\n    assertEquals(\"City\", p.getCity());\r\n    assertEquals(\"NC\", p.getState());\r\n    assertEquals(\"28658-2760\", p.getZip());\r\n    p.setZip(\"\");\r\n    assertEquals(\"\", p.getZip());\r\n    p.setMID(1);\r\n    p1.setMID(2);\r\n    assertEquals(1, p.getMID());\r\n    /* assertEquals(0, p.compareTo(p));\n    assertEquals(-1, p.compareTo(p1));\n    assertEquals(1, p1.compareTo(p));\n     */\r\n    List<PersonnelBean> list = new LinkedList<PersonnelBean>();\r\n    list.add(p);\r\n    list.add(p1);\r\n    assertEquals(0, p.getIndexIn(list));\r\n    assertEquals(1, p1.getIndexIn(list));\r\n    assertEquals((-1), p2.getIndexIn(list));\r\n}"},
 {"id":1435, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PrescriptionBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.PrescriptionBeanTest.-init-()", "classid":231, "classname":"edu.ncsu.csc.itrust.bean.PrescriptionBeanTest", "shortclassname":"PrescriptionBeanTest", "method":"PrescriptionBeanTest() {\r\n}"},
 {"id":1436, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PrescriptionBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.PrescriptionBeanTest.setUp()", "classid":231, "classname":"edu.ncsu.csc.itrust.bean.PrescriptionBeanTest", "shortclassname":"PrescriptionBeanTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    pres = new PrescriptionBean();\r\n    pres.setDosage(50);\r\n    pres.setStartDateStr(\"2007/05/19\");\r\n    pres.setEndDateStr(\"2010/05/19\");\r\n    pres.setVisitID(1L);\r\n}"},
 {"id":1437, "methodname":"testPrescriptionEquals()", "methodnamerefined":"testPrescriptionEquals", "methodabbreviation":"edu.ncsu.csc.itrust.bean.PrescriptionBeanTest.testPrescriptionEquals", "fullmethod":"edu.ncsu.csc.itrust.bean.PrescriptionBeanTest.testPrescriptionEquals()", "classid":231, "classname":"edu.ncsu.csc.itrust.bean.PrescriptionBeanTest", "shortclassname":"PrescriptionBeanTest", "method":"public void testPrescriptionEquals() throws Exception {\r\n    pres.setId(5);\r\n    PrescriptionBean pres2 = new PrescriptionBean();\r\n    pres2.setId(5);\r\n    pres2.setDosage(50);\r\n    pres2.setStartDateStr(\"2007/05/19\");\r\n    pres2.setEndDateStr(\"2010/05/19\");\r\n    pres2.setVisitID(1L);\r\n    pres2.setOverrideReasonOther(\"Reasoning...\");\r\n    OverrideReasonBean override = new OverrideReasonBean();\r\n    override.setORCode(\"1234\");\r\n    List<OverrideReasonBean> reasons = new ArrayList<OverrideReasonBean>();\r\n    reasons.add(override);\r\n    pres2.setReasons(reasons);\r\n    assertEquals(pres2, pres);\r\n    assertEquals(\"2010/05/19\", pres2.getEndDateStr());\r\n    assertEquals(\"1234\", pres2.getReasons().get(0).getORCode());\r\n    assertEquals(\"Reasoning...\", pres2.getOverrideReasonOther());\r\n}"},
 {"id":1438, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ProcedureBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.ProcedureBeanTest.-init-()", "classid":232, "classname":"edu.ncsu.csc.itrust.bean.ProcedureBeanTest", "shortclassname":"ProcedureBeanTest", "method":"ProcedureBeanTest() {\r\n}"},
 {"id":1439, "methodname":"testProcedureBean()", "methodnamerefined":"testProcedureBean", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ProcedureBeanTest.testProcedureBean", "fullmethod":"edu.ncsu.csc.itrust.bean.ProcedureBeanTest.testProcedureBean()", "classid":232, "classname":"edu.ncsu.csc.itrust.bean.ProcedureBeanTest", "shortclassname":"ProcedureBeanTest", "method":"public void testProcedureBean() throws Exception {\r\n    ProcedureBean pb = new ProcedureBean();\r\n    pb.setHcpid(\"9000000000\");\r\n    assertEquals(\"9000000000\", pb.getHcpid());\r\n    pb.setOvProcedureID(385730L);\r\n    assertEquals(385730L, pb.getOvProcedureID());\r\n}"},
 {"id":1440, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ReferralBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.ReferralBeanTest.-init-()", "classid":233, "classname":"edu.ncsu.csc.itrust.bean.ReferralBeanTest", "shortclassname":"ReferralBeanTest", "method":"ReferralBeanTest() {\r\n}"},
 {"id":1441, "methodname":"testBean()", "methodnamerefined":"testBean", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ReferralBeanTest.testBean", "fullmethod":"edu.ncsu.csc.itrust.bean.ReferralBeanTest.testBean()", "classid":233, "classname":"edu.ncsu.csc.itrust.bean.ReferralBeanTest", "shortclassname":"ReferralBeanTest", "method":"public void testBean() {\r\n    ReferralBean r = new ReferralBean();\r\n    r.setId(1L);\r\n    r.setSenderID(2L);\r\n    r.setReceiverID(3L);\r\n    r.setPatientID(4L);\r\n    r.setReferralDetails(\"Five\");\r\n    r.setOvid(6L);\r\n    r.setViewedByHCP(true);\r\n    r.setViewedByPatient(true);\r\n    assertEquals(1, r.getId());\r\n    assertEquals(2, r.getSenderID());\r\n    assertEquals(3, r.getReceiverID());\r\n    assertEquals(4, r.getPatientID());\r\n    assertEquals(\"Five\", r.getReferralDetails());\r\n    assertEquals(6, r.getOvid());\r\n    assertTrue(r.isViewedByHCP());\r\n    assertTrue(r.isViewedByPatient());\r\n}"},
 {"id":1442, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ReportRequestBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.ReportRequestBeanTest.-init-()", "classid":234, "classname":"edu.ncsu.csc.itrust.bean.ReportRequestBeanTest", "shortclassname":"ReportRequestBeanTest", "method":"ReportRequestBeanTest() {\r\n}"},
 {"id":1443, "methodname":"testBadRequestedDate()", "methodnamerefined":"testBadRequestedDate", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ReportRequestBeanTest.testBadRequestedDate", "fullmethod":"edu.ncsu.csc.itrust.bean.ReportRequestBeanTest.testBadRequestedDate()", "classid":234, "classname":"edu.ncsu.csc.itrust.bean.ReportRequestBeanTest", "shortclassname":"ReportRequestBeanTest", "method":"public void testBadRequestedDate() throws Exception {\r\n    ReportRequestBean b = new ReportRequestBean();\r\n    b.setRequestedDate(null);\r\n    assertNull(b.getRequestedDate());\r\n    b.setRequestedDateString(\"bad format\");\r\n    assertNull(b.getRequestedDate());\r\n}"},
 {"id":1444, "methodname":"testReportRequestBean()", "methodnamerefined":"testReportRequestBean", "methodabbreviation":"edu.ncsu.csc.itrust.bean.ReportRequestBeanTest.testReportRequestBean", "fullmethod":"edu.ncsu.csc.itrust.bean.ReportRequestBeanTest.testReportRequestBean()", "classid":234, "classname":"edu.ncsu.csc.itrust.bean.ReportRequestBeanTest", "shortclassname":"ReportRequestBeanTest", "method":"public void testReportRequestBean() throws Exception {\r\n    ReportRequestBean b = new ReportRequestBean();\r\n    assertEquals(0L, b.getID());\r\n    // test setters\r\n    b.setID(1);\r\n    b.setRequesterMID(2);\r\n    b.setPatientMID(3);\r\n    b.setRequestedDateString(\"01/01/2008 12:00\");\r\n    b.setViewedDateString(\"03/03/2008 12:00\");\r\n    b.setStatus(ReportRequestBean.Requested);\r\n    // confirm with getters\r\n    assertEquals(1, b.getID());\r\n    assertEquals(2, b.getRequesterMID());\r\n    assertEquals(3, b.getPatientMID());\r\n    assertEquals(\"01/01/2008 12:00\", b.getRequestedDateString());\r\n    assertEquals(\"03/03/2008 12:00\", b.getViewedDateString());\r\n    assertEquals(ReportRequestBean.Requested, b.getStatus());\r\n}"},
 {"id":1445, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.SurveyBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.SurveyBeanTest.-init-()", "classid":235, "classname":"edu.ncsu.csc.itrust.bean.SurveyBeanTest", "shortclassname":"SurveyBeanTest", "method":"SurveyBeanTest() {\r\n}"},
 {"id":1446, "methodname":"testSurveyBean()", "methodnamerefined":"testSurveyBean", "methodabbreviation":"edu.ncsu.csc.itrust.bean.SurveyBeanTest.testSurveyBean", "fullmethod":"edu.ncsu.csc.itrust.bean.SurveyBeanTest.testSurveyBean()", "classid":235, "classname":"edu.ncsu.csc.itrust.bean.SurveyBeanTest", "shortclassname":"SurveyBeanTest", "method":"public void testSurveyBean() throws Exception {\r\n    SurveyBean b = new SurveyBean();\r\n    assertEquals(0L, b.getVisitID());\r\n    // test setters\r\n    b.setVisitID(1L);\r\n    b.setSurveyDateString(\"01/02/2008 12:34\");\r\n    b.setWaitingRoomMinutes(100);\r\n    b.setExamRoomMinutes(10);\r\n    b.setVisitSatisfaction(1);\r\n    b.setTreatmentSatisfaction(5);\r\n    // confirm with getters\r\n    assertEquals(1L, b.getVisitID());\r\n    assertEquals(\"01/02/2008 12:34\", b.getSurveyDateString());\r\n    assertEquals(100, b.getWaitingRoomMinutes());\r\n    assertEquals(10, b.getExamRoomMinutes());\r\n    assertEquals(1, b.getVisitSatisfaction());\r\n    assertEquals(5, b.getTreatmentSatisfaction());\r\n}"},
 {"id":1447, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.SurveyResultBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.SurveyResultBeanTest.-init-()", "classid":236, "classname":"edu.ncsu.csc.itrust.bean.SurveyResultBeanTest", "shortclassname":"SurveyResultBeanTest", "method":"SurveyResultBeanTest() {\r\n}"},
 {"id":1448, "methodname":"testSurveyResultBean()", "methodnamerefined":"testSurveyResultBean", "methodabbreviation":"edu.ncsu.csc.itrust.bean.SurveyResultBeanTest.testSurveyResultBean", "fullmethod":"edu.ncsu.csc.itrust.bean.SurveyResultBeanTest.testSurveyResultBean()", "classid":236, "classname":"edu.ncsu.csc.itrust.bean.SurveyResultBeanTest", "shortclassname":"SurveyResultBeanTest", "method":"public void testSurveyResultBean() {\r\n    // build a bean and stuff in some data\r\n    SurveyResultBean b = new SurveyResultBean();\r\n    b.setHCPMID(55L);\r\n    b.setHCPFirstName(\"Alfred\");\r\n    b.setHCPLastName(\"Kinsey\");\r\n    b.setHCPhospital(\"Kinsey Institute for Research in Sex, Gender and Reproduction\");\r\n    b.setHCPspecialty(\"Sexual Behavior\");\r\n    b.setHCPaddress1(\"1 Big O Street\");\r\n    b.setHCPaddress2(\"Obsession Suite\");\r\n    b.setHCPcity(\"Bloomington\");\r\n    b.setHCPstate(\"IN\");\r\n    b.setHCPzip(\"47401\");\r\n    b.setAvgExamRoomMinutes(55.55F);\r\n    b.setAvgWaitingRoomMinutes(44.44F);\r\n    b.setAvgVisitSatisfaction(2.2F);\r\n    b.setAvgTreatmentSatisfaction(3.3F);\r\n    b.setPercentSatisfactionResults(25.25F);\r\n    // now test the getters\r\n    assertEquals(55L, b.getHCPMID());\r\n    assertEquals(\"Alfred\", b.getHCPFirstName());\r\n    assertEquals(\"Kinsey\", b.getHCPLastName());\r\n    assertEquals(\"Kinsey Institute for Research in Sex, Gender and Reproduction\", b.getHCPhospital());\r\n    assertEquals(\"Sexual Behavior\", b.getHCPspecialty());\r\n    assertEquals(\"1 Big O Street\", b.getHCPaddress1());\r\n    assertEquals(\"Obsession Suite\", b.getHCPaddress2());\r\n    assertEquals(\"Bloomington\", b.getHCPcity());\r\n    assertEquals(\"IN\", b.getHCPstate());\r\n    assertEquals(\"47401\", b.getHCPzip());\r\n    assertEquals(55.55F, b.getAvgExamRoomMinutes());\r\n    assertEquals(44.44F, b.getAvgWaitingRoomMinutes());\r\n    assertEquals(2.2F, b.getAvgVisitSatisfaction());\r\n    assertEquals(3.3F, b.getAvgTreatmentSatisfaction());\r\n    assertEquals(25.25F, b.getPercentSatisfactionResults());\r\n}"},
 {"id":1449, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.-init-()", "classid":237, "classname":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest", "shortclassname":"TelemedicineBeanTest", "method":"TelemedicineBeanTest() {\r\n}"},
 {"id":1450, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.setUp()", "classid":237, "classname":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest", "shortclassname":"TelemedicineBeanTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    tBean = new TelemedicineBean();\r\n}"},
 {"id":1451, "methodname":"testGlucoseLevel()", "methodnamerefined":"testGlucoseLevel", "methodabbreviation":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.testGlucoseLevel", "fullmethod":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.testGlucoseLevel()", "classid":237, "classname":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest", "shortclassname":"TelemedicineBeanTest", "method":"public void testGlucoseLevel() throws Exception {\r\n    tBean.setGlucoseLevelAllowed(true);\r\n    assertTrue(tBean.isGlucoseLevelAllowed());\r\n}"},
 {"id":1452, "methodname":"testHeight()", "methodnamerefined":"testHeight", "methodabbreviation":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.testHeight", "fullmethod":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.testHeight()", "classid":237, "classname":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest", "shortclassname":"TelemedicineBeanTest", "method":"public void testHeight() throws Exception {\r\n    tBean.setHeightAllowed(true);\r\n    assertTrue(tBean.isHeightAllowed());\r\n}"},
 {"id":1453, "methodname":"testWeight()", "methodnamerefined":"testWeight", "methodabbreviation":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.testWeight", "fullmethod":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest.testWeight()", "classid":237, "classname":"edu.ncsu.csc.itrust.bean.TelemedicineBeanTest", "shortclassname":"TelemedicineBeanTest", "method":"public void testWeight() throws Exception {\r\n    tBean.setWeightAllowed(false);\r\n    assertTrue((!(tBean.isWeightAllowed())));\r\n}"},
 {"id":1454, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.VisitFlagBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.VisitFlagBeanTest.-init-()", "classid":238, "classname":"edu.ncsu.csc.itrust.bean.VisitFlagBeanTest", "shortclassname":"VisitFlagBeanTest", "method":"VisitFlagBeanTest() {\r\n}"},
 {"id":1455, "methodname":"testSetTypeAndValue()", "methodnamerefined":"testSetTypeAndValue", "methodabbreviation":"edu.ncsu.csc.itrust.bean.VisitFlagBeanTest.testSetTypeAndValue", "fullmethod":"edu.ncsu.csc.itrust.bean.VisitFlagBeanTest.testSetTypeAndValue()", "classid":238, "classname":"edu.ncsu.csc.itrust.bean.VisitFlagBeanTest", "shortclassname":"VisitFlagBeanTest", "method":"public void testSetTypeAndValue() {\r\n    VisitFlag vf = new VisitFlag(\"typeonly\");\r\n    vf.setType(\"a type\");\r\n    vf.setValue(\"the value\");\r\n    assertEquals(\"a type\", vf.getType());\r\n    assertEquals(\"the value\", vf.getValue());\r\n}"},
 {"id":1456, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.-init-()", "classid":239, "classname":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest", "shortclassname":"WardBeanLoaderTest", "method":"WardBeanLoaderTest() {\r\n}"},
 {"id":1457, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.setUp()", "classid":239, "classname":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest", "shortclassname":"WardBeanLoaderTest", "method":"protected void setUp() throws Exception {\r\n    ctrl = createControl();\r\n    rs = ctrl.createMock(ResultSet.class);\r\n}"},
 {"id":1458, "methodname":"testLoadList()", "methodnamerefined":"testLoadList", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.testLoadList", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.testLoadList()", "classid":239, "classname":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest", "shortclassname":"WardBeanLoaderTest", "method":"@Test\r\npublic void testLoadList() {\r\n    try {\r\n        list = wbl.loadList(rs);\r\n    } catch (SQLException e) {\r\n    }\r\n    assertEquals(0, list.size());\r\n}"},
 {"id":1459, "methodname":"testLoadParameters()", "methodnamerefined":"testLoadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.testLoadParameters", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.testLoadParameters()", "classid":239, "classname":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest", "shortclassname":"WardBeanLoaderTest", "method":"public void testLoadParameters() {\r\n    try {\r\n        wbl.loadParameters(null, null);\r\n        fail();\r\n    } catch (IllegalStateException e) {\r\n    } catch (SQLException e) {\r\n    }\r\n    assertTrue(true);\r\n}"},
 {"id":1460, "methodname":"testloadSingle()", "methodnamerefined":"testloadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.testloadSingle", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest.testloadSingle()", "classid":239, "classname":"edu.ncsu.csc.itrust.bean.WardBeanLoaderTest", "shortclassname":"WardBeanLoaderTest", "method":"public void testloadSingle() {\r\n    try {\r\n        expect(rs.getLong(\"WardID\")).andReturn(1L).once();\r\n        expect(rs.getString(\"RequiredSpecialty\")).andReturn(\"specialty\").once();\r\n        expect(rs.getLong(\"InHospital\")).andReturn(1L).once();\r\n        ctrl.replay();\r\n        wbl.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n    }\r\n}"},
 {"id":1461, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanTest.-init-()", "classid":240, "classname":"edu.ncsu.csc.itrust.bean.WardBeanTest", "shortclassname":"WardBeanTest", "method":"WardBeanTest() {\r\n}"},
 {"id":1462, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanTest.setUp()", "classid":240, "classname":"edu.ncsu.csc.itrust.bean.WardBeanTest", "shortclassname":"WardBeanTest", "method":"public void setUp() {\r\n    testBean = new WardBean(0, \"\", 0);\r\n    testBean2 = new WardBean(0, \"\", 0);\r\n    testBean3 = new WardBean(0, \"\", 0);\r\n}"},
 {"id":1463, "methodname":"testEquals()", "methodnamerefined":"testEquals", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanTest.testEquals", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanTest.testEquals()", "classid":240, "classname":"edu.ncsu.csc.itrust.bean.WardBeanTest", "shortclassname":"WardBeanTest", "method":"public void testEquals() {\r\n    assertTrue(testBean2.equals(testBean3));\r\n}"},
 {"id":1464, "methodname":"testInHospital()", "methodnamerefined":"testInHospital", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanTest.testInHospital", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanTest.testInHospital()", "classid":240, "classname":"edu.ncsu.csc.itrust.bean.WardBeanTest", "shortclassname":"WardBeanTest", "method":"public void testInHospital() {\r\n    testBean.setInHospital(1);\r\n    assertEquals(testBean.getInHospital(), 1L);\r\n}"},
 {"id":1465, "methodname":"testSpecialty()", "methodnamerefined":"testSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanTest.testSpecialty", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanTest.testSpecialty()", "classid":240, "classname":"edu.ncsu.csc.itrust.bean.WardBeanTest", "shortclassname":"WardBeanTest", "method":"public void testSpecialty() {\r\n    testBean.setRequiredSpecialty(\"special\");\r\n    assertEquals(testBean.getRequiredSpecialty(), \"special\");\r\n}"},
 {"id":1466, "methodname":"testWardID()", "methodnamerefined":"testWardID", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardBeanTest.testWardID", "fullmethod":"edu.ncsu.csc.itrust.bean.WardBeanTest.testWardID()", "classid":240, "classname":"edu.ncsu.csc.itrust.bean.WardBeanTest", "shortclassname":"WardBeanTest", "method":"public void testWardID() {\r\n    testBean.setWardID(1);\r\n    assertEquals(testBean.getWardID(), 1L);\r\n}"},
 {"id":1467, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.-init-()", "classid":241, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest", "shortclassname":"WardRoomBeanLoaderTest", "method":"WardRoomBeanLoaderTest() {\r\n}"},
 {"id":1468, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.setUp()", "classid":241, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest", "shortclassname":"WardRoomBeanLoaderTest", "method":"protected void setUp() throws Exception {\r\n    ctrl = createControl();\r\n    rs = ctrl.createMock(ResultSet.class);\r\n}"},
 {"id":1469, "methodname":"testLoadList()", "methodnamerefined":"testLoadList", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.testLoadList", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.testLoadList()", "classid":241, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest", "shortclassname":"WardRoomBeanLoaderTest", "method":"@Test\r\npublic void testLoadList() {\r\n    try {\r\n        list = wbl.loadList(rs);\r\n    } catch (SQLException e) {\r\n    }\r\n    assertEquals(0, list.size());\r\n}"},
 {"id":1470, "methodname":"testLoadParameters()", "methodnamerefined":"testLoadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.testLoadParameters", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.testLoadParameters()", "classid":241, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest", "shortclassname":"WardRoomBeanLoaderTest", "method":"public void testLoadParameters() {\r\n    try {\r\n        wbl.loadParameters(null, null);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n    assertTrue(true);\r\n}"},
 {"id":1471, "methodname":"testloadSingle()", "methodnamerefined":"testloadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.testloadSingle", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest.testloadSingle()", "classid":241, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanLoaderTest", "shortclassname":"WardRoomBeanLoaderTest", "method":"public void testloadSingle() {\r\n    try {\r\n        expect(rs.getLong(\"RoomID\")).andReturn(1L).once();\r\n        expect(rs.getLong(\"OccupiedBy\")).andReturn(1L).once();\r\n        expect(rs.getLong(\"InWard\")).andReturn(1L).once();\r\n        expect(rs.getString(\"roomName\")).andReturn(\"CleanRoom\").once();\r\n        expect(rs.getString(\"Status\")).andReturn(\"Clean\").once();\r\n        ctrl.replay();\r\n        wbl.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n    }\r\n}"},
 {"id":1472, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.-init-()", "classid":242, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest", "shortclassname":"WardRoomBeanTest", "method":"WardRoomBeanTest() {\r\n}"},
 {"id":1473, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.setUp()", "classid":242, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest", "shortclassname":"WardRoomBeanTest", "method":"public void setUp() {\r\n    wrb1 = new WardRoomBean(0L, 0L, 0L, \"\", \"\");\r\n    wrb2 = new WardRoomBean(0L, 0L, 0L, \"\", \"\");\r\n    wrb3 = new WardRoomBean(0L, 0L, 0L, \"\", \"\");\r\n}"},
 {"id":1474, "methodname":"testEquals()", "methodnamerefined":"testEquals", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testEquals", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testEquals()", "classid":242, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest", "shortclassname":"WardRoomBeanTest", "method":"public void testEquals() {\r\n    assertTrue(wrb2.equals(wrb3));\r\n}"},
 {"id":1475, "methodname":"testInWard()", "methodnamerefined":"testInWard", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testInWard", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testInWard()", "classid":242, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest", "shortclassname":"WardRoomBeanTest", "method":"public void testInWard() {\r\n    wrb1.setInWard(1L);\r\n    assertTrue((1L == (wrb1.getInWard())));\r\n}"},
 {"id":1476, "methodname":"testOccupiedBy()", "methodnamerefined":"testOccupiedBy", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testOccupiedBy", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testOccupiedBy()", "classid":242, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest", "shortclassname":"WardRoomBeanTest", "method":"public void testOccupiedBy() {\r\n    wrb1.setOccupiedBy(1L);\r\n    assertTrue((1L == (wrb1.getOccupiedBy())));\r\n}"},
 {"id":1477, "methodname":"testRoomID()", "methodnamerefined":"testRoomID", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testRoomID", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testRoomID()", "classid":242, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest", "shortclassname":"WardRoomBeanTest", "method":"public void testRoomID() {\r\n    wrb1.setRoomID(1L);\r\n    assertEquals(1L, wrb1.getRoomID());\r\n}"},
 {"id":1478, "methodname":"testRoomName()", "methodnamerefined":"testRoomName", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testRoomName", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testRoomName()", "classid":242, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest", "shortclassname":"WardRoomBeanTest", "method":"public void testRoomName() {\r\n    wrb1.setRoomName(\"name\");\r\n    assertTrue(wrb1.getRoomName().equals(\"name\"));\r\n}"},
 {"id":1479, "methodname":"testRoomStatus()", "methodnamerefined":"testRoomStatus", "methodabbreviation":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testRoomStatus", "fullmethod":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest.testRoomStatus()", "classid":242, "classname":"edu.ncsu.csc.itrust.bean.WardRoomBeanTest", "shortclassname":"WardRoomBeanTest", "method":"public void testRoomStatus() {\r\n    wrb1.setStatus(\"name\");\r\n    assertTrue(wrb1.getStatus().equals(\"name\"));\r\n}"},
 {"id":1480, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.-init-()", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"AdverseEventBean() {\r\n}"},
 {"id":1481, "methodname":"getCode()", "methodnamerefined":"getCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getCode", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getCode()", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"public String getCode() {\r\n    return code;\r\n}"},
 {"id":1482, "methodname":"getDate()", "methodnamerefined":"getDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getDate", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getDate()", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @return the date\r\n */\r\npublic String getDate() {\r\n    return date;\r\n}"},
 {"id":1483, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getDescription()", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @return the description\r\n */\r\npublic String getDescription() {\r\n    return description;\r\n}"},
 {"id":1484, "methodname":"getDrug()", "methodnamerefined":"getDrug", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getDrug", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getDrug()", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @return the drug the event is being reported for\r\n */\r\npublic String getDrug() {\r\n    return drug;\r\n}"},
 {"id":1485, "methodname":"getId()", "methodnamerefined":"getId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getId", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getId()", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @return the id\r\n */\r\npublic int getId() {\r\n    return id;\r\n}"},
 {"id":1486, "methodname":"getMID()", "methodnamerefined":"getMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getMID", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getMID()", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @return the patient MID\r\n */\r\npublic String getMID() {\r\n    return MID;\r\n}"},
 {"id":1487, "methodname":"getPrescriber()", "methodnamerefined":"getPrescriber", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getPrescriber", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getPrescriber()", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"public String getPrescriber() {\r\n    return Prescriber;\r\n}"},
 {"id":1488, "methodname":"getStatus()", "methodnamerefined":"getStatus", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getStatus", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.getStatus()", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"public String getStatus() {\r\n    return status;\r\n}"},
 {"id":1489, "methodname":"setCode(java.lang.String)", "methodnamerefined":"setCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setCode", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setCode(java.lang.String)", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"public void setCode(String code) {\r\n    this.code = code;\r\n}"},
 {"id":1490, "methodname":"setDate(java.lang.String)", "methodnamerefined":"setDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setDate", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setDate(java.lang.String)", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @param date\r\n * \t\tthe date to set\r\n */\r\npublic void setDate(String date) {\r\n    this.date = date;\r\n}"},
 {"id":1491, "methodname":"setDescription(java.lang.String)", "methodnamerefined":"setDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setDescription(java.lang.String)", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @param description\r\n * \t\tthe description to set\r\n */\r\npublic void setDescription(String description) {\r\n    this.description = description;\r\n}"},
 {"id":1492, "methodname":"setDrug(java.lang.String)", "methodnamerefined":"setDrug", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setDrug", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setDrug(java.lang.String)", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @param drug\r\n * \t\tsets the drug the event is being reported for\r\n */\r\npublic void setDrug(String drug) {\r\n    this.drug = drug;\r\n}"},
 {"id":1493, "methodname":"setId(int)", "methodnamerefined":"setId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setId", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setId(int)", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @param id\r\n * \t\tthe id to set\r\n */\r\npublic void setId(int id) {\r\n    this.id = id;\r\n}"},
 {"id":1494, "methodname":"setMID(java.lang.String)", "methodnamerefined":"setMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setMID", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setMID(java.lang.String)", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"/**\r\n *\r\n *\r\n * @param mID\r\n * \t\tthe patients MID\r\n */\r\npublic void setMID(String mID) {\r\n    MID = mID;\r\n}"},
 {"id":1495, "methodname":"setPrescriber(java.lang.String)", "methodnamerefined":"setPrescriber", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setPrescriber", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setPrescriber(java.lang.String)", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"public void setPrescriber(String prescriber) {\r\n    Prescriber = prescriber;\r\n}"},
 {"id":1496, "methodname":"setStatus(java.lang.String)", "methodnamerefined":"setStatus", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setStatus", "fullmethod":"edu.ncsu.csc.itrust.beans.AdverseEventBean.setStatus(java.lang.String)", "classid":243, "classname":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "shortclassname":"AdverseEventBean", "method":"public void setStatus(String status) {\r\n    this.status = status;\r\n}"},
 {"id":1497, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.-init-()", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public AllergyBean() {\r\n}"},
 {"id":1498, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.getDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.getDescription()", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public String getDescription() {\r\n    return description;\r\n}"},
 {"id":1499, "methodname":"getFirstFound()", "methodnamerefined":"getFirstFound", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.getFirstFound", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.getFirstFound()", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public Date getFirstFound() {\r\n    if ((firstFound) == null) {\r\n        return null;\r\n    }\r\n    return ((Date) (firstFound.clone()));\r\n}"},
 {"id":1500, "methodname":"getFirstFoundStr()", "methodnamerefined":"getFirstFoundStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.getFirstFoundStr", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.getFirstFoundStr()", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public String getFirstFoundStr() {\r\n    try {\r\n        return new SimpleDateFormat(\"MM/dd/yyyy\").format(getFirstFound());\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return \"\";\r\n    }\r\n}"},
 {"id":1501, "methodname":"getId()", "methodnamerefined":"getId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.getId", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.getId()", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public long getId() {\r\n    return id;\r\n}"},
 {"id":1502, "methodname":"getNDCode()", "methodnamerefined":"getNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.getNDCode", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.getNDCode()", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public String getNDCode() {\r\n    return ndcode;\r\n}"},
 {"id":1503, "methodname":"getPatientID()", "methodnamerefined":"getPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.getPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.getPatientID()", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public long getPatientID() {\r\n    return patientID;\r\n}"},
 {"id":1504, "methodname":"setDescription(java.lang.String)", "methodnamerefined":"setDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.setDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.setDescription(java.lang.String)", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public void setDescription(String description) {\r\n    this.description = description;\r\n}"},
 {"id":1505, "methodname":"setFirstFound(java.util.Date)", "methodnamerefined":"setFirstFound", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.setFirstFound", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.setFirstFound(java.util.Date)", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public void setFirstFound(Date firstFound) {\r\n    if (null != firstFound)\r\n        this.firstFound = ((Date) (firstFound.clone()));\r\n    else\r\n        this.firstFound = null;\r\n\r\n}"},
 {"id":1506, "methodname":"setId(long)", "methodnamerefined":"setId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.setId", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.setId(long)", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public void setId(long id) {\r\n    this.id = id;\r\n}"},
 {"id":1507, "methodname":"setNDCode(java.lang.String)", "methodnamerefined":"setNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.setNDCode", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.setNDCode(java.lang.String)", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public void setNDCode(String ndcode) {\r\n    this.ndcode = ndcode;\r\n}"},
 {"id":1508, "methodname":"setPatientID(long)", "methodnamerefined":"setPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.setPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.setPatientID(long)", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}"},
 {"id":1509, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.AllergyBean.toString", "fullmethod":"edu.ncsu.csc.itrust.beans.AllergyBean.toString()", "classid":244, "classname":"edu.ncsu.csc.itrust.beans.AllergyBean", "shortclassname":"AllergyBean", "method":"@Override\r\npublic String toString() {\r\n    return this.description;\r\n}"},
 {"id":1510, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.-init-()", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"ApptBean() {\r\n}"},
 {"id":1511, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.equals(java.lang.Object)", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n * Returns true if both ids are equal. Probably needs more advance field by field checking.\r\n */\r\n@Override\r\npublic boolean equals(Object other) {\r\n    if ((this) == other) {\r\n        return true;\r\n    }\r\n    if (!(other instanceof ApptBean)) {\r\n        return false;\r\n    }\r\n    ApptBean otherAppt = ((ApptBean) (other));\r\n    return (otherAppt.getApptID()) == (getApptID());\r\n}"},
 {"id":1512, "methodname":"getApptID()", "methodnamerefined":"getApptID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.getApptID", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.getApptID()", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"public int getApptID() {\r\n    return apptID;\r\n}"},
 {"id":1513, "methodname":"getApptType()", "methodnamerefined":"getApptType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.getApptType", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.getApptType()", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @return the apptType\r\n */\r\npublic String getApptType() {\r\n    return apptType;\r\n}"},
 {"id":1514, "methodname":"getComment()", "methodnamerefined":"getComment", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.getComment", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.getComment()", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @return the comment\r\n */\r\npublic String getComment() {\r\n    return comment;\r\n}"},
 {"id":1515, "methodname":"getDate()", "methodnamerefined":"getDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.getDate", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.getDate()", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @return the date\r\n */\r\npublic Timestamp getDate() {\r\n    return date;\r\n}"},
 {"id":1516, "methodname":"getHcp()", "methodnamerefined":"getHcp", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.getHcp", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.getHcp()", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @return the hcp\r\n */\r\npublic long getHcp() {\r\n    return hcp;\r\n}"},
 {"id":1517, "methodname":"getPatient()", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.getPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.getPatient()", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @return the patient\r\n */\r\npublic long getPatient() {\r\n    return patient;\r\n}"},
 {"id":1518, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.hashCode()", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not implemented\";\r\n    return apptID;// any arbitrary constant will do\r\n\r\n}"},
 {"id":1519, "methodname":"setApptID(int)", "methodnamerefined":"setApptID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.setApptID", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.setApptID(int)", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @param apptID\r\n * \t\tthe apptID to set\r\n */\r\npublic void setApptID(int apptID) {\r\n    this.apptID = apptID;\r\n}"},
 {"id":1520, "methodname":"setApptType(java.lang.String)", "methodnamerefined":"setApptType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.setApptType", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.setApptType(java.lang.String)", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @param apptType\r\n * \t\tthe apptType to set\r\n */\r\npublic void setApptType(String apptType) {\r\n    this.apptType = apptType;\r\n}"},
 {"id":1521, "methodname":"setComment(java.lang.String)", "methodnamerefined":"setComment", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.setComment", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.setComment(java.lang.String)", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @param comment\r\n * \t\tthe comment to set\r\n */\r\npublic void setComment(String comment) {\r\n    this.comment = comment;\r\n}"},
 {"id":1522, "methodname":"setDate(java.sql.Timestamp)", "methodnamerefined":"setDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.setDate", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.setDate(java.sql.Timestamp)", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @param date\r\n * \t\tthe date to set\r\n */\r\npublic void setDate(Timestamp date) {\r\n    this.date = date;\r\n}"},
 {"id":1523, "methodname":"setHcp(long)", "methodnamerefined":"setHcp", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.setHcp", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.setHcp(long)", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @param hcp\r\n * \t\tthe hcp to set\r\n */\r\npublic void setHcp(long hcp) {\r\n    this.hcp = hcp;\r\n}"},
 {"id":1524, "methodname":"setPatient(long)", "methodnamerefined":"setPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptBean.setPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptBean.setPatient(long)", "classid":245, "classname":"edu.ncsu.csc.itrust.beans.ApptBean", "shortclassname":"ApptBean", "method":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\tthe patient to set\r\n */\r\npublic void setPatient(long patient) {\r\n    this.patient = patient;\r\n}"},
 {"id":1525, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptRequestBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptRequestBean.-init-()", "classid":246, "classname":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "shortclassname":"ApptRequestBean", "method":"ApptRequestBean() {\r\n}"},
 {"id":1526, "methodname":"getRequestedAppt()", "methodnamerefined":"getRequestedAppt", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptRequestBean.getRequestedAppt", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptRequestBean.getRequestedAppt()", "classid":246, "classname":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "shortclassname":"ApptRequestBean", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic ApptBean getRequestedAppt() {\r\n    return requestedAppt;\r\n}"},
 {"id":1527, "methodname":"isAccepted()", "methodnamerefined":"isAccepted", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptRequestBean.isAccepted", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptRequestBean.isAccepted()", "classid":246, "classname":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "shortclassname":"ApptRequestBean", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic boolean isAccepted() {\r\n    return ((status) != null) && (status.booleanValue());\r\n}"},
 {"id":1528, "methodname":"isPending()", "methodnamerefined":"isPending", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptRequestBean.isPending", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptRequestBean.isPending()", "classid":246, "classname":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "shortclassname":"ApptRequestBean", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic boolean isPending() {\r\n    return (status) == null;\r\n}"},
 {"id":1529, "methodname":"setAccepted(boolean)", "methodnamerefined":"setAccepted", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptRequestBean.setAccepted", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptRequestBean.setAccepted(boolean)", "classid":246, "classname":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "shortclassname":"ApptRequestBean", "method":"/**\r\n * If setPending(false) has not been called before using this method, this method will have no effect.\r\n *\r\n * @param accepted\r\n * \t\t\r\n */\r\npublic void setAccepted(boolean accepted) {\r\n    if ((status) != null) {\r\n        status = Boolean.valueOf(accepted);\r\n    }\r\n}"},
 {"id":1530, "methodname":"setPending(boolean)", "methodnamerefined":"setPending", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptRequestBean.setPending", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptRequestBean.setPending(boolean)", "classid":246, "classname":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "shortclassname":"ApptRequestBean", "method":"/**\r\n *\r\n *\r\n * @param pending\r\n * \t\t\r\n */\r\npublic void setPending(boolean pending) {\r\n    if (pending) {\r\n        status = null;\r\n    } else {\r\n        status = new Boolean(false);\r\n    }\r\n}"},
 {"id":1531, "methodname":"setRequestedAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"setRequestedAppt", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptRequestBean.setRequestedAppt", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptRequestBean.setRequestedAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "classid":246, "classname":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "shortclassname":"ApptRequestBean", "method":"/**\r\n *\r\n *\r\n * @param appt\r\n * \t\t\r\n */\r\npublic void setRequestedAppt(ApptBean appt) {\r\n    requestedAppt = appt;\r\n}"},
 {"id":1532, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptTypeBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptTypeBean.-init-()", "classid":247, "classname":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "shortclassname":"ApptTypeBean", "method":"public ApptTypeBean() {\r\n    this.name = null;\r\n    this.duration = 0;\r\n}"},
 {"id":1533, "methodname":"-init-(java.lang.String,int)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptTypeBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptTypeBean.-init-(java.lang.String,int)", "classid":247, "classname":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "shortclassname":"ApptTypeBean", "method":"public ApptTypeBean(String name, int duration) {\r\n    this.name = name;\r\n    this.duration = duration;\r\n}"},
 {"id":1534, "methodname":"getDuration()", "methodnamerefined":"getDuration", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptTypeBean.getDuration", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptTypeBean.getDuration()", "classid":247, "classname":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "shortclassname":"ApptTypeBean", "method":"public int getDuration() {\r\n    return duration;\r\n}"},
 {"id":1535, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptTypeBean.getName", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptTypeBean.getName()", "classid":247, "classname":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "shortclassname":"ApptTypeBean", "method":"public String getName() {\r\n    return name;\r\n}"},
 {"id":1536, "methodname":"setDuration(int)", "methodnamerefined":"setDuration", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptTypeBean.setDuration", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptTypeBean.setDuration(int)", "classid":247, "classname":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "shortclassname":"ApptTypeBean", "method":"public void setDuration(int duration) {\r\n    this.duration = duration;\r\n}"},
 {"id":1537, "methodname":"setName(java.lang.String)", "methodnamerefined":"setName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ApptTypeBean.setName", "fullmethod":"edu.ncsu.csc.itrust.beans.ApptTypeBean.setName(java.lang.String)", "classid":247, "classname":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "shortclassname":"ApptTypeBean", "method":"public void setName(String name) {\r\n    this.name = name;\r\n}"},
 {"id":1538, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-()", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public DiagnosisBean() {\r\n}"},
 {"id":1539, "methodname":"-init-(java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-(java.lang.String,java.lang.String,java.lang.String)", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"/**\r\n * This functionality will be moved elsewhere.\r\n */\r\npublic DiagnosisBean(String code, String description, String classification) {\r\n    this.icdCode = code;\r\n    this.description = description;\r\n    if ((null != classification) && (classification.equals(\"yes\"))) {\r\n        this.classification = classification;\r\n    } else {\r\n        this.classification = \"no\";\r\n    }\r\n}"},
 {"id":1540, "methodname":"-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public DiagnosisBean(String code, String description, String classification, String URL) {\r\n    this.icdCode = code;\r\n    this.description = description;\r\n    this.URL = URL;\r\n    if ((null != classification) && (classification.equals(\"yes\"))) {\r\n        this.classification = classification;\r\n    } else {\r\n        this.classification = \"no\";\r\n    }\r\n}"},
 {"id":1541, "methodname":"getClassification()", "methodnamerefined":"getClassification", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getClassification", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getClassification()", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public String getClassification() {\r\n    return classification;\r\n}"},
 {"id":1542, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getDescription()", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"/**\r\n * Gets the ICD Description for this procedure\r\n *\r\n * @return The ICD Description for this procedure\r\n */\r\npublic String getDescription() {\r\n    return description;\r\n}"},
 {"id":1543, "methodname":"getFormattedDescription()", "methodnamerefined":"getFormattedDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getFormattedDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getFormattedDescription()", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public String getFormattedDescription() {\r\n    return (((description) + \"(\") + (icdCode)) + \")\";\r\n}"},
 {"id":1544, "methodname":"getICDCode()", "methodnamerefined":"getICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getICDCode", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getICDCode()", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"/**\r\n * Gets the ICD Code for this procedure\r\n *\r\n * @return The ICD Code for this procedure\r\n */\r\npublic String getICDCode() {\r\n    return icdCode;\r\n}"},
 {"id":1545, "methodname":"getOvDiagnosisID()", "methodnamerefined":"getOvDiagnosisID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getOvDiagnosisID", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getOvDiagnosisID()", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"/**\r\n * Optional - for use with editing an office visit\r\n *\r\n * @return \r\n */\r\npublic long getOvDiagnosisID() {\r\n    return ovDiagnosisID;\r\n}"},
 {"id":1546, "methodname":"getURL()", "methodnamerefined":"getURL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getURL", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getURL()", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public String getURL() {\r\n    return URL;\r\n}"},
 {"id":1547, "methodname":"getVisitID()", "methodnamerefined":"getVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.getVisitID()", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public long getVisitID() {\r\n    return visitID;\r\n}"},
 {"id":1548, "methodname":"setDescription(java.lang.String)", "methodnamerefined":"setDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setDescription(java.lang.String)", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public void setDescription(String description) {\r\n    this.description = description;\r\n}"},
 {"id":1549, "methodname":"setICDCode(java.lang.String)", "methodnamerefined":"setICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setICDCode", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setICDCode(java.lang.String)", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public void setICDCode(String code) {\r\n    icdCode = code;\r\n}"},
 {"id":1550, "methodname":"setOvDiagnosisID(long)", "methodnamerefined":"setOvDiagnosisID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setOvDiagnosisID", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setOvDiagnosisID(long)", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public void setOvDiagnosisID(long ovDiagnosisID) {\r\n    this.ovDiagnosisID = ovDiagnosisID;\r\n}"},
 {"id":1551, "methodname":"setURL(java.lang.String)", "methodnamerefined":"setURL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setURL", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setURL(java.lang.String)", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public void setURL(String newURL) {\r\n    URL = newURL;\r\n}"},
 {"id":1552, "methodname":"setVisitID(long)", "methodnamerefined":"setVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisBean.setVisitID(long)", "classid":248, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "shortclassname":"DiagnosisBean", "method":"public void setVisitID(long vid) {\r\n    visitID = vid;\r\n}"},
 {"id":1553, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-()", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Constructor for an empty bean\r\n */\r\npublic DiagnosisStatisticsBean() {\r\n}"},
 {"id":1554, "methodname":"-init-(java.lang.String,long,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long)", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * \t\tThe zip code analyzed\r\n * @param zipStats\r\n * \t\tThe count of diagnoses for the zip code\r\n * @param regionStats\r\n * \t\tThe count of diagnoses for the region\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n}"},
 {"id":1555, "methodname":"-init-(java.lang.String,long,long,java.util.Date,java.util.Date)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.-init-(java.lang.String,long,long,java.util.Date,java.util.Date)", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Constructor for the bean. Accepts stats and zip code\r\n *\r\n * @param zipCode\r\n * \t\tThe zip code analyzed\r\n * @param zipStats\r\n * \t\tThe count of diagnoses for the zip code\r\n * @param regionStats\r\n * \t\tThe count of diagnoses for the region\r\n * @param startDate\r\n * \t\tThe beginning of the datas time period\r\n * @param endDate\r\n * \t\tThe end of the datas time period\r\n */\r\npublic DiagnosisStatisticsBean(String zipCode, long zipStats, long regionStats, Date startDate, Date endDate) {\r\n    this.zipCode = zipCode;\r\n    this.zipStats = zipStats;\r\n    this.regionStats = regionStats;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n}"},
 {"id":1556, "methodname":"getEndDate()", "methodnamerefined":"getEndDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getEndDate", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getEndDate()", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Getter for End Date\r\n *\r\n * @return The end date for the data\r\n */\r\npublic Date getEndDate() {\r\n    return endDate;\r\n}"},
 {"id":1557, "methodname":"getRegionStats()", "methodnamerefined":"getRegionStats", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getRegionStats", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getRegionStats()", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Getter for Region count\r\n *\r\n * @return The count of diagnoses for the region\r\n */\r\npublic long getRegionStats() {\r\n    return regionStats;\r\n}"},
 {"id":1558, "methodname":"getStartDate()", "methodnamerefined":"getStartDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getStartDate", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getStartDate()", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Getter for Start Date\r\n *\r\n * @return The start date for the data\r\n */\r\npublic Date getStartDate() {\r\n    return startDate;\r\n}"},
 {"id":1559, "methodname":"getZipCode()", "methodnamerefined":"getZipCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getZipCode", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getZipCode()", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Getter for Zip code\r\n *\r\n * @return The stored Zip code\r\n */\r\npublic String getZipCode() {\r\n    return zipCode;\r\n}"},
 {"id":1560, "methodname":"getZipStats()", "methodnamerefined":"getZipStats", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getZipStats", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.getZipStats()", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Getter for Zip code count\r\n *\r\n * @return The count of diagnoses for the zip code\r\n */\r\npublic long getZipStats() {\r\n    return zipStats;\r\n}"},
 {"id":1561, "methodname":"setEndDate(java.util.Date)", "methodnamerefined":"setEndDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setEndDate", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setEndDate(java.util.Date)", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Setter for the End Date\r\n *\r\n * @param endDate\r\n * \t\t\r\n */\r\npublic void setEndDate(Date endDate) {\r\n    this.endDate = endDate;\r\n}"},
 {"id":1562, "methodname":"setRegionStats(long)", "methodnamerefined":"setRegionStats", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setRegionStats", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setRegionStats(long)", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Setter for Region count\r\n *\r\n * @param regionStats\r\n * \t\tThe count of regional diagnoses to be stored\r\n */\r\npublic void setRegionStats(long regionStats) {\r\n    this.regionStats = regionStats;\r\n}"},
 {"id":1563, "methodname":"setStartDate(java.util.Date)", "methodnamerefined":"setStartDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setStartDate", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setStartDate(java.util.Date)", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Setter for Start Date\r\n *\r\n * @param startDate\r\n * \t\tThe datas start date\r\n */\r\npublic void setStartDate(Date startDate) {\r\n    this.startDate = startDate;\r\n}"},
 {"id":1564, "methodname":"setZipCode(java.lang.String)", "methodnamerefined":"setZipCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setZipCode", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setZipCode(java.lang.String)", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Setter for Zip code\r\n *\r\n * @param zipCode\r\n * \t\tThe zip code to be stored\r\n */\r\npublic void setZipCode(String zipCode) {\r\n    this.zipCode = zipCode;\r\n}"},
 {"id":1565, "methodname":"setZipStats(long)", "methodnamerefined":"setZipStats", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setZipStats", "fullmethod":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean.setZipStats(long)", "classid":249, "classname":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "shortclassname":"DiagnosisStatisticsBean", "method":"/**\r\n * Setter for Zip code count\r\n *\r\n * @param zipStats\r\n * \t\tThe count of diagnoses to be stored\r\n */\r\npublic void setZipStats(long zipStats) {\r\n    this.zipStats = zipStats;\r\n}"},
 {"id":1566, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.-init-()", "classid":250, "classname":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "shortclassname":"DrugInteractionBean", "method":"DrugInteractionBean() {\r\n}"},
 {"id":1567, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.getDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.getDescription()", "classid":250, "classname":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "shortclassname":"DrugInteractionBean", "method":"/**\r\n *\r\n *\r\n * @return the description\r\n */\r\npublic String getDescription() {\r\n    return description;\r\n}"},
 {"id":1568, "methodname":"getFirstDrug()", "methodnamerefined":"getFirstDrug", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.getFirstDrug", "fullmethod":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.getFirstDrug()", "classid":250, "classname":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "shortclassname":"DrugInteractionBean", "method":"/**\r\n *\r\n *\r\n * @return the firstDrug\r\n */\r\npublic String getFirstDrug() {\r\n    return firstDrug;\r\n}"},
 {"id":1569, "methodname":"getSecondDrug()", "methodnamerefined":"getSecondDrug", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.getSecondDrug", "fullmethod":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.getSecondDrug()", "classid":250, "classname":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "shortclassname":"DrugInteractionBean", "method":"/**\r\n *\r\n *\r\n * @return the secondDrug\r\n */\r\npublic String getSecondDrug() {\r\n    return secondDrug;\r\n}"},
 {"id":1570, "methodname":"setDescription(java.lang.String)", "methodnamerefined":"setDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.setDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.setDescription(java.lang.String)", "classid":250, "classname":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "shortclassname":"DrugInteractionBean", "method":"/**\r\n *\r\n *\r\n * @param description\r\n * \t\tthe description to set\r\n */\r\npublic void setDescription(String description) {\r\n    this.description = description;\r\n}"},
 {"id":1571, "methodname":"setFirstDrug(java.lang.String)", "methodnamerefined":"setFirstDrug", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.setFirstDrug", "fullmethod":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.setFirstDrug(java.lang.String)", "classid":250, "classname":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "shortclassname":"DrugInteractionBean", "method":"/**\r\n *\r\n *\r\n * @param firstDrug\r\n * \t\tthe firstDrug to set\r\n */\r\npublic void setFirstDrug(String firstDrug) {\r\n    this.firstDrug = firstDrug;\r\n}"},
 {"id":1572, "methodname":"setSecondDrug(java.lang.String)", "methodnamerefined":"setSecondDrug", "methodabbreviation":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.setSecondDrug", "fullmethod":"edu.ncsu.csc.itrust.beans.DrugInteractionBean.setSecondDrug(java.lang.String)", "classid":250, "classname":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "shortclassname":"DrugInteractionBean", "method":"/**\r\n *\r\n *\r\n * @param secondDrug\r\n * \t\tthe secondDrug to set\r\n */\r\npublic void setSecondDrug(String secondDrug) {\r\n    this.secondDrug = secondDrug;\r\n}"},
 {"id":1573, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.-init-()", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"Email() {\r\n}"},
 {"id":1574, "methodname":"equals(edu.ncsu.csc.itrust.beans.Email)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.equals(edu.ncsu.csc.itrust.beans.Email)", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"private boolean equals(Email other) {\r\n    return (((from.equals(other.from)) && (subject.equals(other.subject))) && (body.equals(other.body))) && (listEquals(toList, other.toList));\r\n}"},
 {"id":1575, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.equals(java.lang.Object)", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((Email) (obj))));\r\n}"},
 {"id":1576, "methodname":"getBody()", "methodnamerefined":"getBody", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.getBody", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.getBody()", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public String getBody() {\r\n    return body;\r\n}"},
 {"id":1577, "methodname":"getFrom()", "methodnamerefined":"getFrom", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.getFrom", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.getFrom()", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public String getFrom() {\r\n    return from;\r\n}"},
 {"id":1578, "methodname":"getSubject()", "methodnamerefined":"getSubject", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.getSubject", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.getSubject()", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public String getSubject() {\r\n    return subject;\r\n}"},
 {"id":1579, "methodname":"getTimeAdded()", "methodnamerefined":"getTimeAdded", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.getTimeAdded", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.getTimeAdded()", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public Timestamp getTimeAdded() {\r\n    return timeAdded;\r\n}"},
 {"id":1580, "methodname":"getToList()", "methodnamerefined":"getToList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.getToList", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.getToList()", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public List<String> getToList() {\r\n    return toList;\r\n}"},
 {"id":1581, "methodname":"getToListStr()", "methodnamerefined":"getToListStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.getToListStr", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.getToListStr()", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public String getToListStr() {\r\n    String str = \"\";\r\n    for (String addr : toList) {\r\n        str += addr + \",\";\r\n    }\r\n    if ((str.length()) < 1)\r\n        return str;\r\n    else\r\n        return str.substring(0, ((str.length()) - 1));\r\n\r\n}"},
 {"id":1582, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.hashCode()", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":1583, "methodname":"listEquals(java.util.List,java.util.List)", "methodnamerefined":"listEquals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.listEquals", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.listEquals(java.util.List,java.util.List)", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"private boolean listEquals(List<String> toList, List<String> otherToList) {\r\n    if ((toList.size()) != (otherToList.size()))\r\n        return false;\r\n\r\n    for (int i = 0; i < (toList.size()); i++) {\r\n        if (!(toList.get(i).equals(otherToList.get(i))))\r\n            return false;\r\n\r\n    }\r\n    return true;\r\n}"},
 {"id":1584, "methodname":"setBody(java.lang.String)", "methodnamerefined":"setBody", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.setBody", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.setBody(java.lang.String)", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public void setBody(String body) {\r\n    this.body = body;\r\n}"},
 {"id":1585, "methodname":"setFrom(java.lang.String)", "methodnamerefined":"setFrom", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.setFrom", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.setFrom(java.lang.String)", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public void setFrom(String from) {\r\n    this.from = from;\r\n}"},
 {"id":1586, "methodname":"setSubject(java.lang.String)", "methodnamerefined":"setSubject", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.setSubject", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.setSubject(java.lang.String)", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public void setSubject(String subject) {\r\n    this.subject = subject;\r\n}"},
 {"id":1587, "methodname":"setTimeAdded(java.sql.Timestamp)", "methodnamerefined":"setTimeAdded", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.setTimeAdded", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.setTimeAdded(java.sql.Timestamp)", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public void setTimeAdded(Timestamp timeAdded) {\r\n    this.timeAdded = timeAdded;\r\n}"},
 {"id":1588, "methodname":"setToList(java.util.List)", "methodnamerefined":"setToList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.setToList", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.setToList(java.util.List)", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"public void setToList(List<String> toList) {\r\n    this.toList = toList;\r\n}"},
 {"id":1589, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.Email.toString", "fullmethod":"edu.ncsu.csc.itrust.beans.Email.toString()", "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "shortclassname":"Email", "method":"@Override\r\npublic String toString() {\r\n    return ((((((\"FROM: \" + (from)) + \" TO: \") + (toList.toString())) + \" SUBJECT: \") + (subject)) + \" BODY: \") + (body);\r\n}"},
 {"id":1590, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.-init-()", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public FamilyMemberBean() {\r\n}"},
 {"id":1591, "methodname":"getFirstName()", "methodnamerefined":"getFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getFirstName()", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public String getFirstName() {\r\n    return firstName;\r\n}"},
 {"id":1592, "methodname":"getFullName()", "methodnamerefined":"getFullName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getFullName", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getFullName()", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public String getFullName() {\r\n    return ((getFirstName()) + \" \") + (getLastName());\r\n}"},
 {"id":1593, "methodname":"getLastName()", "methodnamerefined":"getLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getLastName()", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public String getLastName() {\r\n    return lastName;\r\n}"},
 {"id":1594, "methodname":"getMid()", "methodnamerefined":"getMid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getMid", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getMid()", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public long getMid() {\r\n    return mid;\r\n}"},
 {"id":1595, "methodname":"getRelation()", "methodnamerefined":"getRelation", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getRelation", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.getRelation()", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public String getRelation() {\r\n    return relation;\r\n}"},
 {"id":1596, "methodname":"setFirstName(java.lang.String)", "methodnamerefined":"setFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.setFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.setFirstName(java.lang.String)", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public void setFirstName(String firstName) {\r\n    this.firstName = firstName;\r\n}"},
 {"id":1597, "methodname":"setLastName(java.lang.String)", "methodnamerefined":"setLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.setLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.setLastName(java.lang.String)", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public void setLastName(String lastName) {\r\n    this.lastName = lastName;\r\n}"},
 {"id":1598, "methodname":"setMid(long)", "methodnamerefined":"setMid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.setMid", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.setMid(long)", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public void setMid(long mid) {\r\n    this.mid = mid;\r\n}"},
 {"id":1599, "methodname":"setRelation(java.lang.String)", "methodnamerefined":"setRelation", "methodabbreviation":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.setRelation", "fullmethod":"edu.ncsu.csc.itrust.beans.FamilyMemberBean.setRelation(java.lang.String)", "classid":252, "classname":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "shortclassname":"FamilyMemberBean", "method":"public void setRelation(String relation) {\r\n    this.relation = relation;\r\n}"},
 {"id":1600, "methodname":"-init-(java.util.List,java.util.List)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.GroupReportBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.GroupReportBean.-init-(java.util.List,java.util.List)", "classid":253, "classname":"edu.ncsu.csc.itrust.beans.GroupReportBean", "shortclassname":"GroupReportBean", "method":"/**\r\n *\r\n *\r\n * @param patients\r\n * \t\t\r\n * @param filters\r\n * \t\t\r\n */\r\npublic GroupReportBean(List<PatientBean> patients, List<ReportFilter> filters) {\r\n    this.patients = patients;\r\n    this.filters = filters;\r\n}"},
 {"id":1601, "methodname":"getFilterStrings()", "methodnamerefined":"getFilterStrings", "methodabbreviation":"edu.ncsu.csc.itrust.beans.GroupReportBean.getFilterStrings", "fullmethod":"edu.ncsu.csc.itrust.beans.GroupReportBean.getFilterStrings()", "classid":253, "classname":"edu.ncsu.csc.itrust.beans.GroupReportBean", "shortclassname":"GroupReportBean", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic List<String> getFilterStrings() {\r\n    List<String> out = new ArrayList<String>();\r\n    for (ReportFilter filter : filters) {\r\n        out.add(filter.toString());\r\n    }\r\n    return out;\r\n}"},
 {"id":1602, "methodname":"getFilters()", "methodnamerefined":"getFilters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.GroupReportBean.getFilters", "fullmethod":"edu.ncsu.csc.itrust.beans.GroupReportBean.getFilters()", "classid":253, "classname":"edu.ncsu.csc.itrust.beans.GroupReportBean", "shortclassname":"GroupReportBean", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic List<ReportFilter> getFilters() {\r\n    return filters;\r\n}"},
 {"id":1603, "methodname":"getPatientNames()", "methodnamerefined":"getPatientNames", "methodabbreviation":"edu.ncsu.csc.itrust.beans.GroupReportBean.getPatientNames", "fullmethod":"edu.ncsu.csc.itrust.beans.GroupReportBean.getPatientNames()", "classid":253, "classname":"edu.ncsu.csc.itrust.beans.GroupReportBean", "shortclassname":"GroupReportBean", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic List<String> getPatientNames() {\r\n    List<String> out = new ArrayList<String>();\r\n    for (PatientBean patient : patients) {\r\n        out.add(patient.getFullName());\r\n    }\r\n    return out;\r\n}"},
 {"id":1604, "methodname":"getPatients()", "methodnamerefined":"getPatients", "methodabbreviation":"edu.ncsu.csc.itrust.beans.GroupReportBean.getPatients", "fullmethod":"edu.ncsu.csc.itrust.beans.GroupReportBean.getPatients()", "classid":253, "classname":"edu.ncsu.csc.itrust.beans.GroupReportBean", "shortclassname":"GroupReportBean", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic List<PatientBean> getPatients() {\r\n    return patients;\r\n}"},
 {"id":1605, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.-init-()", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public HCPDiagnosisBean() {\r\n    numPatients = 0;\r\n    visitSat = 0;\r\n    treatmentSat = 0;\r\n    surveyCount = 0;\r\n}"},
 {"id":1606, "methodname":"getHCP()", "methodnamerefined":"getHCP", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getHCP", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getHCP()", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public long getHCP() {\r\n    return HCPID;\r\n}"},
 {"id":1607, "methodname":"getHCPName()", "methodnamerefined":"getHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getHCPName", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getHCPName()", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public String getHCPName() {\r\n    return HCPname;\r\n}"},
 {"id":1608, "methodname":"getLabList()", "methodnamerefined":"getLabList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getLabList", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getLabList()", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public List<LabProcedureBean> getLabList() {\r\n    return labList;\r\n}"},
 {"id":1609, "methodname":"getMedList()", "methodnamerefined":"getMedList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getMedList", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getMedList()", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public List<MedicationBean> getMedList() {\r\n    return medList;\r\n}"},
 {"id":1610, "methodname":"getNumPatients()", "methodnamerefined":"getNumPatients", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getNumPatients", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getNumPatients()", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public long getNumPatients() {\r\n    return numPatients;\r\n}"},
 {"id":1611, "methodname":"getTreatmentSatisfaction()", "methodnamerefined":"getTreatmentSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getTreatmentSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getTreatmentSatisfaction()", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public String getTreatmentSatisfaction() {\r\n    return ((treatmentSat) != 0) && ((surveyCount) != 0) ? Double.toString((((double) (treatmentSat)) / ((double) (surveyCount)))) : \"no results available\";\r\n}"},
 {"id":1612, "methodname":"getVisitSatisfaction()", "methodnamerefined":"getVisitSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getVisitSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.getVisitSatisfaction()", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public String getVisitSatisfaction() {\r\n    return ((visitSat) != 0) && ((surveyCount) != 0) ? Double.toString((((double) (visitSat)) / ((double) (surveyCount)))) : \"no results available\";\r\n}"},
 {"id":1613, "methodname":"incNumPatients()", "methodnamerefined":"incNumPatients", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.incNumPatients", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.incNumPatients()", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public void incNumPatients() {\r\n    (numPatients)++;\r\n}"},
 {"id":1614, "methodname":"setHCP(long)", "methodnamerefined":"setHCP", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setHCP", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setHCP(long)", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public void setHCP(long hcp) {\r\n    HCPID = hcp;\r\n}"},
 {"id":1615, "methodname":"setHCPName(java.lang.String)", "methodnamerefined":"setHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setHCPName", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setHCPName(java.lang.String)", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public void setHCPName(String name) {\r\n    HCPname = name;\r\n}"},
 {"id":1616, "methodname":"setLabList(java.util.List)", "methodnamerefined":"setLabList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setLabList", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setLabList(java.util.List)", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public void setLabList(List<LabProcedureBean> lablist) {\r\n    labList = lablist;\r\n}"},
 {"id":1617, "methodname":"setMedList(java.util.List)", "methodnamerefined":"setMedList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setMedList", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setMedList(java.util.List)", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public void setMedList(List<MedicationBean> medlist) {\r\n    medList = medlist;\r\n}"},
 {"id":1618, "methodname":"setTreatmentSat(int)", "methodnamerefined":"setTreatmentSat", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setTreatmentSat", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setTreatmentSat(int)", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public void setTreatmentSat(int sat) {\r\n    treatmentSat += sat;\r\n}"},
 {"id":1619, "methodname":"setVisitSat(int)", "methodnamerefined":"setVisitSat", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setVisitSat", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean.setVisitSat(int)", "classid":254, "classname":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "shortclassname":"HCPDiagnosisBean", "method":"public void setVisitSat(int sat) {\r\n    visitSat += sat;\r\n    (surveyCount)++;\r\n}"},
 {"id":1620, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPLinkBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPLinkBean.-init-()", "classid":255, "classname":"edu.ncsu.csc.itrust.beans.HCPLinkBean", "shortclassname":"HCPLinkBean", "method":"HCPLinkBean() {\r\n}"},
 {"id":1621, "methodname":"getCode()", "methodnamerefined":"getCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPLinkBean.getCode", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPLinkBean.getCode()", "classid":255, "classname":"edu.ncsu.csc.itrust.beans.HCPLinkBean", "shortclassname":"HCPLinkBean", "method":"public String getCode() {\r\n    return code;\r\n}"},
 {"id":1622, "methodname":"getDrug()", "methodnamerefined":"getDrug", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPLinkBean.getDrug", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPLinkBean.getDrug()", "classid":255, "classname":"edu.ncsu.csc.itrust.beans.HCPLinkBean", "shortclassname":"HCPLinkBean", "method":"/**\r\n *\r\n *\r\n * @return the drug the event is being reported for\r\n */\r\npublic String getDrug() {\r\n    return drug;\r\n}"},
 {"id":1623, "methodname":"getPrescriberMID()", "methodnamerefined":"getPrescriberMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPLinkBean.getPrescriberMID", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPLinkBean.getPrescriberMID()", "classid":255, "classname":"edu.ncsu.csc.itrust.beans.HCPLinkBean", "shortclassname":"HCPLinkBean", "method":"/**\r\n *\r\n *\r\n * @return the patient MID\r\n */\r\npublic long getPrescriberMID() {\r\n    return prescriberMID;\r\n}"},
 {"id":1624, "methodname":"isChecked()", "methodnamerefined":"isChecked", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPLinkBean.isChecked", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPLinkBean.isChecked()", "classid":255, "classname":"edu.ncsu.csc.itrust.beans.HCPLinkBean", "shortclassname":"HCPLinkBean", "method":"public boolean isChecked() {\r\n    return checked;\r\n}"},
 {"id":1625, "methodname":"setChecked(boolean)", "methodnamerefined":"setChecked", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPLinkBean.setChecked", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPLinkBean.setChecked(boolean)", "classid":255, "classname":"edu.ncsu.csc.itrust.beans.HCPLinkBean", "shortclassname":"HCPLinkBean", "method":"public void setChecked(boolean checked) {\r\n    this.checked = checked;\r\n}"},
 {"id":1626, "methodname":"setCode(java.lang.String)", "methodnamerefined":"setCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPLinkBean.setCode", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPLinkBean.setCode(java.lang.String)", "classid":255, "classname":"edu.ncsu.csc.itrust.beans.HCPLinkBean", "shortclassname":"HCPLinkBean", "method":"public void setCode(String code) {\r\n    this.code = code;\r\n}"},
 {"id":1627, "methodname":"setDrug(java.lang.String)", "methodnamerefined":"setDrug", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPLinkBean.setDrug", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPLinkBean.setDrug(java.lang.String)", "classid":255, "classname":"edu.ncsu.csc.itrust.beans.HCPLinkBean", "shortclassname":"HCPLinkBean", "method":"/**\r\n *\r\n *\r\n * @param drug\r\n * \t\tsets the drug the event is being reported for\r\n */\r\npublic void setDrug(String drug) {\r\n    this.drug = drug;\r\n}"},
 {"id":1628, "methodname":"setPrescriberMID(long)", "methodnamerefined":"setPrescriberMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPLinkBean.setPrescriberMID", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPLinkBean.setPrescriberMID(long)", "classid":255, "classname":"edu.ncsu.csc.itrust.beans.HCPLinkBean", "shortclassname":"HCPLinkBean", "method":"/**\r\n *\r\n *\r\n * @param mID\r\n * \t\tthe patients MID\r\n */\r\npublic void setPrescriberMID(long mID) {\r\n    prescriberMID = mID;\r\n}"},
 {"id":1629, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.-init-()", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public HCPVisitBean() {\r\n    HCPName = \"\";\r\n    HCPSpecialty = \"\";\r\n    HCPAddr = \"\";\r\n    OVDate = \"\";\r\n}"},
 {"id":1630, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.equals(java.lang.Object)", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"/* (non-Javadoc)\n@see java.lang.Object#equals(java.lang.Object)\n */\r\n@Override\r\npublic boolean equals(Object obj) {\r\n    if ((this) == obj)\r\n        return true;\r\n\r\n    if (obj == null)\r\n        return false;\r\n\r\n    if ((getClass()) != (obj.getClass()))\r\n        return false;\r\n\r\n    HCPVisitBean other = ((HCPVisitBean) (obj));\r\n    if ((HCPAddr) == null) {\r\n        if ((other.HCPAddr) != null)\r\n            return false;\r\n\r\n    } else\r\n        if (!(HCPAddr.equals(other.HCPAddr)))\r\n            return false;\r\n\r\n\r\n    if ((HCPName) == null) {\r\n        if ((other.HCPName) != null)\r\n            return false;\r\n\r\n    } else\r\n        if (!(HCPName.equals(other.HCPName)))\r\n            return false;\r\n\r\n\r\n    if ((HCPSpecialty) == null) {\r\n        if ((other.HCPSpecialty) != null)\r\n            return false;\r\n\r\n    } else\r\n        if (!(HCPSpecialty.equals(other.HCPSpecialty)))\r\n            return false;\r\n\r\n\r\n    if ((OVDate) == null) {\r\n        if ((other.OVDate) != null)\r\n            return false;\r\n\r\n    } else\r\n        if (!(OVDate.equals(other.OVDate)))\r\n            return false;\r\n\r\n\r\n    if ((designated) != (other.designated))\r\n        return false;\r\n\r\n    if ((hcpMID) != (other.hcpMID))\r\n        return false;\r\n\r\n    return true;\r\n}"},
 {"id":1631, "methodname":"getHCPAddr()", "methodnamerefined":"getHCPAddr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getHCPAddr", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getHCPAddr()", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public String getHCPAddr() {\r\n    return HCPAddr;\r\n}"},
 {"id":1632, "methodname":"getHCPMID()", "methodnamerefined":"getHCPMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getHCPMID", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getHCPMID()", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public long getHCPMID() {\r\n    return hcpMID;\r\n}"},
 {"id":1633, "methodname":"getHCPName()", "methodnamerefined":"getHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getHCPName", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getHCPName()", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public String getHCPName() {\r\n    return HCPName;\r\n}"},
 {"id":1634, "methodname":"getHCPSpecialty()", "methodnamerefined":"getHCPSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getHCPSpecialty", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getHCPSpecialty()", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public String getHCPSpecialty() {\r\n    return HCPSpecialty;\r\n}"},
 {"id":1635, "methodname":"getOVDate()", "methodnamerefined":"getOVDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getOVDate", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.getOVDate()", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public String getOVDate() {\r\n    return OVDate;\r\n}"},
 {"id":1636, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.hashCode()", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"/* (non-Javadoc)\n@see java.lang.Object#hashCode()\n */\r\n@Override\r\npublic int hashCode() {\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = (prime * result) + ((HCPAddr) == null ? 0 : HCPAddr.hashCode());\r\n    result = (prime * result) + ((HCPName) == null ? 0 : HCPName.hashCode());\r\n    result = (prime * result) + ((HCPSpecialty) == null ? 0 : HCPSpecialty.hashCode());\r\n    result = (prime * result) + ((OVDate) == null ? 0 : OVDate.hashCode());\r\n    result = (prime * result) + (designated ? 1231 : 1237);\r\n    result = (prime * result) + ((int) ((hcpMID) ^ ((hcpMID) >>> 32)));\r\n    return result;\r\n}"},
 {"id":1637, "methodname":"isDesignated()", "methodnamerefined":"isDesignated", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.isDesignated", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.isDesignated()", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public boolean isDesignated() {\r\n    return designated;\r\n}"},
 {"id":1638, "methodname":"setDesignated(boolean)", "methodnamerefined":"setDesignated", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setDesignated", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setDesignated(boolean)", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public void setDesignated(boolean val) {\r\n    designated = val;\r\n}"},
 {"id":1639, "methodname":"setHCPAddr(java.lang.String)", "methodnamerefined":"setHCPAddr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPAddr", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPAddr(java.lang.String)", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public void setHCPAddr(String addr) {\r\n    if (null != addr) {\r\n        HCPAddr = addr;\r\n    }\r\n}"},
 {"id":1640, "methodname":"setHCPMID(long)", "methodnamerefined":"setHCPMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPMID", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPMID(long)", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public void setHCPMID(long mid) {\r\n    hcpMID = mid;\r\n}"},
 {"id":1641, "methodname":"setHCPName(java.lang.String)", "methodnamerefined":"setHCPName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPName", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPName(java.lang.String)", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public void setHCPName(String name) {\r\n    if (null != name) {\r\n        HCPName = name;\r\n    }\r\n}"},
 {"id":1642, "methodname":"setHCPSpecialty(java.lang.String)", "methodnamerefined":"setHCPSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPSpecialty", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setHCPSpecialty(java.lang.String)", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public void setHCPSpecialty(String specialty) {\r\n    if (null != specialty) {\r\n        HCPSpecialty = specialty;\r\n    } else {\r\n        HCPSpecialty = \"none\";\r\n    }\r\n}"},
 {"id":1643, "methodname":"setOVDate(java.lang.String)", "methodnamerefined":"setOVDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setOVDate", "fullmethod":"edu.ncsu.csc.itrust.beans.HCPVisitBean.setOVDate(java.lang.String)", "classid":256, "classname":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "shortclassname":"HCPVisitBean", "method":"public void setOVDate(String date) {\r\n    if (null != date) {\r\n        OVDate = date;\r\n    }\r\n}"},
 {"id":1644, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.-init-()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public HealthRecord() {\r\n}"},
 {"id":1645, "methodname":"getBloodPressure()", "methodnamerefined":"getBloodPressure", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressure", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressure()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public String getBloodPressure() {\r\n    return ((getBloodPressureN()) + \"/\") + (getBloodPressureD());\r\n}"},
 {"id":1646, "methodname":"getBloodPressureD()", "methodnamerefined":"getBloodPressureD", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressureD", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressureD()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public int getBloodPressureD() {\r\n    return bloodPressureD;\r\n}"},
 {"id":1647, "methodname":"getBloodPressureDiastolic()", "methodnamerefined":"getBloodPressureDiastolic", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressureDiastolic", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressureDiastolic()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public int getBloodPressureDiastolic() {\r\n    return bloodPressureD;\r\n}"},
 {"id":1648, "methodname":"getBloodPressureN()", "methodnamerefined":"getBloodPressureN", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressureN", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressureN()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public int getBloodPressureN() {\r\n    return bloodPressureN;\r\n}"},
 {"id":1649, "methodname":"getBloodPressureSystolic()", "methodnamerefined":"getBloodPressureSystolic", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressureSystolic", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getBloodPressureSystolic()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public int getBloodPressureSystolic() {\r\n    return bloodPressureN;\r\n}"},
 {"id":1650, "methodname":"getBodyMassIndex()", "methodnamerefined":"getBodyMassIndex", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getBodyMassIndex", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getBodyMassIndex()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public double getBodyMassIndex() {\r\n    return 703 * ((weight) / ((height) * (height)));\r\n}"},
 {"id":1651, "methodname":"getCholesterolHDL()", "methodnamerefined":"getCholesterolHDL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getCholesterolHDL", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getCholesterolHDL()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public int getCholesterolHDL() {\r\n    return cholesterolHDL;\r\n}"},
 {"id":1652, "methodname":"getCholesterolLDL()", "methodnamerefined":"getCholesterolLDL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getCholesterolLDL", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getCholesterolLDL()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public int getCholesterolLDL() {\r\n    return cholesterolLDL;\r\n}"},
 {"id":1653, "methodname":"getCholesterolTri()", "methodnamerefined":"getCholesterolTri", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getCholesterolTri", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getCholesterolTri()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public int getCholesterolTri() {\r\n    return cholesterolTri;\r\n}"},
 {"id":1654, "methodname":"getDateRecorded()", "methodnamerefined":"getDateRecorded", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getDateRecorded", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getDateRecorded()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public Date getDateRecorded() {\r\n    return dateRecorded;\r\n}"},
 {"id":1655, "methodname":"getHeight()", "methodnamerefined":"getHeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getHeight", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getHeight()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"// Rounds the height off here because MySQL wont return the *exact* value you put in it\r\npublic double getHeight() {\r\n    return (Math.round(((height) * 10000))) / 10000.0;\r\n}"},
 {"id":1656, "methodname":"getPatientID()", "methodnamerefined":"getPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getPatientID()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public long getPatientID() {\r\n    return patientID;\r\n}"},
 {"id":1657, "methodname":"getPersonnelID()", "methodnamerefined":"getPersonnelID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getPersonnelID", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getPersonnelID()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public long getPersonnelID() {\r\n    return personnelID;\r\n}"},
 {"id":1658, "methodname":"getSmokingStatus()", "methodnamerefined":"getSmokingStatus", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getSmokingStatus", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getSmokingStatus()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public int getSmokingStatus() {\r\n    return smokingStatus;\r\n}"},
 {"id":1659, "methodname":"getSmokingStatusDesc()", "methodnamerefined":"getSmokingStatusDesc", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getSmokingStatusDesc", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getSmokingStatusDesc()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public String getSmokingStatusDesc() {\r\n    return smokingStatusDesc;\r\n}"},
 {"id":1660, "methodname":"getTotalCholesterol()", "methodnamerefined":"getTotalCholesterol", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getTotalCholesterol", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getTotalCholesterol()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"/**\r\n * Note that this is a simplistic view. See the Wikipedia article on cholesterol.\r\n *\r\n * @return \r\n */\r\npublic int getTotalCholesterol() {\r\n    return ((getCholesterolHDL()) + (getCholesterolLDL())) + (getCholesterolTri());\r\n}"},
 {"id":1661, "methodname":"getWeight()", "methodnamerefined":"getWeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.getWeight", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.getWeight()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public double getWeight() {\r\n    return (Math.round(((weight) * 10000))) / 10000.0;\r\n}"},
 {"id":1662, "methodname":"isSmoker()", "methodnamerefined":"isSmoker", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.isSmoker", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.isSmoker()", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public boolean isSmoker() {\r\n    return isSmoker;\r\n}"},
 {"id":1663, "methodname":"setBloodPressureD(int)", "methodnamerefined":"setBloodPressureD", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureD", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureD(int)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setBloodPressureD(int bloodPressureD) {\r\n    this.bloodPressureD = bloodPressureD;\r\n}"},
 {"id":1664, "methodname":"setBloodPressureDiastolic(int)", "methodnamerefined":"setBloodPressureDiastolic", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureDiastolic", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureDiastolic(int)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setBloodPressureDiastolic(int bloodPressure) {\r\n    this.bloodPressureD = bloodPressure;\r\n}"},
 {"id":1665, "methodname":"setBloodPressureN(int)", "methodnamerefined":"setBloodPressureN", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureN", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureN(int)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setBloodPressureN(int bloodPressureN) {\r\n    this.bloodPressureN = bloodPressureN;\r\n}"},
 {"id":1666, "methodname":"setBloodPressureSystolic(int)", "methodnamerefined":"setBloodPressureSystolic", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureSystolic", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setBloodPressureSystolic(int)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setBloodPressureSystolic(int bloodPressure) {\r\n    this.bloodPressureN = bloodPressure;\r\n}"},
 {"id":1667, "methodname":"setCholesterolHDL(int)", "methodnamerefined":"setCholesterolHDL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setCholesterolHDL", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setCholesterolHDL(int)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setCholesterolHDL(int cholesterolHDL) {\r\n    this.cholesterolHDL = cholesterolHDL;\r\n}"},
 {"id":1668, "methodname":"setCholesterolLDL(int)", "methodnamerefined":"setCholesterolLDL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setCholesterolLDL", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setCholesterolLDL(int)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setCholesterolLDL(int cholesterolLDL) {\r\n    this.cholesterolLDL = cholesterolLDL;\r\n}"},
 {"id":1669, "methodname":"setCholesterolTri(int)", "methodnamerefined":"setCholesterolTri", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setCholesterolTri", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setCholesterolTri(int)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setCholesterolTri(int cholesterolTri) {\r\n    this.cholesterolTri = cholesterolTri;\r\n}"},
 {"id":1670, "methodname":"setDateRecorded(java.sql.Timestamp)", "methodnamerefined":"setDateRecorded", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setDateRecorded", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setDateRecorded(java.sql.Timestamp)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setDateRecorded(Timestamp dateRecorded) {\r\n    this.dateRecorded = dateRecorded;\r\n}"},
 {"id":1671, "methodname":"setHeight(double)", "methodnamerefined":"setHeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setHeight", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setHeight(double)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setHeight(double height) {\r\n    this.height = height;\r\n}"},
 {"id":1672, "methodname":"setPatientID(long)", "methodnamerefined":"setPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setPatientID(long)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}"},
 {"id":1673, "methodname":"setPersonnelID(long)", "methodnamerefined":"setPersonnelID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setPersonnelID", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setPersonnelID(long)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setPersonnelID(long personnelID) {\r\n    this.personnelID = personnelID;\r\n}"},
 {"id":1674, "methodname":"setSmoker(int)", "methodnamerefined":"setSmoker", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setSmoker", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setSmoker(int)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setSmoker(int smoker) {\r\n    this.smokingStatus = smoker;\r\n    switch (smoker) {\r\n        case 1 :\r\n            this.isSmoker = true;\r\n            this.smokingStatusDesc = \"Current every day smoker\";\r\n            break;\r\n        case 2 :\r\n            this.isSmoker = true;\r\n            this.smokingStatusDesc = \"Current some day smoker\";\r\n            break;\r\n        case 3 :\r\n            this.isSmoker = false;\r\n            this.smokingStatusDesc = \"Former smoker\";\r\n            break;\r\n        case 4 :\r\n            this.isSmoker = false;\r\n            this.smokingStatusDesc = \"Never smoker\";\r\n            break;\r\n        case 5 :\r\n            this.isSmoker = true;\r\n            this.smokingStatusDesc = \"Smoker, current status unknown\";\r\n            break;\r\n        case 9 :\r\n            this.isSmoker = false;\r\n            this.smokingStatusDesc = \"Unknown if ever smoked\";\r\n            break;\r\n    }\r\n}"},
 {"id":1675, "methodname":"setWeight(double)", "methodnamerefined":"setWeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HealthRecord.setWeight", "fullmethod":"edu.ncsu.csc.itrust.beans.HealthRecord.setWeight(double)", "classid":257, "classname":"edu.ncsu.csc.itrust.beans.HealthRecord", "shortclassname":"HealthRecord", "method":"public void setWeight(double weight) {\r\n    this.weight = weight;\r\n}"},
 {"id":1676, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.-init-()", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public HospitalBean() {\r\n}"},
 {"id":1677, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public HospitalBean(String hospitalID) {\r\n    this.hospitalID = hospitalID;\r\n}"},
 {"id":1678, "methodname":"-init-(java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public HospitalBean(String hospitalID, String hospitalName) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n}"},
 {"id":1679, "methodname":"-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public HospitalBean(String hospitalID, String hospitalName, String hospitalAddress, String hospitalCity, String hospitalState, String hospitalZip) {\r\n    this.hospitalID = hospitalID;\r\n    this.hospitalName = hospitalName;\r\n    this.hospitalAddress = hospitalAddress;\r\n    this.hospitalCity = hospitalCity;\r\n    this.hospitalState = hospitalState;\r\n    this.hospitalZip = hospitalZip;\r\n}"},
 {"id":1680, "methodname":"equals(edu.ncsu.csc.itrust.beans.HospitalBean)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.equals(edu.ncsu.csc.itrust.beans.HospitalBean)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"private boolean equals(HospitalBean other) {\r\n    return (hospitalID.equals(other.hospitalID)) && (hospitalName.equals(other.hospitalName));\r\n}"},
 {"id":1681, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.equals(java.lang.Object)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((HospitalBean) (obj))));\r\n}"},
 {"id":1682, "methodname":"getHospitalAddress()", "methodnamerefined":"getHospitalAddress", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalAddress", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalAddress()", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public String getHospitalAddress() {\r\n    return hospitalAddress;\r\n}"},
 {"id":1683, "methodname":"getHospitalCity()", "methodnamerefined":"getHospitalCity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalCity", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalCity()", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public String getHospitalCity() {\r\n    return hospitalCity;\r\n}"},
 {"id":1684, "methodname":"getHospitalID()", "methodnamerefined":"getHospitalID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalID", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalID()", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public String getHospitalID() {\r\n    return hospitalID;\r\n}"},
 {"id":1685, "methodname":"getHospitalName()", "methodnamerefined":"getHospitalName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalName", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalName()", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public String getHospitalName() {\r\n    return hospitalName;\r\n}"},
 {"id":1686, "methodname":"getHospitalState()", "methodnamerefined":"getHospitalState", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalState", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalState()", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public String getHospitalState() {\r\n    return hospitalState;\r\n}"},
 {"id":1687, "methodname":"getHospitalZip()", "methodnamerefined":"getHospitalZip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalZip", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.getHospitalZip()", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public String getHospitalZip() {\r\n    return hospitalZip;\r\n}"},
 {"id":1688, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.hashCode()", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":1689, "methodname":"setHospitalAddress(java.lang.String)", "methodnamerefined":"setHospitalAddress", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalAddress", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalAddress(java.lang.String)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public void setHospitalAddress(String hospitalAddress) {\r\n    this.hospitalAddress = hospitalAddress;\r\n}"},
 {"id":1690, "methodname":"setHospitalCity(java.lang.String)", "methodnamerefined":"setHospitalCity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalCity", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalCity(java.lang.String)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public void setHospitalCity(String hospitalCity) {\r\n    this.hospitalCity = hospitalCity;\r\n}"},
 {"id":1691, "methodname":"setHospitalID(java.lang.String)", "methodnamerefined":"setHospitalID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalID", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalID(java.lang.String)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public void setHospitalID(String hospitalID) {\r\n    this.hospitalID = hospitalID;\r\n}"},
 {"id":1692, "methodname":"setHospitalName(java.lang.String)", "methodnamerefined":"setHospitalName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalName", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalName(java.lang.String)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public void setHospitalName(String hospitalName) {\r\n    this.hospitalName = hospitalName;\r\n}"},
 {"id":1693, "methodname":"setHospitalState(java.lang.String)", "methodnamerefined":"setHospitalState", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalState", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalState(java.lang.String)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public void setHospitalState(String hospitalState) {\r\n    this.hospitalState = hospitalState;\r\n}"},
 {"id":1694, "methodname":"setHospitalZip(java.lang.String)", "methodnamerefined":"setHospitalZip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalZip", "fullmethod":"edu.ncsu.csc.itrust.beans.HospitalBean.setHospitalZip(java.lang.String)", "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "shortclassname":"HospitalBean", "method":"public void setHospitalZip(String hospitalZip) {\r\n    this.hospitalZip = hospitalZip;\r\n}"},
 {"id":1695, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.-init-()", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public LOINCbean() {\r\n}"},
 {"id":1696, "methodname":"getComponent()", "methodnamerefined":"getComponent", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.getComponent", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.getComponent()", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public String getComponent() {\r\n    return component;\r\n}"},
 {"id":1697, "methodname":"getKindOfProperty()", "methodnamerefined":"getKindOfProperty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.getKindOfProperty", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.getKindOfProperty()", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public String getKindOfProperty() {\r\n    return kindOfProperty;\r\n}"},
 {"id":1698, "methodname":"getLabProcedureCode()", "methodnamerefined":"getLabProcedureCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.getLabProcedureCode", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.getLabProcedureCode()", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public String getLabProcedureCode() {\r\n    return labProcedureCode;\r\n}"},
 {"id":1699, "methodname":"getMethodType()", "methodnamerefined":"getMethodType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.getMethodType", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.getMethodType()", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public String getMethodType() {\r\n    return methodType;\r\n}"},
 {"id":1700, "methodname":"getScaleType()", "methodnamerefined":"getScaleType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.getScaleType", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.getScaleType()", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public String getScaleType() {\r\n    return scaleType;\r\n}"},
 {"id":1701, "methodname":"getSystem()", "methodnamerefined":"getSystem", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.getSystem", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.getSystem()", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public String getSystem() {\r\n    return system;\r\n}"},
 {"id":1702, "methodname":"getTimeAspect()", "methodnamerefined":"getTimeAspect", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.getTimeAspect", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.getTimeAspect()", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public String getTimeAspect() {\r\n    return timeAspect;\r\n}"},
 {"id":1703, "methodname":"setComponent(java.lang.String)", "methodnamerefined":"setComponent", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.setComponent", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.setComponent(java.lang.String)", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public void setComponent(String aComponent) {\r\n    component = aComponent;\r\n}"},
 {"id":1704, "methodname":"setKindOfProperty(java.lang.String)", "methodnamerefined":"setKindOfProperty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.setKindOfProperty", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.setKindOfProperty(java.lang.String)", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public void setKindOfProperty(String aKindOfProperty) {\r\n    kindOfProperty = aKindOfProperty;\r\n}"},
 {"id":1705, "methodname":"setLabProcedureCode(java.lang.String)", "methodnamerefined":"setLabProcedureCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.setLabProcedureCode", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.setLabProcedureCode(java.lang.String)", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public void setLabProcedureCode(String aLabProcedureCode) {\r\n    labProcedureCode = aLabProcedureCode;\r\n}"},
 {"id":1706, "methodname":"setMethodType(java.lang.String)", "methodnamerefined":"setMethodType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.setMethodType", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.setMethodType(java.lang.String)", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public void setMethodType(String aMethodType) {\r\n    methodType = aMethodType;\r\n}"},
 {"id":1707, "methodname":"setScaleType(java.lang.String)", "methodnamerefined":"setScaleType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.setScaleType", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.setScaleType(java.lang.String)", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public void setScaleType(String aScaleType) {\r\n    scaleType = aScaleType;\r\n}"},
 {"id":1708, "methodname":"setSystem(java.lang.String)", "methodnamerefined":"setSystem", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.setSystem", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.setSystem(java.lang.String)", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public void setSystem(String aSystem) {\r\n    system = aSystem;\r\n}"},
 {"id":1709, "methodname":"setTimeAspect(java.lang.String)", "methodnamerefined":"setTimeAspect", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LOINCbean.setTimeAspect", "fullmethod":"edu.ncsu.csc.itrust.beans.LOINCbean.setTimeAspect(java.lang.String)", "classid":259, "classname":"edu.ncsu.csc.itrust.beans.LOINCbean", "shortclassname":"LOINCbean", "method":"public void setTimeAspect(String aTimeAspect) {\r\n    timeAspect = aTimeAspect;\r\n}"},
 {"id":1710, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.-init-()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"public LabProcedureBean() {\r\n}"},
 {"id":1711, "methodname":"allow()", "methodnamerefined":"allow", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.allow", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.allow()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"public void allow() {\r\n    this.rights = LabProcedureBean.Allow;\r\n}"},
 {"id":1712, "methodname":"getCommentary()", "methodnamerefined":"getCommentary", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getCommentary", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getCommentary()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Up to 500 alphanumeric characters\r\n */\r\npublic String getCommentary() {\r\n    return commentary;\r\n}"},
 {"id":1713, "methodname":"getLTID()", "methodnamerefined":"getLTID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getLTID", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getLTID()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Gets the lab techs ID\r\n *\r\n * @return The id of the assigned lab tech\r\n */\r\npublic long getLTID() {\r\n    return LTID;\r\n}"},
 {"id":1714, "methodname":"getLoinc()", "methodnamerefined":"getLoinc", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getLoinc", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getLoinc()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Digits of the format nnnnn-n\r\n */\r\npublic String getLoinc() {\r\n    return loinc;\r\n}"},
 {"id":1715, "methodname":"getLowerBound()", "methodnamerefined":"getLowerBound", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getLowerBound", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getLowerBound()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n *\r\n *\r\n * @return the lowerBound\r\n */\r\npublic String getLowerBound() {\r\n    return lowerBound;\r\n}"},
 {"id":1716, "methodname":"getLowerBoundAsDouble()", "methodnamerefined":"getLowerBoundAsDouble", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getLowerBoundAsDouble", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getLowerBoundAsDouble()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Get the lower bound as a double.  If the result is blank or null,\r\n * NaN is returned.\r\n *\r\n * @return The lower bound as a double.\r\n */\r\npublic double getLowerBoundAsDouble() {\r\n    if (((lowerBound) != null) && ((lowerBound.length()) > 0)) {\r\n        return Double.parseDouble(lowerBound);\r\n    } else {\r\n        return Double.NaN;\r\n    }\r\n}"},
 {"id":1717, "methodname":"getNumericalResult()", "methodnamerefined":"getNumericalResult", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getNumericalResult", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getNumericalResult()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n *\r\n *\r\n * @return the numericalResult\r\n */\r\npublic String getNumericalResult() {\r\n    return numericalResult;\r\n}"},
 {"id":1718, "methodname":"getNumericalResultAsDouble()", "methodnamerefined":"getNumericalResultAsDouble", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getNumericalResultAsDouble", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getNumericalResultAsDouble()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Get the numerical result as a double.  If the result is blank or null,\r\n * NaN is returned.\r\n *\r\n * @return The numerical result as a double.\r\n */\r\npublic double getNumericalResultAsDouble() {\r\n    if (((numericalResult) != null) && ((numericalResult.length()) > 0)) {\r\n        return Double.parseDouble(numericalResult);\r\n    } else {\r\n        return Double.NaN;\r\n    }\r\n}"},
 {"id":1719, "methodname":"getNumericalResultUnit()", "methodnamerefined":"getNumericalResultUnit", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getNumericalResultUnit", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getNumericalResultUnit()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"public String getNumericalResultUnit() {\r\n    return numericalResultUnit;\r\n}"},
 {"id":1720, "methodname":"getOvID()", "methodnamerefined":"getOvID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getOvID", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getOvID()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Office VisitID\tIdentifier that specifies the office visit in\r\n * which the laboratory procedure was ordered\r\n */\r\npublic long getOvID() {\r\n    return ovID;\r\n}"},
 {"id":1721, "methodname":"getPid()", "methodnamerefined":"getPid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getPid", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getPid()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Unique 10-digit number that does not start with 9\r\n */\r\npublic long getPid() {\r\n    return pid;\r\n}"},
 {"id":1722, "methodname":"getPriorityCode()", "methodnamerefined":"getPriorityCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getPriorityCode", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getPriorityCode()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Gets the priority of the lab procedure\r\n *\r\n * @return the priority code\r\n */\r\npublic int getPriorityCode() {\r\n    return priorityCode;\r\n}"},
 {"id":1723, "methodname":"getProcedureID()", "methodnamerefined":"getProcedureID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getProcedureID", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getProcedureID()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Unique identifier for a laboratory procedure of a patient\r\n */\r\npublic long getProcedureID() {\r\n    return procedureID;\r\n}"},
 {"id":1724, "methodname":"getResults()", "methodnamerefined":"getResults", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getResults", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getResults()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Up to 500 alphanumeric characters\r\n */\r\npublic String getResults() {\r\n    return results;\r\n}"},
 {"id":1725, "methodname":"getRights()", "methodnamerefined":"getRights", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getRights", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getRights()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * permission granted by lhcp who ordered test:\r\n * \"ALLOWED\", \"RESTRICTED\"\r\n */\r\npublic String getRights() {\r\n    return rights;\r\n}"},
 {"id":1726, "methodname":"getStatus()", "methodnamerefined":"getStatus", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getStatus", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getStatus()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * One of (NOT YET RECEIVED, PENDING, COMPLETED)\r\n */\r\npublic String getStatus() {\r\n    return status;\r\n}"},
 {"id":1727, "methodname":"getTimestamp()", "methodnamerefined":"getTimestamp", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getTimestamp", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getTimestamp()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/* public void setOvID(String ovID) {\nthis.ovID = Long.parseLong(ovID);\n}\n */\r\npublic Timestamp getTimestamp() {\r\n    return timestamp;\r\n}"},
 {"id":1728, "methodname":"getUpperBound()", "methodnamerefined":"getUpperBound", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getUpperBound", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getUpperBound()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n *\r\n *\r\n * @return the upperBound\r\n */\r\npublic String getUpperBound() {\r\n    return upperBound;\r\n}"},
 {"id":1729, "methodname":"getUpperBoundAsDouble()", "methodnamerefined":"getUpperBoundAsDouble", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getUpperBoundAsDouble", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.getUpperBoundAsDouble()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Get the upper bound as a double.  If the result is blank or null,\r\n * NaN is returned.\r\n *\r\n * @return The upper bound as a double.\r\n */\r\npublic double getUpperBoundAsDouble() {\r\n    if (((upperBound) != null) && ((upperBound.length()) > 0)) {\r\n        return Double.parseDouble(upperBound);\r\n    } else {\r\n        return Double.NaN;\r\n    }\r\n}"},
 {"id":1730, "methodname":"isViewedByPatient()", "methodnamerefined":"isViewedByPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.isViewedByPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.isViewedByPatient()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Returns whether or not the patient has viewed the lab procedure\r\n *\r\n * @return \r\n */\r\npublic boolean isViewedByPatient() {\r\n    return viewedByPatient;\r\n}"},
 {"id":1731, "methodname":"restrict()", "methodnamerefined":"restrict", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.restrict", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.restrict()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"public void restrict() {\r\n    this.rights = LabProcedureBean.Restrict;\r\n}"},
 {"id":1732, "methodname":"setCommentary(java.lang.String)", "methodnamerefined":"setCommentary", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setCommentary", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setCommentary(java.lang.String)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Up to 500 alphanumeric characters\r\n */\r\npublic void setCommentary(String commentary) {\r\n    this.commentary = commentary;\r\n}"},
 {"id":1733, "methodname":"setLTID(long)", "methodnamerefined":"setLTID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setLTID", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setLTID(long)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * This method sets the lab technicians ID\r\n *\r\n * @param lTID\r\n * \t\t\r\n */\r\npublic void setLTID(long LTID) {\r\n    this.LTID = LTID;\r\n}"},
 {"id":1734, "methodname":"setLoinc(java.lang.String)", "methodnamerefined":"setLoinc", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setLoinc", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setLoinc(java.lang.String)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Digits of the format nnnnn-n\r\n */\r\npublic void setLoinc(String loinc) {\r\n    this.loinc = loinc;\r\n}"},
 {"id":1735, "methodname":"setLowerBound(java.lang.String)", "methodnamerefined":"setLowerBound", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setLowerBound", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setLowerBound(java.lang.String)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n *\r\n *\r\n * @param lowerBound\r\n * \t\tthe lowerBound to set\r\n */\r\npublic void setLowerBound(String lowerBound) {\r\n    this.lowerBound = lowerBound;\r\n}"},
 {"id":1736, "methodname":"setNumericalResult(java.lang.String)", "methodnamerefined":"setNumericalResult", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setNumericalResult", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setNumericalResult(java.lang.String)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n *\r\n *\r\n * @param numericalResult\r\n * \t\tthe numericalResult to set\r\n */\r\npublic void setNumericalResult(String numericalResult) {\r\n    this.numericalResult = numericalResult;\r\n}"},
 {"id":1737, "methodname":"setNumericalResultUnit(java.lang.String)", "methodnamerefined":"setNumericalResultUnit", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setNumericalResultUnit", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setNumericalResultUnit(java.lang.String)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"public void setNumericalResultUnit(String numericalResultUnit) {\r\n    this.numericalResultUnit = numericalResultUnit;\r\n}"},
 {"id":1738, "methodname":"setOvID(long)", "methodnamerefined":"setOvID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setOvID", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setOvID(long)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Office VisitID\tIdentifier that specifies the office visit in\r\n * which the laboratory procedure was ordered\r\n */\r\npublic void setOvID(long ovID) {\r\n    this.ovID = ovID;\r\n}"},
 {"id":1739, "methodname":"setPid(long)", "methodnamerefined":"setPid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setPid", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setPid(long)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Unique 10-digit number that does not start with 9\r\n */\r\npublic void setPid(long pid) {\r\n    this.pid = pid;\r\n}"},
 {"id":1740, "methodname":"setPriorityCode(int)", "methodnamerefined":"setPriorityCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setPriorityCode", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setPriorityCode(int)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Sets the priority of the lab procedure\r\n *\r\n * @param priorityCode\r\n * \t\t\r\n */\r\npublic void setPriorityCode(int priorityCode) {\r\n    this.priorityCode = priorityCode;\r\n}"},
 {"id":1741, "methodname":"setProcedureID(long)", "methodnamerefined":"setProcedureID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setProcedureID", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setProcedureID(long)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Unique identifier for a laboratory procedure of a patient\r\n */\r\npublic void setProcedureID(long procedureID) {\r\n    this.procedureID = procedureID;\r\n}"},
 {"id":1742, "methodname":"setResults(java.lang.String)", "methodnamerefined":"setResults", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setResults", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setResults(java.lang.String)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Up to 500 alphanumeric characters\r\n */\r\npublic void setResults(String results) {\r\n    this.results = results;\r\n}"},
 {"id":1743, "methodname":"setRights(java.lang.String)", "methodnamerefined":"setRights", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setRights", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setRights(java.lang.String)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * permission granted by lhcp who ordered test:\r\n * \"ALLOWED\", \"RESTRICTED\"\r\n */\r\npublic void setRights(String rights) {\r\n    this.rights = rights;\r\n}"},
 {"id":1744, "methodname":"setStatus(java.lang.String)", "methodnamerefined":"setStatus", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setStatus", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setStatus(java.lang.String)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * One of (NOT YET RECEIVED, PENDING, COMPLETED)\r\n */\r\npublic void setStatus(String status) {\r\n    this.status = status;\r\n}"},
 {"id":1745, "methodname":"setTimestamp(java.sql.Timestamp)", "methodnamerefined":"setTimestamp", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setTimestamp", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setTimestamp(java.sql.Timestamp)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"public void setTimestamp(Timestamp timestamp) {\r\n    this.timestamp = timestamp;\r\n}"},
 {"id":1746, "methodname":"setUpperBound(java.lang.String)", "methodnamerefined":"setUpperBound", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setUpperBound", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setUpperBound(java.lang.String)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n *\r\n *\r\n * @param upperBound\r\n * \t\tthe upperBound to set\r\n */\r\npublic void setUpperBound(String upperBound) {\r\n    this.upperBound = upperBound;\r\n}"},
 {"id":1747, "methodname":"setViewedByPatient(boolean)", "methodnamerefined":"setViewedByPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setViewedByPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.setViewedByPatient(boolean)", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * Sets whether or not a patient has viewed the lab procedure. Cannot be true until status is Completed\r\n *\r\n * @param viewedByPatient\r\n * \t\t\r\n */\r\npublic void setViewedByPatient(boolean viewedByPatient) {\r\n    if (status.equals(LabProcedureBean.Completed)) {\r\n        this.viewedByPatient = viewedByPatient;\r\n    }\r\n}"},
 {"id":1748, "methodname":"statusComplete()", "methodnamerefined":"statusComplete", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusComplete", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusComplete()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"public void statusComplete() {\r\n    this.status = LabProcedureBean.Completed;\r\n}"},
 {"id":1749, "methodname":"statusInTransit()", "methodnamerefined":"statusInTransit", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusInTransit", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusInTransit()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * sets the status to \"In transit\"\r\n */\r\npublic void statusInTransit() {\r\n    this.status = LabProcedureBean.In_Transit;\r\n}"},
 {"id":1750, "methodname":"statusPending()", "methodnamerefined":"statusPending", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusPending", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusPending()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"public void statusPending() {\r\n    this.status = LabProcedureBean.Pending;\r\n}"},
 {"id":1751, "methodname":"statusReceived()", "methodnamerefined":"statusReceived", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusReceived", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusReceived()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * sets the status to \"Received\"\r\n */\r\npublic void statusReceived() {\r\n    this.status = LabProcedureBean.Received;\r\n}"},
 {"id":1752, "methodname":"statusTesting()", "methodnamerefined":"statusTesting", "methodabbreviation":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusTesting", "fullmethod":"edu.ncsu.csc.itrust.beans.LabProcedureBean.statusTesting()", "classid":260, "classname":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "shortclassname":"LabProcedureBean", "method":"/**\r\n * sets the status to \"Testing\"\r\n */\r\npublic void statusTesting() {\r\n    this.status = LabProcedureBean.Testing;\r\n}"},
 {"id":1753, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.-init-()", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"public MedicationBean() {\r\n}"},
 {"id":1754, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.-init-(java.lang.String)", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"public MedicationBean(String code) {\r\n    NDCode = code;\r\n}"},
 {"id":1755, "methodname":"-init-(java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.-init-(java.lang.String,java.lang.String)", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"public MedicationBean(String code, String description) {\r\n    NDCode = code;\r\n    this.description = description;\r\n}"},
 {"id":1756, "methodname":"equals(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.equals(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"private boolean equals(MedicationBean other) {\r\n    return (description.equals(other.description)) && (NDCode.equals(other.NDCode));\r\n}"},
 {"id":1757, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.equals(java.lang.Object)", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"@Override\r\npublic boolean equals(Object other) {\r\n    return ((other != null) && (this.getClass().equals(other.getClass()))) && (this.equals(((MedicationBean) (other))));\r\n}"},
 {"id":1758, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.getDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.getDescription()", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"/**\r\n * Gets the ND Description for this procedure\r\n *\r\n * @return The ND Description for this procedure\r\n */\r\npublic String getDescription() {\r\n    return description;\r\n}"},
 {"id":1759, "methodname":"getNDCode()", "methodnamerefined":"getNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.getNDCode", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.getNDCode()", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"/**\r\n * Gets the ND Code for this procedure\r\n *\r\n * @return The ND Code for this procedure\r\n */\r\npublic String getNDCode() {\r\n    return NDCode;\r\n}"},
 {"id":1760, "methodname":"getNDCodeFormatted()", "methodnamerefined":"getNDCodeFormatted", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.getNDCodeFormatted", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.getNDCodeFormatted()", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"public String getNDCodeFormatted() {\r\n    String code = getNDCode();\r\n    if ((code.length()) > 5)\r\n        return ((code.substring(0, 5)) + \"-\") + (code.substring(5));\r\n    else\r\n        return code;\r\n\r\n}"},
 {"id":1761, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.hashCode()", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":1762, "methodname":"setDescription(java.lang.String)", "methodnamerefined":"setDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.setDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.setDescription(java.lang.String)", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"public void setDescription(String description) {\r\n    this.description = description;\r\n}"},
 {"id":1763, "methodname":"setNDCode(java.lang.String)", "methodnamerefined":"setNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MedicationBean.setNDCode", "fullmethod":"edu.ncsu.csc.itrust.beans.MedicationBean.setNDCode(java.lang.String)", "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "shortclassname":"MedicationBean", "method":"public void setNDCode(String code) {\r\n    NDCode = code;\r\n}"},
 {"id":1764, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.-init-()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"MessageBean() {\r\n}"},
 {"id":1765, "methodname":"getBody()", "methodnamerefined":"getBody", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.getBody", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.getBody()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Gets the body of this message\r\n *\r\n * @return \r\n */\r\npublic String getBody() {\r\n    return body;\r\n}"},
 {"id":1766, "methodname":"getFrom()", "methodnamerefined":"getFrom", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.getFrom", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.getFrom()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Gets the MID of the sender for this message\r\n *\r\n * @return \r\n */\r\npublic long getFrom() {\r\n    return from;\r\n}"},
 {"id":1767, "methodname":"getMessageId()", "methodnamerefined":"getMessageId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.getMessageId", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.getMessageId()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"public long getMessageId() {\r\n    return id;\r\n}"},
 {"id":1768, "methodname":"getOriginalMessageId()", "methodnamerefined":"getOriginalMessageId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.getOriginalMessageId", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.getOriginalMessageId()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"public long getOriginalMessageId() {\r\n    // NEW\r\n    return this.originalMsgId;\r\n}"},
 {"id":1769, "methodname":"getParentMessageId()", "methodnamerefined":"getParentMessageId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.getParentMessageId", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.getParentMessageId()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"public long getParentMessageId() {\r\n    return this.parentMsgId;\r\n}"},
 {"id":1770, "methodname":"getRead()", "methodnamerefined":"getRead", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.getRead", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.getRead()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Gets read for this message\r\n *\r\n * @return \r\n */\r\npublic int getRead() {\r\n    return this.read;\r\n}"},
 {"id":1771, "methodname":"getSentDate()", "methodnamerefined":"getSentDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.getSentDate", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.getSentDate()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Gets the time for this message\r\n *\r\n * @return \r\n */\r\npublic Timestamp getSentDate() {\r\n    return this.timestamp;\r\n}"},
 {"id":1772, "methodname":"getSubject()", "methodnamerefined":"getSubject", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.getSubject", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.getSubject()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Gets the subject of this message\r\n *\r\n * @return \r\n */\r\npublic String getSubject() {\r\n    return subject;\r\n}"},
 {"id":1773, "methodname":"getTo()", "methodnamerefined":"getTo", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.getTo", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.getTo()", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Gets the MIDs of the recipients for this Message\r\n *\r\n * @return \r\n */\r\npublic long getTo() {\r\n    return to;\r\n}"},
 {"id":1774, "methodname":"setBody(java.lang.String)", "methodnamerefined":"setBody", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.setBody", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.setBody(java.lang.String)", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Sets the body of this message\r\n *\r\n * @param body\r\n * \t\t\r\n */\r\npublic void setBody(String body) {\r\n    this.body = body;\r\n}"},
 {"id":1775, "methodname":"setFrom(long)", "methodnamerefined":"setFrom", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.setFrom", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.setFrom(long)", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Sets the MID of the sender for this message\r\n *\r\n * @param from\r\n * \t\t\r\n */\r\npublic void setFrom(long from) {\r\n    this.from = from;\r\n}"},
 {"id":1776, "methodname":"setMessageId(long)", "methodnamerefined":"setMessageId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.setMessageId", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.setMessageId(long)", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"public void setMessageId(long id) {\r\n    this.id = id;\r\n}"},
 {"id":1777, "methodname":"setOriginalMessageId(long)", "methodnamerefined":"setOriginalMessageId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.setOriginalMessageId", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.setOriginalMessageId(long)", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"public void setOriginalMessageId(long originalMsgId) {\r\n    // NEW\r\n    this.originalMsgId = originalMsgId;\r\n}"},
 {"id":1778, "methodname":"setParentMessageId(long)", "methodnamerefined":"setParentMessageId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.setParentMessageId", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.setParentMessageId(long)", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"public void setParentMessageId(long parentMsgId) {\r\n    this.parentMsgId = parentMsgId;\r\n}"},
 {"id":1779, "methodname":"setRead(int)", "methodnamerefined":"setRead", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.setRead", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.setRead(int)", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Sets read for this message\r\n *\r\n * @param read\r\n * \t\t\r\n */\r\npublic void setRead(int read) {\r\n    this.read = read;\r\n}"},
 {"id":1780, "methodname":"setSentDate(java.sql.Timestamp)", "methodnamerefined":"setSentDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.setSentDate", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.setSentDate(java.sql.Timestamp)", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Sets the time for this message\r\n *\r\n * @param timestamp\r\n * \t\t\r\n */\r\npublic void setSentDate(Timestamp timestamp) {\r\n    this.timestamp = timestamp;\r\n}"},
 {"id":1781, "methodname":"setSubject(java.lang.String)", "methodnamerefined":"setSubject", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.setSubject", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.setSubject(java.lang.String)", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Sets the subject of this message\r\n *\r\n * @param subject\r\n * \t\t\r\n */\r\npublic void setSubject(String subject) {\r\n    this.subject = subject;\r\n}"},
 {"id":1782, "methodname":"setTo(long)", "methodnamerefined":"setTo", "methodabbreviation":"edu.ncsu.csc.itrust.beans.MessageBean.setTo", "fullmethod":"edu.ncsu.csc.itrust.beans.MessageBean.setTo(long)", "classid":262, "classname":"edu.ncsu.csc.itrust.beans.MessageBean", "shortclassname":"MessageBean", "method":"/**\r\n * Sets the MIDs of the recipients for this Message\r\n *\r\n * @param to\r\n * \t\t\r\n */\r\npublic void setTo(long to) {\r\n    this.to = to;\r\n}"},
 {"id":1783, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.-init-()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public OfficeVisitBean() {\r\n}"},
 {"id":1784, "methodname":"-init-(long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.-init-(long)", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"/**\r\n * For use ONLY by DAOs\r\n * setters and getters method\r\n *\r\n * @param visitID\r\n * \t\t\r\n */\r\npublic OfficeVisitBean(long visitID) {\r\n    this.visitID = visitID;\r\n}"},
 {"id":1785, "methodname":"getHcpID()", "methodnamerefined":"getHcpID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getHcpID", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getHcpID()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public long getHcpID() {\r\n    return this.hcpID;\r\n}"},
 {"id":1786, "methodname":"getHospitalID()", "methodnamerefined":"getHospitalID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getHospitalID", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getHospitalID()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public String getHospitalID() {\r\n    return hospitalID;\r\n}"},
 {"id":1787, "methodname":"getID()", "methodnamerefined":"getID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getID", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getID()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public long getID() {\r\n    return visitID;\r\n}"},
 {"id":1788, "methodname":"getNotes()", "methodnamerefined":"getNotes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getNotes", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getNotes()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public String getNotes() {\r\n    return this.notes;\r\n}"},
 {"id":1789, "methodname":"getPatientID()", "methodnamerefined":"getPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getPatientID()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public long getPatientID() {\r\n    return this.patientID;\r\n}"},
 {"id":1790, "methodname":"getVisitDate()", "methodnamerefined":"getVisitDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getVisitDate", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getVisitDate()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public Date getVisitDate() {\r\n    Date d = null;\r\n    try {\r\n        d = new SimpleDateFormat(\"MM/dd/yyyy\").parse(visitDateStr);\r\n    } catch (ParseException e) {\r\n        System.out.println(e.toString());\r\n    }\r\n    return d;\r\n}"},
 {"id":1791, "methodname":"getVisitDateStr()", "methodnamerefined":"getVisitDateStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getVisitDateStr", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getVisitDateStr()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public String getVisitDateStr() {\r\n    return visitDateStr;\r\n}"},
 {"id":1792, "methodname":"getVisitID()", "methodnamerefined":"getVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.getVisitID()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public long getVisitID() {\r\n    return visitID;\r\n}"},
 {"id":1793, "methodname":"isERIncident()", "methodnamerefined":"isERIncident", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.isERIncident", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.isERIncident()", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public boolean isERIncident() {\r\n    return isERIncident;\r\n}"},
 {"id":1794, "methodname":"setERIncident(boolean)", "methodnamerefined":"setERIncident", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setERIncident", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setERIncident(boolean)", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public void setERIncident(boolean isERIncident) {\r\n    this.isERIncident = isERIncident;\r\n}"},
 {"id":1795, "methodname":"setHcpID(long)", "methodnamerefined":"setHcpID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setHcpID", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setHcpID(long)", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public void setHcpID(long hcpID) {\r\n    this.hcpID = hcpID;\r\n}"},
 {"id":1796, "methodname":"setHospitalID(java.lang.String)", "methodnamerefined":"setHospitalID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setHospitalID", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setHospitalID(java.lang.String)", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public void setHospitalID(String hospitalID) {\r\n    this.hospitalID = hospitalID;\r\n}"},
 {"id":1797, "methodname":"setNotes(java.lang.String)", "methodnamerefined":"setNotes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setNotes", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setNotes(java.lang.String)", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public void setNotes(String notes) {\r\n    this.notes = notes;\r\n}"},
 {"id":1798, "methodname":"setPatientID(long)", "methodnamerefined":"setPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setPatientID(long)", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}"},
 {"id":1799, "methodname":"setVisitDateStr(java.lang.String)", "methodnamerefined":"setVisitDateStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setVisitDateStr", "fullmethod":"edu.ncsu.csc.itrust.beans.OfficeVisitBean.setVisitDateStr(java.lang.String)", "classid":263, "classname":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "shortclassname":"OfficeVisitBean", "method":"public void setVisitDateStr(String visitDate) {\r\n    this.visitDateStr = visitDate;\r\n}"},
 {"id":1800, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.-init-()", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public OperationalProfile() {\r\n    totalCount = createEmptyMap();\r\n    personnelCount = createEmptyMap();\r\n    patientCount = createEmptyMap();\r\n}"},
 {"id":1801, "methodname":"createEmptyMap()", "methodnamerefined":"createEmptyMap", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.createEmptyMap", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.createEmptyMap()", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"private HashMap<TransactionType, Integer> createEmptyMap() {\r\n    HashMap<TransactionType, Integer> map = new HashMap<TransactionType, Integer>(TransactionType.values().length);\r\n    for (TransactionType type : TransactionType.values()) {\r\n        map.put(type, 0);\r\n    }\r\n    return map;\r\n}"},
 {"id":1802, "methodname":"getNumPatientTransactions()", "methodnamerefined":"getNumPatientTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.getNumPatientTransactions", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.getNumPatientTransactions()", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public int getNumPatientTransactions() {\r\n    return numPatientTransactions;\r\n}"},
 {"id":1803, "methodname":"getNumPersonnelTransactions()", "methodnamerefined":"getNumPersonnelTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.getNumPersonnelTransactions", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.getNumPersonnelTransactions()", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public int getNumPersonnelTransactions() {\r\n    return numPersonnelTransactions;\r\n}"},
 {"id":1804, "methodname":"getNumTotalTransactions()", "methodnamerefined":"getNumTotalTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.getNumTotalTransactions", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.getNumTotalTransactions()", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public int getNumTotalTransactions() {\r\n    return numTotalTransactions;\r\n}"},
 {"id":1805, "methodname":"getPatientCount()", "methodnamerefined":"getPatientCount", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.getPatientCount", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.getPatientCount()", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public HashMap<TransactionType, Integer> getPatientCount() {\r\n    return patientCount;\r\n}"},
 {"id":1806, "methodname":"getPersonnelCount()", "methodnamerefined":"getPersonnelCount", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.getPersonnelCount", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.getPersonnelCount()", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public HashMap<TransactionType, Integer> getPersonnelCount() {\r\n    return personnelCount;\r\n}"},
 {"id":1807, "methodname":"getTotalCount()", "methodnamerefined":"getTotalCount", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.getTotalCount", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.getTotalCount()", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public HashMap<TransactionType, Integer> getTotalCount() {\r\n    return totalCount;\r\n}"},
 {"id":1808, "methodname":"setNumPatientTransactions(int)", "methodnamerefined":"setNumPatientTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.setNumPatientTransactions", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.setNumPatientTransactions(int)", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public void setNumPatientTransactions(int numPatientTransactions) {\r\n    this.numPatientTransactions = numPatientTransactions;\r\n}"},
 {"id":1809, "methodname":"setNumPersonnelTransactions(int)", "methodnamerefined":"setNumPersonnelTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.setNumPersonnelTransactions", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.setNumPersonnelTransactions(int)", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public void setNumPersonnelTransactions(int numPersonnelTransactions) {\r\n    this.numPersonnelTransactions = numPersonnelTransactions;\r\n}"},
 {"id":1810, "methodname":"setNumTotalTransactions(int)", "methodnamerefined":"setNumTotalTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.setNumTotalTransactions", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.setNumTotalTransactions(int)", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public void setNumTotalTransactions(int numTransactions) {\r\n    this.numTotalTransactions = numTransactions;\r\n}"},
 {"id":1811, "methodname":"setPatientCount(java.util.HashMap)", "methodnamerefined":"setPatientCount", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.setPatientCount", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.setPatientCount(java.util.HashMap)", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public void setPatientCount(HashMap<TransactionType, Integer> patientCount) {\r\n    this.patientCount = patientCount;\r\n}"},
 {"id":1812, "methodname":"setPersonnelCount(java.util.HashMap)", "methodnamerefined":"setPersonnelCount", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.setPersonnelCount", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.setPersonnelCount(java.util.HashMap)", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public void setPersonnelCount(HashMap<TransactionType, Integer> personnelCount) {\r\n    this.personnelCount = personnelCount;\r\n}"},
 {"id":1813, "methodname":"setTotalCount(java.util.HashMap)", "methodnamerefined":"setTotalCount", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OperationalProfile.setTotalCount", "fullmethod":"edu.ncsu.csc.itrust.beans.OperationalProfile.setTotalCount(java.util.HashMap)", "classid":264, "classname":"edu.ncsu.csc.itrust.beans.OperationalProfile", "shortclassname":"OperationalProfile", "method":"public void setTotalCount(HashMap<TransactionType, Integer> totalCount) {\r\n    this.totalCount = totalCount;\r\n}"},
 {"id":1814, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.-init-()", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"public OverrideReasonBean() {\r\n    description = null;\r\n    reasonCode = \"\";\r\n}"},
 {"id":1815, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.-init-(java.lang.String)", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"public OverrideReasonBean(String code) {\r\n    reasonCode = code;\r\n}"},
 {"id":1816, "methodname":"-init-(java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.-init-(java.lang.String,java.lang.String)", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"public OverrideReasonBean(String code, String description) {\r\n    reasonCode = code;\r\n    this.description = description;\r\n}"},
 {"id":1817, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.equals(java.lang.Object)", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"@Override\r\npublic boolean equals(Object other) {\r\n    if ((other == null) || (!(this.getClass().equals(other.getClass()))))\r\n        return false;\r\n\r\n    OverrideReasonBean orb = ((OverrideReasonBean) (other));\r\n    return (((orb.description.equals(description)) && (orb.reasonCode.equals(reasonCode))) && ((orb.presID) == (presID))) && ((orb.id) == (id));\r\n}"},
 {"id":1818, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.getDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.getDescription()", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"/**\r\n * Gets the reason Description for this procedure\r\n *\r\n * @return The reason Description for this procedure\r\n */\r\npublic String getDescription() {\r\n    return description;\r\n}"},
 {"id":1819, "methodname":"getID()", "methodnamerefined":"getID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.getID", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.getID()", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"public long getID() {\r\n    return id;\r\n}"},
 {"id":1820, "methodname":"getORCode()", "methodnamerefined":"getORCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.getORCode", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.getORCode()", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"/**\r\n * Gets the reason Code for this procedure\r\n *\r\n * @return The reason Code for this procedure\r\n */\r\npublic String getORCode() {\r\n    return reasonCode;\r\n}"},
 {"id":1821, "methodname":"getPresID()", "methodnamerefined":"getPresID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.getPresID", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.getPresID()", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"public long getPresID() {\r\n    return presID;\r\n}"},
 {"id":1822, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.hashCode()", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":1823, "methodname":"setDescription(java.lang.String)", "methodnamerefined":"setDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.setDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.setDescription(java.lang.String)", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"public void setDescription(String description) {\r\n    this.description = description;\r\n}"},
 {"id":1824, "methodname":"setID(long)", "methodnamerefined":"setID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.setID", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.setID(long)", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"public void setID(long id) {\r\n    this.id = id;\r\n}"},
 {"id":1825, "methodname":"setORCode(java.lang.String)", "methodnamerefined":"setORCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.setORCode", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.setORCode(java.lang.String)", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"public void setORCode(String code) {\r\n    reasonCode = code;\r\n}"},
 {"id":1826, "methodname":"setPresID(long)", "methodnamerefined":"setPresID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.setPresID", "fullmethod":"edu.ncsu.csc.itrust.beans.OverrideReasonBean.setPresID(long)", "classid":265, "classname":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "shortclassname":"OverrideReasonBean", "method":"public void setPresID(long id) {\r\n    this.presID = id;\r\n}"},
 {"id":1827, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.-init-()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"PatientBean() {\r\n}"},
 {"id":1828, "methodname":"compareTo(edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"compareTo", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.compareTo", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.compareTo(edu.ncsu.csc.itrust.beans.PatientBean)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public int compareTo(PatientBean o) {\r\n    return ((int) ((o.MID) - (this.MID)));\r\n}"},
 {"id":1829, "methodname":"getAge()", "methodnamerefined":"getAge", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getAge", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getAge()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public int getAge() {\r\n    try {\r\n        long ageInMs = (System.currentTimeMillis()) - (new SimpleDateFormat(\"MM/dd/yyyy\").parse(dateOfBirthStr).getTime());\r\n        long age = ageInMs / ((((1000L * 60L) * 60L) * 24L) * 365L);\r\n        return ((int) (age));\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n        return -1;\r\n    }\r\n}"},
 {"id":1830, "methodname":"getAgeInDays()", "methodnamerefined":"getAgeInDays", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getAgeInDays", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getAgeInDays()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public long getAgeInDays() {\r\n    long age;\r\n    long ageInMs;\r\n    try {\r\n        ageInMs = (System.currentTimeMillis()) - (new SimpleDateFormat(\"MM/dd/yyyy\").parse(dateOfBirthStr).getTime());\r\n        age = ageInMs / (((1000L * 60L) * 60L) * 24L);\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n        return -1;\r\n    }\r\n    return age;\r\n}"},
 {"id":1831, "methodname":"getAgeInWeeks()", "methodnamerefined":"getAgeInWeeks", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getAgeInWeeks", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getAgeInWeeks()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public long getAgeInWeeks() {\r\n    long age;\r\n    long ageInMs;\r\n    try {\r\n        ageInMs = (System.currentTimeMillis()) - (new SimpleDateFormat(\"MM/dd/yyyy\").parse(dateOfBirthStr).getTime());\r\n        age = ageInMs / ((((1000L * 60L) * 60L) * 24L) * 7L);\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n        return -1;\r\n    }\r\n    return age;\r\n}"},
 {"id":1832, "methodname":"getAlternateName()", "methodnamerefined":"getAlternateName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getAlternateName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getAlternateName()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getAlternateName() {\r\n    return alternateName;\r\n}"},
 {"id":1833, "methodname":"getBloodType()", "methodnamerefined":"getBloodType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getBloodType", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getBloodType()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public BloodType getBloodType() {\r\n    return bloodType;\r\n}"},
 {"id":1834, "methodname":"getCauseOfDeath()", "methodnamerefined":"getCauseOfDeath", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getCauseOfDeath", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getCauseOfDeath()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getCauseOfDeath() {\r\n    return causeOfDeath;\r\n}"},
 {"id":1835, "methodname":"getCity()", "methodnamerefined":"getCity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getCity", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getCity()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getCity() {\r\n    return city;\r\n}"},
 {"id":1836, "methodname":"getConfirmPassword()", "methodnamerefined":"getConfirmPassword", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getConfirmPassword", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getConfirmPassword()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getConfirmPassword() {\r\n    return confirmPassword;\r\n}"},
 {"id":1837, "methodname":"getCreditCardNumber()", "methodnamerefined":"getCreditCardNumber", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getCreditCardNumber", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getCreditCardNumber()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getCreditCardNumber() {\r\n    return creditCardNumber;\r\n}"},
 {"id":1838, "methodname":"getCreditCardType()", "methodnamerefined":"getCreditCardType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getCreditCardType", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getCreditCardType()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getCreditCardType() {\r\n    return creditCardType;\r\n}"},
 {"id":1839, "methodname":"getDateOfBirth()", "methodnamerefined":"getDateOfBirth", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfBirth", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfBirth()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public Date getDateOfBirth() {\r\n    try {\r\n        return new SimpleDateFormat(\"MM/dd/yyyy\").parse(dateOfBirthStr);\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"},
 {"id":1840, "methodname":"getDateOfBirthStr()", "methodnamerefined":"getDateOfBirthStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfBirthStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfBirthStr()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getDateOfBirthStr() {\r\n    return dateOfBirthStr;\r\n}"},
 {"id":1841, "methodname":"getDateOfDeactivationStr()", "methodnamerefined":"getDateOfDeactivationStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfDeactivationStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfDeactivationStr()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getDateOfDeactivationStr() {\r\n    return dateOfDeactivationStr;\r\n}"},
 {"id":1842, "methodname":"getDateOfDeath()", "methodnamerefined":"getDateOfDeath", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfDeath", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfDeath()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public Date getDateOfDeath() {\r\n    try {\r\n        return new SimpleDateFormat(\"MM/dd/yyyy\").parse(dateOfDeathStr);\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"},
 {"id":1843, "methodname":"getDateOfDeathStr()", "methodnamerefined":"getDateOfDeathStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfDeathStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getDateOfDeathStr()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getDateOfDeathStr() {\r\n    return dateOfDeathStr;\r\n}"},
 {"id":1844, "methodname":"getDirectionsToHome()", "methodnamerefined":"getDirectionsToHome", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getDirectionsToHome", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getDirectionsToHome()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getDirectionsToHome() {\r\n    return directionsToHome;\r\n}"},
 {"id":1845, "methodname":"getEmail()", "methodnamerefined":"getEmail", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getEmail", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getEmail()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getEmail() {\r\n    return email;\r\n}"},
 {"id":1846, "methodname":"getEmergencyName()", "methodnamerefined":"getEmergencyName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getEmergencyName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getEmergencyName()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getEmergencyName() {\r\n    return emergencyName;\r\n}"},
 {"id":1847, "methodname":"getEmergencyPhone()", "methodnamerefined":"getEmergencyPhone", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getEmergencyPhone", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getEmergencyPhone()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getEmergencyPhone() {\r\n    return emergencyPhone;\r\n}"},
 {"id":1848, "methodname":"getEthnicity()", "methodnamerefined":"getEthnicity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getEthnicity", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getEthnicity()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public Ethnicity getEthnicity() {\r\n    return ethnicity;\r\n}"},
 {"id":1849, "methodname":"getFatherMID()", "methodnamerefined":"getFatherMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getFatherMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getFatherMID()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getFatherMID() {\r\n    return fatherMID;\r\n}"},
 {"id":1850, "methodname":"getFirstName()", "methodnamerefined":"getFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getFirstName()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getFirstName() {\r\n    return firstName;\r\n}"},
 {"id":1851, "methodname":"getFullName()", "methodnamerefined":"getFullName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getFullName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getFullName()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getFullName() {\r\n    return ((getFirstName()) + \" \") + (getLastName());\r\n}"},
 {"id":1852, "methodname":"getGender()", "methodnamerefined":"getGender", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getGender", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getGender()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public Gender getGender() {\r\n    return gender;\r\n}"},
 {"id":1853, "methodname":"getIcAddress1()", "methodnamerefined":"getIcAddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getIcAddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getIcAddress1()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getIcAddress1() {\r\n    return icAddress1;\r\n}"},
 {"id":1854, "methodname":"getIcAddress2()", "methodnamerefined":"getIcAddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getIcAddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getIcAddress2()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getIcAddress2() {\r\n    return icAddress2;\r\n}"},
 {"id":1855, "methodname":"getIcAddress3()", "methodnamerefined":"getIcAddress3", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getIcAddress3", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getIcAddress3()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"// Composition of city, state, and zip\r\npublic String getIcAddress3() {\r\n    return ((((getIcCity()) + \", \") + (getIcState())) + \" \") + (getIcZip());\r\n}"},
 {"id":1856, "methodname":"getIcCity()", "methodnamerefined":"getIcCity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getIcCity", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getIcCity()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getIcCity() {\r\n    return icCity;\r\n}"},
 {"id":1857, "methodname":"getIcID()", "methodnamerefined":"getIcID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getIcID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getIcID()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getIcID() {\r\n    return icID;\r\n}"},
 {"id":1858, "methodname":"getIcName()", "methodnamerefined":"getIcName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getIcName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getIcName()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getIcName() {\r\n    return icName;\r\n}"},
 {"id":1859, "methodname":"getIcPhone()", "methodnamerefined":"getIcPhone", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getIcPhone", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getIcPhone()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getIcPhone() {\r\n    return icPhone;\r\n}"},
 {"id":1860, "methodname":"getIcState()", "methodnamerefined":"getIcState", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getIcState", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getIcState()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getIcState() {\r\n    return icState;\r\n}"},
 {"id":1861, "methodname":"getIcZip()", "methodnamerefined":"getIcZip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getIcZip", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getIcZip()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getIcZip() {\r\n    return icZip;\r\n}"},
 {"id":1862, "methodname":"getLanguage()", "methodnamerefined":"getLanguage", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getLanguage", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getLanguage()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getLanguage() {\r\n    return language;\r\n}"},
 {"id":1863, "methodname":"getLastName()", "methodnamerefined":"getLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getLastName()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getLastName() {\r\n    return lastName;\r\n}"},
 {"id":1864, "methodname":"getMID()", "methodnamerefined":"getMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getMID()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public long getMID() {\r\n    return MID;\r\n}"},
 {"id":1865, "methodname":"getMotherMID()", "methodnamerefined":"getMotherMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getMotherMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getMotherMID()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getMotherMID() {\r\n    return motherMID;\r\n}"},
 {"id":1866, "methodname":"getPassword()", "methodnamerefined":"getPassword", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getPassword", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getPassword()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getPassword() {\r\n    return password;\r\n}"},
 {"id":1867, "methodname":"getPhone()", "methodnamerefined":"getPhone", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getPhone", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getPhone()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getPhone() {\r\n    return phone;\r\n}"},
 {"id":1868, "methodname":"getReligion()", "methodnamerefined":"getReligion", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getReligion", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getReligion()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getReligion() {\r\n    return religion;\r\n}"},
 {"id":1869, "methodname":"getSecurityAnswer()", "methodnamerefined":"getSecurityAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getSecurityAnswer", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getSecurityAnswer()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getSecurityAnswer() {\r\n    return securityAnswer;\r\n}"},
 {"id":1870, "methodname":"getSecurityQuestion()", "methodnamerefined":"getSecurityQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getSecurityQuestion", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getSecurityQuestion()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getSecurityQuestion() {\r\n    return securityQuestion;\r\n}"},
 {"id":1871, "methodname":"getSpiritualPractices()", "methodnamerefined":"getSpiritualPractices", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getSpiritualPractices", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getSpiritualPractices()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getSpiritualPractices() {\r\n    return spiritualPractices;\r\n}"},
 {"id":1872, "methodname":"getState()", "methodnamerefined":"getState", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getState", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getState()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getState() {\r\n    return state;\r\n}"},
 {"id":1873, "methodname":"getStreetAddress1()", "methodnamerefined":"getStreetAddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getStreetAddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getStreetAddress1()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getStreetAddress1() {\r\n    return streetAddress1;\r\n}"},
 {"id":1874, "methodname":"getStreetAddress2()", "methodnamerefined":"getStreetAddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getStreetAddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getStreetAddress2()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getStreetAddress2() {\r\n    return streetAddress2;\r\n}"},
 {"id":1875, "methodname":"getStreetAddress3()", "methodnamerefined":"getStreetAddress3", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getStreetAddress3", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getStreetAddress3()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"// Composition of the city, state, zip\r\npublic String getStreetAddress3() {\r\n    return ((((getCity()) + \", \") + (getState())) + \" \") + (getZip());\r\n}"},
 {"id":1876, "methodname":"getTopicalNotes()", "methodnamerefined":"getTopicalNotes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getTopicalNotes", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getTopicalNotes()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getTopicalNotes() {\r\n    return topicalNotes;\r\n}"},
 {"id":1877, "methodname":"getZip()", "methodnamerefined":"getZip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.getZip", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.getZip()", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public String getZip() {\r\n    return zip;\r\n}"},
 {"id":1878, "methodname":"setAlternateName(java.lang.String)", "methodnamerefined":"setAlternateName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setAlternateName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setAlternateName(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setAlternateName(String alternateName) {\r\n    this.alternateName = alternateName;\r\n}"},
 {"id":1879, "methodname":"setBloodType(edu.ncsu.csc.itrust.enums.BloodType)", "methodnamerefined":"setBloodType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setBloodType", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setBloodType(edu.ncsu.csc.itrust.enums.BloodType)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setBloodType(BloodType bloodType) {\r\n    this.bloodType = bloodType;\r\n}"},
 {"id":1880, "methodname":"setBloodTypeStr(java.lang.String)", "methodnamerefined":"setBloodTypeStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setBloodTypeStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setBloodTypeStr(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setBloodTypeStr(String bloodType) {\r\n    this.bloodType = BloodType.parse(bloodType);\r\n}"},
 {"id":1881, "methodname":"setCauseOfDeath(java.lang.String)", "methodnamerefined":"setCauseOfDeath", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setCauseOfDeath", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setCauseOfDeath(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setCauseOfDeath(String causeOfDeath) {\r\n    this.causeOfDeath = causeOfDeath;\r\n}"},
 {"id":1882, "methodname":"setCity(java.lang.String)", "methodnamerefined":"setCity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setCity", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setCity(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setCity(String city) {\r\n    this.city = city;\r\n}"},
 {"id":1883, "methodname":"setConfirmPassword(java.lang.String)", "methodnamerefined":"setConfirmPassword", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setConfirmPassword", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setConfirmPassword(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setConfirmPassword(String confirmPassword) {\r\n    this.confirmPassword = confirmPassword;\r\n}"},
 {"id":1884, "methodname":"setCreditCardNumber(java.lang.String)", "methodnamerefined":"setCreditCardNumber", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setCreditCardNumber", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setCreditCardNumber(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setCreditCardNumber(String creditCardNumber) {\r\n    this.creditCardNumber = creditCardNumber;\r\n}"},
 {"id":1885, "methodname":"setCreditCardType(java.lang.String)", "methodnamerefined":"setCreditCardType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setCreditCardType", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setCreditCardType(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setCreditCardType(String creditCardType) {\r\n    this.creditCardType = creditCardType;\r\n}"},
 {"id":1886, "methodname":"setDateOfBirthStr(java.lang.String)", "methodnamerefined":"setDateOfBirthStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setDateOfBirthStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setDateOfBirthStr(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setDateOfBirthStr(String dateOfBirthStr) {\r\n    this.dateOfBirthStr = dateOfBirthStr;\r\n}"},
 {"id":1887, "methodname":"setDateOfDeactivationStr(java.lang.String)", "methodnamerefined":"setDateOfDeactivationStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setDateOfDeactivationStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setDateOfDeactivationStr(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setDateOfDeactivationStr(String dateOfDeactivationStr) {\r\n    this.dateOfDeactivationStr = dateOfDeactivationStr;\r\n}"},
 {"id":1888, "methodname":"setDateOfDeathStr(java.lang.String)", "methodnamerefined":"setDateOfDeathStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setDateOfDeathStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setDateOfDeathStr(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setDateOfDeathStr(String dateOfDeathStr) {\r\n    this.dateOfDeathStr = dateOfDeathStr;\r\n}"},
 {"id":1889, "methodname":"setDirectionsToHome(java.lang.String)", "methodnamerefined":"setDirectionsToHome", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setDirectionsToHome", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setDirectionsToHome(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setDirectionsToHome(String directionsToHome) {\r\n    this.directionsToHome = directionsToHome;\r\n}"},
 {"id":1890, "methodname":"setEmail(java.lang.String)", "methodnamerefined":"setEmail", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setEmail", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setEmail(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setEmail(String email) {\r\n    this.email = email;\r\n}"},
 {"id":1891, "methodname":"setEmergencyName(java.lang.String)", "methodnamerefined":"setEmergencyName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setEmergencyName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setEmergencyName(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setEmergencyName(String emergencyName) {\r\n    this.emergencyName = emergencyName;\r\n}"},
 {"id":1892, "methodname":"setEmergencyPhone(java.lang.String)", "methodnamerefined":"setEmergencyPhone", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setEmergencyPhone", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setEmergencyPhone(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setEmergencyPhone(String emergencyPhone) {\r\n    this.emergencyPhone = emergencyPhone;\r\n}"},
 {"id":1893, "methodname":"setEthnicity(edu.ncsu.csc.itrust.enums.Ethnicity)", "methodnamerefined":"setEthnicity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setEthnicity", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setEthnicity(edu.ncsu.csc.itrust.enums.Ethnicity)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setEthnicity(Ethnicity ethnicity) {\r\n    this.ethnicity = ethnicity;\r\n}"},
 {"id":1894, "methodname":"setEthnicityStr(java.lang.String)", "methodnamerefined":"setEthnicityStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setEthnicityStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setEthnicityStr(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setEthnicityStr(String ethnicity) {\r\n    this.ethnicity = Ethnicity.parse(ethnicity);\r\n}"},
 {"id":1895, "methodname":"setFatherMID(java.lang.String)", "methodnamerefined":"setFatherMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setFatherMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setFatherMID(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setFatherMID(String fatherMID) {\r\n    this.fatherMID = fatherMID;\r\n}"},
 {"id":1896, "methodname":"setFirstName(java.lang.String)", "methodnamerefined":"setFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setFirstName(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setFirstName(String firstName) {\r\n    this.firstName = firstName;\r\n}"},
 {"id":1897, "methodname":"setGender(edu.ncsu.csc.itrust.enums.Gender)", "methodnamerefined":"setGender", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setGender", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setGender(edu.ncsu.csc.itrust.enums.Gender)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setGender(Gender gender) {\r\n    this.gender = gender;\r\n}"},
 {"id":1898, "methodname":"setGenderStr(java.lang.String)", "methodnamerefined":"setGenderStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setGenderStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setGenderStr(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setGenderStr(String gender) {\r\n    this.gender = Gender.parse(gender);\r\n}"},
 {"id":1899, "methodname":"setIcAddress1(java.lang.String)", "methodnamerefined":"setIcAddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setIcAddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setIcAddress1(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setIcAddress1(String icAddress1) {\r\n    this.icAddress1 = icAddress1;\r\n}"},
 {"id":1900, "methodname":"setIcAddress2(java.lang.String)", "methodnamerefined":"setIcAddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setIcAddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setIcAddress2(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setIcAddress2(String icAddress2) {\r\n    this.icAddress2 = icAddress2;\r\n}"},
 {"id":1901, "methodname":"setIcCity(java.lang.String)", "methodnamerefined":"setIcCity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setIcCity", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setIcCity(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setIcCity(String icCity) {\r\n    this.icCity = icCity;\r\n}"},
 {"id":1902, "methodname":"setIcID(java.lang.String)", "methodnamerefined":"setIcID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setIcID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setIcID(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setIcID(String icID) {\r\n    this.icID = icID;\r\n}"},
 {"id":1903, "methodname":"setIcName(java.lang.String)", "methodnamerefined":"setIcName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setIcName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setIcName(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setIcName(String icName) {\r\n    this.icName = icName;\r\n}"},
 {"id":1904, "methodname":"setIcPhone(java.lang.String)", "methodnamerefined":"setIcPhone", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setIcPhone", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setIcPhone(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setIcPhone(String icPhone) {\r\n    this.icPhone = icPhone;\r\n}"},
 {"id":1905, "methodname":"setIcState(java.lang.String)", "methodnamerefined":"setIcState", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setIcState", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setIcState(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setIcState(String icState) {\r\n    this.icState = icState;\r\n}"},
 {"id":1906, "methodname":"setIcZip(java.lang.String)", "methodnamerefined":"setIcZip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setIcZip", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setIcZip(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setIcZip(String icZip) {\r\n    this.icZip = icZip;\r\n}"},
 {"id":1907, "methodname":"setLanguage(java.lang.String)", "methodnamerefined":"setLanguage", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setLanguage", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setLanguage(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setLanguage(String language) {\r\n    this.language = language;\r\n}"},
 {"id":1908, "methodname":"setLastName(java.lang.String)", "methodnamerefined":"setLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setLastName(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setLastName(String lastName) {\r\n    this.lastName = lastName;\r\n}"},
 {"id":1909, "methodname":"setMID(long)", "methodnamerefined":"setMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setMID(long)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setMID(long mid) {\r\n    MID = mid;\r\n}"},
 {"id":1910, "methodname":"setMotherMID(java.lang.String)", "methodnamerefined":"setMotherMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setMotherMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setMotherMID(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setMotherMID(String motherMID) {\r\n    this.motherMID = motherMID;\r\n}"},
 {"id":1911, "methodname":"setPassword(java.lang.String)", "methodnamerefined":"setPassword", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setPassword", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setPassword(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setPassword(String password) {\r\n    this.password = password;\r\n}"},
 {"id":1912, "methodname":"setPhone(java.lang.String)", "methodnamerefined":"setPhone", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setPhone", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setPhone(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setPhone(String phone) {\r\n    this.phone = phone;\r\n}"},
 {"id":1913, "methodname":"setReligion(java.lang.String)", "methodnamerefined":"setReligion", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setReligion", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setReligion(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setReligion(String religion) {\r\n    this.religion = religion;\r\n}"},
 {"id":1914, "methodname":"setSecurityAnswer(java.lang.String)", "methodnamerefined":"setSecurityAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setSecurityAnswer", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setSecurityAnswer(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setSecurityAnswer(String securityAnswer) {\r\n    this.securityAnswer = securityAnswer;\r\n}"},
 {"id":1915, "methodname":"setSecurityQuestion(java.lang.String)", "methodnamerefined":"setSecurityQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setSecurityQuestion", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setSecurityQuestion(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setSecurityQuestion(String securityQuestion) {\r\n    this.securityQuestion = securityQuestion;\r\n}"},
 {"id":1916, "methodname":"setSpiritualPractices(java.lang.String)", "methodnamerefined":"setSpiritualPractices", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setSpiritualPractices", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setSpiritualPractices(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setSpiritualPractices(String spiritualPractices) {\r\n    this.spiritualPractices = spiritualPractices;\r\n}"},
 {"id":1917, "methodname":"setState(java.lang.String)", "methodnamerefined":"setState", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setState", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setState(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setState(String state) {\r\n    this.state = state;\r\n}"},
 {"id":1918, "methodname":"setStreetAddress1(java.lang.String)", "methodnamerefined":"setStreetAddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setStreetAddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setStreetAddress1(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setStreetAddress1(String streetAddress1) {\r\n    this.streetAddress1 = streetAddress1;\r\n}"},
 {"id":1919, "methodname":"setStreetAddress2(java.lang.String)", "methodnamerefined":"setStreetAddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setStreetAddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setStreetAddress2(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setStreetAddress2(String streetAddress2) {\r\n    this.streetAddress2 = streetAddress2;\r\n}"},
 {"id":1920, "methodname":"setTopicalNotes(java.lang.String)", "methodnamerefined":"setTopicalNotes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setTopicalNotes", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setTopicalNotes(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setTopicalNotes(String topicalNotes) {\r\n    this.topicalNotes = topicalNotes;\r\n}"},
 {"id":1921, "methodname":"setZip(java.lang.String)", "methodnamerefined":"setZip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientBean.setZip", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientBean.setZip(java.lang.String)", "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "shortclassname":"PatientBean", "method":"public void setZip(String zip) {\r\n    this.zip = zip;\r\n}"},
 {"id":1922, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.-init-()", "classid":267, "classname":"edu.ncsu.csc.itrust.beans.PatientHistoryBean", "shortclassname":"PatientHistoryBean", "method":"PatientHistoryBean() {\r\n}"},
 {"id":1923, "methodname":"getChangeDate()", "methodnamerefined":"getChangeDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.getChangeDate", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.getChangeDate()", "classid":267, "classname":"edu.ncsu.csc.itrust.beans.PatientHistoryBean", "shortclassname":"PatientHistoryBean", "method":"public Date getChangeDate() {\r\n    try {\r\n        return new SimpleDateFormat(\"MM/dd/yyyy\").parse(changeDateStr);\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"},
 {"id":1924, "methodname":"getChangeDateStr()", "methodnamerefined":"getChangeDateStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.getChangeDateStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.getChangeDateStr()", "classid":267, "classname":"edu.ncsu.csc.itrust.beans.PatientHistoryBean", "shortclassname":"PatientHistoryBean", "method":"public String getChangeDateStr() {\r\n    return changeDateStr;\r\n}"},
 {"id":1925, "methodname":"getChangeMID()", "methodnamerefined":"getChangeMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.getChangeMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.getChangeMID()", "classid":267, "classname":"edu.ncsu.csc.itrust.beans.PatientHistoryBean", "shortclassname":"PatientHistoryBean", "method":"public long getChangeMID() {\r\n    return this.changeMID;\r\n}"},
 {"id":1926, "methodname":"setChangeDateStr(java.lang.String)", "methodnamerefined":"setChangeDateStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.setChangeDateStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.setChangeDateStr(java.lang.String)", "classid":267, "classname":"edu.ncsu.csc.itrust.beans.PatientHistoryBean", "shortclassname":"PatientHistoryBean", "method":"public void setChangeDateStr(String changeDate) {\r\n    this.changeDateStr = changeDate;\r\n}"},
 {"id":1927, "methodname":"setChangeMID(long)", "methodnamerefined":"setChangeMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.setChangeMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientHistoryBean.setChangeMID(long)", "classid":267, "classname":"edu.ncsu.csc.itrust.beans.PatientHistoryBean", "shortclassname":"PatientHistoryBean", "method":"public void setChangeMID(long mid) {\r\n    this.changeMID = mid;\r\n}"},
 {"id":1928, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.-init-()", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"PatientInstructionsBean() {\r\n}"},
 {"id":1929, "methodname":"getComment()", "methodnamerefined":"getComment", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getComment", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getComment()", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @return the comment\r\n */\r\npublic String getComment() {\r\n    return comment;\r\n}"},
 {"id":1930, "methodname":"getId()", "methodnamerefined":"getId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getId", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getId()", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @return the id\r\n */\r\npublic long getId() {\r\n    return id;\r\n}"},
 {"id":1931, "methodname":"getModified()", "methodnamerefined":"getModified", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getModified", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getModified()", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @return the modified\r\n */\r\npublic Date getModified() {\r\n    return modified;\r\n}"},
 {"id":1932, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getName()", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @return the name\r\n */\r\npublic String getName() {\r\n    return name;\r\n}"},
 {"id":1933, "methodname":"getUrl()", "methodnamerefined":"getUrl", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getUrl", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getUrl()", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @return the url\r\n */\r\npublic String getUrl() {\r\n    return url;\r\n}"},
 {"id":1934, "methodname":"getVisitID()", "methodnamerefined":"getVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.getVisitID()", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @return the visitID\r\n */\r\npublic long getVisitID() {\r\n    return visitID;\r\n}"},
 {"id":1935, "methodname":"setComment(java.lang.String)", "methodnamerefined":"setComment", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setComment", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setComment(java.lang.String)", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @param comment\r\n * \t\tthe comment to set\r\n */\r\npublic void setComment(String comment) {\r\n    this.comment = comment;\r\n}"},
 {"id":1936, "methodname":"setId(long)", "methodnamerefined":"setId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setId", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setId(long)", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @param id\r\n * \t\tthe id to set\r\n */\r\npublic void setId(long id) {\r\n    this.id = id;\r\n}"},
 {"id":1937, "methodname":"setModified(java.util.Date)", "methodnamerefined":"setModified", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setModified", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setModified(java.util.Date)", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @param modified\r\n * \t\tthe modified to set\r\n */\r\npublic void setModified(Date modified) {\r\n    this.modified = modified;\r\n}"},
 {"id":1938, "methodname":"setName(java.lang.String)", "methodnamerefined":"setName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setName(java.lang.String)", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\tthe name to set\r\n */\r\npublic void setName(String name) {\r\n    this.name = name;\r\n}"},
 {"id":1939, "methodname":"setUrl(java.lang.String)", "methodnamerefined":"setUrl", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setUrl", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setUrl(java.lang.String)", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @param url\r\n * \t\tthe url to set\r\n */\r\npublic void setUrl(String url) {\r\n    this.url = url;\r\n}"},
 {"id":1940, "methodname":"setVisitID(long)", "methodnamerefined":"setVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean.setVisitID(long)", "classid":268, "classname":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "shortclassname":"PatientInstructionsBean", "method":"/**\r\n *\r\n *\r\n * @param visitID\r\n * \t\tthe visitID to set\r\n */\r\npublic void setVisitID(long visitID) {\r\n    this.visitID = visitID;\r\n}"},
 {"id":1941, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.-init-()", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public PatientVisitBean() {\r\n}"},
 {"id":1942, "methodname":"getAddress1()", "methodnamerefined":"getAddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getAddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getAddress1()", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public String getAddress1() {\r\n    return Address1;\r\n}"},
 {"id":1943, "methodname":"getAddress2()", "methodnamerefined":"getAddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getAddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getAddress2()", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public String getAddress2() {\r\n    return Address2;\r\n}"},
 {"id":1944, "methodname":"getLastOVDate()", "methodnamerefined":"getLastOVDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getLastOVDate", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getLastOVDate()", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public String getLastOVDate() {\r\n    return LastOVDate;\r\n}"},
 {"id":1945, "methodname":"getLastOVDateD()", "methodnamerefined":"getLastOVDateD", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getLastOVDateD", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getLastOVDateD()", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public String getLastOVDateD() {\r\n    return LastOVDateD;\r\n}"},
 {"id":1946, "methodname":"getLastOVDateM()", "methodnamerefined":"getLastOVDateM", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getLastOVDateM", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getLastOVDateM()", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public String getLastOVDateM() {\r\n    return LastOVDateM;\r\n}"},
 {"id":1947, "methodname":"getLastOVDateY()", "methodnamerefined":"getLastOVDateY", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getLastOVDateY", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getLastOVDateY()", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public String getLastOVDateY() {\r\n    return LastOVDateY;\r\n}"},
 {"id":1948, "methodname":"getPatient()", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getPatient()", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public PatientBean getPatient() {\r\n    return patient;\r\n}"},
 {"id":1949, "methodname":"getPatientName()", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.getPatientName()", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public String getPatientName() {\r\n    return PatientName;\r\n}"},
 {"id":1950, "methodname":"setAddress1(java.lang.String)", "methodnamerefined":"setAddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setAddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setAddress1(java.lang.String)", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public void setAddress1(String address1) {\r\n    Address1 = address1;\r\n}"},
 {"id":1951, "methodname":"setAddress2(java.lang.String)", "methodnamerefined":"setAddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setAddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setAddress2(java.lang.String)", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public void setAddress2(String address2) {\r\n    Address2 = address2;\r\n}"},
 {"id":1952, "methodname":"setLastOVDate(java.lang.String)", "methodnamerefined":"setLastOVDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDate", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDate(java.lang.String)", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public void setLastOVDate(String lastOVDate) {\r\n    LastOVDate = lastOVDate;\r\n}"},
 {"id":1953, "methodname":"setLastOVDateD(java.lang.String)", "methodnamerefined":"setLastOVDateD", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDateD", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDateD(java.lang.String)", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public void setLastOVDateD(String lastOVDateD) {\r\n    LastOVDateD = lastOVDateD;\r\n}"},
 {"id":1954, "methodname":"setLastOVDateM(java.lang.String)", "methodnamerefined":"setLastOVDateM", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDateM", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDateM(java.lang.String)", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public void setLastOVDateM(String lastOVDateM) {\r\n    LastOVDateM = lastOVDateM;\r\n}"},
 {"id":1955, "methodname":"setLastOVDateY(java.lang.String)", "methodnamerefined":"setLastOVDateY", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDateY", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setLastOVDateY(java.lang.String)", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public void setLastOVDateY(String lastOVDateY) {\r\n    LastOVDateY = lastOVDateY;\r\n}"},
 {"id":1956, "methodname":"setPatient(edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"setPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setPatient(edu.ncsu.csc.itrust.beans.PatientBean)", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public void setPatient(PatientBean patient) {\r\n    this.patient = patient;\r\n}"},
 {"id":1957, "methodname":"setPatientName(java.lang.String)", "methodnamerefined":"setPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setPatientName", "fullmethod":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setPatientName(java.lang.String)", "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "shortclassname":"PatientVisitBean", "method":"public void setPatientName(String patientName) {\r\n    PatientName = patientName;\r\n}"},
 {"id":1958, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.-init-()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"PersonnelBean() {\r\n}"},
 {"id":1959, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.equals(java.lang.Object)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"@Override\r\npublic boolean equals(Object o) {\r\n    return (this.MID) == (((PersonnelBean) (o)).MID);\r\n}"},
 {"id":1960, "methodname":"getAMID()", "methodnamerefined":"getAMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getAMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getAMID()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public long getAMID() {\r\n    return AMID;\r\n}"},
 {"id":1961, "methodname":"getCity()", "methodnamerefined":"getCity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getCity", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getCity()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getCity() {\r\n    return city;\r\n}"},
 {"id":1962, "methodname":"getConfirmPassword()", "methodnamerefined":"getConfirmPassword", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getConfirmPassword", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getConfirmPassword()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getConfirmPassword() {\r\n    return confirmPassword;\r\n}"},
 {"id":1963, "methodname":"getEmail()", "methodnamerefined":"getEmail", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getEmail", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getEmail()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getEmail() {\r\n    return email;\r\n}"},
 {"id":1964, "methodname":"getFirstName()", "methodnamerefined":"getFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getFirstName()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getFirstName() {\r\n    return firstName;\r\n}"},
 {"id":1965, "methodname":"getFullName()", "methodnamerefined":"getFullName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getFullName", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getFullName()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getFullName() {\r\n    return ((getFirstName()) + \" \") + (getLastName());\r\n}"},
 {"id":1966, "methodname":"getIndexIn(java.util.List)", "methodnamerefined":"getIndexIn", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getIndexIn", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getIndexIn(java.util.List)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"/* public int compareTo(PersonnelBean other) {\nif (MID == other.getMID()) return 0;\nif (MID > other.getMID()) return 1;\nreturn -1;\n}\n */\r\npublic int getIndexIn(List<PersonnelBean> list) {\r\n    for (int i = 0; i < (list.size()); i++) {\r\n        if ((list.get(i).MID) == (this.MID))\r\n            return i;\r\n\r\n    }\r\n    return -1;\r\n}"},
 {"id":1967, "methodname":"getLastName()", "methodnamerefined":"getLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getLastName()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getLastName() {\r\n    return lastName;\r\n}"},
 {"id":1968, "methodname":"getMID()", "methodnamerefined":"getMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getMID()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public long getMID() {\r\n    return MID;\r\n}"},
 {"id":1969, "methodname":"getPassword()", "methodnamerefined":"getPassword", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getPassword", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getPassword()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getPassword() {\r\n    return password;\r\n}"},
 {"id":1970, "methodname":"getPhone()", "methodnamerefined":"getPhone", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getPhone", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getPhone()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getPhone() {\r\n    return phone;\r\n}"},
 {"id":1971, "methodname":"getRole()", "methodnamerefined":"getRole", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getRole", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getRole()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public Role getRole() {\r\n    return Role.parse(roleString);\r\n}"},
 {"id":1972, "methodname":"getRoleString()", "methodnamerefined":"getRoleString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getRoleString", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getRoleString()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getRoleString() {\r\n    return roleString;\r\n}"},
 {"id":1973, "methodname":"getSecurityAnswer()", "methodnamerefined":"getSecurityAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getSecurityAnswer", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getSecurityAnswer()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getSecurityAnswer() {\r\n    return securityAnswer;\r\n}"},
 {"id":1974, "methodname":"getSecurityQuestion()", "methodnamerefined":"getSecurityQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getSecurityQuestion", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getSecurityQuestion()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getSecurityQuestion() {\r\n    return securityQuestion;\r\n}"},
 {"id":1975, "methodname":"getSpecialty()", "methodnamerefined":"getSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getSpecialty", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getSpecialty()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getSpecialty() {\r\n    return specialty;\r\n}"},
 {"id":1976, "methodname":"getState()", "methodnamerefined":"getState", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getState", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getState()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getState() {\r\n    return state;\r\n}"},
 {"id":1977, "methodname":"getStreetAddress1()", "methodnamerefined":"getStreetAddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getStreetAddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getStreetAddress1()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getStreetAddress1() {\r\n    return streetAddress1;\r\n}"},
 {"id":1978, "methodname":"getStreetAddress2()", "methodnamerefined":"getStreetAddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getStreetAddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getStreetAddress2()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getStreetAddress2() {\r\n    return streetAddress2;\r\n}"},
 {"id":1979, "methodname":"getZip()", "methodnamerefined":"getZip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.getZip", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.getZip()", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public String getZip() {\r\n    return zip;\r\n}"},
 {"id":1980, "methodname":"setAMID(long)", "methodnamerefined":"setAMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setAMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setAMID(long)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setAMID(long amid) {\r\n    AMID = amid;\r\n}"},
 {"id":1981, "methodname":"setCity(java.lang.String)", "methodnamerefined":"setCity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setCity", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setCity(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setCity(String city) {\r\n    this.city = city;\r\n}"},
 {"id":1982, "methodname":"setConfirmPassword(java.lang.String)", "methodnamerefined":"setConfirmPassword", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setConfirmPassword", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setConfirmPassword(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setConfirmPassword(String confirmPassword) {\r\n    this.confirmPassword = confirmPassword;\r\n}"},
 {"id":1983, "methodname":"setEmail(java.lang.String)", "methodnamerefined":"setEmail", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setEmail", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setEmail(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setEmail(String email) {\r\n    this.email = email;\r\n}"},
 {"id":1984, "methodname":"setFirstName(java.lang.String)", "methodnamerefined":"setFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setFirstName(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setFirstName(String firstName) {\r\n    this.firstName = firstName;\r\n}"},
 {"id":1985, "methodname":"setLastName(java.lang.String)", "methodnamerefined":"setLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setLastName(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setLastName(String lastName) {\r\n    this.lastName = lastName;\r\n}"},
 {"id":1986, "methodname":"setMID(long)", "methodnamerefined":"setMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setMID", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setMID(long)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setMID(long mid) {\r\n    MID = mid;\r\n}"},
 {"id":1987, "methodname":"setPassword(java.lang.String)", "methodnamerefined":"setPassword", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setPassword", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setPassword(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setPassword(String password) {\r\n    this.password = password;\r\n}"},
 {"id":1988, "methodname":"setPhone(java.lang.String)", "methodnamerefined":"setPhone", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setPhone", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setPhone(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setPhone(String phone) {\r\n    this.phone = phone;\r\n}"},
 {"id":1989, "methodname":"setRole(edu.ncsu.csc.itrust.enums.Role)", "methodnamerefined":"setRole", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setRole", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setRole(edu.ncsu.csc.itrust.enums.Role)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setRole(Role role) {\r\n}"},
 {"id":1990, "methodname":"setRoleString(java.lang.String)", "methodnamerefined":"setRoleString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setRoleString", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setRoleString(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setRoleString(String role) {\r\n    this.roleString = role;\r\n}"},
 {"id":1991, "methodname":"setSecurityAnswer(java.lang.String)", "methodnamerefined":"setSecurityAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setSecurityAnswer", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setSecurityAnswer(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setSecurityAnswer(String securityAnswer) {\r\n    this.securityAnswer = securityAnswer;\r\n}"},
 {"id":1992, "methodname":"setSecurityQuestion(java.lang.String)", "methodnamerefined":"setSecurityQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setSecurityQuestion", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setSecurityQuestion(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setSecurityQuestion(String securityQuestion) {\r\n    this.securityQuestion = securityQuestion;\r\n}"},
 {"id":1993, "methodname":"setSpecialty(java.lang.String)", "methodnamerefined":"setSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setSpecialty", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setSpecialty(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setSpecialty(String specialty) {\r\n    this.specialty = specialty;\r\n}"},
 {"id":1994, "methodname":"setState(java.lang.String)", "methodnamerefined":"setState", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setState", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setState(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setState(String state) {\r\n    this.state = state;\r\n}"},
 {"id":1995, "methodname":"setStreetAddress1(java.lang.String)", "methodnamerefined":"setStreetAddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setStreetAddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setStreetAddress1(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setStreetAddress1(String streetAddress1) {\r\n    this.streetAddress1 = streetAddress1;\r\n}"},
 {"id":1996, "methodname":"setStreetAddress2(java.lang.String)", "methodnamerefined":"setStreetAddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setStreetAddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setStreetAddress2(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setStreetAddress2(String streetAddress2) {\r\n    this.streetAddress2 = streetAddress2;\r\n}"},
 {"id":1997, "methodname":"setZip(java.lang.String)", "methodnamerefined":"setZip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PersonnelBean.setZip", "fullmethod":"edu.ncsu.csc.itrust.beans.PersonnelBean.setZip(java.lang.String)", "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "shortclassname":"PersonnelBean", "method":"public void setZip(String zip) {\r\n    this.zip = zip;\r\n}"},
 {"id":1998, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.-init-()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public PrescriptionBean() {\r\n}"},
 {"id":1999, "methodname":"addReason(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"addReason", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.addReason", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.addReason(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void addReason(OverrideReasonBean reason) {\r\n    if ((reasons) == null) {\r\n        reasons = new ArrayList<OverrideReasonBean>();\r\n    }\r\n    reasons.add(reason);\r\n}"},
 {"id":2000, "methodname":"equals(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.equals(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"/**\r\n *\r\n *\r\n * @param other\r\n * \t\t\r\n * @return \r\n */\r\nprivate boolean equals(PrescriptionBean other) {\r\n    return (((((((medication) == (other.medication)) || (((medication) != null) && (medication.equals(other.medication)))) && ((visitID) == (other.visitID))) && (startDateStr.equals(other.startDateStr))) && (endDateStr.equals(other.endDateStr))) && ((dosage) == (other.dosage))) && (instructions.equals(other.instructions));\r\n}"},
 {"id":2001, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.equals(java.lang.Object)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"@Override\r\npublic boolean equals(Object other) {\r\n    return ((other != null) && (this.getClass().equals(other.getClass()))) && (this.equals(((PrescriptionBean) (other))));\r\n}"},
 {"id":2002, "methodname":"getDosage()", "methodnamerefined":"getDosage", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getDosage", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getDosage()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"/**\r\n * getters and setters for dosage,\r\n * reason, override reason\r\n */\r\npublic int getDosage() {\r\n    return dosage;\r\n}"},
 {"id":2003, "methodname":"getEndDate()", "methodnamerefined":"getEndDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getEndDate", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getEndDate()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public Date getEndDate() {\r\n    try {\r\n        return new SimpleDateFormat(\"MM/dd/yyyy\").parse(endDateStr);\r\n    } catch (ParseException e) {\r\n        return null;\r\n    }\r\n}"},
 {"id":2004, "methodname":"getEndDateStr()", "methodnamerefined":"getEndDateStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getEndDateStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getEndDateStr()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public String getEndDateStr() {\r\n    return endDateStr;\r\n}"},
 {"id":2005, "methodname":"getId()", "methodnamerefined":"getId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getId", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getId()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public long getId() {\r\n    return id;\r\n}"},
 {"id":2006, "methodname":"getInstructions()", "methodnamerefined":"getInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getInstructions", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getInstructions()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public String getInstructions() {\r\n    return instructions;\r\n}"},
 {"id":2007, "methodname":"getMedication()", "methodnamerefined":"getMedication", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getMedication", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getMedication()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public MedicationBean getMedication() {\r\n    return medication;\r\n}"},
 {"id":2008, "methodname":"getOverrideReasonOther()", "methodnamerefined":"getOverrideReasonOther", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getOverrideReasonOther", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getOverrideReasonOther()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public String getOverrideReasonOther() {\r\n    return overrideReasonOther;\r\n}"},
 {"id":2009, "methodname":"getReasons()", "methodnamerefined":"getReasons", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getReasons", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getReasons()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public List<OverrideReasonBean> getReasons() {\r\n    if ((reasons) == null) {\r\n        reasons = new ArrayList<OverrideReasonBean>();\r\n    }\r\n    return reasons;\r\n}"},
 {"id":2010, "methodname":"getStartDate()", "methodnamerefined":"getStartDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getStartDate", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getStartDate()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public Date getStartDate() {\r\n    try {\r\n        return new SimpleDateFormat(\"MM/dd/yyyy\").parse(startDateStr);\r\n    } catch (ParseException e) {\r\n        return null;\r\n    }\r\n}"},
 {"id":2011, "methodname":"getStartDateStr()", "methodnamerefined":"getStartDateStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getStartDateStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getStartDateStr()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public String getStartDateStr() {\r\n    return startDateStr;\r\n}"},
 {"id":2012, "methodname":"getVisitID()", "methodnamerefined":"getVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.getVisitID()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public long getVisitID() {\r\n    return visitID;\r\n}"},
 {"id":2013, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.hashCode()", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":2014, "methodname":"setDosage(int)", "methodnamerefined":"setDosage", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setDosage", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setDosage(int)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setDosage(int dosage) {\r\n    this.dosage = dosage;\r\n}"},
 {"id":2015, "methodname":"setEndDate(java.util.Date)", "methodnamerefined":"setEndDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setEndDate", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setEndDate(java.util.Date)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setEndDate(Date endDate) {\r\n    this.endDateStr = new SimpleDateFormat(\"MM/dd/yyyy\").format(endDate);\r\n}"},
 {"id":2016, "methodname":"setEndDateStr(java.lang.String)", "methodnamerefined":"setEndDateStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setEndDateStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setEndDateStr(java.lang.String)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setEndDateStr(String endDate) {\r\n    this.endDateStr = endDate;\r\n}"},
 {"id":2017, "methodname":"setId(long)", "methodnamerefined":"setId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setId", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setId(long)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setId(long id) {\r\n    this.id = id;\r\n}"},
 {"id":2018, "methodname":"setInstructions(java.lang.String)", "methodnamerefined":"setInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setInstructions", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setInstructions(java.lang.String)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setInstructions(String instruction) {\r\n    this.instructions = instruction;\r\n}"},
 {"id":2019, "methodname":"setMedication(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"setMedication", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setMedication", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setMedication(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setMedication(MedicationBean medication) {\r\n    this.medication = medication;\r\n}"},
 {"id":2020, "methodname":"setOverrideReasonOther(java.lang.String)", "methodnamerefined":"setOverrideReasonOther", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setOverrideReasonOther", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setOverrideReasonOther(java.lang.String)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setOverrideReasonOther(String overrideReasonOther) {\r\n    this.overrideReasonOther = overrideReasonOther;\r\n}"},
 {"id":2021, "methodname":"setReasons(java.util.List)", "methodnamerefined":"setReasons", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setReasons", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setReasons(java.util.List)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setReasons(List<OverrideReasonBean> reasons) {\r\n    this.reasons = reasons;\r\n}"},
 {"id":2022, "methodname":"setStartDateStr(java.lang.String)", "methodnamerefined":"setStartDateStr", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setStartDateStr", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setStartDateStr(java.lang.String)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setStartDateStr(String startDate) {\r\n    this.startDateStr = startDate;\r\n}"},
 {"id":2023, "methodname":"setVisitID(long)", "methodnamerefined":"setVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setVisitID(long)", "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "shortclassname":"PrescriptionBean", "method":"public void setVisitID(long visitID) {\r\n    this.visitID = visitID;\r\n}"},
 {"id":2024, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.-init-()", "classid":272, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "shortclassname":"PrescriptionReportBean", "method":"public PrescriptionReportBean() {\r\n}"},
 {"id":2025, "methodname":"getOfficeVisit()", "methodnamerefined":"getOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.getOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.getOfficeVisit()", "classid":272, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "shortclassname":"PrescriptionReportBean", "method":"public OfficeVisitBean getOfficeVisit() {\r\n    return officeVisit;\r\n}"},
 {"id":2026, "methodname":"getPrescription()", "methodnamerefined":"getPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.getPrescription", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.getPrescription()", "classid":272, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "shortclassname":"PrescriptionReportBean", "method":"public PrescriptionBean getPrescription() {\r\n    return prescription;\r\n}"},
 {"id":2027, "methodname":"setOfficeVisit(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "methodnamerefined":"setOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setOfficeVisit(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "classid":272, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "shortclassname":"PrescriptionReportBean", "method":"public void setOfficeVisit(OfficeVisitBean officeVisit) {\r\n    this.officeVisit = officeVisit;\r\n}"},
 {"id":2028, "methodname":"setPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"setPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setPrescription", "fullmethod":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":272, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "shortclassname":"PrescriptionReportBean", "method":"public void setPrescription(PrescriptionBean prescription) {\r\n    this.prescription = prescription;\r\n}"},
 {"id":2029, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-()", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public ProcedureBean() {\r\n}"},
 {"id":2030, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public ProcedureBean(String code) {\r\n    CPTCode = code;\r\n}"},
 {"id":2031, "methodname":"-init-(java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public ProcedureBean(String code, String description) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n}"},
 {"id":2032, "methodname":"-init-(java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String,java.lang.String)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public ProcedureBean(String code, String description, String attribute) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n    this.attribute = attribute;\r\n}"},
 {"id":2033, "methodname":"-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.-init-(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public ProcedureBean(String code, String description, String attribute, String hcpid) {\r\n    CPTCode = code;\r\n    this.description = description;\r\n    this.attribute = attribute;\r\n    this.hcpid = hcpid;\r\n}"},
 {"id":2034, "methodname":"getAttribute()", "methodnamerefined":"getAttribute", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.getAttribute", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.getAttribute()", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"/**\r\n * Gets the CPT attribute, used to determine if this is an immunization\r\n *\r\n * @return String\r\n */\r\npublic String getAttribute() {\r\n    return attribute;\r\n}"},
 {"id":2035, "methodname":"getCPTCode()", "methodnamerefined":"getCPTCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.getCPTCode", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.getCPTCode()", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"/**\r\n * Gets the CPT Code for this procedure\r\n *\r\n * @return The CPT Code for this procedure\r\n */\r\npublic String getCPTCode() {\r\n    return CPTCode;\r\n}"},
 {"id":2036, "methodname":"getDate()", "methodnamerefined":"getDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.getDate", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.getDate()", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public Date getDate() {\r\n    return date;\r\n}"},
 {"id":2037, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.getDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.getDescription()", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"/**\r\n * Gets the CPT Description for this procedure\r\n *\r\n * @return The CPT Description for this procedure\r\n */\r\npublic String getDescription() {\r\n    return description;\r\n}"},
 {"id":2038, "methodname":"getHcpid()", "methodnamerefined":"getHcpid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.getHcpid", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.getHcpid()", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"/**\r\n * Gets the HCP ID of the HCP administering the immunization\r\n *\r\n * @return String\r\n */\r\npublic String getHcpid() {\r\n    return hcpid;\r\n}"},
 {"id":2039, "methodname":"getID()", "methodnamerefined":"getID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.getID", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.getID()", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public long getID() {\r\n    return ovProcedureID;\r\n}"},
 {"id":2040, "methodname":"getOvProcedureID()", "methodnamerefined":"getOvProcedureID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.getOvProcedureID", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.getOvProcedureID()", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public long getOvProcedureID() {\r\n    return ovProcedureID;\r\n}"},
 {"id":2041, "methodname":"getVisitID()", "methodnamerefined":"getVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.getVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.getVisitID()", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public long getVisitID() {\r\n    return visitID;\r\n}"},
 {"id":2042, "methodname":"setAttribute(java.lang.String)", "methodnamerefined":"setAttribute", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.setAttribute", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.setAttribute(java.lang.String)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"/**\r\n * Sets the CPT attribute, used to determine if this is an immunization\r\n *\r\n * @param String\r\n * \t\t\r\n */\r\npublic void setAttribute(String attrib) {\r\n    attribute = attrib;\r\n}"},
 {"id":2043, "methodname":"setCPTCode(java.lang.String)", "methodnamerefined":"setCPTCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.setCPTCode", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.setCPTCode(java.lang.String)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public void setCPTCode(String code) {\r\n    CPTCode = code;\r\n}"},
 {"id":2044, "methodname":"setDate(java.sql.Date)", "methodnamerefined":"setDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.setDate", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.setDate(java.sql.Date)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public void setDate(Date d) {\r\n    date = d;\r\n}"},
 {"id":2045, "methodname":"setDescription(java.lang.String)", "methodnamerefined":"setDescription", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.setDescription", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.setDescription(java.lang.String)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public void setDescription(String description) {\r\n    this.description = description;\r\n}"},
 {"id":2046, "methodname":"setHcpid(java.lang.String)", "methodnamerefined":"setHcpid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.setHcpid", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.setHcpid(java.lang.String)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public void setHcpid(String hcpid) {\r\n    this.hcpid = hcpid;\r\n}"},
 {"id":2047, "methodname":"setID(long)", "methodnamerefined":"setID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.setID", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.setID(long)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public void setID(long id) {\r\n    this.ovProcedureID = id;\r\n}"},
 {"id":2048, "methodname":"setOvProcedureID(long)", "methodnamerefined":"setOvProcedureID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.setOvProcedureID", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.setOvProcedureID(long)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public void setOvProcedureID(long ovProcedureID) {\r\n    this.ovProcedureID = ovProcedureID;\r\n}"},
 {"id":2049, "methodname":"setVisitID(long)", "methodnamerefined":"setVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ProcedureBean.setVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.ProcedureBean.setVisitID(long)", "classid":273, "classname":"edu.ncsu.csc.itrust.beans.ProcedureBean", "shortclassname":"ProcedureBean", "method":"public void setVisitID(long visitID) {\r\n    this.visitID = visitID;\r\n}"},
 {"id":2050, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.-init-()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public ReferralBean() {\r\n}"},
 {"id":2051, "methodname":"equals(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.equals(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"private boolean equals(ReferralBean other) {\r\n    return ((((((((id) == (other.id)) && ((senderID) == (other.senderID))) && ((receiverID) == (other.receiverID))) && ((ovid) == (other.ovid))) && ((viewedByPatient) == (other.viewedByPatient))) && ((viewedByHCP) == (other.viewedByHCP))) && (timeStamp.equals(other.timeStamp))) && (referralDetails.equals(other.referralDetails));\r\n}"},
 {"id":2052, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.equals(java.lang.Object)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"@Override\r\npublic boolean equals(Object other) {\r\n    return ((other != null) && (this.getClass().equals(other.getClass()))) && (this.equals(((ReferralBean) (other))));\r\n}"},
 {"id":2053, "methodname":"getId()", "methodnamerefined":"getId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.getId", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.getId()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public long getId() {\r\n    return id;\r\n}"},
 {"id":2054, "methodname":"getOvid()", "methodnamerefined":"getOvid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.getOvid", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.getOvid()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public long getOvid() {\r\n    return ovid;\r\n}"},
 {"id":2055, "methodname":"getPatientID()", "methodnamerefined":"getPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.getPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.getPatientID()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public long getPatientID() {\r\n    return patientID;\r\n}"},
 {"id":2056, "methodname":"getPriority()", "methodnamerefined":"getPriority", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.getPriority", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.getPriority()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public int getPriority() {\r\n    return priority;\r\n}"},
 {"id":2057, "methodname":"getReceiverID()", "methodnamerefined":"getReceiverID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.getReceiverID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.getReceiverID()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public long getReceiverID() {\r\n    return receiverID;\r\n}"},
 {"id":2058, "methodname":"getReferralDetails()", "methodnamerefined":"getReferralDetails", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.getReferralDetails", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.getReferralDetails()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public String getReferralDetails() {\r\n    return referralDetails;\r\n}"},
 {"id":2059, "methodname":"getSenderID()", "methodnamerefined":"getSenderID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.getSenderID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.getSenderID()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public long getSenderID() {\r\n    return senderID;\r\n}"},
 {"id":2060, "methodname":"getTimeStamp()", "methodnamerefined":"getTimeStamp", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.getTimeStamp", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.getTimeStamp()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public String getTimeStamp() {\r\n    return timeStamp;\r\n}"},
 {"id":2061, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.hashCode()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":2062, "methodname":"isViewedByHCP()", "methodnamerefined":"isViewedByHCP", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.isViewedByHCP", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.isViewedByHCP()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public boolean isViewedByHCP() {\r\n    return viewedByHCP;\r\n}"},
 {"id":2063, "methodname":"isViewedByPatient()", "methodnamerefined":"isViewedByPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.isViewedByPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.isViewedByPatient()", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public boolean isViewedByPatient() {\r\n    return viewedByPatient;\r\n}"},
 {"id":2064, "methodname":"setId(long)", "methodnamerefined":"setId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setId", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setId(long)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setId(long id) {\r\n    this.id = id;\r\n}"},
 {"id":2065, "methodname":"setOvid(long)", "methodnamerefined":"setOvid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setOvid", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setOvid(long)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setOvid(long ovid) {\r\n    this.ovid = ovid;\r\n}"},
 {"id":2066, "methodname":"setPatientID(long)", "methodnamerefined":"setPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setPatientID(long)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}"},
 {"id":2067, "methodname":"setPriority(int)", "methodnamerefined":"setPriority", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setPriority", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setPriority(int)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setPriority(int priority) {\r\n    this.priority = priority;\r\n}"},
 {"id":2068, "methodname":"setReceiverID(long)", "methodnamerefined":"setReceiverID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setReceiverID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setReceiverID(long)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setReceiverID(long receiverID) {\r\n    this.receiverID = receiverID;\r\n}"},
 {"id":2069, "methodname":"setReferralDetails(java.lang.String)", "methodnamerefined":"setReferralDetails", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setReferralDetails", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setReferralDetails(java.lang.String)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setReferralDetails(String referralDetails) {\r\n    this.referralDetails = referralDetails;\r\n}"},
 {"id":2070, "methodname":"setSenderID(long)", "methodnamerefined":"setSenderID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setSenderID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setSenderID(long)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setSenderID(long senderID) {\r\n    this.senderID = senderID;\r\n}"},
 {"id":2071, "methodname":"setTimeStamp(java.lang.String)", "methodnamerefined":"setTimeStamp", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setTimeStamp", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setTimeStamp(java.lang.String)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setTimeStamp(String timeStamp) {\r\n    this.timeStamp = timeStamp;\r\n}"},
 {"id":2072, "methodname":"setViewedByHCP(boolean)", "methodnamerefined":"setViewedByHCP", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setViewedByHCP", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setViewedByHCP(boolean)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setViewedByHCP(boolean viewedByHCP) {\r\n    this.viewedByHCP = viewedByHCP;\r\n}"},
 {"id":2073, "methodname":"setViewedByPatient(boolean)", "methodnamerefined":"setViewedByPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReferralBean.setViewedByPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.ReferralBean.setViewedByPatient(boolean)", "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "shortclassname":"ReferralBean", "method":"public void setViewedByPatient(boolean viewedByPatient) {\r\n    this.viewedByPatient = viewedByPatient;\r\n}"},
 {"id":2074, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.-init-()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"/**\r\n * Constructor with no parameters\r\n */\r\npublic RemoteMonitoringDataBean() {\r\n}"},
 {"id":2075, "methodname":"-init-(long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.-init-(long)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"/**\r\n * Constructor with loggedInMID parameter\r\n */\r\npublic RemoteMonitoringDataBean(long patientMID) {\r\n    this.patientMID = patientMID;\r\n}"},
 {"id":2076, "methodname":"getDiastolicBloodPressure()", "methodnamerefined":"getDiastolicBloodPressure", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getDiastolicBloodPressure", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getDiastolicBloodPressure()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public int getDiastolicBloodPressure() {\r\n    return diastolicBloodPressure;\r\n}"},
 {"id":2077, "methodname":"getGlucoseLevel()", "methodnamerefined":"getGlucoseLevel", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getGlucoseLevel", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getGlucoseLevel()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public int getGlucoseLevel() {\r\n    return glucoseLevel;\r\n}"},
 {"id":2078, "methodname":"getHeight()", "methodnamerefined":"getHeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getHeight", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getHeight()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public float getHeight() {\r\n    return height;\r\n}"},
 {"id":2079, "methodname":"getPatientMID()", "methodnamerefined":"getPatientMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getPatientMID", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getPatientMID()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public long getPatientMID() {\r\n    return patientMID;\r\n}"},
 {"id":2080, "methodname":"getPedometerReading()", "methodnamerefined":"getPedometerReading", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getPedometerReading", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getPedometerReading()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public int getPedometerReading() {\r\n    return pedometerReading;\r\n}"},
 {"id":2081, "methodname":"getReporterMID()", "methodnamerefined":"getReporterMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getReporterMID", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getReporterMID()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public long getReporterMID() {\r\n    return reporterMID;\r\n}"},
 {"id":2082, "methodname":"getReporterRole()", "methodnamerefined":"getReporterRole", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getReporterRole", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getReporterRole()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public String getReporterRole() {\r\n    return reporterRole;\r\n}"},
 {"id":2083, "methodname":"getSystolicBloodPressure()", "methodnamerefined":"getSystolicBloodPressure", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getSystolicBloodPressure", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getSystolicBloodPressure()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public int getSystolicBloodPressure() {\r\n    return systolicBloodPressure;\r\n}"},
 {"id":2084, "methodname":"getTime()", "methodnamerefined":"getTime", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getTime", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getTime()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public Timestamp getTime() {\r\n    return time;\r\n}"},
 {"id":2085, "methodname":"getWeight()", "methodnamerefined":"getWeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getWeight", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.getWeight()", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public float getWeight() {\r\n    return weight;\r\n}"},
 {"id":2086, "methodname":"setDiastolicBloodPressure(int)", "methodnamerefined":"setDiastolicBloodPressure", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setDiastolicBloodPressure", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setDiastolicBloodPressure(int)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setDiastolicBloodPressure(int diastolicBloodPressure) {\r\n    this.diastolicBloodPressure = diastolicBloodPressure;\r\n}"},
 {"id":2087, "methodname":"setGlucoseLevel(int)", "methodnamerefined":"setGlucoseLevel", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setGlucoseLevel", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setGlucoseLevel(int)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setGlucoseLevel(int glucoseLevel) {\r\n    this.glucoseLevel = glucoseLevel;\r\n}"},
 {"id":2088, "methodname":"setHeight(float)", "methodnamerefined":"setHeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setHeight", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setHeight(float)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setHeight(float height) {\r\n    this.height = height;\r\n}"},
 {"id":2089, "methodname":"setLoggedInMID(long)", "methodnamerefined":"setLoggedInMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setLoggedInMID", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setLoggedInMID(long)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setLoggedInMID(long patientMID) {\r\n    this.patientMID = patientMID;\r\n}"},
 {"id":2090, "methodname":"setPedometerReading(int)", "methodnamerefined":"setPedometerReading", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setPedometerReading", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setPedometerReading(int)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setPedometerReading(int pedometerReading) {\r\n    this.pedometerReading = pedometerReading;\r\n}"},
 {"id":2091, "methodname":"setReporterMID(long)", "methodnamerefined":"setReporterMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setReporterMID", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setReporterMID(long)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setReporterMID(long reporterMID) {\r\n    this.reporterMID = reporterMID;\r\n}"},
 {"id":2092, "methodname":"setReporterRole(java.lang.String)", "methodnamerefined":"setReporterRole", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setReporterRole", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setReporterRole(java.lang.String)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setReporterRole(String reporterRole) {\r\n    this.reporterRole = reporterRole;\r\n}"},
 {"id":2093, "methodname":"setSystolicBloodPressure(int)", "methodnamerefined":"setSystolicBloodPressure", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setSystolicBloodPressure", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setSystolicBloodPressure(int)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setSystolicBloodPressure(int systolicBloodPressure) {\r\n    this.systolicBloodPressure = systolicBloodPressure;\r\n}"},
 {"id":2094, "methodname":"setTime(java.sql.Timestamp)", "methodnamerefined":"setTime", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setTime", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setTime(java.sql.Timestamp)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setTime(Timestamp time) {\r\n    this.time = time;\r\n}"},
 {"id":2095, "methodname":"setWeight(float)", "methodnamerefined":"setWeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setWeight", "fullmethod":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean.setWeight(float)", "classid":275, "classname":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "shortclassname":"RemoteMonitoringDataBean", "method":"public void setWeight(float weight) {\r\n    this.weight = weight;\r\n}"},
 {"id":2096, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.-init-()", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public ReportRequestBean() {\r\n}"},
 {"id":2097, "methodname":"getID()", "methodnamerefined":"getID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getID()", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public long getID() {\r\n    return ID;\r\n}"},
 {"id":2098, "methodname":"getPatientMID()", "methodnamerefined":"getPatientMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getPatientMID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getPatientMID()", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public long getPatientMID() {\r\n    return patientMID;\r\n}"},
 {"id":2099, "methodname":"getRequestedDate()", "methodnamerefined":"getRequestedDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getRequestedDate", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getRequestedDate()", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public Date getRequestedDate() {\r\n    return (requestedDate) == null ? null : ((Date) (requestedDate.clone()));\r\n}"},
 {"id":2100, "methodname":"getRequestedDateString()", "methodnamerefined":"getRequestedDateString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getRequestedDateString", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getRequestedDateString()", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public String getRequestedDateString() {\r\n    if ((requestedDate) == null)\r\n        return \"\";\r\n    // $NON-NLS-1$\r\n\r\n    return new SimpleDateFormat(ReportRequestBean.dateFormat).format(requestedDate);\r\n}"},
 {"id":2101, "methodname":"getRequesterMID()", "methodnamerefined":"getRequesterMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getRequesterMID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getRequesterMID()", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public long getRequesterMID() {\r\n    return requesterMID;\r\n}"},
 {"id":2102, "methodname":"getStatus()", "methodnamerefined":"getStatus", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getStatus", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getStatus()", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public String getStatus() {\r\n    return status;\r\n}"},
 {"id":2103, "methodname":"getViewedDate()", "methodnamerefined":"getViewedDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getViewedDate", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getViewedDate()", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public Date getViewedDate() {\r\n    return (viewedDate) == null ? null : ((Date) (viewedDate.clone()));\r\n}"},
 {"id":2104, "methodname":"getViewedDateString()", "methodnamerefined":"getViewedDateString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getViewedDateString", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.getViewedDateString()", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public String getViewedDateString() {\r\n    if ((viewedDate) == null)\r\n        return \"\";\r\n    // $NON-NLS-1$\r\n\r\n    // DateFormat dateFormatter = DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,Localization.instance().getCurrentLocale());\r\n    // return dateFormatter.format(viewedDate);\r\n    return new SimpleDateFormat(ReportRequestBean.dateFormat).format(viewedDate);\r\n}"},
 {"id":2105, "methodname":"setID(long)", "methodnamerefined":"setID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setID(long)", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public void setID(long iD) {\r\n    ID = iD;\r\n}"},
 {"id":2106, "methodname":"setPatientMID(long)", "methodnamerefined":"setPatientMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setPatientMID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setPatientMID(long)", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public void setPatientMID(long patientMID) {\r\n    this.patientMID = patientMID;\r\n}"},
 {"id":2107, "methodname":"setRequestedDate(java.util.Date)", "methodnamerefined":"setRequestedDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setRequestedDate", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setRequestedDate(java.util.Date)", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"// public void setApproverMID(long approverMID) {\r\n// this.approverMID = approverMID;\r\n// }\r\n// \r\n// public long getApproverMID() {\r\n// return approverMID;\r\n// }\r\npublic void setRequestedDate(Date requestedDate) {\r\n    this.requestedDate = (requestedDate == null) ? null : ((Date) (requestedDate.clone()));\r\n}"},
 {"id":2108, "methodname":"setRequestedDateString(java.lang.String)", "methodnamerefined":"setRequestedDateString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setRequestedDateString", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setRequestedDateString(java.lang.String)", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public void setRequestedDateString(String s) {\r\n    try {\r\n        setRequestedDate(new SimpleDateFormat(ReportRequestBean.dateFormat).parse(s));\r\n    } catch (ParseException ex) {\r\n        System.out.println(ex.getMessage());\r\n    }\r\n}"},
 {"id":2109, "methodname":"setRequesterMID(long)", "methodnamerefined":"setRequesterMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setRequesterMID", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setRequesterMID(long)", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public void setRequesterMID(long requesterMID) {\r\n    this.requesterMID = requesterMID;\r\n}"},
 {"id":2110, "methodname":"setStatus(java.lang.String)", "methodnamerefined":"setStatus", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setStatus", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setStatus(java.lang.String)", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public void setStatus(String status) {\r\n    this.status = status;\r\n}"},
 {"id":2111, "methodname":"setViewedDate(java.util.Date)", "methodnamerefined":"setViewedDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setViewedDate", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setViewedDate(java.util.Date)", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"// public void setApprovedDate(Date approvedDate) {\r\n// this.approvedDate = (approvedDate == null ? null : (Date) approvedDate.clone());\r\n// }\r\n// \r\n// public void setApprovedDateString(String s) {\r\n// try {\r\n// setApprovedDate(new SimpleDateFormat(dateFormat).parse(s));\r\n// } catch (ParseException ex) {\r\n// System.out.println(ex.getMessage());\r\n// }\r\n// }\r\n// \r\n// public Date getApprovedDate() {\r\n// return (approvedDate == null ? null : (Date) approvedDate.clone());\r\n// }\r\n// \r\n// public String getApprovedDateString() {\r\n// if (approvedDate == null)\r\n// return \"\"; //$NON-NLS-1$\r\n// return new SimpleDateFormat(dateFormat).format(approvedDate);\r\n// }\r\npublic void setViewedDate(Date viewedDate) {\r\n    this.viewedDate = (viewedDate == null) ? null : ((Date) (viewedDate.clone()));\r\n}"},
 {"id":2112, "methodname":"setViewedDateString(java.lang.String)", "methodnamerefined":"setViewedDateString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setViewedDateString", "fullmethod":"edu.ncsu.csc.itrust.beans.ReportRequestBean.setViewedDateString(java.lang.String)", "classid":276, "classname":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "shortclassname":"ReportRequestBean", "method":"public void setViewedDateString(String s) {\r\n    try {\r\n        setViewedDate(new SimpleDateFormat(ReportRequestBean.dateFormat).parse(s));\r\n    } catch (ParseException ex) {\r\n        System.out.println(ex.getMessage());\r\n    }\r\n}"},
 {"id":2113, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SecurityQA.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.SecurityQA.-init-()", "classid":277, "classname":"edu.ncsu.csc.itrust.beans.SecurityQA", "shortclassname":"SecurityQA", "method":"SecurityQA() {\r\n}"},
 {"id":2114, "methodname":"getAnswer()", "methodnamerefined":"getAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SecurityQA.getAnswer", "fullmethod":"edu.ncsu.csc.itrust.beans.SecurityQA.getAnswer()", "classid":277, "classname":"edu.ncsu.csc.itrust.beans.SecurityQA", "shortclassname":"SecurityQA", "method":"public String getAnswer() {\r\n    return answer;\r\n}"},
 {"id":2115, "methodname":"getConfirmAnswer()", "methodnamerefined":"getConfirmAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SecurityQA.getConfirmAnswer", "fullmethod":"edu.ncsu.csc.itrust.beans.SecurityQA.getConfirmAnswer()", "classid":277, "classname":"edu.ncsu.csc.itrust.beans.SecurityQA", "shortclassname":"SecurityQA", "method":"public String getConfirmAnswer() {\r\n    return confirmAnswer;\r\n}"},
 {"id":2116, "methodname":"getQuestion()", "methodnamerefined":"getQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SecurityQA.getQuestion", "fullmethod":"edu.ncsu.csc.itrust.beans.SecurityQA.getQuestion()", "classid":277, "classname":"edu.ncsu.csc.itrust.beans.SecurityQA", "shortclassname":"SecurityQA", "method":"public String getQuestion() {\r\n    return question;\r\n}"},
 {"id":2117, "methodname":"setAnswer(java.lang.String)", "methodnamerefined":"setAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SecurityQA.setAnswer", "fullmethod":"edu.ncsu.csc.itrust.beans.SecurityQA.setAnswer(java.lang.String)", "classid":277, "classname":"edu.ncsu.csc.itrust.beans.SecurityQA", "shortclassname":"SecurityQA", "method":"public void setAnswer(String answer) {\r\n    this.answer = answer;\r\n}"},
 {"id":2118, "methodname":"setConfirmAnswer(java.lang.String)", "methodnamerefined":"setConfirmAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SecurityQA.setConfirmAnswer", "fullmethod":"edu.ncsu.csc.itrust.beans.SecurityQA.setConfirmAnswer(java.lang.String)", "classid":277, "classname":"edu.ncsu.csc.itrust.beans.SecurityQA", "shortclassname":"SecurityQA", "method":"public void setConfirmAnswer(String confirmAnswer) {\r\n    this.confirmAnswer = confirmAnswer;\r\n}"},
 {"id":2119, "methodname":"setQuestion(java.lang.String)", "methodnamerefined":"setQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SecurityQA.setQuestion", "fullmethod":"edu.ncsu.csc.itrust.beans.SecurityQA.setQuestion(java.lang.String)", "classid":277, "classname":"edu.ncsu.csc.itrust.beans.SecurityQA", "shortclassname":"SecurityQA", "method":"public void setQuestion(String question) {\r\n    this.question = question;\r\n}"},
 {"id":2120, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.-init-()", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"SurveyBean() {\r\n}"},
 {"id":2121, "methodname":"getExamRoomMinutes()", "methodnamerefined":"getExamRoomMinutes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.getExamRoomMinutes", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.getExamRoomMinutes()", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public int getExamRoomMinutes() {\r\n    return examRoomMinutes;\r\n}"},
 {"id":2122, "methodname":"getSurveyDate()", "methodnamerefined":"getSurveyDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.getSurveyDate", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.getSurveyDate()", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public Date getSurveyDate() {\r\n    return (surveyDate) == null ? null : ((Date) (surveyDate.clone()));\r\n}"},
 {"id":2123, "methodname":"getSurveyDateString()", "methodnamerefined":"getSurveyDateString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.getSurveyDateString", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.getSurveyDateString()", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public String getSurveyDateString() {\r\n    if ((surveyDate) == null)\r\n        return \"\";\r\n\r\n    return new SimpleDateFormat(SurveyBean.dateFormat).format(getSurveyDate());\r\n}"},
 {"id":2124, "methodname":"getTreatmentSatisfaction()", "methodnamerefined":"getTreatmentSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.getTreatmentSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.getTreatmentSatisfaction()", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public int getTreatmentSatisfaction() {\r\n    return treatmentSatisfaction;\r\n}"},
 {"id":2125, "methodname":"getVisitID()", "methodnamerefined":"getVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.getVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.getVisitID()", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public long getVisitID() {\r\n    return visitID;\r\n}"},
 {"id":2126, "methodname":"getVisitSatisfaction()", "methodnamerefined":"getVisitSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.getVisitSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.getVisitSatisfaction()", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public int getVisitSatisfaction() {\r\n    return visitSatisfaction;\r\n}"},
 {"id":2127, "methodname":"getWaitingRoomMinutes()", "methodnamerefined":"getWaitingRoomMinutes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.getWaitingRoomMinutes", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.getWaitingRoomMinutes()", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public int getWaitingRoomMinutes() {\r\n    return waitingRoomMinutes;\r\n}"},
 {"id":2128, "methodname":"setExamRoomMinutes(int)", "methodnamerefined":"setExamRoomMinutes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.setExamRoomMinutes", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.setExamRoomMinutes(int)", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public void setExamRoomMinutes(int examRoomMinutes) {\r\n    this.examRoomMinutes = examRoomMinutes;\r\n}"},
 {"id":2129, "methodname":"setSurveyDate(java.util.Date)", "methodnamerefined":"setSurveyDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.setSurveyDate", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.setSurveyDate(java.util.Date)", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public void setSurveyDate(Date surveyDate) {\r\n    this.surveyDate = (surveyDate == null) ? null : ((Date) (surveyDate.clone()));\r\n}"},
 {"id":2130, "methodname":"setSurveyDateString(java.lang.String)", "methodnamerefined":"setSurveyDateString", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.setSurveyDateString", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.setSurveyDateString(java.lang.String)", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public void setSurveyDateString(String s) {\r\n    try {\r\n        setSurveyDate(new SimpleDateFormat(SurveyBean.dateFormat).parse(s));\r\n    } catch (ParseException ex) {\r\n        System.out.println(ex.getMessage());\r\n    }\r\n}"},
 {"id":2131, "methodname":"setTreatmentSatisfaction(int)", "methodnamerefined":"setTreatmentSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.setTreatmentSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.setTreatmentSatisfaction(int)", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public void setTreatmentSatisfaction(int treatmentSatisfaction) {\r\n    this.treatmentSatisfaction = treatmentSatisfaction;\r\n}"},
 {"id":2132, "methodname":"setVisitID(long)", "methodnamerefined":"setVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.setVisitID", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.setVisitID(long)", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public void setVisitID(long iD) {\r\n    visitID = iD;\r\n}"},
 {"id":2133, "methodname":"setVisitSatisfaction(int)", "methodnamerefined":"setVisitSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.setVisitSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.setVisitSatisfaction(int)", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public void setVisitSatisfaction(int visitSatisfaction) {\r\n    this.visitSatisfaction = visitSatisfaction;\r\n}"},
 {"id":2134, "methodname":"setWaitingRoomMinutes(int)", "methodnamerefined":"setWaitingRoomMinutes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyBean.setWaitingRoomMinutes", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyBean.setWaitingRoomMinutes(int)", "classid":278, "classname":"edu.ncsu.csc.itrust.beans.SurveyBean", "shortclassname":"SurveyBean", "method":"public void setWaitingRoomMinutes(int waitingRoomMinutes) {\r\n    this.waitingRoomMinutes = waitingRoomMinutes;\r\n}"},
 {"id":2135, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.-init-()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"SurveyResultBean() {\r\n}"},
 {"id":2136, "methodname":"getAvgExamRoomMinutes()", "methodnamerefined":"getAvgExamRoomMinutes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getAvgExamRoomMinutes", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getAvgExamRoomMinutes()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public float getAvgExamRoomMinutes() {\r\n    return avgExamRmMinutues;\r\n}"},
 {"id":2137, "methodname":"getAvgTreatmentSatisfaction()", "methodnamerefined":"getAvgTreatmentSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getAvgTreatmentSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getAvgTreatmentSatisfaction()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public float getAvgTreatmentSatisfaction() {\r\n    return avgTreatmentSatisfaction;\r\n}"},
 {"id":2138, "methodname":"getAvgVisitSatisfaction()", "methodnamerefined":"getAvgVisitSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getAvgVisitSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getAvgVisitSatisfaction()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public float getAvgVisitSatisfaction() {\r\n    return avgVisitSatisfaction;\r\n}"},
 {"id":2139, "methodname":"getAvgWaitingRoomMinutes()", "methodnamerefined":"getAvgWaitingRoomMinutes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getAvgWaitingRoomMinutes", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getAvgWaitingRoomMinutes()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public float getAvgWaitingRoomMinutes() {\r\n    return avgWaitingRmMinutes;\r\n}"},
 {"id":2140, "methodname":"getHCPFirstName()", "methodnamerefined":"getHCPFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPFirstName()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public String getHCPFirstName() {\r\n    return hcpFirstName;\r\n}"},
 {"id":2141, "methodname":"getHCPLastName()", "methodnamerefined":"getHCPLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPLastName()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public String getHCPLastName() {\r\n    return hcpLastName;\r\n}"},
 {"id":2142, "methodname":"getHCPMID()", "methodnamerefined":"getHCPMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPMID", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPMID()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public long getHCPMID() {\r\n    return hcpMID;\r\n}"},
 {"id":2143, "methodname":"getHCPaddress1()", "methodnamerefined":"getHCPaddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPaddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPaddress1()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public String getHCPaddress1() {\r\n    return hcpAddress1;\r\n}"},
 {"id":2144, "methodname":"getHCPaddress2()", "methodnamerefined":"getHCPaddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPaddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPaddress2()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public String getHCPaddress2() {\r\n    return hcpAddress2;\r\n}"},
 {"id":2145, "methodname":"getHCPcity()", "methodnamerefined":"getHCPcity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPcity", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPcity()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public String getHCPcity() {\r\n    return hcpCity;\r\n}"},
 {"id":2146, "methodname":"getHCPhospital()", "methodnamerefined":"getHCPhospital", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPhospital", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPhospital()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public String getHCPhospital() {\r\n    return hcpHospitalID;\r\n}"},
 {"id":2147, "methodname":"getHCPspecialty()", "methodnamerefined":"getHCPspecialty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPspecialty", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPspecialty()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public String getHCPspecialty() {\r\n    return hcpSpecialty;\r\n}"},
 {"id":2148, "methodname":"getHCPstate()", "methodnamerefined":"getHCPstate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPstate", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPstate()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public String getHCPstate() {\r\n    return hcpState;\r\n}"},
 {"id":2149, "methodname":"getHCPzip()", "methodnamerefined":"getHCPzip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPzip", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getHCPzip()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public String getHCPzip() {\r\n    return hcpZip;\r\n}"},
 {"id":2150, "methodname":"getPercentSatisfactionResults()", "methodnamerefined":"getPercentSatisfactionResults", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getPercentSatisfactionResults", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.getPercentSatisfactionResults()", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public float getPercentSatisfactionResults() {\r\n    return percentSatResultsAvailable;\r\n}"},
 {"id":2151, "methodname":"setAvgExamRoomMinutes(float)", "methodnamerefined":"setAvgExamRoomMinutes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgExamRoomMinutes", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgExamRoomMinutes(float)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setAvgExamRoomMinutes(float examRoomMinutes) {\r\n    this.avgExamRmMinutues = examRoomMinutes;\r\n}"},
 {"id":2152, "methodname":"setAvgTreatmentSatisfaction(float)", "methodnamerefined":"setAvgTreatmentSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgTreatmentSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgTreatmentSatisfaction(float)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setAvgTreatmentSatisfaction(float treatmentSatisfaction) {\r\n    this.avgTreatmentSatisfaction = treatmentSatisfaction;\r\n}"},
 {"id":2153, "methodname":"setAvgVisitSatisfaction(float)", "methodnamerefined":"setAvgVisitSatisfaction", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgVisitSatisfaction", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgVisitSatisfaction(float)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setAvgVisitSatisfaction(float visitSatisfaction) {\r\n    this.avgVisitSatisfaction = visitSatisfaction;\r\n}"},
 {"id":2154, "methodname":"setAvgWaitingRoomMinutes(float)", "methodnamerefined":"setAvgWaitingRoomMinutes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgWaitingRoomMinutes", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setAvgWaitingRoomMinutes(float)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setAvgWaitingRoomMinutes(float waitingRoomMinutes) {\r\n    this.avgWaitingRmMinutes = waitingRoomMinutes;\r\n}"},
 {"id":2155, "methodname":"setHCPFirstName(java.lang.String)", "methodnamerefined":"setHCPFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPFirstName(java.lang.String)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPFirstName(String firstName) {\r\n    this.hcpFirstName = firstName;\r\n}"},
 {"id":2156, "methodname":"setHCPLastName(java.lang.String)", "methodnamerefined":"setHCPLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPLastName(java.lang.String)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPLastName(String lastName) {\r\n    this.hcpLastName = lastName;\r\n}"},
 {"id":2157, "methodname":"setHCPMID(long)", "methodnamerefined":"setHCPMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPMID", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPMID(long)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPMID(long mid) {\r\n    hcpMID = mid;\r\n}"},
 {"id":2158, "methodname":"setHCPaddress1(java.lang.String)", "methodnamerefined":"setHCPaddress1", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPaddress1", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPaddress1(java.lang.String)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPaddress1(String address1) {\r\n    this.hcpAddress1 = address1;\r\n}"},
 {"id":2159, "methodname":"setHCPaddress2(java.lang.String)", "methodnamerefined":"setHCPaddress2", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPaddress2", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPaddress2(java.lang.String)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPaddress2(String address2) {\r\n    this.hcpAddress2 = address2;\r\n}"},
 {"id":2160, "methodname":"setHCPcity(java.lang.String)", "methodnamerefined":"setHCPcity", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPcity", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPcity(java.lang.String)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPcity(String city) {\r\n    this.hcpCity = city;\r\n}"},
 {"id":2161, "methodname":"setHCPhospital(java.lang.String)", "methodnamerefined":"setHCPhospital", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPhospital", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPhospital(java.lang.String)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPhospital(String hospital) {\r\n    this.hcpHospitalID = hospital;\r\n}"},
 {"id":2162, "methodname":"setHCPspecialty(java.lang.String)", "methodnamerefined":"setHCPspecialty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPspecialty", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPspecialty(java.lang.String)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPspecialty(String specialty) {\r\n    this.hcpSpecialty = specialty;\r\n}"},
 {"id":2163, "methodname":"setHCPstate(java.lang.String)", "methodnamerefined":"setHCPstate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPstate", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPstate(java.lang.String)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPstate(String state) {\r\n    this.hcpState = state;\r\n}"},
 {"id":2164, "methodname":"setHCPzip(java.lang.String)", "methodnamerefined":"setHCPzip", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPzip", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setHCPzip(java.lang.String)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setHCPzip(String zip) {\r\n    this.hcpZip = zip;\r\n}"},
 {"id":2165, "methodname":"setPercentSatisfactionResults(float)", "methodnamerefined":"setPercentSatisfactionResults", "methodabbreviation":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setPercentSatisfactionResults", "fullmethod":"edu.ncsu.csc.itrust.beans.SurveyResultBean.setPercentSatisfactionResults(float)", "classid":279, "classname":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "shortclassname":"SurveyResultBean", "method":"public void setPercentSatisfactionResults(float percent) {\r\n    this.percentSatResultsAvailable = percent;\r\n}"},
 {"id":2166, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.-init-()", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"TelemedicineBean() {\r\n}"},
 {"id":2167, "methodname":"isDiastolicBloodPressureAllowed()", "methodnamerefined":"isDiastolicBloodPressureAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isDiastolicBloodPressureAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isDiastolicBloodPressureAllowed()", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public boolean isDiastolicBloodPressureAllowed() {\r\n    return diastolicBloodPressureAllowed;\r\n}"},
 {"id":2168, "methodname":"isGlucoseLevelAllowed()", "methodnamerefined":"isGlucoseLevelAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isGlucoseLevelAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isGlucoseLevelAllowed()", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public boolean isGlucoseLevelAllowed() {\r\n    return glucoseLevelAllowed;\r\n}"},
 {"id":2169, "methodname":"isHeightAllowed()", "methodnamerefined":"isHeightAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isHeightAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isHeightAllowed()", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public boolean isHeightAllowed() {\r\n    return heightAllowed;\r\n}"},
 {"id":2170, "methodname":"isPedometerReadingAllowed()", "methodnamerefined":"isPedometerReadingAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isPedometerReadingAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isPedometerReadingAllowed()", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public boolean isPedometerReadingAllowed() {\r\n    return pedometerReadingAllowed;\r\n}"},
 {"id":2171, "methodname":"isSystolicBloodPressureAllowed()", "methodnamerefined":"isSystolicBloodPressureAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isSystolicBloodPressureAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isSystolicBloodPressureAllowed()", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public boolean isSystolicBloodPressureAllowed() {\r\n    return systolicBloodPressureAllowed;\r\n}"},
 {"id":2172, "methodname":"isWeightAllowed()", "methodnamerefined":"isWeightAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isWeightAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.isWeightAllowed()", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public boolean isWeightAllowed() {\r\n    return weightAllowed;\r\n}"},
 {"id":2173, "methodname":"setDiastolicBloodPressureAllowed(boolean)", "methodnamerefined":"setDiastolicBloodPressureAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setDiastolicBloodPressureAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setDiastolicBloodPressureAllowed(boolean)", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public void setDiastolicBloodPressureAllowed(boolean diastolicBloodPressureAllowed) {\r\n    this.diastolicBloodPressureAllowed = diastolicBloodPressureAllowed;\r\n}"},
 {"id":2174, "methodname":"setGlucoseLevelAllowed(boolean)", "methodnamerefined":"setGlucoseLevelAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setGlucoseLevelAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setGlucoseLevelAllowed(boolean)", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public void setGlucoseLevelAllowed(boolean glucoseLevelAllowed) {\r\n    this.glucoseLevelAllowed = glucoseLevelAllowed;\r\n}"},
 {"id":2175, "methodname":"setHeightAllowed(boolean)", "methodnamerefined":"setHeightAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setHeightAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setHeightAllowed(boolean)", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public void setHeightAllowed(boolean heightAllowed) {\r\n    this.heightAllowed = heightAllowed;\r\n}"},
 {"id":2176, "methodname":"setPedometerReadingAllowed(boolean)", "methodnamerefined":"setPedometerReadingAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setPedometerReadingAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setPedometerReadingAllowed(boolean)", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public void setPedometerReadingAllowed(boolean pedometerReadingAllowed) {\r\n    this.pedometerReadingAllowed = pedometerReadingAllowed;\r\n}"},
 {"id":2177, "methodname":"setSystolicBloodPressureAllowed(boolean)", "methodnamerefined":"setSystolicBloodPressureAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setSystolicBloodPressureAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setSystolicBloodPressureAllowed(boolean)", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public void setSystolicBloodPressureAllowed(boolean systolicBloodPressureAllowed) {\r\n    this.systolicBloodPressureAllowed = systolicBloodPressureAllowed;\r\n}"},
 {"id":2178, "methodname":"setWeightAllowed(boolean)", "methodnamerefined":"setWeightAllowed", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setWeightAllowed", "fullmethod":"edu.ncsu.csc.itrust.beans.TelemedicineBean.setWeightAllowed(boolean)", "classid":280, "classname":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "shortclassname":"TelemedicineBean", "method":"public void setWeightAllowed(boolean weightAllowed) {\r\n    this.weightAllowed = weightAllowed;\r\n}"},
 {"id":2179, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.-init-()", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public TransactionBean() {\r\n}"},
 {"id":2180, "methodname":"getAddedInfo()", "methodnamerefined":"getAddedInfo", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.getAddedInfo", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.getAddedInfo()", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public String getAddedInfo() {\r\n    return addedInfo;\r\n}"},
 {"id":2181, "methodname":"getLoggedInMID()", "methodnamerefined":"getLoggedInMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.getLoggedInMID", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.getLoggedInMID()", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public long getLoggedInMID() {\r\n    return loggedInMID;\r\n}"},
 {"id":2182, "methodname":"getRole()", "methodnamerefined":"getRole", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.getRole", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.getRole()", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public String getRole() {\r\n    return role;\r\n}"},
 {"id":2183, "methodname":"getSecondaryMID()", "methodnamerefined":"getSecondaryMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.getSecondaryMID", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.getSecondaryMID()", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public long getSecondaryMID() {\r\n    return secondaryMID;\r\n}"},
 {"id":2184, "methodname":"getTimeLogged()", "methodnamerefined":"getTimeLogged", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.getTimeLogged", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.getTimeLogged()", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public Timestamp getTimeLogged() {\r\n    return timeLogged;\r\n}"},
 {"id":2185, "methodname":"getTransactionID()", "methodnamerefined":"getTransactionID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.getTransactionID", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.getTransactionID()", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public long getTransactionID() {\r\n    return transactionID;\r\n}"},
 {"id":2186, "methodname":"getTransactionType()", "methodnamerefined":"getTransactionType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.getTransactionType", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.getTransactionType()", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public TransactionType getTransactionType() {\r\n    return transactionType;\r\n}"},
 {"id":2187, "methodname":"setAddedInfo(java.lang.String)", "methodnamerefined":"setAddedInfo", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.setAddedInfo", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.setAddedInfo(java.lang.String)", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public void setAddedInfo(String addedInfo) {\r\n    this.addedInfo = addedInfo;\r\n}"},
 {"id":2188, "methodname":"setLoggedInMID(long)", "methodnamerefined":"setLoggedInMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.setLoggedInMID", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.setLoggedInMID(long)", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public void setLoggedInMID(long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":2189, "methodname":"setRole(java.lang.String)", "methodnamerefined":"setRole", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.setRole", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.setRole(java.lang.String)", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public void setRole(String role) {\r\n    this.role = role;\r\n}"},
 {"id":2190, "methodname":"setSecondaryMID(long)", "methodnamerefined":"setSecondaryMID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.setSecondaryMID", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.setSecondaryMID(long)", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public void setSecondaryMID(long secondaryMID) {\r\n    this.secondaryMID = secondaryMID;\r\n}"},
 {"id":2191, "methodname":"setTimeLogged(java.sql.Timestamp)", "methodnamerefined":"setTimeLogged", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.setTimeLogged", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.setTimeLogged(java.sql.Timestamp)", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public void setTimeLogged(Timestamp timeLogged) {\r\n    this.timeLogged = timeLogged;\r\n}"},
 {"id":2192, "methodname":"setTransactionID(long)", "methodnamerefined":"setTransactionID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.setTransactionID", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.setTransactionID(long)", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public void setTransactionID(long transactionID) {\r\n    this.transactionID = transactionID;\r\n}"},
 {"id":2193, "methodname":"setTransactionType(edu.ncsu.csc.itrust.enums.TransactionType)", "methodnamerefined":"setTransactionType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.TransactionBean.setTransactionType", "fullmethod":"edu.ncsu.csc.itrust.beans.TransactionBean.setTransactionType(edu.ncsu.csc.itrust.enums.TransactionType)", "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "shortclassname":"TransactionBean", "method":"public void setTransactionType(TransactionType tranactionType) {\r\n    this.transactionType = tranactionType;\r\n}"},
 {"id":2194, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.-init-()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public VerboseReferralBean() {\r\n}"},
 {"id":2195, "methodname":"equals(edu.ncsu.csc.itrust.beans.VerboseReferralBean)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.equals(edu.ncsu.csc.itrust.beans.VerboseReferralBean)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"private boolean equals(VerboseReferralBean other) {\r\n    return ((((((((id) == (other.id)) && ((senderID) == (other.senderID))) && ((receiverID) == (other.receiverID))) && ((ovid) == (other.ovid))) && ((viewedByPatient) == (other.viewedByPatient))) && ((viewedByHCP) == (other.viewedByHCP))) && (timeStamp.equals(other.timeStamp))) && (referralDetails.equals(other.referralDetails));\r\n}"},
 {"id":2196, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.equals(java.lang.Object)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"@Override\r\npublic boolean equals(Object other) {\r\n    return ((other != null) && (this.getClass().equals(other.getClass()))) && (this.equals(((VerboseReferralBean) (other))));\r\n}"},
 {"id":2197, "methodname":"getId()", "methodnamerefined":"getId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getId", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getId()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public long getId() {\r\n    return id;\r\n}"},
 {"id":2198, "methodname":"getOvDate()", "methodnamerefined":"getOvDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getOvDate", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getOvDate()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"/**\r\n *\r\n *\r\n * @return the ovDate\r\n */\r\npublic String getOvDate() {\r\n    return ovDate;\r\n}"},
 {"id":2199, "methodname":"getOvid()", "methodnamerefined":"getOvid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getOvid", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getOvid()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public long getOvid() {\r\n    return ovid;\r\n}"},
 {"id":2200, "methodname":"getPatientID()", "methodnamerefined":"getPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getPatientID()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public long getPatientID() {\r\n    return patientID;\r\n}"},
 {"id":2201, "methodname":"getPatientName()", "methodnamerefined":"getPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getPatientName", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getPatientName()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"/**\r\n *\r\n *\r\n * @return the patientName\r\n */\r\npublic String getPatientName() {\r\n    return patientName;\r\n}"},
 {"id":2202, "methodname":"getPriority()", "methodnamerefined":"getPriority", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getPriority", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getPriority()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public int getPriority() {\r\n    return priority;\r\n}"},
 {"id":2203, "methodname":"getReceiverID()", "methodnamerefined":"getReceiverID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getReceiverID", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getReceiverID()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public long getReceiverID() {\r\n    return receiverID;\r\n}"},
 {"id":2204, "methodname":"getReceiverName()", "methodnamerefined":"getReceiverName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getReceiverName", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getReceiverName()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"/**\r\n *\r\n *\r\n * @return the receiverName\r\n */\r\npublic String getReceiverName() {\r\n    return receiverName;\r\n}"},
 {"id":2205, "methodname":"getReferralDetails()", "methodnamerefined":"getReferralDetails", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getReferralDetails", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getReferralDetails()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public String getReferralDetails() {\r\n    return referralDetails;\r\n}"},
 {"id":2206, "methodname":"getSenderID()", "methodnamerefined":"getSenderID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getSenderID", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getSenderID()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public long getSenderID() {\r\n    return senderID;\r\n}"},
 {"id":2207, "methodname":"getSenderName()", "methodnamerefined":"getSenderName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getSenderName", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getSenderName()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"/**\r\n *\r\n *\r\n * @return the senderName\r\n */\r\npublic String getSenderName() {\r\n    return senderName;\r\n}"},
 {"id":2208, "methodname":"getTimeStamp()", "methodnamerefined":"getTimeStamp", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getTimeStamp", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.getTimeStamp()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public String getTimeStamp() {\r\n    return timeStamp;\r\n}"},
 {"id":2209, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.hashCode()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":2210, "methodname":"isViewedByHCP()", "methodnamerefined":"isViewedByHCP", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.isViewedByHCP", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.isViewedByHCP()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public boolean isViewedByHCP() {\r\n    return viewedByHCP;\r\n}"},
 {"id":2211, "methodname":"isViewedByPatient()", "methodnamerefined":"isViewedByPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.isViewedByPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.isViewedByPatient()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public boolean isViewedByPatient() {\r\n    return viewedByPatient;\r\n}"},
 {"id":2212, "methodname":"setId(long)", "methodnamerefined":"setId", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setId", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setId(long)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setId(long id) {\r\n    this.id = id;\r\n}"},
 {"id":2213, "methodname":"setOvDate(java.lang.String)", "methodnamerefined":"setOvDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setOvDate", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setOvDate(java.lang.String)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"/**\r\n *\r\n *\r\n * @param ovDate\r\n * \t\tthe ovDate to set\r\n */\r\npublic void setOvDate(String ovDate) {\r\n    this.ovDate = ovDate;\r\n}"},
 {"id":2214, "methodname":"setOvid(long)", "methodnamerefined":"setOvid", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setOvid", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setOvid(long)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setOvid(long ovid) {\r\n    this.ovid = ovid;\r\n}"},
 {"id":2215, "methodname":"setPatientID(long)", "methodnamerefined":"setPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setPatientID(long)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}"},
 {"id":2216, "methodname":"setPatientName(java.lang.String)", "methodnamerefined":"setPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setPatientName", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setPatientName(java.lang.String)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"/**\r\n *\r\n *\r\n * @param patientName\r\n * \t\tthe patientName to set\r\n */\r\npublic void setPatientName(String patientName) {\r\n    this.patientName = patientName;\r\n}"},
 {"id":2217, "methodname":"setPriority(int)", "methodnamerefined":"setPriority", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setPriority", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setPriority(int)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setPriority(int priority) {\r\n    this.priority = priority;\r\n}"},
 {"id":2218, "methodname":"setReceiverID(long)", "methodnamerefined":"setReceiverID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setReceiverID", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setReceiverID(long)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setReceiverID(long receiverID) {\r\n    this.receiverID = receiverID;\r\n}"},
 {"id":2219, "methodname":"setReceiverName(java.lang.String)", "methodnamerefined":"setReceiverName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setReceiverName", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setReceiverName(java.lang.String)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"/**\r\n *\r\n *\r\n * @param receiverName\r\n * \t\tthe receiverName to set\r\n */\r\npublic void setReceiverName(String receiverName) {\r\n    this.receiverName = receiverName;\r\n}"},
 {"id":2220, "methodname":"setReferralDetails(java.lang.String)", "methodnamerefined":"setReferralDetails", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setReferralDetails", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setReferralDetails(java.lang.String)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setReferralDetails(String referralDetails) {\r\n    this.referralDetails = referralDetails;\r\n}"},
 {"id":2221, "methodname":"setSenderID(long)", "methodnamerefined":"setSenderID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setSenderID", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setSenderID(long)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setSenderID(long senderID) {\r\n    this.senderID = senderID;\r\n}"},
 {"id":2222, "methodname":"setSenderName(java.lang.String)", "methodnamerefined":"setSenderName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setSenderName", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setSenderName(java.lang.String)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"/**\r\n *\r\n *\r\n * @param senderName\r\n * \t\tthe senderName to set\r\n */\r\npublic void setSenderName(String senderName) {\r\n    this.senderName = senderName;\r\n}"},
 {"id":2223, "methodname":"setTimeStamp(java.lang.String)", "methodnamerefined":"setTimeStamp", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setTimeStamp", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setTimeStamp(java.lang.String)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setTimeStamp(String timeStamp) {\r\n    this.timeStamp = timeStamp;\r\n}"},
 {"id":2224, "methodname":"setViewedByHCP(boolean)", "methodnamerefined":"setViewedByHCP", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setViewedByHCP", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setViewedByHCP(boolean)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setViewedByHCP(boolean viewedByHCP) {\r\n    this.viewedByHCP = viewedByHCP;\r\n}"},
 {"id":2225, "methodname":"setViewedByPatient(boolean)", "methodnamerefined":"setViewedByPatient", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setViewedByPatient", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.setViewedByPatient(boolean)", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public void setViewedByPatient(boolean viewedByPatient) {\r\n    this.viewedByPatient = viewedByPatient;\r\n}"},
 {"id":2226, "methodname":"toReferralBean()", "methodnamerefined":"toReferralBean", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.toReferralBean", "fullmethod":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.toReferralBean()", "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "shortclassname":"VerboseReferralBean", "method":"public ReferralBean toReferralBean() {\r\n    ReferralBean bean = new ReferralBean();\r\n    bean.setId(id);\r\n    bean.setPatientID(patientID);\r\n    bean.setSenderID(senderID);\r\n    bean.setReceiverID(receiverID);\r\n    bean.setReferralDetails(referralDetails);\r\n    bean.setOvid(ovid);\r\n    bean.setViewedByPatient(viewedByPatient);\r\n    bean.setViewedByHCP(viewedByHCP);\r\n    bean.setTimeStamp(timeStamp);\r\n    bean.setPriority(priority);\r\n    return bean;\r\n}"},
 {"id":2227, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VisitFlag.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.VisitFlag.-init-(java.lang.String)", "classid":283, "classname":"edu.ncsu.csc.itrust.beans.VisitFlag", "shortclassname":"VisitFlag", "method":"public VisitFlag(String type) {\r\n    this.type = type;\r\n}"},
 {"id":2228, "methodname":"-init-(java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VisitFlag.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.VisitFlag.-init-(java.lang.String,java.lang.String)", "classid":283, "classname":"edu.ncsu.csc.itrust.beans.VisitFlag", "shortclassname":"VisitFlag", "method":"public VisitFlag(String type, String value) {\r\n    this.type = type;\r\n    this.value = value;\r\n}"},
 {"id":2229, "methodname":"getType()", "methodnamerefined":"getType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VisitFlag.getType", "fullmethod":"edu.ncsu.csc.itrust.beans.VisitFlag.getType()", "classid":283, "classname":"edu.ncsu.csc.itrust.beans.VisitFlag", "shortclassname":"VisitFlag", "method":"public String getType() {\r\n    return type;\r\n}"},
 {"id":2230, "methodname":"getValue()", "methodnamerefined":"getValue", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VisitFlag.getValue", "fullmethod":"edu.ncsu.csc.itrust.beans.VisitFlag.getValue()", "classid":283, "classname":"edu.ncsu.csc.itrust.beans.VisitFlag", "shortclassname":"VisitFlag", "method":"public String getValue() {\r\n    return value;\r\n}"},
 {"id":2231, "methodname":"setType(java.lang.String)", "methodnamerefined":"setType", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VisitFlag.setType", "fullmethod":"edu.ncsu.csc.itrust.beans.VisitFlag.setType(java.lang.String)", "classid":283, "classname":"edu.ncsu.csc.itrust.beans.VisitFlag", "shortclassname":"VisitFlag", "method":"public void setType(String type) {\r\n    this.type = type;\r\n}"},
 {"id":2232, "methodname":"setValue(java.lang.String)", "methodnamerefined":"setValue", "methodabbreviation":"edu.ncsu.csc.itrust.beans.VisitFlag.setValue", "fullmethod":"edu.ncsu.csc.itrust.beans.VisitFlag.setValue(java.lang.String)", "classid":283, "classname":"edu.ncsu.csc.itrust.beans.VisitFlag", "shortclassname":"VisitFlag", "method":"public void setValue(String value) {\r\n    this.value = value;\r\n}"},
 {"id":2233, "methodname":"-init-(long,java.lang.String,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.-init-(long,java.lang.String,long)", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"public WardBean(long wardID, String requiredSpecialty, long inHospital) {\r\n    this.wardID = wardID;\r\n    this.requiredSpecialty = requiredSpecialty;\r\n    this.inHospital = inHospital;\r\n}"},
 {"id":2234, "methodname":"equals(edu.ncsu.csc.itrust.beans.WardBean)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.equals(edu.ncsu.csc.itrust.beans.WardBean)", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"private boolean equals(WardBean other) {\r\n    return ((wardID) == (other.wardID)) && (requiredSpecialty.equals(other.requiredSpecialty));\r\n}"},
 {"id":2235, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.equals(java.lang.Object)", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((WardBean) (obj))));\r\n}"},
 {"id":2236, "methodname":"getInHospital()", "methodnamerefined":"getInHospital", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.getInHospital", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.getInHospital()", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"public long getInHospital() {\r\n    return inHospital;\r\n}"},
 {"id":2237, "methodname":"getRequiredSpecialty()", "methodnamerefined":"getRequiredSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.getRequiredSpecialty", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.getRequiredSpecialty()", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"public String getRequiredSpecialty() {\r\n    return requiredSpecialty;\r\n}"},
 {"id":2238, "methodname":"getWardID()", "methodnamerefined":"getWardID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.getWardID", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.getWardID()", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"public long getWardID() {\r\n    return wardID;\r\n}"},
 {"id":2239, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.hashCode()", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":2240, "methodname":"setInHospital(long)", "methodnamerefined":"setInHospital", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.setInHospital", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.setInHospital(long)", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"public void setInHospital(long inHospital) {\r\n    this.inHospital = inHospital;\r\n}"},
 {"id":2241, "methodname":"setRequiredSpecialty(java.lang.String)", "methodnamerefined":"setRequiredSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.setRequiredSpecialty", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.setRequiredSpecialty(java.lang.String)", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"public void setRequiredSpecialty(String requiredSpecialty) {\r\n    this.requiredSpecialty = requiredSpecialty;\r\n}"},
 {"id":2242, "methodname":"setWardID(long)", "methodnamerefined":"setWardID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardBean.setWardID", "fullmethod":"edu.ncsu.csc.itrust.beans.WardBean.setWardID(long)", "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "shortclassname":"WardBean", "method":"public void setWardID(long wardID) {\r\n    this.wardID = wardID;\r\n}"},
 {"id":2243, "methodname":"-init-(long,long,long,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.-init-(long,long,long,java.lang.String,java.lang.String)", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public WardRoomBean(long roomID, long occupiedBy, long inWard, String roomName, String status) {\r\n    this.roomID = roomID;\r\n    this.occupiedBy = occupiedBy;\r\n    this.inWard = inWard;\r\n    this.roomName = roomName;\r\n    this.status = status;\r\n}"},
 {"id":2244, "methodname":"equals(edu.ncsu.csc.itrust.beans.WardRoomBean)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.equals(edu.ncsu.csc.itrust.beans.WardRoomBean)", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"private boolean equals(WardRoomBean other) {\r\n    return ((roomID) == (other.roomID)) && (roomName.equals(other.roomName));\r\n}"},
 {"id":2245, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.equals", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.equals(java.lang.Object)", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((WardRoomBean) (obj))));\r\n}"},
 {"id":2246, "methodname":"getInWard()", "methodnamerefined":"getInWard", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.getInWard", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.getInWard()", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public long getInWard() {\r\n    return inWard;\r\n}"},
 {"id":2247, "methodname":"getOccupiedBy()", "methodnamerefined":"getOccupiedBy", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.getOccupiedBy", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.getOccupiedBy()", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public Long getOccupiedBy() {\r\n    return occupiedBy;\r\n}"},
 {"id":2248, "methodname":"getRoomID()", "methodnamerefined":"getRoomID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.getRoomID", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.getRoomID()", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public long getRoomID() {\r\n    return roomID;\r\n}"},
 {"id":2249, "methodname":"getRoomName()", "methodnamerefined":"getRoomName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.getRoomName", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.getRoomName()", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public String getRoomName() {\r\n    return roomName;\r\n}"},
 {"id":2250, "methodname":"getStatus()", "methodnamerefined":"getStatus", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.getStatus", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.getStatus()", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public String getStatus() {\r\n    return status;\r\n}"},
 {"id":2251, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.hashCode()", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":2252, "methodname":"setInWard(long)", "methodnamerefined":"setInWard", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.setInWard", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.setInWard(long)", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public void setInWard(long inWard) {\r\n    this.inWard = inWard;\r\n}"},
 {"id":2253, "methodname":"setOccupiedBy(java.lang.Long)", "methodnamerefined":"setOccupiedBy", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.setOccupiedBy", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.setOccupiedBy(java.lang.Long)", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public void setOccupiedBy(Long occupiedBy) {\r\n    this.occupiedBy = occupiedBy;\r\n}"},
 {"id":2254, "methodname":"setRoomID(long)", "methodnamerefined":"setRoomID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.setRoomID", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.setRoomID(long)", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public void setRoomID(long roomID) {\r\n    this.roomID = roomID;\r\n}"},
 {"id":2255, "methodname":"setRoomName(java.lang.String)", "methodnamerefined":"setRoomName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.setRoomName", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.setRoomName(java.lang.String)", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public void setRoomName(String roomName) {\r\n    this.roomName = roomName;\r\n}"},
 {"id":2256, "methodname":"setStatus(java.lang.String)", "methodnamerefined":"setStatus", "methodabbreviation":"edu.ncsu.csc.itrust.beans.WardRoomBean.setStatus", "fullmethod":"edu.ncsu.csc.itrust.beans.WardRoomBean.setStatus(java.lang.String)", "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "shortclassname":"WardRoomBean", "method":"public void setStatus(String status) {\r\n    this.status = status;\r\n}"},
 {"id":2257, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.-init-()", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"EditOfficeVisitForm() {\r\n}"},
 {"id":2258, "methodname":"getHcpID()", "methodnamerefined":"getHcpID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getHcpID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getHcpID()", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public String getHcpID() {\r\n    return hcpID;\r\n}"},
 {"id":2259, "methodname":"getHospitalID()", "methodnamerefined":"getHospitalID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getHospitalID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getHospitalID()", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public String getHospitalID() {\r\n    return hospitalID;\r\n}"},
 {"id":2260, "methodname":"getNotes()", "methodnamerefined":"getNotes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getNotes", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getNotes()", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"// private String startDate;\r\n// private String endDate;\r\n// private String dosage;\r\n// private String instructions;\r\n// private String causeOfDeath;\r\n// private String[] orc;\r\n// private String comment;\r\n/* public String getAddDiagID() {\nreturn addDiagID;\n}\n\npublic void setAddDiagID(String addDiagID) {\nthis.addDiagID = addDiagID;\n}\n\npublic String getAddLabProcID() {\nreturn addLabProcID;\n}\n\npublic void setAddLabProcID(String addLabProcID) {\nthis.addLabProcID = addLabProcID;\n}\n\npublic String getAddMedID() {\nreturn addMedID;\n}\n\npublic void setAddMedID(String addMedID) {\nthis.addMedID = addMedID;\n}\n\npublic String getAddProcID() {\nreturn addProcID;\n}\n\npublic void setAddProcID(String addProcID) {\nthis.addProcID = addProcID;\n}\n\npublic String getAddImmunizationID() {\nreturn addImmunizationID;\n}\n\npublic void setAddImmunizationID(String addImmunizationID) {\nthis.addImmunizationID = addImmunizationID;\n}\n */\r\npublic String getNotes() {\r\n    return notes;\r\n}"},
 {"id":2261, "methodname":"getOvID()", "methodnamerefined":"getOvID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getOvID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getOvID()", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public String getOvID() {\r\n    return ovID;\r\n}"},
 {"id":2262, "methodname":"getPatientID()", "methodnamerefined":"getPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getPatientID()", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public String getPatientID() {\r\n    return patientID;\r\n}"},
 {"id":2263, "methodname":"getVisitDate()", "methodnamerefined":"getVisitDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getVisitDate", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.getVisitDate()", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"/* public String getRemoveLabProcID() {\nreturn removeLabProcID;\n}\n\npublic void setRemoveLabProcID(String removeLabProcID) {\nthis.removeLabProcID = removeLabProcID;\n}\n\npublic String getRemoveDiagID() {\nreturn removeDiagID;\n}\n\npublic void setRemoveDiagID(String removeDiagID) {\nthis.removeDiagID = removeDiagID;\n}\n\npublic String getRemoveMedID() {\nreturn removeMedID;\n}\n\npublic void setRemoveMedID(String removeMedID) {\nthis.removeMedID = removeMedID;\n}\n\npublic String getRemoveProcID() {\nreturn removeProcID;\n}\n\npublic void setRemoveProcID(String removeProcID) {\nthis.removeProcID = removeProcID;\n}\n\npublic String getRemoveImmunizationID() {\nreturn removeImmunizationID;\n}\n\npublic void setRemoveImmunizationID(String removeImmunizationID) {\nthis.removeImmunizationID = removeImmunizationID; \n}\n */\r\npublic String getVisitDate() {\r\n    return visitDate;\r\n}"},
 {"id":2264, "methodname":"setHcpID(java.lang.String)", "methodnamerefined":"setHcpID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setHcpID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setHcpID(java.lang.String)", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public void setHcpID(String hcpID) {\r\n    this.hcpID = hcpID;\r\n}"},
 {"id":2265, "methodname":"setHospitalID(java.lang.String)", "methodnamerefined":"setHospitalID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setHospitalID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setHospitalID(java.lang.String)", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public void setHospitalID(String hospitalID) {\r\n    this.hospitalID = hospitalID;\r\n}"},
 {"id":2266, "methodname":"setNotes(java.lang.String)", "methodnamerefined":"setNotes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setNotes", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setNotes(java.lang.String)", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public void setNotes(String notes) {\r\n    this.notes = notes;\r\n}"},
 {"id":2267, "methodname":"setOvID(java.lang.String)", "methodnamerefined":"setOvID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setOvID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setOvID(java.lang.String)", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public void setOvID(String ovID) {\r\n    this.ovID = ovID;\r\n}"},
 {"id":2268, "methodname":"setPatientID(java.lang.String)", "methodnamerefined":"setPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setPatientID(java.lang.String)", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public void setPatientID(String patientID) {\r\n    this.patientID = patientID;\r\n}"},
 {"id":2269, "methodname":"setVisitDate(java.lang.String)", "methodnamerefined":"setVisitDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setVisitDate", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm.setVisitDate(java.lang.String)", "classid":286, "classname":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "shortclassname":"EditOfficeVisitForm", "method":"public void setVisitDate(String visitDate) {\r\n    this.visitDate = visitDate;\r\n}"},
 {"id":2270, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.-init-()", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"EditPrescriptionsForm() {\r\n}"},
 {"id":2271, "methodname":"getDosage()", "methodnamerefined":"getDosage", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getDosage", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getDosage()", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @return the dosage\r\n */\r\npublic String getDosage() {\r\n    return dosage;\r\n}"},
 {"id":2272, "methodname":"getEndDate()", "methodnamerefined":"getEndDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getEndDate", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getEndDate()", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @return the endDate\r\n */\r\npublic String getEndDate() {\r\n    return endDate;\r\n}"},
 {"id":2273, "methodname":"getInstructions()", "methodnamerefined":"getInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getInstructions", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getInstructions()", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @return the instructions\r\n */\r\npublic String getInstructions() {\r\n    return instructions;\r\n}"},
 {"id":2274, "methodname":"getMedID()", "methodnamerefined":"getMedID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getMedID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getMedID()", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @return the medID\r\n */\r\npublic String getMedID() {\r\n    return medID;\r\n}"},
 {"id":2275, "methodname":"getOverrideCodes()", "methodnamerefined":"getOverrideCodes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getOverrideCodes", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getOverrideCodes()", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @return the overrideCode\r\n */\r\npublic String[] getOverrideCodes() {\r\n    if ((overrideCodes) == null) {\r\n        overrideCodes = new String[0];\r\n    }\r\n    return overrideCodes;\r\n}"},
 {"id":2276, "methodname":"getOverrideOther()", "methodnamerefined":"getOverrideOther", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getOverrideOther", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getOverrideOther()", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @return the overrideComment\r\n */\r\npublic String getOverrideOther() {\r\n    return overrideOther;\r\n}"},
 {"id":2277, "methodname":"getStartDate()", "methodnamerefined":"getStartDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getStartDate", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.getStartDate()", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @return the startDate\r\n */\r\npublic String getStartDate() {\r\n    return startDate;\r\n}"},
 {"id":2278, "methodname":"setDosage(java.lang.String)", "methodnamerefined":"setDosage", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setDosage", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setDosage(java.lang.String)", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @param dosage\r\n * \t\tthe dosage to set\r\n */\r\npublic void setDosage(String dosage) {\r\n    this.dosage = dosage;\r\n}"},
 {"id":2279, "methodname":"setEndDate(java.lang.String)", "methodnamerefined":"setEndDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setEndDate", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setEndDate(java.lang.String)", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @param endDate\r\n * \t\tthe endDate to set\r\n */\r\npublic void setEndDate(String endDate) {\r\n    this.endDate = endDate;\r\n}"},
 {"id":2280, "methodname":"setInstructions(java.lang.String)", "methodnamerefined":"setInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setInstructions", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setInstructions(java.lang.String)", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @param instructions\r\n * \t\tthe instructions to set\r\n */\r\npublic void setInstructions(String instructions) {\r\n    this.instructions = instructions;\r\n}"},
 {"id":2281, "methodname":"setMedID(java.lang.String)", "methodnamerefined":"setMedID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setMedID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setMedID(java.lang.String)", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @param medID\r\n * \t\tthe medID to set\r\n */\r\npublic void setMedID(String medID) {\r\n    this.medID = medID;\r\n}"},
 {"id":2282, "methodname":"setOverrideCodes(java.lang.String[])", "methodnamerefined":"setOverrideCodes", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setOverrideCodes", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setOverrideCodes(java.lang.String[])", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @param overrideCode\r\n * \t\tthe overrideCode to set\r\n */\r\npublic void setOverrideCodes(String[] overrideCodes) {\r\n    if (overrideCodes == null) {\r\n        this.overrideCodes = null;\r\n    } else {\r\n        this.overrideCodes = overrideCodes.clone();\r\n    }\r\n}"},
 {"id":2283, "methodname":"setOverrideOther(java.lang.String)", "methodnamerefined":"setOverrideOther", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setOverrideOther", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setOverrideOther(java.lang.String)", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @param overrideComment\r\n * \t\tthe overrideComment to set\r\n */\r\npublic void setOverrideOther(String overrideComment) {\r\n    this.overrideOther = overrideComment;\r\n}"},
 {"id":2284, "methodname":"setStartDate(java.lang.String)", "methodnamerefined":"setStartDate", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setStartDate", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm.setStartDate(java.lang.String)", "classid":287, "classname":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "shortclassname":"EditPrescriptionsForm", "method":"/**\r\n *\r\n *\r\n * @param startDate\r\n * \t\tthe startDate to set\r\n */\r\npublic void setStartDate(String startDate) {\r\n    this.startDate = startDate;\r\n}"},
 {"id":2285, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.-init-()", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public HealthRecordForm() {\r\n}"},
 {"id":2286, "methodname":"getBloodPressureD()", "methodnamerefined":"getBloodPressureD", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getBloodPressureD", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getBloodPressureD()", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public String getBloodPressureD() {\r\n    return bloodPressureD;\r\n}"},
 {"id":2287, "methodname":"getBloodPressureN()", "methodnamerefined":"getBloodPressureN", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getBloodPressureN", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getBloodPressureN()", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public String getBloodPressureN() {\r\n    return bloodPressureN;\r\n}"},
 {"id":2288, "methodname":"getCholesterolHDL()", "methodnamerefined":"getCholesterolHDL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getCholesterolHDL", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getCholesterolHDL()", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public String getCholesterolHDL() {\r\n    return cholesterolHDL;\r\n}"},
 {"id":2289, "methodname":"getCholesterolLDL()", "methodnamerefined":"getCholesterolLDL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getCholesterolLDL", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getCholesterolLDL()", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public String getCholesterolLDL() {\r\n    return cholesterolLDL;\r\n}"},
 {"id":2290, "methodname":"getCholesterolTri()", "methodnamerefined":"getCholesterolTri", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getCholesterolTri", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getCholesterolTri()", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public String getCholesterolTri() {\r\n    return cholesterolTri;\r\n}"},
 {"id":2291, "methodname":"getHeight()", "methodnamerefined":"getHeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getHeight", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getHeight()", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public String getHeight() {\r\n    return height;\r\n}"},
 {"id":2292, "methodname":"getIsSmoker()", "methodnamerefined":"getIsSmoker", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getIsSmoker", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getIsSmoker()", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public String getIsSmoker() {\r\n    return isSmoker;\r\n}"},
 {"id":2293, "methodname":"getWeight()", "methodnamerefined":"getWeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getWeight", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.getWeight()", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public String getWeight() {\r\n    return weight;\r\n}"},
 {"id":2294, "methodname":"setBloodPressureD(java.lang.String)", "methodnamerefined":"setBloodPressureD", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setBloodPressureD", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setBloodPressureD(java.lang.String)", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public void setBloodPressureD(String bloodPressureD) {\r\n    this.bloodPressureD = bloodPressureD;\r\n}"},
 {"id":2295, "methodname":"setBloodPressureN(java.lang.String)", "methodnamerefined":"setBloodPressureN", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setBloodPressureN", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setBloodPressureN(java.lang.String)", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public void setBloodPressureN(String bloodPressureN) {\r\n    this.bloodPressureN = bloodPressureN;\r\n}"},
 {"id":2296, "methodname":"setCholesterolHDL(java.lang.String)", "methodnamerefined":"setCholesterolHDL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setCholesterolHDL", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setCholesterolHDL(java.lang.String)", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public void setCholesterolHDL(String cholesterolHDL) {\r\n    this.cholesterolHDL = cholesterolHDL;\r\n}"},
 {"id":2297, "methodname":"setCholesterolLDL(java.lang.String)", "methodnamerefined":"setCholesterolLDL", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setCholesterolLDL", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setCholesterolLDL(java.lang.String)", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public void setCholesterolLDL(String cholesterolLDL) {\r\n    this.cholesterolLDL = cholesterolLDL;\r\n}"},
 {"id":2298, "methodname":"setCholesterolTri(java.lang.String)", "methodnamerefined":"setCholesterolTri", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setCholesterolTri", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setCholesterolTri(java.lang.String)", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public void setCholesterolTri(String cholesterolTri) {\r\n    this.cholesterolTri = cholesterolTri;\r\n}"},
 {"id":2299, "methodname":"setHeight(java.lang.String)", "methodnamerefined":"setHeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setHeight", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setHeight(java.lang.String)", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public void setHeight(String height) {\r\n    this.height = height;\r\n}"},
 {"id":2300, "methodname":"setIsSmoker(java.lang.String)", "methodnamerefined":"setIsSmoker", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setIsSmoker", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setIsSmoker(java.lang.String)", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public void setIsSmoker(String isSmoker) {\r\n    this.isSmoker = isSmoker;\r\n}"},
 {"id":2301, "methodname":"setWeight(java.lang.String)", "methodnamerefined":"setWeight", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setWeight", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm.setWeight(java.lang.String)", "classid":288, "classname":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "shortclassname":"HealthRecordForm", "method":"public void setWeight(String weight) {\r\n    this.weight = weight;\r\n}"},
 {"id":2302, "methodname":"-init-(long,long,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.-init-(long,long,java.lang.String,java.lang.String,java.lang.String)", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public VisitReminderReturnForm(long hcpID, long patientID, String lastName, String firstName, String phone) {\r\n    this.hcpID = hcpID;\r\n    this.patientID = patientID;\r\n    this.lastName = lastName;\r\n    this.firstName = firstName;\r\n    setPhoneNumber(phone);\r\n}"},
 {"id":2303, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.-init-()", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"1() {\r\n}"},
 {"id":2304, "methodname":"addVisitFlag(edu.ncsu.csc.itrust.beans.VisitFlag)", "methodnamerefined":"addVisitFlag", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.addVisitFlag", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.addVisitFlag(edu.ncsu.csc.itrust.beans.VisitFlag)", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public void addVisitFlag(VisitFlag flag) {\r\n    if (null == (visitFlags))\r\n        visitFlags = new ArrayList<VisitFlag>();\r\n\r\n    visitFlags.add(flag);\r\n}"},
 {"id":2305, "methodname":"getFirstName()", "methodnamerefined":"getFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getFirstName()", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public String getFirstName() {\r\n    return firstName;\r\n}"},
 {"id":2306, "methodname":"getHcpID()", "methodnamerefined":"getHcpID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getHcpID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getHcpID()", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public long getHcpID() {\r\n    return hcpID;\r\n}"},
 {"id":2307, "methodname":"getLastName()", "methodnamerefined":"getLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getLastName()", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public String getLastName() {\r\n    return lastName;\r\n}"},
 {"id":2308, "methodname":"getPatientID()", "methodnamerefined":"getPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getPatientID()", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public long getPatientID() {\r\n    return patientID;\r\n}"},
 {"id":2309, "methodname":"getPhoneNumber()", "methodnamerefined":"getPhoneNumber", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getPhoneNumber", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getPhoneNumber()", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public String getPhoneNumber() {\r\n    return phoneNumber;\r\n}"},
 {"id":2310, "methodname":"getVisitFlags()", "methodnamerefined":"getVisitFlags", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getVisitFlags", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.getVisitFlags()", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public VisitFlag[] getVisitFlags() {\r\n    // Keep similar flags next to each other\r\n    Collections.sort(visitFlags, new Comparator<VisitFlag>() {\r\n        public int compare(VisitFlag vf1, VisitFlag vf2) {\r\n            return vf1.getType().compareToIgnoreCase(vf2.getType());\r\n        }\r\n    });\r\n    return visitFlags.toArray(new VisitFlag[visitFlags.size()]);\r\n}"},
 {"id":2311, "methodname":"setFirstName(java.lang.String)", "methodnamerefined":"setFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setFirstName", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setFirstName(java.lang.String)", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public void setFirstName(String firstName) {\r\n    this.firstName = firstName;\r\n}"},
 {"id":2312, "methodname":"setHcpID(long)", "methodnamerefined":"setHcpID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setHcpID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setHcpID(long)", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public void setHcpID(long hcpID) {\r\n    this.hcpID = hcpID;\r\n}"},
 {"id":2313, "methodname":"setLastName(java.lang.String)", "methodnamerefined":"setLastName", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setLastName", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setLastName(java.lang.String)", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public void setLastName(String lastName) {\r\n    this.lastName = lastName;\r\n}"},
 {"id":2314, "methodname":"setPatientID(long)", "methodnamerefined":"setPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setPatientID", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setPatientID(long)", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public void setPatientID(long patientID) {\r\n    this.patientID = patientID;\r\n}"},
 {"id":2315, "methodname":"setPhoneNumber(java.lang.String)", "methodnamerefined":"setPhoneNumber", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setPhoneNumber", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setPhoneNumber(java.lang.String)", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public void setPhoneNumber(String phone) {\r\n    this.phoneNumber = phone;\r\n}"},
 {"id":2316, "methodname":"setVisitFlags(edu.ncsu.csc.itrust.beans.VisitFlag[])", "methodnamerefined":"setVisitFlags", "methodabbreviation":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setVisitFlags", "fullmethod":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.setVisitFlags(edu.ncsu.csc.itrust.beans.VisitFlag[])", "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "shortclassname":"VisitReminderReturnForm", "method":"public void setVisitFlags(VisitFlag[] visitFlags) {\r\n    this.visitFlags = new ArrayList<VisitFlag>();\r\n    for (VisitFlag flag : visitFlags) {\r\n        this.visitFlags.add(flag);\r\n    }\r\n}"},
 {"id":2317, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.-init-()", "classid":290, "classname":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader", "shortclassname":"AdverseEventBeanLoader", "method":"AdverseEventBeanLoader() {\r\n}"},
 {"id":2318, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadList(java.sql.ResultSet)", "classid":290, "classname":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader", "shortclassname":"AdverseEventBeanLoader", "method":"public List<AdverseEventBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<AdverseEventBean> list = new ArrayList<AdverseEventBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2319, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AdverseEventBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AdverseEventBean)", "classid":290, "classname":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader", "shortclassname":"AdverseEventBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, AdverseEventBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2320, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadSingle(java.sql.ResultSet)", "classid":290, "classname":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader", "shortclassname":"AdverseEventBeanLoader", "method":"public AdverseEventBean loadSingle(ResultSet rs) throws SQLException {\r\n    AdverseEventBean adverseEvent = new AdverseEventBean();\r\n    adverseEvent.setMID(rs.getString(\"PatientMID\"));\r\n    adverseEvent.setDrug(rs.getString(\"PresImmu\"));\r\n    adverseEvent.setDescription(rs.getString(\"Comment\"));\r\n    adverseEvent.setCode(rs.getString(\"Code\"));\r\n    adverseEvent.setDate(rs.getTimestamp(\"TimeLogged\").toString());\r\n    adverseEvent.setId(rs.getInt(\"id\"));\r\n    adverseEvent.setStatus(rs.getString(\"Status\"));\r\n    return adverseEvent;\r\n}"},
 {"id":2321, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.-init-()", "classid":291, "classname":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader", "shortclassname":"AllergyBeanLoader", "method":"AllergyBeanLoader() {\r\n}"},
 {"id":2322, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadList(java.sql.ResultSet)", "classid":291, "classname":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader", "shortclassname":"AllergyBeanLoader", "method":"public List<AllergyBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<AllergyBean> list = new ArrayList<AllergyBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2323, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AllergyBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AllergyBean)", "classid":291, "classname":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader", "shortclassname":"AllergyBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, AllergyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2324, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadSingle(java.sql.ResultSet)", "classid":291, "classname":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader", "shortclassname":"AllergyBeanLoader", "method":"public AllergyBean loadSingle(ResultSet rs) throws SQLException {\r\n    AllergyBean allergy = new AllergyBean();\r\n    allergy.setId(rs.getLong(\"ID\"));\r\n    allergy.setPatientID(rs.getLong(\"PatientID\"));\r\n    allergy.setDescription(rs.getString(\"Description\"));\r\n    allergy.setNDCode(rs.getString(\"Code\"));\r\n    allergy.setFirstFound(rs.getTimestamp(\"FirstFound\"));\r\n    return allergy;\r\n}"},
 {"id":2325, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.-init-()", "classid":292, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader", "shortclassname":"ApptBeanLoader", "method":"ApptBeanLoader() {\r\n}"},
 {"id":2326, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadList(java.sql.ResultSet)", "classid":292, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader", "shortclassname":"ApptBeanLoader", "method":"public List<ApptBean> loadList(ResultSet rs) throws SQLException {\r\n    List<ApptBean> list = new ArrayList<ApptBean>();\r\n    while (rs.next())\r\n        list.add(loadSingle(rs));\r\n\r\n    return list;\r\n}"},
 {"id":2327, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptBean)", "classid":292, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader", "shortclassname":"ApptBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, ApptBean bean) throws SQLException {\r\n    ps.setString(1, bean.getApptType());\r\n    ps.setLong(2, bean.getPatient());\r\n    ps.setLong(3, bean.getHcp());\r\n    ps.setTimestamp(4, bean.getDate());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}"},
 {"id":2328, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadSingle(java.sql.ResultSet)", "classid":292, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader", "shortclassname":"ApptBeanLoader", "method":"public ApptBean loadSingle(ResultSet rs) throws SQLException {\r\n    ApptBean bean = new ApptBean();\r\n    bean.setApptID(rs.getInt(\"appt_id\"));\r\n    bean.setApptType(rs.getString(\"appt_type\"));\r\n    bean.setPatient(rs.getLong(\"patient_id\"));\r\n    bean.setHcp(rs.getLong(\"doctor_id\"));\r\n    bean.setDate(rs.getTimestamp(\"sched_date\"));\r\n    bean.setComment(rs.getString(\"comment\"));\r\n    return bean;\r\n}"},
 {"id":2329, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.-init-()", "classid":293, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader", "shortclassname":"ApptRequestBeanLoader", "method":"ApptRequestBeanLoader() {\r\n}"},
 {"id":2330, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadList(java.sql.ResultSet)", "classid":293, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader", "shortclassname":"ApptRequestBeanLoader", "method":"/**\r\n *\r\n */\r\npublic List<ApptRequestBean> loadList(ResultSet rs) throws SQLException {\r\n    List<ApptRequestBean> list = new ArrayList<ApptRequestBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2331, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptRequestBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptRequestBean)", "classid":293, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader", "shortclassname":"ApptRequestBeanLoader", "method":"/**\r\n *\r\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, ApptRequestBean bean) throws SQLException {\r\n    PreparedStatement ps2 = loader.loadParameters(ps, bean.getRequestedAppt());\r\n    ps2.setBoolean(6, bean.isPending());\r\n    ps2.setBoolean(7, bean.isAccepted());\r\n    return ps2;\r\n}"},
 {"id":2332, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadSingle(java.sql.ResultSet)", "classid":293, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader", "shortclassname":"ApptRequestBeanLoader", "method":"/**\r\n *\r\n */\r\npublic ApptRequestBean loadSingle(ResultSet rs) throws SQLException {\r\n    ApptRequestBean bean = new ApptRequestBean();\r\n    ApptBean appt = loader.loadSingle(rs);\r\n    bean.setRequestedAppt(appt);\r\n    bean.setPending(rs.getBoolean(\"pending\"));\r\n    bean.setAccepted(rs.getBoolean(\"accepted\"));\r\n    return bean;\r\n}"},
 {"id":2333, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.-init-()", "classid":294, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader", "shortclassname":"ApptTypeBeanLoader", "method":"ApptTypeBeanLoader() {\r\n}"},
 {"id":2334, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadList(java.sql.ResultSet)", "classid":294, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader", "shortclassname":"ApptTypeBeanLoader", "method":"public List<ApptTypeBean> loadList(ResultSet rs) throws SQLException {\r\n    List<ApptTypeBean> list = new ArrayList<ApptTypeBean>();\r\n    while (rs.next())\r\n        list.add(loadSingle(rs));\r\n\r\n    return list;\r\n}"},
 {"id":2335, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptTypeBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptTypeBean)", "classid":294, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader", "shortclassname":"ApptTypeBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, ApptTypeBean apptType) throws SQLException {\r\n    ps.setString(1, apptType.getName());\r\n    ps.setInt(2, apptType.getDuration());\r\n    return ps;\r\n}"},
 {"id":2336, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadSingle(java.sql.ResultSet)", "classid":294, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader", "shortclassname":"ApptTypeBeanLoader", "method":"public ApptTypeBean loadSingle(ResultSet rs) throws SQLException {\r\n    ApptTypeBean apptType = new ApptTypeBean();\r\n    apptType.setName(rs.getString(\"appt_type\"));\r\n    apptType.setDuration(rs.getInt(\"duration\"));\r\n    return apptType;\r\n}"},
 {"id":2337, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadList(java.sql.ResultSet)", "classid":295, "classname":"edu.ncsu.csc.itrust.beans.loaders.BeanLoader", "shortclassname":"BeanLoader", "method":"/**\r\n * Loads a list of the bean of type T from a result set.  Typically makes iterated calls\r\n * to loadSingle.\r\n *\r\n * @param rs\r\n * \t\tThe java.sql.ResultSet we are extracting.\r\n * @return A java.util.List<T> where T is the type for this loader.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<T> loadList(ResultSet rs) throws SQLException;"},
 {"id":2338, "methodname":"loadParameters(java.sql.PreparedStatement,java.lang.Object)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadParameters(java.sql.PreparedStatement,java.lang.Object)", "classid":295, "classname":"edu.ncsu.csc.itrust.beans.loaders.BeanLoader", "shortclassname":"BeanLoader", "method":"/**\r\n * Used for an insert or update, this method contains the instructions for mapping the fields within\r\n * a bean of type T into a prepared statement which modifies the appropriate table.\r\n *\r\n * @param ps\r\n * \t\tThe prepared statement to be loaded.\r\n * @param bean\r\n * \t\tThe bean containing the data to be placed.\r\n * @return A prepared statement with the appropriately loaded parameters.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, T bean) throws SQLException;"},
 {"id":2339, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.BeanLoader.loadSingle(java.sql.ResultSet)", "classid":295, "classname":"edu.ncsu.csc.itrust.beans.loaders.BeanLoader", "shortclassname":"BeanLoader", "method":"/**\r\n * Contains the instructions for mapping the rows in this java.sql.ResultSet into\r\n * beans of type <T>.\r\n *\r\n * @param rs\r\n * \t\tThe java.sql.ResultSet to be loaded.\r\n * @return A Bean of type T containing the loaded information, typically of the first (or next) item in the result set.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic T loadSingle(ResultSet rs) throws SQLException;"},
 {"id":2340, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.-init-()", "classid":296, "classname":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader", "shortclassname":"DiagnosisBeanLoader", "method":"public DiagnosisBeanLoader() {\r\n    loadOVDiagnosisID = false;\r\n}"},
 {"id":2341, "methodname":"-init-(boolean)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.-init-(boolean)", "classid":296, "classname":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader", "shortclassname":"DiagnosisBeanLoader", "method":"public DiagnosisBeanLoader(boolean loadOVDiagnosisID) {\r\n    this.loadOVDiagnosisID = loadOVDiagnosisID;\r\n}"},
 {"id":2342, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadList(java.sql.ResultSet)", "classid":296, "classname":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader", "shortclassname":"DiagnosisBeanLoader", "method":"public List<DiagnosisBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<DiagnosisBean> list = new ArrayList<DiagnosisBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2343, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":296, "classname":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader", "shortclassname":"DiagnosisBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, DiagnosisBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2344, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadSingle(java.sql.ResultSet)", "classid":296, "classname":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader", "shortclassname":"DiagnosisBeanLoader", "method":"public DiagnosisBean loadSingle(ResultSet rs) throws SQLException {\r\n    DiagnosisBean diag = new DiagnosisBean(rs.getString(\"Code\"), rs.getString(\"Description\"), rs.getString(\"Chronic\"), rs.getString(\"URL\"));\r\n    // DiagnosisBean diag = new DiagnosisBean(rs.getString(\"Code\"), rs.getString(\"Description\"), rs.getString(\"Chronic\"));\r\n    if (loadOVDiagnosisID) {\r\n        diag.setOvDiagnosisID(rs.getInt(\"ID\"));\r\n        diag.setVisitID(rs.getLong(\"VisitID\"));\r\n    }\r\n    return diag;\r\n}"},
 {"id":2345, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.-init-()", "classid":297, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader", "shortclassname":"DrugInteractionBeanLoader", "method":"public DrugInteractionBeanLoader() {\r\n}"},
 {"id":2346, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadList(java.sql.ResultSet)", "classid":297, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader", "shortclassname":"DrugInteractionBeanLoader", "method":"public List<DrugInteractionBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<DrugInteractionBean> list = new ArrayList<DrugInteractionBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2347, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "classid":297, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader", "shortclassname":"DrugInteractionBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, DrugInteractionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2348, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadSingle(java.sql.ResultSet)", "classid":297, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader", "shortclassname":"DrugInteractionBeanLoader", "method":"public DrugInteractionBean loadSingle(ResultSet rs) throws SQLException {\r\n    // MedicationBean med = new MedicationBean();\r\n    DrugInteractionBean drugIt = new DrugInteractionBean();\r\n    drugIt.setDescription(rs.getString(\"Description\"));\r\n    drugIt.setFirstDrug(rs.getString(\"FirstDrug\"));\r\n    drugIt.setSecondDrug(rs.getString(\"SecondDrug\"));\r\n    return drugIt;\r\n}"},
 {"id":2349, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.-init-()", "classid":298, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader", "shortclassname":"DrugReactionOverrideBeanLoader", "method":"public DrugReactionOverrideBeanLoader() {\r\n}"},
 {"id":2350, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadList(java.sql.ResultSet)", "classid":298, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader", "shortclassname":"DrugReactionOverrideBeanLoader", "method":"public List<OverrideReasonBean> loadList(ResultSet rs) throws SQLException {\r\n    List<OverrideReasonBean> list = new ArrayList<OverrideReasonBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2351, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":298, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader", "shortclassname":"DrugReactionOverrideBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    return null;\r\n}"},
 {"id":2352, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadSingle(java.sql.ResultSet)", "classid":298, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader", "shortclassname":"DrugReactionOverrideBeanLoader", "method":"public OverrideReasonBean loadSingle(ResultSet rs) throws SQLException {\r\n    OverrideReasonBean orc = new OverrideReasonBean(rs.getString(\"Code\"));\r\n    orc.setDescription(rs.getString(\"Description\"));\r\n    return orc;\r\n}"},
 {"id":2353, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.-init-()", "classid":299, "classname":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader", "shortclassname":"EmailBeanLoader", "method":"EmailBeanLoader() {\r\n}"},
 {"id":2354, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadList(java.sql.ResultSet)", "classid":299, "classname":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader", "shortclassname":"EmailBeanLoader", "method":"public List<Email> loadList(ResultSet rs) throws SQLException {\r\n    List<Email> list = new ArrayList<Email>();\r\n    while (rs.next())\r\n        list.add(loadSingle(rs));\r\n\r\n    return list;\r\n}"},
 {"id":2355, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.Email)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.Email)", "classid":299, "classname":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader", "shortclassname":"EmailBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, Email email) throws SQLException {\r\n    ps.setString(1, email.getToListStr());\r\n    ps.setString(2, email.getFrom());\r\n    ps.setString(3, email.getSubject());\r\n    ps.setString(4, email.getBody());\r\n    return ps;\r\n}"},
 {"id":2356, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadSingle(java.sql.ResultSet)", "classid":299, "classname":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader", "shortclassname":"EmailBeanLoader", "method":"public Email loadSingle(ResultSet rs) throws SQLException {\r\n    Email email = new Email();\r\n    email.setFrom(rs.getString(\"FromAddr\"));\r\n    email.setToList(Arrays.asList(rs.getString(\"ToAddr\").split(\",\")));\r\n    email.setBody(rs.getString(\"Body\"));\r\n    email.setSubject(rs.getString(\"Subject\"));\r\n    email.setTimeAdded(rs.getTimestamp(\"AddedDate\"));\r\n    return email;\r\n}"},
 {"id":2357, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.-init-(java.lang.String)", "classid":300, "classname":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader", "shortclassname":"FamilyBeanLoader", "method":"public FamilyBeanLoader(String relation) {\r\n    this.relation = relation;\r\n}"},
 {"id":2358, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadList(java.sql.ResultSet)", "classid":300, "classname":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader", "shortclassname":"FamilyBeanLoader", "method":"public List<FamilyMemberBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<FamilyMemberBean> list = new ArrayList<FamilyMemberBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2359, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":300, "classname":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader", "shortclassname":"FamilyBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, FamilyMemberBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2360, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadSingle(java.sql.ResultSet)", "classid":300, "classname":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader", "shortclassname":"FamilyBeanLoader", "method":"public FamilyMemberBean loadSingle(ResultSet rs) throws SQLException {\r\n    FamilyMemberBean fam = new FamilyMemberBean();\r\n    fam.setRelation(relation);\r\n    fam.setFirstName(rs.getString(\"FirstName\"));\r\n    fam.setLastName(rs.getString(\"LastName\"));\r\n    fam.setMid(rs.getInt(\"MID\"));\r\n    return fam;\r\n}"},
 {"id":2361, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.-init-()", "classid":301, "classname":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader", "shortclassname":"HealthRecordsBeanLoader", "method":"HealthRecordsBeanLoader() {\r\n}"},
 {"id":2362, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadList(java.sql.ResultSet)", "classid":301, "classname":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader", "shortclassname":"HealthRecordsBeanLoader", "method":"public List<HealthRecord> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<HealthRecord> list = new ArrayList<HealthRecord>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2363, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HealthRecord)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HealthRecord)", "classid":301, "classname":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader", "shortclassname":"HealthRecordsBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, HealthRecord bean) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), bean.getPatientID());\r\n    ps.setDouble((i++), bean.getHeight());\r\n    ps.setDouble((i++), bean.getWeight());\r\n    ps.setInt((i++), (bean.isSmoker() ? 1 : 0));\r\n    ps.setInt((i++), bean.getSmokingStatus());\r\n    ps.setInt((i++), bean.getBloodPressureN());\r\n    ps.setInt((i++), bean.getBloodPressureD());\r\n    ps.setInt((i++), bean.getCholesterolHDL());\r\n    ps.setInt((i++), bean.getCholesterolLDL());\r\n    ps.setInt((i++), bean.getCholesterolTri());\r\n    ps.setLong((i++), bean.getPersonnelID());\r\n    return ps;\r\n}"},
 {"id":2364, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadSingle(java.sql.ResultSet)", "classid":301, "classname":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader", "shortclassname":"HealthRecordsBeanLoader", "method":"public HealthRecord loadSingle(ResultSet rs) throws SQLException {\r\n    HealthRecord hr = new HealthRecord();\r\n    hr.setBloodPressureN(rs.getInt(\"BloodPressureN\"));\r\n    hr.setBloodPressureD(rs.getInt(\"BloodPressureD\"));\r\n    hr.setCholesterolHDL(rs.getInt(\"CholesterolHDL\"));\r\n    hr.setCholesterolLDL(rs.getInt(\"CholesterolLDL\"));\r\n    hr.setCholesterolTri(rs.getInt(\"CholesterolTri\"));\r\n    hr.setDateRecorded(rs.getTimestamp(\"AsOfDate\"));\r\n    hr.setSmoker(rs.getInt(\"SmokingStatus\"));\r\n    hr.setHeight(rs.getDouble(\"Height\"));\r\n    hr.setWeight(rs.getDouble(\"Weight\"));\r\n    hr.setPersonnelID(rs.getLong(\"HCPID\"));\r\n    hr.setPatientID(rs.getLong(\"PatientID\"));\r\n    return hr;\r\n}"},
 {"id":2365, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.-init-()", "classid":302, "classname":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader", "shortclassname":"HospitalBeanLoader", "method":"HospitalBeanLoader() {\r\n}"},
 {"id":2366, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadList(java.sql.ResultSet)", "classid":302, "classname":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader", "shortclassname":"HospitalBeanLoader", "method":"public List<HospitalBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<HospitalBean> list = new ArrayList<HospitalBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2367, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HospitalBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HospitalBean)", "classid":302, "classname":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader", "shortclassname":"HospitalBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, HospitalBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2368, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadSingle(java.sql.ResultSet)", "classid":302, "classname":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader", "shortclassname":"HospitalBeanLoader", "method":"public HospitalBean loadSingle(ResultSet rs) throws SQLException {\r\n    HospitalBean hosp = new HospitalBean(rs.getString(\"HospitalID\"), rs.getString(\"HospitalName\"), rs.getString(\"Address\"), rs.getString(\"City\"), rs.getString(\"State\"), rs.getString(\"Zip\"));\r\n    return hosp;\r\n}"},
 {"id":2369, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.-init-()", "classid":303, "classname":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader", "shortclassname":"LOINCBeanLoader", "method":"LOINCBeanLoader() {\r\n}"},
 {"id":2370, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadList(java.sql.ResultSet)", "classid":303, "classname":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader", "shortclassname":"LOINCBeanLoader", "method":"public List<LOINCbean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<LOINCbean> list = new ArrayList<LOINCbean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2371, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LOINCbean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LOINCbean)", "classid":303, "classname":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader", "shortclassname":"LOINCBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, LOINCbean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2372, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadSingle(java.sql.ResultSet)", "classid":303, "classname":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader", "shortclassname":"LOINCBeanLoader", "method":"public LOINCbean loadSingle(ResultSet rs) throws SQLException {\r\n    LOINCbean LOINC = new LOINCbean();\r\n    LOINC.setLabProcedureCode(rs.getString(\"LaboratoryProcedureCode\"));\r\n    LOINC.setComponent(rs.getString(\"Component\"));\r\n    LOINC.setKindOfProperty(rs.getString(\"KindOfProperty\"));\r\n    LOINC.setTimeAspect(rs.getString(\"TimeAspect\"));\r\n    LOINC.setSystem(rs.getString(\"System\"));\r\n    LOINC.setScaleType(rs.getString(\"ScaleType\"));\r\n    LOINC.setMethodType(rs.getString(\"MethodType\"));\r\n    return LOINC;\r\n}"},
 {"id":2373, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.-init-()", "classid":304, "classname":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader", "shortclassname":"LabProcedureBeanLoader", "method":"LabProcedureBeanLoader() {\r\n}"},
 {"id":2374, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadList(java.sql.ResultSet)", "classid":304, "classname":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader", "shortclassname":"LabProcedureBeanLoader", "method":"public List<LabProcedureBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<LabProcedureBean> list = new ArrayList<LabProcedureBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2375, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":304, "classname":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader", "shortclassname":"LabProcedureBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, LabProcedureBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2376, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadSingle(java.sql.ResultSet)", "classid":304, "classname":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader", "shortclassname":"LabProcedureBeanLoader", "method":"public LabProcedureBean loadSingle(ResultSet rs) throws SQLException {\r\n    LabProcedureBean LabProcedure = new LabProcedureBean();\r\n    LabProcedure.setProcedureID(rs.getLong(\"LaboratoryProcedureID\"));\r\n    LabProcedure.setPid(rs.getLong(\"PatientMID\"));\r\n    LabProcedure.setLoinc(rs.getString(\"LaboratoryProcedureCode\"));\r\n    LabProcedure.setStatus(rs.getString(\"Status\"));\r\n    LabProcedure.setCommentary(rs.getString(\"Commentary\"));\r\n    LabProcedure.setResults(rs.getString(\"Results\"));\r\n    LabProcedure.setOvID(rs.getLong(\"OfficeVisitID\"));\r\n    LabProcedure.setTimestamp(rs.getTimestamp(\"UpdatedDate\"));\r\n    LabProcedure.setRights(rs.getString(\"Rights\"));\r\n    LabProcedure.setLTID(rs.getLong(\"LabTechID\"));\r\n    LabProcedure.setPriorityCode(rs.getInt(\"PriorityCode\"));\r\n    LabProcedure.setViewedByPatient(rs.getBoolean(\"ViewedByPatient\"));// must be set after status\r\n\r\n    LabProcedure.setNumericalResult(rs.getString(\"NumericalResults\"));\r\n    LabProcedure.setNumericalResultUnit(rs.getString(\"NumericalResultsUnit\"));\r\n    LabProcedure.setUpperBound(rs.getString(\"UpperBound\"));\r\n    LabProcedure.setLowerBound(rs.getString(\"LowerBound\"));\r\n    return LabProcedure;\r\n}"},
 {"id":2377, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.-init-()", "classid":305, "classname":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader", "shortclassname":"MedicationBeanLoader", "method":"public MedicationBeanLoader() {\r\n}"},
 {"id":2378, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadList(java.sql.ResultSet)", "classid":305, "classname":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader", "shortclassname":"MedicationBeanLoader", "method":"public List<MedicationBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<MedicationBean> list = new ArrayList<MedicationBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2379, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":305, "classname":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader", "shortclassname":"MedicationBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, MedicationBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2380, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadSingle(java.sql.ResultSet)", "classid":305, "classname":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader", "shortclassname":"MedicationBeanLoader", "method":"public MedicationBean loadSingle(ResultSet rs) throws SQLException {\r\n    // MedicationBean med = new MedicationBean();\r\n    MedicationBean med = new MedicationBean(rs.getString(\"Code\"));\r\n    med.setDescription(rs.getString(\"Description\"));\r\n    return med;\r\n}"},
 {"id":2381, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.-init-()", "classid":306, "classname":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader", "shortclassname":"MessageBeanLoader", "method":"MessageBeanLoader() {\r\n}"},
 {"id":2382, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadList(java.sql.ResultSet)", "classid":306, "classname":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader", "shortclassname":"MessageBeanLoader", "method":"public List<MessageBean> loadList(ResultSet rs) throws SQLException {\r\n    List<MessageBean> list = new ArrayList<MessageBean>();\r\n    while (rs.next())\r\n        list.add(loadSingle(rs));\r\n\r\n    return list;\r\n}"},
 {"id":2383, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MessageBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MessageBean)", "classid":306, "classname":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader", "shortclassname":"MessageBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, MessageBean message) throws SQLException {\r\n    ps.setLong(1, message.getFrom());\r\n    ps.setLong(2, message.getTo());\r\n    ps.setString(3, message.getBody());\r\n    ps.setString(4, message.getSubject());\r\n    ps.setInt(5, message.getRead());\r\n    ps.setLong(6, message.getParentMessageId());\r\n    ps.setLong(7, message.getOriginalMessageId());\r\n    return ps;\r\n}"},
 {"id":2384, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadSingle(java.sql.ResultSet)", "classid":306, "classname":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader", "shortclassname":"MessageBeanLoader", "method":"public MessageBean loadSingle(ResultSet rs) throws SQLException {\r\n    MessageBean message = new MessageBean();\r\n    message.setMessageId(rs.getLong(\"message_id\"));\r\n    message.setFrom(rs.getLong(\"from_id\"));\r\n    message.setTo(rs.getLong(\"to_id\"));\r\n    message.setSubject(rs.getString(\"subject\"));\r\n    message.setBody(rs.getString(\"message\"));\r\n    message.setSentDate(rs.getTimestamp(\"sent_date\"));\r\n    message.setRead(rs.getInt(\"been_read\"));\r\n    message.setParentMessageId(rs.getLong(\"parent_msg_id\"));\r\n    message.setOriginalMessageId(rs.getLong(\"original_msg_id\"));\r\n    return message;\r\n}"},
 {"id":2385, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.-init-()", "classid":307, "classname":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader", "shortclassname":"OfficeVisitLoader", "method":"OfficeVisitLoader() {\r\n}"},
 {"id":2386, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadList(java.sql.ResultSet)", "classid":307, "classname":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader", "shortclassname":"OfficeVisitLoader", "method":"public List<OfficeVisitBean> loadList(ResultSet rs) throws SQLException {\r\n    List<OfficeVisitBean> list = new ArrayList<OfficeVisitBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2387, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "classid":307, "classname":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader", "shortclassname":"OfficeVisitLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, OfficeVisitBean p) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2388, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadSingle(java.sql.ResultSet)", "classid":307, "classname":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader", "shortclassname":"OfficeVisitLoader", "method":"public OfficeVisitBean loadSingle(ResultSet rs) throws SQLException {\r\n    OfficeVisitBean ov = new OfficeVisitBean(rs.getInt(\"ID\"));\r\n    ov.setHcpID(rs.getLong(\"HCPID\"));\r\n    ov.setNotes(rs.getString(\"Notes\"));\r\n    ov.setPatientID(rs.getLong(\"PatientID\"));\r\n    ov.setHospitalID(rs.getString(\"HospitalID\"));\r\n    ov.setVisitDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"VisitDate\").getTime())));\r\n    ov.setERIncident(rs.getBoolean(\"IsERIncident\"));\r\n    return ov;\r\n}"},
 {"id":2389, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.-init-()", "classid":308, "classname":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader", "shortclassname":"OperationalProfileLoader", "method":"OperationalProfileLoader() {\r\n}"},
 {"id":2390, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadList(java.sql.ResultSet)", "classid":308, "classname":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader", "shortclassname":"OperationalProfileLoader", "method":"public List<OperationalProfile> loadList(ResultSet rs) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2391, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OperationalProfile)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OperationalProfile)", "classid":308, "classname":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader", "shortclassname":"OperationalProfileLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, OperationalProfile bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2392, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadSingle(java.sql.ResultSet)", "classid":308, "classname":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader", "shortclassname":"OperationalProfileLoader", "method":"public OperationalProfile loadSingle(ResultSet rs) throws SQLException {\r\n    OperationalProfile op = new OperationalProfile();\r\n    int grandTotal = 0;\r\n    int grandPatient = 0;\r\n    int grandPersonnel = 0;\r\n    while (rs.next()) {\r\n        TransactionType type = TransactionType.parse(rs.getInt(\"TransactionCode\"));\r\n        int totalCount = rs.getInt(\"TotalCount\");\r\n        int patientCount = rs.getInt(\"PatientCount\");\r\n        int personnelCount = rs.getInt(\"PersonnelCount\");\r\n        op.getTotalCount().put(type, totalCount);\r\n        op.getPatientCount().put(type, patientCount);\r\n        op.getPersonnelCount().put(type, personnelCount);\r\n        grandTotal += totalCount;\r\n        grandPatient += patientCount;\r\n        grandPersonnel += personnelCount;\r\n    } \r\n    op.setNumTotalTransactions(grandTotal);\r\n    op.setNumPatientTransactions(grandPatient);\r\n    op.setNumPersonnelTransactions(grandPersonnel);\r\n    return op;\r\n}"},
 {"id":2393, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.-init-()", "classid":309, "classname":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader", "shortclassname":"OverrideReasonBeanLoader", "method":"public OverrideReasonBeanLoader() {\r\n}"},
 {"id":2394, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadList(java.sql.ResultSet)", "classid":309, "classname":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader", "shortclassname":"OverrideReasonBeanLoader", "method":"public List<OverrideReasonBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<OverrideReasonBean> list = new ArrayList<OverrideReasonBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2395, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":309, "classname":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader", "shortclassname":"OverrideReasonBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2396, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadSingle(java.sql.ResultSet)", "classid":309, "classname":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader", "shortclassname":"OverrideReasonBeanLoader", "method":"public OverrideReasonBean loadSingle(ResultSet rs) throws SQLException {\r\n    OverrideReasonBean reason = new OverrideReasonBean();\r\n    reason.setORCode(rs.getString(\"OverrideCode\"));\r\n    return reason;\r\n}"},
 {"id":2397, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.-init-()", "classid":310, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader", "shortclassname":"PatientInstructionsBeanLoader", "method":"/**\r\n *\r\n */\r\npublic PatientInstructionsBeanLoader() {\r\n}"},
 {"id":2398, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadList(java.sql.ResultSet)", "classid":310, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader", "shortclassname":"PatientInstructionsBeanLoader", "method":"/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadList(java.sql.ResultSet)\n */\r\npublic List<PatientInstructionsBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<PatientInstructionsBean> list = new ArrayList<PatientInstructionsBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2399, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "classid":310, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader", "shortclassname":"PatientInstructionsBeanLoader", "method":"/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadParameters(java.sql.PreparedStatement, java.lang.Object)\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, PatientInstructionsBean bean) throws SQLException {\r\n    ps.setLong(1, bean.getVisitID());\r\n    ps.setTimestamp(2, new Timestamp(bean.getModified().getTime()));\r\n    ps.setString(3, bean.getName());\r\n    ps.setString(4, bean.getUrl());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}"},
 {"id":2400, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadSingle(java.sql.ResultSet)", "classid":310, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader", "shortclassname":"PatientInstructionsBeanLoader", "method":"/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadSingle(java.sql.ResultSet)\n */\r\npublic PatientInstructionsBean loadSingle(ResultSet rs) throws SQLException {\r\n    PatientInstructionsBean bean = new PatientInstructionsBean();\r\n    bean.setName(rs.getString(\"Name\"));\r\n    bean.setComment(rs.getString(\"Comment\"));\r\n    bean.setUrl(rs.getString(\"URL\"));\r\n    bean.setModified(new Date(rs.getTimestamp(\"Modified\").getTime()));\r\n    bean.setId(rs.getLong(\"id\"));\r\n    // bean.setHcpid(rs.getLong(\"hcpid\"));\r\n    // bean.setPid(rs.getLong(\"pid\"));\r\n    bean.setVisitID(rs.getLong(\"visitID\"));\r\n    return bean;\r\n}"},
 {"id":2401, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.-init-()", "classid":311, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader", "shortclassname":"PatientLoader", "method":"PatientLoader() {\r\n}"},
 {"id":2402, "methodname":"loadCommon(java.sql.ResultSet,edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"loadCommon", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadCommon", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadCommon(java.sql.ResultSet,edu.ncsu.csc.itrust.beans.PatientBean)", "classid":311, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader", "shortclassname":"PatientLoader", "method":"private void loadCommon(ResultSet rs, PatientBean p) throws SQLException {\r\n    p.setMID(rs.getInt(\"MID\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setLastName(rs.getString(\"LastName\"));\r\n    Date dateOfBirth = rs.getDate(\"DateOfBirth\");\r\n    if (dateOfBirth != null) {\r\n        p.setDateOfBirthStr(DATE_FORMAT.format(dateOfBirth));\r\n    }\r\n    Date dateOfDeath = rs.getDate(\"DateOfDeath\");\r\n    if (dateOfDeath != null) {\r\n        p.setDateOfDeathStr(DATE_FORMAT.format(dateOfDeath));\r\n    }\r\n    p.setCauseOfDeath(rs.getString(\"CauseOfDeath\"));\r\n    p.setEmail(rs.getString(\"Email\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"City\"));\r\n    p.setState(rs.getString(\"State\"));\r\n    p.setZip(rs.getString(\"Zip\"));\r\n    p.setPhone(rs.getString(\"phone\"));\r\n    p.setEmergencyName(rs.getString(\"eName\"));\r\n    p.setEmergencyPhone(rs.getString(\"ePhone\"));\r\n    p.setIcName(rs.getString(\"icName\"));\r\n    p.setIcAddress1(rs.getString(\"icAddress1\"));\r\n    p.setIcAddress2(rs.getString(\"icAddress2\"));\r\n    p.setIcCity(rs.getString(\"icCity\"));\r\n    p.setIcState(rs.getString(\"icState\"));\r\n    p.setIcZip(rs.getString(\"icZip\"));\r\n    p.setIcPhone(rs.getString(\"icPhone\"));\r\n    p.setIcID(rs.getString(\"icID\"));\r\n    p.setMotherMID(rs.getString(\"MotherMID\"));\r\n    p.setFatherMID(rs.getString(\"FatherMID\"));\r\n    p.setBloodTypeStr(rs.getString(\"BloodType\"));\r\n    p.setEthnicityStr(rs.getString(\"Ethnicity\"));\r\n    p.setGenderStr(rs.getString(\"Gender\"));\r\n    p.setTopicalNotes(rs.getString(\"TopicalNotes\"));\r\n    p.setCreditCardType(rs.getString(\"CreditCardType\"));\r\n    p.setCreditCardNumber(rs.getString(\"CreditCardNumber\"));\r\n    p.setDirectionsToHome(rs.getString(\"DirectionsToHome\"));\r\n    p.setReligion(rs.getString(\"Religion\"));\r\n    p.setLanguage(rs.getString(\"Language\"));\r\n    p.setSpiritualPractices(rs.getString(\"SpiritualPractices\"));\r\n    p.setAlternateName(rs.getString(\"AlternateName\"));\r\n    Date dateOfDeactivation = rs.getDate(\"DateOfDeactivation\");\r\n    if (dateOfDeactivation != null) {\r\n        p.setDateOfDeactivationStr(DATE_FORMAT.format(dateOfDeactivation));\r\n    }\r\n}"},
 {"id":2403, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadList(java.sql.ResultSet)", "classid":311, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader", "shortclassname":"PatientLoader", "method":"public List<PatientBean> loadList(ResultSet rs) throws SQLException {\r\n    List<PatientBean> list = new ArrayList<PatientBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2404, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientBean)", "classid":311, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader", "shortclassname":"PatientLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, PatientBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getEmail());\r\n    // ps.setString(i++, p.getSecurityQuestion());\r\n    // ps.setString(i++, p.getSecurityAnswer());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getEmergencyName());\r\n    ps.setString((i++), p.getEmergencyPhone());\r\n    ps.setString((i++), p.getIcName());\r\n    ps.setString((i++), p.getIcAddress1());\r\n    ps.setString((i++), p.getIcAddress2());\r\n    ps.setString((i++), p.getIcCity());\r\n    ps.setString((i++), p.getIcState());\r\n    ps.setString((i++), p.getIcZip());\r\n    ps.setString((i++), p.getIcPhone());\r\n    ps.setString((i++), p.getIcID());\r\n    Date date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfBirthStr()).getTime());\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n    }\r\n    ps.setDate((i++), date);\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeathStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeathStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    ps.setString((i++), p.getCauseOfDeath());\r\n    ps.setString((i++), p.getMotherMID());\r\n    ps.setString((i++), p.getFatherMID());\r\n    ps.setString((i++), p.getBloodType().getName());\r\n    ps.setString((i++), p.getEthnicity().getName());\r\n    ps.setString((i++), p.getGender().getName());\r\n    ps.setString((i++), p.getTopicalNotes());\r\n    ps.setString((i++), p.getCreditCardType());\r\n    ps.setString((i++), p.getCreditCardNumber());\r\n    ps.setString((i++), p.getDirectionsToHome());\r\n    ps.setString((i++), p.getReligion());\r\n    ps.setString((i++), p.getLanguage());\r\n    ps.setString((i++), p.getSpiritualPractices());\r\n    ps.setString((i++), p.getAlternateName());\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeactivationStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    } catch (NullPointerException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    return ps;\r\n}"},
 {"id":2405, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadSingle(java.sql.ResultSet)", "classid":311, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader", "shortclassname":"PatientLoader", "method":"public PatientBean loadSingle(ResultSet rs) throws SQLException {\r\n    PatientBean p = new PatientBean();\r\n    loadCommon(rs, p);\r\n    return p;\r\n}"},
 {"id":2406, "methodname":"loadSingleHistory(java.sql.ResultSet)", "methodnamerefined":"loadSingleHistory", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadSingleHistory", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadSingleHistory(java.sql.ResultSet)", "classid":311, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader", "shortclassname":"PatientLoader", "method":"public PatientHistoryBean loadSingleHistory(ResultSet rs) throws SQLException {\r\n    PatientHistoryBean p = new PatientHistoryBean();\r\n    p.setChangeMID(rs.getLong(\"changeMID\"));\r\n    Date changeDate = rs.getDate(\"changeDate\");\r\n    if (changeDate != null) {\r\n        p.setChangeDateStr(DATE_FORMAT.format(changeDate));\r\n    }\r\n    loadCommon(rs, p);\r\n    return p;\r\n}"},
 {"id":2407, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.-init-()", "classid":312, "classname":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader", "shortclassname":"PersonnelLoader", "method":"PersonnelLoader() {\r\n}"},
 {"id":2408, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadList(java.sql.ResultSet)", "classid":312, "classname":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader", "shortclassname":"PersonnelLoader", "method":"public List<PersonnelBean> loadList(ResultSet rs) throws SQLException {\r\n    List<PersonnelBean> list = new ArrayList<PersonnelBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2409, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":312, "classname":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader", "shortclassname":"PersonnelLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, PersonnelBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), p.getAMID());\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getSpecialty());\r\n    ps.setString((i++), p.getEmail());\r\n    return ps;\r\n}"},
 {"id":2410, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadSingle(java.sql.ResultSet)", "classid":312, "classname":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader", "shortclassname":"PersonnelLoader", "method":"public PersonnelBean loadSingle(ResultSet rs) throws SQLException {\r\n    PersonnelBean p = new PersonnelBean();\r\n    p.setMID(rs.getLong(\"MID\"));\r\n    p.setAMID(rs.getLong(\"amid\"));\r\n    p.setRoleString(rs.getString(\"role\"));\r\n    p.setLastName(rs.getString(\"lastName\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setPhone(rs.getString(\"phone\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"city\"));\r\n    p.setState(rs.getString(\"state\"));\r\n    p.setZip(rs.getString(\"zip\"));\r\n    p.setEmail(rs.getString(\"email\"));\r\n    p.setSpecialty(rs.getString(\"specialty\"));\r\n    return p;\r\n}"},
 {"id":2411, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.-init-()", "classid":313, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader", "shortclassname":"PrescriptionBeanLoader", "method":"public PrescriptionBeanLoader() {\r\n    medLoader = new MedicationBeanLoader();\r\n}"},
 {"id":2412, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadList(java.sql.ResultSet)", "classid":313, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader", "shortclassname":"PrescriptionBeanLoader", "method":"public List<PrescriptionBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<PrescriptionBean> list = new ArrayList<PrescriptionBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2413, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":313, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader", "shortclassname":"PrescriptionBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionBean pres) throws SQLException {\r\n    ps.setLong(1, pres.getVisitID());\r\n    ps.setString(2, pres.getMedication().getNDCode());\r\n    ps.setDate(3, new Date(pres.getStartDate().getTime()));\r\n    ps.setDate(4, new Date(pres.getEndDate().getTime()));\r\n    ps.setInt(5, pres.getDosage());\r\n    ps.setString(6, pres.getInstructions());\r\n    ps.setString(7, pres.getOverrideReasonOther());\r\n    return ps;\r\n}"},
 {"id":2414, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadSingle(java.sql.ResultSet)", "classid":313, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader", "shortclassname":"PrescriptionBeanLoader", "method":"public PrescriptionBean loadSingle(ResultSet rs) throws SQLException {\r\n    PrescriptionBean pres = new PrescriptionBean();\r\n    pres.setId(rs.getLong(\"ID\"));\r\n    pres.setVisitID(rs.getInt(\"VisitID\"));\r\n    pres.setStartDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"StartDate\").getTime())));\r\n    pres.setEndDateStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(rs.getDate(\"EndDate\").getTime())));\r\n    pres.setDosage(rs.getInt(\"Dosage\"));\r\n    pres.setInstructions(rs.getString(\"Instructions\"));\r\n    pres.setMedication(medLoader.loadSingle(rs));\r\n    pres.setOverrideReasonOther(rs.getString(\"OverrideOther\"));\r\n    return pres;\r\n}"},
 {"id":2415, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.-init-()", "classid":314, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader", "shortclassname":"PrescriptionReportBeanLoader", "method":"public PrescriptionReportBeanLoader() {\r\n    ovLoader = new OfficeVisitLoader();\r\n    presLoader = new PrescriptionBeanLoader();\r\n}"},
 {"id":2416, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadList(java.sql.ResultSet)", "classid":314, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader", "shortclassname":"PrescriptionReportBeanLoader", "method":"public List<PrescriptionReportBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<PrescriptionReportBean> list = new ArrayList<PrescriptionReportBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2417, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionReportBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionReportBean)", "classid":314, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader", "shortclassname":"PrescriptionReportBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionReportBean pres) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2418, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadSingle(java.sql.ResultSet)", "classid":314, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader", "shortclassname":"PrescriptionReportBeanLoader", "method":"public PrescriptionReportBean loadSingle(ResultSet rs) throws SQLException {\r\n    PrescriptionReportBean pres = new PrescriptionReportBean();\r\n    pres.setOfficeVisit(ovLoader.loadSingle(rs));\r\n    pres.setPrescription(presLoader.loadSingle(rs));\r\n    return pres;\r\n}"},
 {"id":2419, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.-init-()", "classid":315, "classname":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader", "shortclassname":"ProcedureBeanLoader", "method":"public ProcedureBeanLoader() {\r\n    this.loadOVProcedureID = false;\r\n}"},
 {"id":2420, "methodname":"-init-(boolean)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.-init-(boolean)", "classid":315, "classname":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader", "shortclassname":"ProcedureBeanLoader", "method":"public ProcedureBeanLoader(boolean loadOVProcedureID) {\r\n    this.loadOVProcedureID = loadOVProcedureID;\r\n}"},
 {"id":2421, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadList(java.sql.ResultSet)", "classid":315, "classname":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader", "shortclassname":"ProcedureBeanLoader", "method":"public List<ProcedureBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<ProcedureBean> list = new ArrayList<ProcedureBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2422, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":315, "classname":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader", "shortclassname":"ProcedureBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, ProcedureBean bean) throws SQLException {\r\n    ps.setString(1, bean.getDescription());\r\n    return ps;\r\n}"},
 {"id":2423, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadSingle(java.sql.ResultSet)", "classid":315, "classname":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader", "shortclassname":"ProcedureBeanLoader", "method":"public ProcedureBean loadSingle(ResultSet rs) throws SQLException {\r\n    ProcedureBean procedure = new ProcedureBean(rs.getString(\"Code\"));\r\n    procedure.setDescription(rs.getString(\"Description\"));\r\n    procedure.setAttribute(rs.getString(\"Attribute\"));\r\n    if (loadOVProcedureID) {\r\n        procedure.setOvProcedureID(rs.getLong(\"ID\"));\r\n        procedure.setDate(rs.getDate(\"visitDate\"));\r\n    }\r\n    return procedure;\r\n}"},
 {"id":2424, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.-init-()", "classid":316, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader", "shortclassname":"ReferralBeanLoader", "method":"public ReferralBeanLoader() {\r\n}"},
 {"id":2425, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadList(java.sql.ResultSet)", "classid":316, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader", "shortclassname":"ReferralBeanLoader", "method":"public List<ReferralBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<ReferralBean> list = new ArrayList<ReferralBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2426, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":316, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader", "shortclassname":"ReferralBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, ReferralBean ref) throws SQLException {\r\n    ps.setLong(1, ref.getPatientID());\r\n    ps.setLong(2, ref.getSenderID());\r\n    ps.setLong(3, ref.getReceiverID());\r\n    ps.setString(4, ref.getReferralDetails());\r\n    ps.setLong(5, ref.getOvid());\r\n    ps.setBoolean(6, ref.isViewedByPatient());\r\n    ps.setBoolean(7, ref.isViewedByHCP());\r\n    ps.setInt(8, ref.getPriority());\r\n    return ps;\r\n}"},
 {"id":2427, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadSingle(java.sql.ResultSet)", "classid":316, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader", "shortclassname":"ReferralBeanLoader", "method":"public ReferralBean loadSingle(ResultSet rs) throws SQLException {\r\n    ReferralBean ref = new ReferralBean();\r\n    // ERIC: fixed to correct for the mysql database bug plaguing java 1.5\r\n    ref.setId(rs.getInt(\"id\"));\r\n    ref.setSenderID(rs.getLong(\"SenderID\"));\r\n    ref.setReceiverID(rs.getLong(\"ReceiverID\"));\r\n    ref.setPatientID(rs.getInt(\"PatientID\"));\r\n    ref.setReferralDetails(rs.getString(\"ReferralDetails\"));\r\n    ref.setOvid(rs.getLong(\"OVID\"));\r\n    ref.setTimeStamp(ReferralBeanLoader.dateFormat.format(rs.getTimestamp(\"TimeStamp\")));\r\n    ref.setViewedByHCP(rs.getBoolean(\"viewed_by_HCP\"));\r\n    ref.setViewedByPatient(rs.getBoolean(\"viewed_by_patient\"));\r\n    ref.setPriority(rs.getInt(\"PriorityCode\"));\r\n    return ref;\r\n}"},
 {"id":2428, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.-init-()", "classid":317, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader", "shortclassname":"RemoteMonitoringDataBeanLoader", "method":"RemoteMonitoringDataBeanLoader() {\r\n}"},
 {"id":2429, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadList(java.sql.ResultSet)", "classid":317, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader", "shortclassname":"RemoteMonitoringDataBeanLoader", "method":"public List<RemoteMonitoringDataBean> loadList(ResultSet rs) throws SQLException {\r\n    List<RemoteMonitoringDataBean> list = new ArrayList<RemoteMonitoringDataBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2430, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)", "classid":317, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader", "shortclassname":"RemoteMonitoringDataBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, RemoteMonitoringDataBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2431, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadSingle(java.sql.ResultSet)", "classid":317, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader", "shortclassname":"RemoteMonitoringDataBeanLoader", "method":"public RemoteMonitoringDataBean loadSingle(ResultSet rs) throws SQLException {\r\n    RemoteMonitoringDataBean d = new RemoteMonitoringDataBean();\r\n    d.setLoggedInMID(rs.getLong(\"PatientID\"));\r\n    d.setSystolicBloodPressure(rs.getInt(\"systolicBloodPressure\"));\r\n    d.setDiastolicBloodPressure(rs.getInt(\"diastolicBloodPressure\"));\r\n    d.setGlucoseLevel(rs.getInt(\"glucoseLevel\"));\r\n    d.setHeight(rs.getFloat(\"height\"));\r\n    d.setWeight(rs.getFloat(\"weight\"));\r\n    d.setPedometerReading(rs.getInt(\"pedometerReading\"));\r\n    d.setTime(rs.getTimestamp(\"timeLogged\"));\r\n    d.setReporterRole(rs.getString(\"ReporterRole\"));\r\n    d.setReporterMID(rs.getLong(\"ReporterID\"));\r\n    return d;\r\n}"},
 {"id":2432, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.-init-()", "classid":318, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader", "shortclassname":"RemoteMonitoringListsBeanLoader", "method":"RemoteMonitoringListsBeanLoader() {\r\n}"},
 {"id":2433, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadList(java.sql.ResultSet)", "classid":318, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader", "shortclassname":"RemoteMonitoringListsBeanLoader", "method":"public List<TelemedicineBean> loadList(ResultSet rs) throws SQLException {\r\n    List<TelemedicineBean> list = new ArrayList<TelemedicineBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2434, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TelemedicineBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TelemedicineBean)", "classid":318, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader", "shortclassname":"RemoteMonitoringListsBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, TelemedicineBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2435, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadSingle(java.sql.ResultSet)", "classid":318, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader", "shortclassname":"RemoteMonitoringListsBeanLoader", "method":"public TelemedicineBean loadSingle(ResultSet rs) throws SQLException {\r\n    TelemedicineBean d = new TelemedicineBean();\r\n    d.setSystolicBloodPressureAllowed(rs.getBoolean(\"SystolicBloodPressure\"));\r\n    d.setDiastolicBloodPressureAllowed(rs.getBoolean(\"DiastolicBloodPressure\"));\r\n    d.setGlucoseLevelAllowed(rs.getBoolean(\"GlucoseLevel\"));\r\n    d.setHeightAllowed(rs.getBoolean(\"Height\"));\r\n    d.setWeightAllowed(rs.getBoolean(\"Weight\"));\r\n    d.setPedometerReadingAllowed(rs.getBoolean(\"PedometerReading\"));\r\n    return d;\r\n}"},
 {"id":2436, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.-init-()", "classid":319, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader", "shortclassname":"ReportRequestBeanLoader", "method":"ReportRequestBeanLoader() {\r\n}"},
 {"id":2437, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadList(java.sql.ResultSet)", "classid":319, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader", "shortclassname":"ReportRequestBeanLoader", "method":"public List<ReportRequestBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<ReportRequestBean> list = new ArrayList<ReportRequestBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2438, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReportRequestBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReportRequestBean)", "classid":319, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader", "shortclassname":"ReportRequestBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, ReportRequestBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2439, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadSingle(java.sql.ResultSet)", "classid":319, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader", "shortclassname":"ReportRequestBeanLoader", "method":"public ReportRequestBean loadSingle(ResultSet rs) throws SQLException {\r\n    ReportRequestBean b = new ReportRequestBean();\r\n    b.setID(rs.getLong(\"ID\"));\r\n    b.setRequesterMID(rs.getLong(\"RequesterMID\"));\r\n    b.setPatientMID(rs.getLong(\"PatientMID\"));\r\n    b.setRequestedDate(rs.getTimestamp(\"RequestedDate\"));\r\n    b.setViewedDate(rs.getTimestamp(\"ViewedDate\"));\r\n    b.setStatus(rs.getString(\"Status\"));\r\n    return b;\r\n}"},
 {"id":2440, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.-init-()", "classid":320, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader", "shortclassname":"SurveyLoader", "method":"SurveyLoader() {\r\n}"},
 {"id":2441, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadList(java.sql.ResultSet)", "classid":320, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader", "shortclassname":"SurveyLoader", "method":"public List<SurveyBean> loadList(ResultSet rs) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2442, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyBean)", "classid":320, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader", "shortclassname":"SurveyLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, SurveyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2443, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadSingle(java.sql.ResultSet)", "classid":320, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader", "shortclassname":"SurveyLoader", "method":"public SurveyBean loadSingle(ResultSet rs) throws SQLException {\r\n    SurveyBean survey = new SurveyBean();\r\n    survey.setVisitID(rs.getLong(\"VisitID\"));\r\n    survey.setSurveyDate(rs.getTimestamp(\"SurveyDate\"));\r\n    survey.setExamRoomMinutes(rs.getInt(\"ExamRoomMinutes\"));\r\n    survey.setWaitingRoomMinutes(rs.getInt(\"WaitingRoomMinutes\"));\r\n    survey.setTreatmentSatisfaction(rs.getInt(\"TreatmentSatisfaction\"));\r\n    survey.setVisitSatisfaction(rs.getInt(\"VisitSatisfaction\"));\r\n    return survey;\r\n}"},
 {"id":2444, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.-init-()", "classid":321, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader", "shortclassname":"SurveyResultBeanLoader", "method":"SurveyResultBeanLoader() {\r\n}"},
 {"id":2445, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadList(java.sql.ResultSet)", "classid":321, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader", "shortclassname":"SurveyResultBeanLoader", "method":"public List<SurveyResultBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<SurveyResultBean> list = new ArrayList<SurveyResultBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2446, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyResultBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyResultBean)", "classid":321, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader", "shortclassname":"SurveyResultBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, SurveyResultBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2447, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadSingle(java.sql.ResultSet)", "classid":321, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader", "shortclassname":"SurveyResultBeanLoader", "method":"public SurveyResultBean loadSingle(ResultSet rs) throws SQLException {\r\n    SurveyResultBean surveyResult = new SurveyResultBean();\r\n    surveyResult.setHCPMID(rs.getLong(\"mid\"));\r\n    surveyResult.setAvgExamRoomMinutes(rs.getFloat(\"AvgExamRoomMinutes\"));\r\n    surveyResult.setAvgTreatmentSatisfaction(rs.getFloat(\"AvgTreatmentSatisfation\"));\r\n    surveyResult.setAvgVisitSatisfaction(rs.getFloat(\"AvgVisitSatisfaction\"));\r\n    surveyResult.setAvgWaitingRoomMinutes(rs.getFloat(\"AvgWaitingRoomMinutes\"));\r\n    surveyResult.setHCPaddress1(rs.getString(\"address1\"));\r\n    surveyResult.setHCPaddress2(rs.getString(\"address2\"));\r\n    surveyResult.setHCPcity(rs.getString(\"city\"));\r\n    surveyResult.setHCPstate(rs.getString(\"state\"));\r\n    surveyResult.setHCPzip(rs.getString(\"zip\"));\r\n    surveyResult.setHCPhospital(rs.getString(\"hospitalID\"));\r\n    surveyResult.setHCPFirstName(rs.getString(\"firstName\"));\r\n    surveyResult.setHCPLastName(rs.getString(\"lastName\"));\r\n    surveyResult.setHCPspecialty(rs.getString(\"specialty\"));\r\n    surveyResult.setPercentSatisfactionResults(rs.getFloat(\"PercentSatisfactionResults\"));\r\n    return surveyResult;\r\n}"},
 {"id":2448, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.-init-()", "classid":322, "classname":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader", "shortclassname":"TransactionBeanLoader", "method":"TransactionBeanLoader() {\r\n}"},
 {"id":2449, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadList(java.sql.ResultSet)", "classid":322, "classname":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader", "shortclassname":"TransactionBeanLoader", "method":"public List<TransactionBean> loadList(ResultSet rs) throws SQLException {\r\n    List<TransactionBean> list = new ArrayList<TransactionBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2450, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TransactionBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TransactionBean)", "classid":322, "classname":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader", "shortclassname":"TransactionBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, TransactionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2451, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadSingle(java.sql.ResultSet)", "classid":322, "classname":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader", "shortclassname":"TransactionBeanLoader", "method":"public TransactionBean loadSingle(ResultSet rs) throws SQLException {\r\n    TransactionBean t = new TransactionBean();\r\n    t.setAddedInfo(rs.getString(\"addedInfo\"));\r\n    t.setLoggedInMID(rs.getLong(\"loggedInMID\"));\r\n    t.setSecondaryMID(rs.getLong(\"secondaryMID\"));\r\n    t.setTimeLogged(rs.getTimestamp(\"timeLogged\"));\r\n    t.setTransactionType(TransactionType.parse(rs.getInt(\"transactionCode\")));\r\n    t.setTransactionID(rs.getLong(\"transactionID\"));\r\n    return t;\r\n}"},
 {"id":2452, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.-init-()", "classid":323, "classname":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader", "shortclassname":"VerboseReferralBeanLoader", "method":"public VerboseReferralBeanLoader() {\r\n}"},
 {"id":2453, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadList(java.sql.ResultSet)", "classid":323, "classname":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader", "shortclassname":"VerboseReferralBeanLoader", "method":"public List<VerboseReferralBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<VerboseReferralBean> list = new ArrayList<VerboseReferralBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2454, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.VerboseReferralBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.VerboseReferralBean)", "classid":323, "classname":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader", "shortclassname":"VerboseReferralBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, VerboseReferralBean ref) throws SQLException {\r\n    throw new RuntimeException(\"Not Implemented\");\r\n}"},
 {"id":2455, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadSingle(java.sql.ResultSet)", "classid":323, "classname":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader", "shortclassname":"VerboseReferralBeanLoader", "method":"public VerboseReferralBean loadSingle(ResultSet rs) throws SQLException {\r\n    VerboseReferralBean ref = new VerboseReferralBean();\r\n    // ERIC: fixed to correct for the mysql database bug plaguing java 1.5\r\n    ref.setId(rs.getInt(\"id\"));\r\n    ref.setSenderID(rs.getLong(\"SenderID\"));\r\n    ref.setReceiverID(rs.getLong(\"ReceiverID\"));\r\n    ref.setPatientID(rs.getInt(\"PatientID\"));\r\n    ref.setReferralDetails(rs.getString(\"ReferralDetails\"));\r\n    ref.setOvid(rs.getLong(\"OVID\"));\r\n    ref.setTimeStamp(VerboseReferralBeanLoader.dateFormat.format(rs.getTimestamp(\"TimeStamp\")));\r\n    ref.setViewedByHCP(rs.getBoolean(\"viewed_by_HCP\"));\r\n    ref.setViewedByPatient(rs.getBoolean(\"viewed_by_patient\"));\r\n    ref.setPriority(rs.getInt(\"PriorityCode\"));\r\n    ref.setOvDate(new SimpleDateFormat(\"MM/dd/yyyy\").format(rs.getDate(\"visitDate\")));\r\n    ref.setPatientName(rs.getString(\"patientName\"));\r\n    ref.setReceiverName(rs.getString(\"receiverName\"));\r\n    ref.setSenderName(rs.getString(\"senderName\"));\r\n    return ref;\r\n}"},
 {"id":2456, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.-init-()", "classid":324, "classname":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader", "shortclassname":"VisitReminderReturnFormLoader", "method":"VisitReminderReturnFormLoader() {\r\n}"},
 {"id":2457, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadList(java.sql.ResultSet)", "classid":324, "classname":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader", "shortclassname":"VisitReminderReturnFormLoader", "method":"public List<VisitReminderReturnForm> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<VisitReminderReturnForm> list = new ArrayList<VisitReminderReturnForm>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2458, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm)", "classid":324, "classname":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader", "shortclassname":"VisitReminderReturnFormLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, VisitReminderReturnForm bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2459, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadSingle(java.sql.ResultSet)", "classid":324, "classname":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader", "shortclassname":"VisitReminderReturnFormLoader", "method":"public VisitReminderReturnForm loadSingle(ResultSet rs) throws SQLException {\r\n    int i = 0;\r\n    return // hcpid\r\n    // patient ID\r\n    // last name\r\n    // first\r\n    new VisitReminderReturnForm(rs.getLong((++i)), rs.getLong((++i)), rs.getString((++i)), rs.getString((++i)), rs.getString((++i)));// ,// phone3\r\n\r\n    // \"diagnosis: \" + rs.getString(++i),\r\n    // \"last visit: \" + rs.getString(++i));\r\n}"},
 {"id":2460, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.-init-()", "classid":325, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader", "shortclassname":"WardBeanLoader", "method":"WardBeanLoader() {\r\n}"},
 {"id":2461, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadList(java.sql.ResultSet)", "classid":325, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader", "shortclassname":"WardBeanLoader", "method":"public List<WardBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<WardBean> list = new ArrayList<WardBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2462, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardBean)", "classid":325, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader", "shortclassname":"WardBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, WardBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2463, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadSingle(java.sql.ResultSet)", "classid":325, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader", "shortclassname":"WardBeanLoader", "method":"public WardBean loadSingle(ResultSet rs) throws SQLException {\r\n    WardBean ward = new WardBean(rs.getLong(\"WardID\"), rs.getString(\"RequiredSpecialty\"), rs.getLong(\"InHospital\"));\r\n    return ward;\r\n}"},
 {"id":2464, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.-init-", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.-init-()", "classid":326, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader", "shortclassname":"WardRoomBeanLoader", "method":"WardRoomBeanLoader() {\r\n}"},
 {"id":2465, "methodname":"loadList(java.sql.ResultSet)", "methodnamerefined":"loadList", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadList", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadList(java.sql.ResultSet)", "classid":326, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader", "shortclassname":"WardRoomBeanLoader", "method":"public List<WardRoomBean> loadList(ResultSet rs) throws SQLException {\r\n    ArrayList<WardRoomBean> list = new ArrayList<WardRoomBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    } \r\n    return list;\r\n}"},
 {"id":2466, "methodname":"loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardRoomBean)", "methodnamerefined":"loadParameters", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadParameters", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardRoomBean)", "classid":326, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader", "shortclassname":"WardRoomBeanLoader", "method":"public PreparedStatement loadParameters(PreparedStatement ps, WardRoomBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":2467, "methodname":"loadSingle(java.sql.ResultSet)", "methodnamerefined":"loadSingle", "methodabbreviation":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadSingle", "fullmethod":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadSingle(java.sql.ResultSet)", "classid":326, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader", "shortclassname":"WardRoomBeanLoader", "method":"public WardRoomBean loadSingle(ResultSet rs) throws SQLException {\r\n    WardRoomBean wardRoom = new WardRoomBean(rs.getLong(\"RoomID\"), rs.getLong(\"OccupiedBy\"), rs.getLong(\"InWard\"), rs.getString(\"roomName\"), rs.getString(\"Status\"));\r\n    return wardRoom;\r\n}"},
 {"id":2468, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AdverseEventsData.-init-", "fullmethod":"edu.ncsu.csc.itrust.charts.AdverseEventsData.-init-()", "classid":327, "classname":"edu.ncsu.csc.itrust.charts.AdverseEventsData", "shortclassname":"AdverseEventsData", "method":"AdverseEventsData() {\r\n}"},
 {"id":2469, "methodname":"finalize()", "methodnamerefined":"finalize", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AdverseEventsData.finalize", "fullmethod":"edu.ncsu.csc.itrust.charts.AdverseEventsData.finalize()", "classid":327, "classname":"edu.ncsu.csc.itrust.charts.AdverseEventsData", "shortclassname":"AdverseEventsData", "method":"/**\r\n *\r\n *\r\n * @see java.lang.Object#finalize()\r\n */\r\n@Override\r\nprotected void finalize() throws Throwable {\r\n    super.finalize();\r\n}"},
 {"id":2470, "methodname":"generateLink(java.lang.Object,int,java.lang.Object)", "methodnamerefined":"generateLink", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AdverseEventsData.generateLink", "fullmethod":"edu.ncsu.csc.itrust.charts.AdverseEventsData.generateLink(java.lang.Object,int,java.lang.Object)", "classid":327, "classname":"edu.ncsu.csc.itrust.charts.AdverseEventsData", "shortclassname":"AdverseEventsData", "method":"/**\r\n * Returns a link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return months[series];\r\n}"},
 {"id":2471, "methodname":"generateToolTip(org.jfree.data.category.CategoryDataset,int,int)", "methodnamerefined":"generateToolTip", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AdverseEventsData.generateToolTip", "fullmethod":"edu.ncsu.csc.itrust.charts.AdverseEventsData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)", "classid":327, "classname":"edu.ncsu.csc.itrust.charts.AdverseEventsData", "shortclassname":"AdverseEventsData", "method":"/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return months[series];\r\n}"},
 {"id":2472, "methodname":"getProducerId()", "methodnamerefined":"getProducerId", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AdverseEventsData.getProducerId", "fullmethod":"edu.ncsu.csc.itrust.charts.AdverseEventsData.getProducerId()", "classid":327, "classname":"edu.ncsu.csc.itrust.charts.AdverseEventsData", "shortclassname":"AdverseEventsData", "method":"/**\r\n * Returns a unique ID for this DatasetProducer\r\n */\r\npublic String getProducerId() {\r\n    return \"AdverseEventsData DatasetProducer\";\r\n}"},
 {"id":2473, "methodname":"hasExpired(java.util.Map,java.util.Date)", "methodnamerefined":"hasExpired", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AdverseEventsData.hasExpired", "fullmethod":"edu.ncsu.csc.itrust.charts.AdverseEventsData.hasExpired(java.util.Map,java.util.Date)", "classid":327, "classname":"edu.ncsu.csc.itrust.charts.AdverseEventsData", "shortclassname":"AdverseEventsData", "method":"/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behaviour the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}"},
 {"id":2474, "methodname":"produceDataset(java.util.Map)", "methodnamerefined":"produceDataset", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AdverseEventsData.produceDataset", "fullmethod":"edu.ncsu.csc.itrust.charts.AdverseEventsData.produceDataset(java.util.Map)", "classid":327, "classname":"edu.ncsu.csc.itrust.charts.AdverseEventsData", "shortclassname":"AdverseEventsData", "method":"/**\r\n * This method parses the list of Adverse Event Beans to initialize the chart dataset.\r\n */\r\npublic Object produceDataset(Map params) throws DatasetProduceException {\r\n    // The DefaultCategoryDataset is used for bar charts.\r\n    // This dataset class may change based on the type of chart you wish to produce.\r\n    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {\r\n        /**\r\n         * The generated serializable ID.\r\n         */\r\n        private static final long serialVersionUID = -8238489914590553747L;\r\n\r\n        /**\r\n         *\r\n         *\r\n         * @see java.lang.Object#finalize()\r\n         */\r\n        @Override\r\n        protected void finalize() throws Throwable {\r\n            super.finalize();\r\n        }\r\n    };\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\r\n    // For each Adverse Event in the list,\r\n    // parse the string repreentation of the report date\r\n    // to a Java Date object. Then, get the month of the\r\n    // Date object and increment the value count for that month.\r\n    for (AdverseEventBean event : adverseEvents) {\r\n        Calendar cal = Calendar.getInstance();\r\n        try {\r\n            cal.setTime(sdf.parse(event.getDate()));\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n            throw new DatasetProduceException(e.getMessage());\r\n        }\r\n        int monthOfReport = cal.get(Calendar.MONTH);\r\n        (values[monthOfReport])++;\r\n    }\r\n    // For each month, add the monthly values to the dataset for\r\n    // producing the chart.\r\n    for (int i = 0; i < 12; i++) {\r\n        // values[i] represents the number of adverse events for month i\r\n        // codeName represents the given prescription/immunization being analyzed\r\n        // month[i] is the static array of month names, to be used as labels on the chart\r\n        dataset.addValue(values[i], codeName, months[i]);\r\n    }\r\n    return dataset;\r\n}"},
 {"id":2475, "methodname":"setAdverseEventsList(java.util.List,java.lang.String)", "methodnamerefined":"setAdverseEventsList", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AdverseEventsData.setAdverseEventsList", "fullmethod":"edu.ncsu.csc.itrust.charts.AdverseEventsData.setAdverseEventsList(java.util.List,java.lang.String)", "classid":327, "classname":"edu.ncsu.csc.itrust.charts.AdverseEventsData", "shortclassname":"AdverseEventsData", "method":"/**\r\n * Called from the JSP page to initialize the list of Adverse Events needed to\r\n * produce the desired chart.\r\n *\r\n * @param adEvents\r\n * \t\t\r\n * @param name\r\n * \t\t\r\n */\r\npublic void setAdverseEventsList(List<AdverseEventBean> adEvents, String name) {\r\n    adverseEvents = adEvents;\r\n    this.codeName = name;\r\n}"},
 {"id":2476, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AverseEventsDataTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.charts.AverseEventsDataTest.-init-()", "classid":328, "classname":"edu.ncsu.csc.itrust.charts.AverseEventsDataTest", "shortclassname":"AverseEventsDataTest", "method":"AverseEventsDataTest() {\r\n}"},
 {"id":2477, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AverseEventsDataTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.charts.AverseEventsDataTest.setUp()", "classid":328, "classname":"edu.ncsu.csc.itrust.charts.AverseEventsDataTest", "shortclassname":"AverseEventsDataTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    this.chart = new AdverseEventsData();\r\n}"},
 {"id":2478, "methodname":"testProductDataset()", "methodnamerefined":"testProductDataset", "methodabbreviation":"edu.ncsu.csc.itrust.charts.AverseEventsDataTest.testProductDataset", "fullmethod":"edu.ncsu.csc.itrust.charts.AverseEventsDataTest.testProductDataset()", "classid":328, "classname":"edu.ncsu.csc.itrust.charts.AverseEventsDataTest", "shortclassname":"AverseEventsDataTest", "method":"public void testProductDataset() {\r\n    String codeName = \"Testing\";\r\n    List<AdverseEventBean> adEvents = new LinkedList<AdverseEventBean>();\r\n    AdverseEventBean event = new AdverseEventBean();\r\n    event.setCode(\"12345\");\r\n    event.setDescription(\"Testing\");\r\n    event.setStatus(\"Active\");\r\n    event.setDate(\"2010-08-15 08:47:00\");\r\n    adEvents.add(event);\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    try {\r\n        chart.setAdverseEventsList(adEvents, codeName);\r\n        DefaultCategoryDataset data = ((DefaultCategoryDataset) (chart.produceDataset(params)));\r\n        assertEquals(1.0, data.getValue(codeName, \"Aug\"));\r\n        assertEquals(\"AdverseEventsData DatasetProducer\", chart.getProducerId());\r\n    } catch (DatasetProduceException e) {\r\n        e.printStackTrace();\r\n        fail();\r\n    }\r\n}"},
 {"id":2479, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.-init-", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.-init-()", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"DiagnosisTrendData() {\r\n}"},
 {"id":2480, "methodname":"finalize()", "methodnamerefined":"finalize", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.finalize", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.finalize()", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"/**\r\n *\r\n *\r\n * @see java.lang.Object#finalize()\r\n */\r\n@Override\r\nprotected void finalize() throws Throwable {\r\n    super.finalize();\r\n}"},
 {"id":2481, "methodname":"generateLink(java.lang.Object,int,java.lang.Object)", "methodnamerefined":"generateLink", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateLink", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateLink(java.lang.Object,int,java.lang.Object)", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return seriesName[series];\r\n}"},
 {"id":2482, "methodname":"generateToolTip(org.jfree.data.category.CategoryDataset,int,int)", "methodnamerefined":"generateToolTip", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateToolTip", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return seriesName[series];\r\n}"},
 {"id":2483, "methodname":"getProducerId()", "methodnamerefined":"getProducerId", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.getProducerId", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.getProducerId()", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"/**\r\n *\r\n *\r\n * @return A unique ID for this DatasetProducer\r\n */\r\npublic String getProducerId() {\r\n    return \"DiagnosisTrendData DatasetProducer\";\r\n}"},
 {"id":2484, "methodname":"hasData()", "methodnamerefined":"hasData", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.hasData", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.hasData()", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"public boolean hasData() {\r\n    if ((dsBean) != null) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"},
 {"id":2485, "methodname":"hasExpired(java.util.Map,java.util.Date)", "methodnamerefined":"hasExpired", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.hasExpired", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.hasExpired(java.util.Map,java.util.Date)", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behavior the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}"},
 {"id":2486, "methodname":"initializeAvgDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)", "methodnamerefined":"initializeAvgDiagnosisStatistics", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeAvgDiagnosisStatistics", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeAvgDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"public void initializeAvgDiagnosisStatistics(DiagnosisStatisticsBean avgBean, DiagnosisStatisticsBean dsBean, String name) {\r\n    this.dsBean = dsBean;\r\n    this.avgBean = avgBean;\r\n    this.diagnosisName = name;\r\n    this.epidemic = true;\r\n    values = new int[4];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (avgBean.getZipStats()));\r\n    values[2] = ((int) (dsBean.getRegionStats()));\r\n    values[3] = ((int) (avgBean.getRegionStats()));\r\n}"},
 {"id":2487, "methodname":"initializeDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)", "methodnamerefined":"initializeDiagnosisStatistics", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeDiagnosisStatistics", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"/**\r\n * Called from the JSP to initialize the list of HealthRecords needed\r\n * to produce the desired chart.\r\n *\r\n * @param hRecs\r\n * \t\tHealth records for the patient being viewed.\r\n * @param name\r\n * \t\tType of data that is being graphed (originally Height, Weight, and BMI).\r\n */\r\npublic void initializeDiagnosisStatistics(DiagnosisStatisticsBean DiagnosisBean, String name) {\r\n    this.dsBean = DiagnosisBean;\r\n    this.diagnosisName = name;\r\n    values = new int[2];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (dsBean.getRegionStats()));\r\n}"},
 {"id":2488, "methodname":"produceDataset(java.util.Map)", "methodnamerefined":"produceDataset", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.produceDataset", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.produceDataset(java.util.Map)", "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "shortclassname":"DiagnosisTrendData", "method":"/**\r\n * This method parses the list of DiagnosisStatistics Beans to initialize the\r\n * chart data set.\r\n *\r\n * @param Map\r\n * \t\tparameters passed from CeWolf (though not actually used locally)\r\n * @return A data set containing information to be graphed\r\n * @throws DatasetProduceException\r\n * \t\t\r\n */\r\npublic Object produceDataset(Map params) throws DatasetProduceException {\r\n    // The DefaultCategoryDataset is used for bar charts.\r\n    // This data set class may change based on the type of chart you wish to produce.\r\n    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {\r\n        /**\r\n         *\r\n         */\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        /**\r\n         *\r\n         *\r\n         * @see java.lang.Object#finalize()\r\n         */\r\n        @Override\r\n        protected void finalize() throws Throwable {\r\n            super.finalize();\r\n        }\r\n    };\r\n    if ((epidemic) == false) {\r\n        seriesName = new String[2];\r\n        dataset.addValue(values[0], diagnosisName, \"Zipcode Cases\");\r\n        dataset.addValue(values[1], diagnosisName, \"Region Cases\");\r\n        seriesName[0] = \"Zipcode Case\";\r\n        seriesName[1] = \"Region Cases\";\r\n    } else\r\n        if ((epidemic) == true) {\r\n            seriesName = new String[4];\r\n            dataset.addValue(values[0], diagnosisName, \"Current Week Zipcode Cases\");\r\n            dataset.addValue(values[1], diagnosisName, \"Average Prior Zipcode Cases\");\r\n            dataset.addValue(values[2], diagnosisName, \"Current Week Region Cases\");\r\n            dataset.addValue(values[3], diagnosisName, \"Average Prior Region Cases\");\r\n            seriesName[0] = \"Current Week Zipcode Cases\";\r\n            seriesName[1] = \"Average Prior Zipcode Cases\";\r\n            seriesName[2] = \"Current Week Region Cases\";\r\n            seriesName[3] = \"Average Prior Region Cases\";\r\n        }\r\n\r\n    return dataset;\r\n}"},
 {"id":2489, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.-init-()", "classid":330, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest", "shortclassname":"DiagnosisTrendDataTest", "method":"DiagnosisTrendDataTest() {\r\n}"},
 {"id":2490, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.setUp()", "classid":330, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest", "shortclassname":"DiagnosisTrendDataTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.influenza_epidemic();\r\n    gen.malaria_epidemic();\r\n}"},
 {"id":2491, "methodname":"testProduceDataset()", "methodnamerefined":"testProduceDataset", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.testProduceDataset", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.testProduceDataset()", "classid":330, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest", "shortclassname":"DiagnosisTrendDataTest", "method":"public void testProduceDataset() {\r\n    chart = new DiagnosisTrendData();\r\n    String diagnosisName = \"Influenza\";\r\n    Calendar cal = Calendar.getInstance();\r\n    Calendar cal2 = Calendar.getInstance();\r\n    cal.set(2011, 10, 31);// start week\r\n\r\n    cal2.set(2011, 11, 6);// end week\r\n\r\n    DiagnosisStatisticsBean dsBean = new DiagnosisStatisticsBean();\r\n    DiagnosisStatisticsBean avgBean = new DiagnosisStatisticsBean();\r\n    dsBean.setZipStats(700);\r\n    dsBean.setRegionStats(700);\r\n    dsBean.setStartDate(cal.getTime());\r\n    dsBean.setEndDate(cal2.getTime());\r\n    avgBean.setZipStats(700);\r\n    avgBean.setRegionStats(700);\r\n    dsBean.setStartDate(cal.getTime());\r\n    dsBean.setEndDate(cal.getTime());\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    try {\r\n        chart.initializeAvgDiagnosisStatistics(avgBean, dsBean, diagnosisName);\r\n        DefaultCategoryDataset data = ((DefaultCategoryDataset) (chart.produceDataset(params)));\r\n        assertEquals(700.0, data.getValue(diagnosisName, \"Current Week Zipcode Cases\"));\r\n        assertEquals(700.0, data.getValue(diagnosisName, \"Average Prior Zipcode Cases\"));\r\n        assertEquals(700.0, data.getValue(diagnosisName, \"Current Week Region Cases\"));\r\n        assertEquals(700.0, data.getValue(diagnosisName, \"Average Prior Region Cases\"));\r\n        assertTrue(chart.hasData());\r\n    } catch (DatasetProduceException e) {\r\n        e.printStackTrace();\r\n        fail();\r\n    }\r\n}"},
 {"id":2492, "methodname":"testProduceDataset2()", "methodnamerefined":"testProduceDataset2", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.testProduceDataset2", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.testProduceDataset2()", "classid":330, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest", "shortclassname":"DiagnosisTrendDataTest", "method":"public void testProduceDataset2() {\r\n    chart = new DiagnosisTrendData();\r\n    String diagnosisName = \"Malaria\";\r\n    Calendar cal = Calendar.getInstance();\r\n    Calendar cal2 = Calendar.getInstance();\r\n    cal.set(2011, 10, 31);// start week\r\n\r\n    cal2.set(2011, 11, 6);// end week\r\n\r\n    DiagnosisStatisticsBean dsBean = new DiagnosisStatisticsBean();\r\n    DiagnosisStatisticsBean avgBean = new DiagnosisStatisticsBean();\r\n    dsBean.setZipStats(700);\r\n    dsBean.setRegionStats(700);\r\n    dsBean.setStartDate(cal.getTime());\r\n    dsBean.setEndDate(cal2.getTime());\r\n    avgBean.setZipStats(700);\r\n    avgBean.setRegionStats(700);\r\n    dsBean.setStartDate(cal.getTime());\r\n    dsBean.setEndDate(cal.getTime());\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    try {\r\n        chart.initializeAvgDiagnosisStatistics(avgBean, dsBean, diagnosisName);\r\n        DefaultCategoryDataset data = ((DefaultCategoryDataset) (chart.produceDataset(params)));\r\n        assertEquals(700.0, data.getValue(diagnosisName, \"Current Week Zipcode Cases\"));\r\n        assertEquals(700.0, data.getValue(diagnosisName, \"Average Prior Zipcode Cases\"));\r\n        assertEquals(700.0, data.getValue(diagnosisName, \"Current Week Region Cases\"));\r\n        assertEquals(700.0, data.getValue(diagnosisName, \"Average Prior Region Cases\"));\r\n        assertTrue(chart.hasData());\r\n    } catch (DatasetProduceException e) {\r\n        e.printStackTrace();\r\n        fail();\r\n    }\r\n}"},
 {"id":2493, "methodname":"testProduceDataset3()", "methodnamerefined":"testProduceDataset3", "methodabbreviation":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.testProduceDataset3", "fullmethod":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest.testProduceDataset3()", "classid":330, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendDataTest", "shortclassname":"DiagnosisTrendDataTest", "method":"public void testProduceDataset3() {\r\n    chart = new DiagnosisTrendData();\r\n    String diagnosisName = \"Mumps\";\r\n    Calendar cal = Calendar.getInstance();\r\n    Calendar cal2 = Calendar.getInstance();\r\n    cal.set(2011, 10, 31);// start week\r\n\r\n    cal2.set(2011, 11, 6);// end week\r\n\r\n    DiagnosisStatisticsBean dsBean = new DiagnosisStatisticsBean();\r\n    dsBean.setZipStats(500);\r\n    dsBean.setRegionStats(500);\r\n    dsBean.setStartDate(cal.getTime());\r\n    dsBean.setEndDate(cal2.getTime());\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    try {\r\n        chart.initializeDiagnosisStatistics(dsBean, diagnosisName);\r\n        DefaultCategoryDataset data = ((DefaultCategoryDataset) (chart.produceDataset(params)));\r\n        assertEquals(500.0, data.getValue(diagnosisName, \"Zipcode Cases\"));\r\n        assertEquals(500.0, data.getValue(diagnosisName, \"Region Cases\"));\r\n        assertTrue(chart.hasData());\r\n    } catch (DatasetProduceException e) {\r\n        e.printStackTrace();\r\n        fail();\r\n    }\r\n}"},
 {"id":2494, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthData.-init-", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthData.-init-()", "classid":331, "classname":"edu.ncsu.csc.itrust.charts.HealthData", "shortclassname":"HealthData", "method":"HealthData() {\r\n}"},
 {"id":2495, "methodname":"finalize()", "methodnamerefined":"finalize", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthData.finalize", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthData.finalize()", "classid":331, "classname":"edu.ncsu.csc.itrust.charts.HealthData", "shortclassname":"HealthData", "method":"/**\r\n *\r\n *\r\n * @see java.lang.Object#finalize()\r\n */\r\n@Override\r\nprotected void finalize() throws Throwable {\r\n    super.finalize();\r\n}"},
 {"id":2496, "methodname":"generateLink(java.lang.Object,int,java.lang.Object)", "methodnamerefined":"generateLink", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthData.generateLink", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthData.generateLink(java.lang.Object,int,java.lang.Object)", "classid":331, "classname":"edu.ncsu.csc.itrust.charts.HealthData", "shortclassname":"HealthData", "method":"/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return quarters[series];\r\n}"},
 {"id":2497, "methodname":"generateToolTip(org.jfree.data.category.CategoryDataset,int,int)", "methodnamerefined":"generateToolTip", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthData.generateToolTip", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthData.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)", "classid":331, "classname":"edu.ncsu.csc.itrust.charts.HealthData", "shortclassname":"HealthData", "method":"/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return quarters[series];\r\n}"},
 {"id":2498, "methodname":"getProducerId()", "methodnamerefined":"getProducerId", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthData.getProducerId", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthData.getProducerId()", "classid":331, "classname":"edu.ncsu.csc.itrust.charts.HealthData", "shortclassname":"HealthData", "method":"/**\r\n *\r\n *\r\n * @return A unique ID for this DatasetProducer\r\n */\r\npublic String getProducerId() {\r\n    return \"HealthData DatasetProducer\";\r\n}"},
 {"id":2499, "methodname":"hasData()", "methodnamerefined":"hasData", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthData.hasData", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthData.hasData()", "classid":331, "classname":"edu.ncsu.csc.itrust.charts.HealthData", "shortclassname":"HealthData", "method":"/**\r\n * Lets the JSP know if there is any data to be displayed.\r\n *\r\n * @return False if there is no data to be displayed.\r\n */\r\npublic boolean hasData() {\r\n    Date threeYearsAgo = new Date();\r\n    Date recDate;\r\n    String dateStr;\r\n    DateFormat year = new SimpleDateFormat(\"yyyy\");\r\n    DateFormat rest = new SimpleDateFormat(\"/MM/dd HHmma\");\r\n    DateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HHmma\");\r\n    dateStr = year.format(threeYearsAgo);\r\n    dateStr = \"\" + ((Integer.parseInt(dateStr)) - 3);\r\n    dateStr += rest.format(threeYearsAgo);\r\n    try {\r\n        threeYearsAgo = sdf.parse(dateStr);\r\n    } catch (ParseException e) {\r\n        return false;\r\n    }\r\n    for (HealthRecord hr : healthRecords) {\r\n        recDate = new Date(hr.getDateRecorded().getTime());\r\n        if (recDate.before(threeYearsAgo))\r\n            continue;\r\n        else\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":2500, "methodname":"hasExpired(java.util.Map,java.util.Date)", "methodnamerefined":"hasExpired", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthData.hasExpired", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthData.hasExpired(java.util.Map,java.util.Date)", "classid":331, "classname":"edu.ncsu.csc.itrust.charts.HealthData", "shortclassname":"HealthData", "method":"/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behavior the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}"},
 {"id":2501, "methodname":"initializeHealthRecords(java.util.List,java.lang.String)", "methodnamerefined":"initializeHealthRecords", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthData.initializeHealthRecords", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthData.initializeHealthRecords(java.util.List,java.lang.String)", "classid":331, "classname":"edu.ncsu.csc.itrust.charts.HealthData", "shortclassname":"HealthData", "method":"/**\r\n * Called from the JSP to initialize the list of HealthRecords needed\r\n * to produce the desired chart.\r\n *\r\n * @param hRecs\r\n * \t\tHealth records for the patient being viewed.\r\n * @param name\r\n * \t\tType of data that is being graphed (originally Height, Weight, and BMI).\r\n */\r\npublic void initializeHealthRecords(List<HealthRecord> hRecs, String name) {\r\n    healthRecords = hRecs;\r\n    this.codeName = name;\r\n    quarters = new String[historyLength];\r\n    values = new double[historyLength];\r\n    numEntries = new int[historyLength];\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, ((-3) * ((historyLength) - 1)));\r\n    int startMonth = cal.get(Calendar.MONTH);\r\n    int startQ = startMonth / 3;\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yy\");\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        quarters[i] = ((\"Q\" + (((startQ + i) % 4) + 1)) + \" \") + (sdf.format(cal.getTime()));\r\n        values[i] = 0;\r\n        numEntries[i] = 0;\r\n        cal.add(Calendar.MONTH, 3);\r\n    }\r\n}"},
 {"id":2502, "methodname":"produceDataset(java.util.Map)", "methodnamerefined":"produceDataset", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthData.produceDataset", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthData.produceDataset(java.util.Map)", "classid":331, "classname":"edu.ncsu.csc.itrust.charts.HealthData", "shortclassname":"HealthData", "method":"/**\r\n * This method parses the list of Adverse Event Beans to initialize the\r\n * chart dataset.\r\n *\r\n * @param Map\r\n * \t\tparameters passed from CeWolf (though not actually used locally)\r\n * @return A dataset containing information to be graphed\r\n * @throws DatasetProduceException\r\n * \t\t\r\n */\r\npublic Object produceDataset(Map params) throws DatasetProduceException {\r\n    // The DefaultCategoryDataset is used for bar charts.\r\n    // This dataset class may change based on the type of chart you wish to produce.\r\n    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {\r\n        /**\r\n         *\r\n         */\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        /**\r\n         *\r\n         *\r\n         * @see java.lang.Object#finalize()\r\n         */\r\n        @Override\r\n        protected void finalize() throws Throwable {\r\n            super.finalize();\r\n        }\r\n    };\r\n    Calendar cur = Calendar.getInstance();\r\n    int curQuarter = (cur.get(Calendar.MONTH)) / 3;\r\n    for (HealthRecord hRecord : healthRecords) {\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.setTime(hRecord.getDateRecorded());\r\n        int yearOfReport = cal.get(Calendar.YEAR);\r\n        int monthOfReport = cal.get(Calendar.MONTH);\r\n        int quarterOfReport = monthOfReport / 3;\r\n        int quarter = (((historyLength) - (4 * ((cur.get(Calendar.YEAR)) - yearOfReport))) - (curQuarter - quarterOfReport)) - 1;\r\n        // Skip entry if it is out of the history range.\r\n        if (quarter < 0)\r\n            continue;\r\n\r\n        // Calculate the average for the quarter.\r\n        double newValue = 0;\r\n        if (codeName.equals(\"Height\"))\r\n            newValue = hRecord.getHeight();\r\n        else\r\n            if (codeName.equals(\"Weight\"))\r\n                newValue = hRecord.getWeight();\r\n            else\r\n                if (codeName.equals(\"BMI\"))\r\n                    newValue = ((hRecord.getWeight()) * 703) / ((hRecord.getHeight()) * (hRecord.getHeight()));\r\n\r\n\r\n\r\n        values[quarter] = (((values[quarter]) * (numEntries[quarter])) + newValue) / ((numEntries[quarter]) + 1);\r\n        (numEntries[quarter])++;\r\n    }\r\n    // For each month, add the monthly values to the dataset for\r\n    // producing the chart.\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        if ((values[i]) > 0) {\r\n            dataset.addValue(values[i], codeName, quarters[i]);\r\n        }\r\n    }\r\n    return dataset;\r\n}"},
 {"id":2503, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthDataTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthDataTest.-init-()", "classid":332, "classname":"edu.ncsu.csc.itrust.charts.HealthDataTest", "shortclassname":"HealthDataTest", "method":"HealthDataTest() {\r\n}"},
 {"id":2504, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthDataTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthDataTest.setUp()", "classid":332, "classname":"edu.ncsu.csc.itrust.charts.HealthDataTest", "shortclassname":"HealthDataTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    chart = new HealthData();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.healthData();\r\n}"},
 {"id":2505, "methodname":"testProduceDataset()", "methodnamerefined":"testProduceDataset", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthDataTest.testProduceDataset", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthDataTest.testProduceDataset()", "classid":332, "classname":"edu.ncsu.csc.itrust.charts.HealthDataTest", "shortclassname":"HealthDataTest", "method":"public void testProduceDataset() {\r\n    String codeName = \"Height\";\r\n    Calendar mytime = Calendar.getInstance();\r\n    int quarter = ((mytime.get(Calendar.MONTH)) / 3) + 1;\r\n    List<HealthRecord> healthRecordBeans = new LinkedList<HealthRecord>();\r\n    HealthRecord hRecord = new HealthRecord();\r\n    hRecord.setHeight(56);\r\n    hRecord.setDateRecorded(new Timestamp(mytime.getTime().getTime()));\r\n    healthRecordBeans.add(hRecord);\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yy\");\r\n    try {\r\n        chart.initializeHealthRecords(healthRecordBeans, codeName);\r\n        DefaultCategoryDataset data = ((DefaultCategoryDataset) (chart.produceDataset(params)));\r\n        assertEquals(56.0, data.getValue(codeName, (((\"Q\" + quarter) + \" \") + (sdf.format(mytime.getTime())))));\r\n        assertTrue(chart.hasData());\r\n    } catch (DatasetProduceException e) {\r\n        e.printStackTrace();\r\n        fail();\r\n    }\r\n}"},
 {"id":2506, "methodname":"testProduceDataset2()", "methodnamerefined":"testProduceDataset2", "methodabbreviation":"edu.ncsu.csc.itrust.charts.HealthDataTest.testProduceDataset2", "fullmethod":"edu.ncsu.csc.itrust.charts.HealthDataTest.testProduceDataset2()", "classid":332, "classname":"edu.ncsu.csc.itrust.charts.HealthDataTest", "shortclassname":"HealthDataTest", "method":"public void testProduceDataset2() {\r\n    chart = new HealthData();\r\n    String codeName = \"Weight\";\r\n    Calendar mytime = Calendar.getInstance();\r\n    int quarter = ((mytime.get(Calendar.MONTH)) / 3) + 1;\r\n    List<HealthRecord> healthRecordBeans = new LinkedList<HealthRecord>();\r\n    HealthRecord hRecord = new HealthRecord();\r\n    hRecord.setWeight(0);\r\n    hRecord.setDateRecorded(new Timestamp(mytime.getTime().getTime()));\r\n    healthRecordBeans.add(hRecord);\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yy\");\r\n    try {\r\n        chart.initializeHealthRecords(healthRecordBeans, codeName);\r\n        DefaultCategoryDataset data = ((DefaultCategoryDataset) (chart.produceDataset(params)));\r\n        try {\r\n            data.getValue(codeName, (((\"Q\" + quarter) + \" \") + (sdf.format(mytime.getTime()))));\r\n        } catch (UnknownKeyException e) {\r\n            assertEquals(1, 1);\r\n        }\r\n        assertTrue(chart.hasData());\r\n    } catch (DatasetProduceException e) {\r\n        e.printStackTrace();\r\n        fail();\r\n    }\r\n}"},
 {"id":2507, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResults.-init-", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResults.-init-()", "classid":333, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResults", "shortclassname":"PatientLabResults", "method":"PatientLabResults() {\r\n}"},
 {"id":2508, "methodname":"finalize()", "methodnamerefined":"finalize", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResults.finalize", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResults.finalize()", "classid":333, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResults", "shortclassname":"PatientLabResults", "method":"/**\r\n *\r\n *\r\n * @see java.lang.Object#finalize()\r\n */\r\n@Override\r\nprotected void finalize() throws Throwable {\r\n    super.finalize();\r\n}"},
 {"id":2509, "methodname":"generateLink(java.lang.Object,int,java.lang.Object)", "methodnamerefined":"generateLink", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResults.generateLink", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResults.generateLink(java.lang.Object,int,java.lang.Object)", "classid":333, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResults", "shortclassname":"PatientLabResults", "method":"/**\r\n *\r\n *\r\n * @return A link target for a special data item.\r\n */\r\npublic String generateLink(Object data, int series, Object category) {\r\n    return quarters[series];\r\n}"},
 {"id":2510, "methodname":"generateToolTip(org.jfree.data.category.CategoryDataset,int,int)", "methodnamerefined":"generateToolTip", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResults.generateToolTip", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResults.generateToolTip(org.jfree.data.category.CategoryDataset,int,int)", "classid":333, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResults", "shortclassname":"PatientLabResults", "method":"/**\r\n *\r\n *\r\n * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)\r\n */\r\npublic String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n    return quarters[series];\r\n}"},
 {"id":2511, "methodname":"getProducerId()", "methodnamerefined":"getProducerId", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResults.getProducerId", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResults.getProducerId()", "classid":333, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResults", "shortclassname":"PatientLabResults", "method":"/**\r\n *\r\n *\r\n * @return A unique ID for this DatasetProducer\r\n */\r\npublic String getProducerId() {\r\n    return \"HealthData DatasetProducer\";\r\n}"},
 {"id":2512, "methodname":"hasData()", "methodnamerefined":"hasData", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResults.hasData", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResults.hasData()", "classid":333, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResults", "shortclassname":"PatientLabResults", "method":"/**\r\n * Lets the JSP know if there is any data to be displayed.\r\n *\r\n * @return False if there is no data to be displayed.\r\n */\r\npublic boolean hasData() {\r\n    Date threeYearsAgo = new Date();\r\n    Date recDate;\r\n    String dateStr;\r\n    DateFormat year = new SimpleDateFormat(\"yyyy\");\r\n    DateFormat rest = new SimpleDateFormat(\"/MM/dd HHmma\");\r\n    DateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HHmma\");\r\n    dateStr = year.format(threeYearsAgo);\r\n    dateStr = \"\" + ((Integer.parseInt(dateStr)) - 3);\r\n    dateStr += rest.format(threeYearsAgo);\r\n    try {\r\n        threeYearsAgo = sdf.parse(dateStr);\r\n    } catch (ParseException e) {\r\n        return false;\r\n    }\r\n    for (LabProcedureBean lpb : lpBeans) {\r\n        recDate = new Date(lpb.getTimestamp().getTime());\r\n        if (recDate.before(threeYearsAgo))\r\n            continue;\r\n        else\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":2513, "methodname":"hasExpired(java.util.Map,java.util.Date)", "methodnamerefined":"hasExpired", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResults.hasExpired", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResults.hasExpired(java.util.Map,java.util.Date)", "classid":333, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResults", "shortclassname":"PatientLabResults", "method":"/**\r\n * This producers data is invalidated after 5 seconds. By this method the\r\n * producer can influence Cewolfs caching behavior the way it wants to.\r\n */\r\npublic boolean hasExpired(Map params, Date since) {\r\n    return ((System.currentTimeMillis()) - (since.getTime())) > 5000;\r\n}"},
 {"id":2514, "methodname":"initializeLabProcedures(java.util.List,java.lang.String)", "methodnamerefined":"initializeLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResults.initializeLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResults.initializeLabProcedures(java.util.List,java.lang.String)", "classid":333, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResults", "shortclassname":"PatientLabResults", "method":"/**\r\n * Called from the JSP to initialize the list of Lab Procedure beans needed\r\n * to produce the desired chart.\r\n *\r\n * @param lpsbs\r\n * \t\tLab procedure beans for the patient viewing\r\n * @param name\r\n * \t\tName of the lab procedure\r\n */\r\npublic void initializeLabProcedures(List<LabProcedureBean> lpbs, String name) {\r\n    lpBeans = lpbs;\r\n    this.labProcedureName = name;\r\n    quarters = new String[historyLength];\r\n    values = new double[historyLength];\r\n    numEntries = new int[historyLength];\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.MONTH, ((-3) * ((historyLength) - 1)));\r\n    int startMonth = cal.get(Calendar.MONTH);\r\n    int startQ = startMonth / 3;\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yy\");\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        quarters[i] = ((\"Q\" + (((startQ + i) % 4) + 1)) + \" \") + (sdf.format(cal.getTime()));\r\n        values[i] = 0;\r\n        numEntries[i] = 0;\r\n        cal.add(Calendar.MONTH, 3);\r\n    }\r\n}"},
 {"id":2515, "methodname":"produceDataset(java.util.Map)", "methodnamerefined":"produceDataset", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResults.produceDataset", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResults.produceDataset(java.util.Map)", "classid":333, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResults", "shortclassname":"PatientLabResults", "method":"/**\r\n * This method parses the list of Adverse Event Beans to initialize the\r\n * chart dataset.\r\n *\r\n * @param Map\r\n * \t\tparameters passed from CeWolf (though not actually used locally)\r\n * @return A dataset containing information to be graphed\r\n * @throws DatasetProduceException\r\n * \t\t\r\n */\r\npublic Object produceDataset(Map params) throws DatasetProduceException {\r\n    // The DefaultCategoryDataset is used for bar charts.\r\n    // This dataset class may change based on the type of chart you wish to produce.\r\n    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {\r\n        /**\r\n         *\r\n         */\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        /**\r\n         *\r\n         *\r\n         * @see java.lang.Object#finalize()\r\n         */\r\n        @Override\r\n        protected void finalize() throws Throwable {\r\n            super.finalize();\r\n        }\r\n    };\r\n    Calendar cur = Calendar.getInstance();\r\n    int curQuarter = (cur.get(Calendar.MONTH)) / 3;\r\n    for (LabProcedureBean lpb : lpBeans) {\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.setTime(lpb.getTimestamp());\r\n        int yearOfReport = cal.get(Calendar.YEAR);\r\n        int monthOfReport = cal.get(Calendar.MONTH);\r\n        int quarterOfReport = monthOfReport / 3;\r\n        int quarter = (((historyLength) - (4 * ((cur.get(Calendar.YEAR)) - yearOfReport))) - (curQuarter - quarterOfReport)) - 1;\r\n        // Skip entry if it is out of the history range.\r\n        if (quarter < 0)\r\n            continue;\r\n\r\n        // Calculate the average for the quarter.\r\n        double newValue = 0;\r\n        newValue = lpb.getNumericalResultAsDouble();\r\n        values[quarter] = (((values[quarter]) * (numEntries[quarter])) + newValue) / ((numEntries[quarter]) + 1);\r\n        (numEntries[quarter])++;\r\n    }\r\n    // For each month, add the monthly values to the dataset for\r\n    // producing the chart.\r\n    for (int i = 0; i < (historyLength); i++) {\r\n        if ((values[i]) > 0) {\r\n            dataset.addValue(values[i], labProcedureName, quarters[i]);\r\n        }\r\n    }\r\n    return dataset;\r\n}"},
 {"id":2516, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResultsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResultsTest.-init-()", "classid":334, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResultsTest", "shortclassname":"PatientLabResultsTest", "method":"PatientLabResultsTest() {\r\n}"},
 {"id":2517, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResultsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResultsTest.setUp()", "classid":334, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResultsTest", "shortclassname":"PatientLabResultsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    chart = new PatientLabResults();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patientLabProcedures();\r\n}"},
 {"id":2518, "methodname":"testProduceDataset()", "methodnamerefined":"testProduceDataset", "methodabbreviation":"edu.ncsu.csc.itrust.charts.PatientLabResultsTest.testProduceDataset", "fullmethod":"edu.ncsu.csc.itrust.charts.PatientLabResultsTest.testProduceDataset()", "classid":334, "classname":"edu.ncsu.csc.itrust.charts.PatientLabResultsTest", "shortclassname":"PatientLabResultsTest", "method":"public void testProduceDataset() {\r\n    String labProcedureName = \"Microscopic Observation\";\r\n    Calendar mytime = Calendar.getInstance();\r\n    int quarter = ((mytime.get(Calendar.MONTH)) / 3) + 1;\r\n    List<LabProcedureBean> lpBeans = new LinkedList<LabProcedureBean>();\r\n    LabProcedureBean lp = new LabProcedureBean();\r\n    lp.setLoinc(\"10763-1\");\r\n    lp.setNumericalResult(\"73\");\r\n    lp.setTimestamp(new Timestamp(mytime.getTime().getTime()));\r\n    lpBeans.add(lp);\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yy\");\r\n    try {\r\n        chart.initializeLabProcedures(lpBeans, labProcedureName);\r\n        DefaultCategoryDataset data = ((DefaultCategoryDataset) (chart.produceDataset(params)));\r\n        assertEquals(73.0, data.getValue(labProcedureName, (((\"Q\" + quarter) + \" \") + (sdf.format(mytime.getTime())))));\r\n        assertTrue(chart.hasData());\r\n    } catch (DatasetProduceException e) {\r\n        e.printStackTrace();\r\n        fail();\r\n    }\r\n}"},
 {"id":2519, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.-init-()", "classid":335, "classname":"edu.ncsu.csc.itrust.dao.AutoIncrementTest", "shortclassname":"AutoIncrementTest", "method":"AutoIncrementTest() {\r\n}"},
 {"id":2520, "methodname":"doTheSecond()", "methodnamerefined":"doTheSecond", "methodabbreviation":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.doTheSecond", "fullmethod":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.doTheSecond()", "classid":335, "classname":"edu.ncsu.csc.itrust.dao.AutoIncrementTest", "shortclassname":"AutoIncrementTest", "method":"private void doTheSecond() throws SQLException {\r\n    Connection conn2 = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn2 = TestDAOFactory.getTestInstance().getConnection();\r\n        ps = conn2.prepareStatement(\"INSERT INTO testincrement VALUES()\");\r\n        ps.executeUpdate();\r\n        assertEquals(2L, DBUtil.getLastInsert(conn2));\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn2, ps);\r\n    }\r\n}"},
 {"id":2521, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.setUp()", "classid":335, "classname":"edu.ncsu.csc.itrust.dao.AutoIncrementTest", "shortclassname":"AutoIncrementTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = TestDAOFactory.getTestInstance().getConnection();\r\n        ps = conn.prepareStatement(\"DROP TABLE IF EXISTS testincrement\");\r\n        ps.executeUpdate();\r\n        ps = conn.prepareStatement(\"CREATE TABLE testincrement(id integer auto_increment primary key)\");\r\n        ps.executeUpdate();\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2522, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.tearDown()", "classid":335, "classname":"edu.ncsu.csc.itrust.dao.AutoIncrementTest", "shortclassname":"AutoIncrementTest", "method":"@Override\r\nprotected void tearDown() throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = TestDAOFactory.getTestInstance().getConnection();\r\n        ps = conn.prepareStatement(\"DROP TABLE IF EXISTS testincrement\");\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2523, "methodname":"testNoIncrementCollision()", "methodnamerefined":"testNoIncrementCollision", "methodabbreviation":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.testNoIncrementCollision", "fullmethod":"edu.ncsu.csc.itrust.dao.AutoIncrementTest.testNoIncrementCollision()", "classid":335, "classname":"edu.ncsu.csc.itrust.dao.AutoIncrementTest", "shortclassname":"AutoIncrementTest", "method":"public void testNoIncrementCollision() {\r\n    Connection conn1 = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn1 = TestDAOFactory.getTestInstance().getConnection();\r\n        ps = conn1.prepareStatement(\"INSERT INTO testincrement VALUES()\");\r\n        ps.executeUpdate();\r\n        doTheSecond();\r\n        assertEquals(1L, DBUtil.getLastInsert(conn1));\r\n        // See? Its on a per-connection basis. Nothing to worry about.\r\n    } catch (SQLException ex) {\r\n    } finally {\r\n        DBUtil.closeConnection(conn1, ps);\r\n    }\r\n}"},
 {"id":2524, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.-init-()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n * Protected constructor. Call getProductionInstance to get an instance of the DAOFactory\r\n */\r\nprotected DAOFactory() {\r\n    this.driver = new ProductionConnectionDriver();\r\n}"},
 {"id":2525, "methodname":"getAccessDAO()", "methodnamerefined":"getAccessDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getAccessDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getAccessDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys AccessDAO\r\n */\r\npublic AccessDAO getAccessDAO() {\r\n    return new AccessDAO(this);\r\n}"},
 {"id":2526, "methodname":"getAdverseEventDAO()", "methodnamerefined":"getAdverseEventDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getAdverseEventDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getAdverseEventDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys AdverseEventDAO\r\n */\r\npublic AdverseEventDAO getAdverseEventDAO() {\r\n    return new AdverseEventDAO(this);\r\n}"},
 {"id":2527, "methodname":"getAllergyDAO()", "methodnamerefined":"getAllergyDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getAllergyDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getAllergyDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys AllergyDAO\r\n */\r\npublic AllergyDAO getAllergyDAO() {\r\n    return new AllergyDAO(this);\r\n}"},
 {"id":2528, "methodname":"getApptDAO()", "methodnamerefined":"getApptDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getApptDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getApptDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys ApptDAO\r\n */\r\npublic ApptDAO getApptDAO() {\r\n    return new ApptDAO(this);\r\n}"},
 {"id":2529, "methodname":"getApptRequestDAO()", "methodnamerefined":"getApptRequestDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getApptRequestDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getApptRequestDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys ApptRequestDAO\r\n */\r\npublic ApptRequestDAO getApptRequestDAO() {\r\n    return new ApptRequestDAO(this);\r\n}"},
 {"id":2530, "methodname":"getApptTypeDAO()", "methodnamerefined":"getApptTypeDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getApptTypeDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getApptTypeDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys ApptTypeDAO\r\n */\r\npublic ApptTypeDAO getApptTypeDAO() {\r\n    return new ApptTypeDAO(this);\r\n}"},
 {"id":2531, "methodname":"getAuthDAO()", "methodnamerefined":"getAuthDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getAuthDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getAuthDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys AuthDAO\r\n */\r\npublic AuthDAO getAuthDAO() {\r\n    return new AuthDAO(this);\r\n}"},
 {"id":2532, "methodname":"getCPTCodesDAO()", "methodnamerefined":"getCPTCodesDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getCPTCodesDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getCPTCodesDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys CPTCodesDAO\r\n */\r\npublic CPTCodesDAO getCPTCodesDAO() {\r\n    return new CPTCodesDAO(this);\r\n}"},
 {"id":2533, "methodname":"getConnection()", "methodnamerefined":"getConnection", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getConnection", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getConnection()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys Connection\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic Connection getConnection() throws SQLException {\r\n    return driver.getConnection();\r\n}"},
 {"id":2534, "methodname":"getDiagnosesDAO()", "methodnamerefined":"getDiagnosesDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getDiagnosesDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getDiagnosesDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys DiagnosesDAO\r\n */\r\npublic DiagnosesDAO getDiagnosesDAO() {\r\n    return new DiagnosesDAO(this);\r\n}"},
 {"id":2535, "methodname":"getDrugInteractionDAO()", "methodnamerefined":"getDrugInteractionDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getDrugInteractionDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getDrugInteractionDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys DrugInteractionDAO\r\n */\r\npublic DrugInteractionDAO getDrugInteractionDAO() {\r\n    return new DrugInteractionDAO(this);\r\n}"},
 {"id":2536, "methodname":"getFakeEmailDAO()", "methodnamerefined":"getFakeEmailDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getFakeEmailDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getFakeEmailDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys FakeEmailDAO\r\n */\r\npublic FakeEmailDAO getFakeEmailDAO() {\r\n    return new FakeEmailDAO(this);\r\n}"},
 {"id":2537, "methodname":"getFamilyDAO()", "methodnamerefined":"getFamilyDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getFamilyDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getFamilyDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys FamilyDAO\r\n */\r\npublic FamilyDAO getFamilyDAO() {\r\n    return new FamilyDAO(this);\r\n}"},
 {"id":2538, "methodname":"getHealthRecordsDAO()", "methodnamerefined":"getHealthRecordsDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getHealthRecordsDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getHealthRecordsDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys HealthRecordsDAO\r\n */\r\npublic HealthRecordsDAO getHealthRecordsDAO() {\r\n    return new HealthRecordsDAO(this);\r\n}"},
 {"id":2539, "methodname":"getHospitalsDAO()", "methodnamerefined":"getHospitalsDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getHospitalsDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getHospitalsDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys HospitalsDAO\r\n */\r\npublic HospitalsDAO getHospitalsDAO() {\r\n    return new HospitalsDAO(this);\r\n}"},
 {"id":2540, "methodname":"getICDCodesDAO()", "methodnamerefined":"getICDCodesDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getICDCodesDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getICDCodesDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys ICDCodesDAO\r\n */\r\npublic ICDCodesDAO getICDCodesDAO() {\r\n    return new ICDCodesDAO(this);\r\n}"},
 {"id":2541, "methodname":"getLOINCDAO()", "methodnamerefined":"getLOINCDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getLOINCDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getLOINCDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys LOINCDAO\r\n */\r\npublic LOINCDAO getLOINCDAO() {\r\n    return new LOINCDAO(this);\r\n}"},
 {"id":2542, "methodname":"getLabProcedureDAO()", "methodnamerefined":"getLabProcedureDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getLabProcedureDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getLabProcedureDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys LabProcedureDAO\r\n */\r\npublic LabProcedureDAO getLabProcedureDAO() {\r\n    return new LabProcedureDAO(this);\r\n}"},
 {"id":2543, "methodname":"getMessageDAO()", "methodnamerefined":"getMessageDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getMessageDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getMessageDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys MessageDAO\r\n */\r\npublic MessageDAO getMessageDAO() {\r\n    return new MessageDAO(this);\r\n}"},
 {"id":2544, "methodname":"getNDCodesDAO()", "methodnamerefined":"getNDCodesDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getNDCodesDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getNDCodesDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys NDCodesDAO\r\n */\r\npublic NDCodesDAO getNDCodesDAO() {\r\n    return new NDCodesDAO(this);\r\n}"},
 {"id":2545, "methodname":"getORCodesDAO()", "methodnamerefined":"getORCodesDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getORCodesDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getORCodesDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys DrugReactionOverrideCodesDAO\r\n */\r\npublic DrugReactionOverrideCodesDAO getORCodesDAO() {\r\n    return new DrugReactionOverrideCodesDAO(this);\r\n}"},
 {"id":2546, "methodname":"getOfficeVisitDAO()", "methodnamerefined":"getOfficeVisitDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getOfficeVisitDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getOfficeVisitDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys OfficeVisitDAO\r\n */\r\npublic OfficeVisitDAO getOfficeVisitDAO() {\r\n    return new OfficeVisitDAO(this);\r\n}"},
 {"id":2547, "methodname":"getPatientDAO()", "methodnamerefined":"getPatientDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getPatientDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getPatientDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys PatientDAO\r\n */\r\npublic PatientDAO getPatientDAO() {\r\n    return new PatientDAO(this);\r\n}"},
 {"id":2548, "methodname":"getPatientInstructionsDAO()", "methodnamerefined":"getPatientInstructionsDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getPatientInstructionsDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getPatientInstructionsDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys PatientInstructionsDAO\r\n */\r\npublic PatientInstructionsDAO getPatientInstructionsDAO() {\r\n    return new PatientInstructionsDAO(this);\r\n}"},
 {"id":2549, "methodname":"getPersonnelDAO()", "methodnamerefined":"getPersonnelDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getPersonnelDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getPersonnelDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys PersonnelDAO\r\n */\r\npublic PersonnelDAO getPersonnelDAO() {\r\n    return new PersonnelDAO(this);\r\n}"},
 {"id":2550, "methodname":"getPrescriptionReportDAO()", "methodnamerefined":"getPrescriptionReportDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getPrescriptionReportDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getPrescriptionReportDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys PrescriptionReportDAO\r\n */\r\npublic PrescriptionReportDAO getPrescriptionReportDAO() {\r\n    return new PrescriptionReportDAO(this);\r\n}"},
 {"id":2551, "methodname":"getPrescriptionsDAO()", "methodnamerefined":"getPrescriptionsDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getPrescriptionsDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getPrescriptionsDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys PrescriptionsDAO\r\n */\r\npublic PrescriptionsDAO getPrescriptionsDAO() {\r\n    return new PrescriptionsDAO(this);\r\n}"},
 {"id":2552, "methodname":"getProceduresDAO()", "methodnamerefined":"getProceduresDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getProceduresDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getProceduresDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys ProceduresDAO\r\n */\r\npublic ProceduresDAO getProceduresDAO() {\r\n    return new ProceduresDAO(this);\r\n}"},
 {"id":2553, "methodname":"getProductionInstance()", "methodnamerefined":"getProductionInstance", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getProductionInstance", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getProductionInstance()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return A production instance of the DAOFactory, to be used in deployment (by Tomcat).\r\n */\r\npublic static DAOFactory getProductionInstance() {\r\n    if ((DAOFactory.productionInstance) == null)\r\n        DAOFactory.productionInstance = new DAOFactory();\r\n\r\n    return DAOFactory.productionInstance;\r\n}"},
 {"id":2554, "methodname":"getReferralDAO()", "methodnamerefined":"getReferralDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getReferralDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getReferralDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys ReferralDAO\r\n */\r\npublic ReferralDAO getReferralDAO() {\r\n    return new ReferralDAO(this);\r\n}"},
 {"id":2555, "methodname":"getRemoteMonitoringDAO()", "methodnamerefined":"getRemoteMonitoringDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getRemoteMonitoringDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getRemoteMonitoringDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys RemoteMonitoringDAO\r\n */\r\npublic RemoteMonitoringDAO getRemoteMonitoringDAO() {\r\n    return new RemoteMonitoringDAO(this);\r\n}"},
 {"id":2556, "methodname":"getReportRequestDAO()", "methodnamerefined":"getReportRequestDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getReportRequestDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getReportRequestDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys ReportRequestDAO\r\n */\r\npublic ReportRequestDAO getReportRequestDAO() {\r\n    return new ReportRequestDAO(this);\r\n}"},
 {"id":2557, "methodname":"getRiskDAO()", "methodnamerefined":"getRiskDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getRiskDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getRiskDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys RiskDAO\r\n */\r\npublic RiskDAO getRiskDAO() {\r\n    return new RiskDAO(this);\r\n}"},
 {"id":2558, "methodname":"getSurveyDAO()", "methodnamerefined":"getSurveyDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getSurveyDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getSurveyDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys SurveyDAO\r\n */\r\npublic SurveyDAO getSurveyDAO() {\r\n    return new SurveyDAO(this);\r\n}"},
 {"id":2559, "methodname":"getSurveyResultDAO()", "methodnamerefined":"getSurveyResultDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getSurveyResultDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getSurveyResultDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys SurveyResultDAO\r\n */\r\npublic SurveyResultDAO getSurveyResultDAO() {\r\n    return new SurveyResultDAO(this);\r\n}"},
 {"id":2560, "methodname":"getTransactionDAO()", "methodnamerefined":"getTransactionDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getTransactionDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getTransactionDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys TransactionDAO\r\n */\r\npublic TransactionDAO getTransactionDAO() {\r\n    return new TransactionDAO(this);\r\n}"},
 {"id":2561, "methodname":"getVisitRemindersDAO()", "methodnamerefined":"getVisitRemindersDAO", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactory.getVisitRemindersDAO", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactory.getVisitRemindersDAO()", "classid":336, "classname":"edu.ncsu.csc.itrust.dao.DAOFactory", "shortclassname":"DAOFactory", "method":"/**\r\n *\r\n *\r\n * @return this DAOFactorys VisitRemindersDAO\r\n */\r\npublic VisitRemindersDAO getVisitRemindersDAO() {\r\n    return new VisitRemindersDAO(this);\r\n}"},
 {"id":2562, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactoryTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactoryTest.-init-()", "classid":337, "classname":"edu.ncsu.csc.itrust.dao.DAOFactoryTest", "shortclassname":"DAOFactoryTest", "method":"DAOFactoryTest() {\r\n}"},
 {"id":2563, "methodname":"testRealProductionDriver()", "methodnamerefined":"testRealProductionDriver", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DAOFactoryTest.testRealProductionDriver", "fullmethod":"edu.ncsu.csc.itrust.dao.DAOFactoryTest.testRealProductionDriver()", "classid":337, "classname":"edu.ncsu.csc.itrust.dao.DAOFactoryTest", "shortclassname":"DAOFactoryTest", "method":"// Show that the production driver cant be access during a unit test\r\npublic void testRealProductionDriver() throws Exception {\r\n    try {\r\n        DAOFactory.getProductionInstance().getConnection();\r\n        fail(\"Exception should have been thrown\");\r\n    } catch (SQLException e) {\r\n        assertTrue(e.getMessage().contains(\"Context Lookup Naming Exception\"));\r\n    }\r\n}"},
 {"id":2564, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DBUtilTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.DBUtilTest.-init-()", "classid":338, "classname":"edu.ncsu.csc.itrust.dao.DBUtilTest", "shortclassname":"DBUtilTest", "method":"DBUtilTest() {\r\n}"},
 {"id":2565, "methodname":"testCanAccessProductionDriver()", "methodnamerefined":"testCanAccessProductionDriver", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DBUtilTest.testCanAccessProductionDriver", "fullmethod":"edu.ncsu.csc.itrust.dao.DBUtilTest.testCanAccessProductionDriver()", "classid":338, "classname":"edu.ncsu.csc.itrust.dao.DBUtilTest", "shortclassname":"DBUtilTest", "method":"public void testCanAccessProductionDriver() throws Exception {\r\n    // Should never be able to do this because JUnit is not running under Tomcat\r\n    assertFalse(DBUtil.canObtainProductionInstance());\r\n}"},
 {"id":2566, "methodname":"testClosingNullPS()", "methodnamerefined":"testClosingNullPS", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DBUtilTest.testClosingNullPS", "fullmethod":"edu.ncsu.csc.itrust.dao.DBUtilTest.testClosingNullPS()", "classid":338, "classname":"edu.ncsu.csc.itrust.dao.DBUtilTest", "shortclassname":"DBUtilTest", "method":"public void testClosingNullPS() throws Exception {\r\n    Connection conn = TestDAOFactory.getTestInstance().getConnection();\r\n    PreparedStatement ps = conn.prepareStatement(\"SHOW TABLES\");\r\n    DBUtil.closeConnection(conn, ps);\r\n}"},
 {"id":2567, "methodname":"testException()", "methodnamerefined":"testException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.DBUtilTest.testException", "fullmethod":"edu.ncsu.csc.itrust.dao.DBUtilTest.testException()", "classid":338, "classname":"edu.ncsu.csc.itrust.dao.DBUtilTest", "shortclassname":"DBUtilTest", "method":"// The following test uses an advanced concept not taught in CSC326 at NCSU called Mock Objects.\r\n// Feel free to take a look at how this works, but know that you will not need to know mock objects\r\n// to do nearly everything in iTrust. Unless your assignment mentions mock objects somewhere, you should\r\n// not need them.\r\n// \r\n// But, if you are interested in a cool unit testing concept, feel free to look at this code as an\r\n// example.\r\n// \r\n// This class uses the EasyMock library to manage the mock objects. http://easymock.org/\r\npublic void testException() throws Exception {\r\n    IMocksControl ctrl = createControl();\r\n    Connection mockConn = ctrl.createMock(Connection.class);\r\n    mockConn.close();\r\n    expectLastCall().andThrow(new SQLException(\"Testing!\"));\r\n    ctrl.replay();\r\n    DBUtil.closeConnection(mockConn, null);\r\n    ctrl.verify();\r\n}"},
 {"id":2568, "methodname":"getConnection()", "methodnamerefined":"getConnection", "methodabbreviation":"edu.ncsu.csc.itrust.dao.IConnectionDriver.getConnection", "fullmethod":"edu.ncsu.csc.itrust.dao.IConnectionDriver.getConnection()", "classid":339, "classname":"edu.ncsu.csc.itrust.dao.IConnectionDriver", "shortclassname":"IConnectionDriver", "method":"public Connection getConnection() throws SQLException;"},
 {"id":2569, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.ProductionConnectionDriver.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.ProductionConnectionDriver.-init-()", "classid":340, "classname":"edu.ncsu.csc.itrust.dao.ProductionConnectionDriver", "shortclassname":"ProductionConnectionDriver", "method":"// In production situations\r\npublic ProductionConnectionDriver() {\r\n}"},
 {"id":2570, "methodname":"-init-(javax.naming.InitialContext)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.ProductionConnectionDriver.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.ProductionConnectionDriver.-init-(javax.naming.InitialContext)", "classid":340, "classname":"edu.ncsu.csc.itrust.dao.ProductionConnectionDriver", "shortclassname":"ProductionConnectionDriver", "method":"// For our special unit test - do not use unless you know what you are doing\r\npublic ProductionConnectionDriver(InitialContext context) {\r\n    initialContext = context;\r\n}"},
 {"id":2571, "methodname":"getConnection()", "methodnamerefined":"getConnection", "methodabbreviation":"edu.ncsu.csc.itrust.dao.ProductionConnectionDriver.getConnection", "fullmethod":"edu.ncsu.csc.itrust.dao.ProductionConnectionDriver.getConnection()", "classid":340, "classname":"edu.ncsu.csc.itrust.dao.ProductionConnectionDriver", "shortclassname":"ProductionConnectionDriver", "method":"public Connection getConnection() throws SQLException {\r\n    try {\r\n        if ((initialContext) == null)\r\n            initialContext = new InitialContext();\r\n\r\n        return ((DataSource) (((Context) (initialContext.lookup(\"java:comp/env\"))).lookup(\"jdbc/itrust\"))).getConnection();\r\n    } catch (NamingException e) {\r\n        throw new SQLException((\"Context Lookup Naming Exception: \" + (e.getMessage())));\r\n    }\r\n}"},
 {"id":2572, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.-init-()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"WardDAOTest() {\r\n}"},
 {"id":2573, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.setUp()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void setUp() {\r\n    ctrl = createControl();\r\n    factory2 = ctrl.createMock(DAOFactory.class);\r\n    wd1 = new WardDAO(factory);\r\n    wd2 = new WardDAO(factory2);\r\n}"},
 {"id":2574, "methodname":"testAddWard()", "methodnamerefined":"testAddWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testAddWard", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testAddWard()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testAddWard() {\r\n    WardBean wb = new WardBean(0L, \"name\", 0L);\r\n    try {\r\n        assertTrue(wd1.addWard(wb));\r\n    } catch (DBException e) {\r\n    } catch (iTrustException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.addWard(wb);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2575, "methodname":"testAddWardRoom()", "methodnamerefined":"testAddWardRoom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testAddWardRoom", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testAddWardRoom()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testAddWardRoom() {\r\n    WardRoomBean wb = new WardRoomBean(0, 0, 0, \"name1\", \"status\");\r\n    try {\r\n        assertTrue(wd1.addWardRoom(wb));\r\n    } catch (DBException e) {\r\n    } catch (iTrustException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.addWardRoom(wb);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2576, "methodname":"testAssignHCPToWard()", "methodnamerefined":"testAssignHCPToWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testAssignHCPToWard", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testAssignHCPToWard()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testAssignHCPToWard() {\r\n    try {\r\n        assertTrue(wd1.assignHCPToWard(1L, 1L));\r\n    } catch (DBException e) {\r\n    } catch (iTrustException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.assignHCPToWard(1L, 1L);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2577, "methodname":"testGetHospitalByWard()", "methodnamerefined":"testGetHospitalByWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testGetHospitalByWard", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testGetHospitalByWard()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testGetHospitalByWard() {\r\n    HospitalBean hb = new HospitalBean();\r\n    try {\r\n        hb = wd1.getHospitalByWard(\"name\");\r\n        assertNull(hb);\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.getHospitalByWard(\"name\");\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2578, "methodname":"testGetWardRoom()", "methodnamerefined":"testGetWardRoom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testGetWardRoom", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testGetWardRoom()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testGetWardRoom() {\r\n    WardRoomBean wrb = new WardRoomBean(0, 0, 0, \"name\", \"status\");\r\n    try {\r\n        wrb = wd1.getWardRoom(\"0\");\r\n        assertNull(wrb);\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.getWardRoom(\"0\");\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2579, "methodname":"testGetWardRoomsByStatus()", "methodnamerefined":"testGetWardRoomsByStatus", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testGetWardRoomsByStatus", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testGetWardRoomsByStatus()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testGetWardRoomsByStatus() {\r\n    List<WardRoomBean> list = new ArrayList<WardRoomBean>();\r\n    try {\r\n        list = wd1.getWardRoomsByStatus(\"status\", 1L);\r\n        assertNotNull(list);\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.getWardRoomsByStatus(\"status\", 1L);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2580, "methodname":"testRemoveWard()", "methodnamerefined":"testRemoveWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testRemoveWard", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testRemoveWard()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testRemoveWard() {\r\n    try {\r\n        wd1.removeWard(1L);\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.removeWard(1L);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2581, "methodname":"testRemoveWard2()", "methodnamerefined":"testRemoveWard2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testRemoveWard2", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testRemoveWard2()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testRemoveWard2() {\r\n    try {\r\n        assertNotNull(wd1.removeWard(1L, 1L));\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.removeWard(1L, 1L);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2582, "methodname":"testRemoveWardRoom()", "methodnamerefined":"testRemoveWardRoom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testRemoveWardRoom", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testRemoveWardRoom()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testRemoveWardRoom() {\r\n    try {\r\n        wd1.removeWardRoom(1L);\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.removeWardRoom(1L);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2583, "methodname":"testUpdateWard()", "methodnamerefined":"testUpdateWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testUpdateWard", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testUpdateWard()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testUpdateWard() {\r\n    WardBean wb = new WardBean(0L, \"name\", 0L);\r\n    try {\r\n        assertEquals(0, wd1.updateWard(wb));\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.updateWard(wb);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2584, "methodname":"testUpdateWardRoom()", "methodnamerefined":"testUpdateWardRoom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testUpdateWardRoom", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testUpdateWardRoom()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testUpdateWardRoom() {\r\n    WardRoomBean wb = new WardRoomBean(0, 0, 0, \"name1\", \"status\");\r\n    try {\r\n        assertEquals(0, wd1.updateWardRoom(wb));\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.updateWardRoom(wb);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2585, "methodname":"testUpdateWardRoomOccupant()", "methodnamerefined":"testUpdateWardRoomOccupant", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testUpdateWardRoomOccupant", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testUpdateWardRoomOccupant()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testUpdateWardRoomOccupant() {\r\n    WardRoomBean wrb = new WardRoomBean(0, 0, 0, \"name\", \"status\");\r\n    try {\r\n        assertEquals(0, wd1.updateWardRoomOccupant(wrb));\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.updateWardRoomOccupant(wrb);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2586, "methodname":"testgetAllHCPsAssignedToWard()", "methodnamerefined":"testgetAllHCPsAssignedToWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testgetAllHCPsAssignedToWard", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testgetAllHCPsAssignedToWard()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testgetAllHCPsAssignedToWard() {\r\n    List<PersonnelBean> list = new ArrayList<PersonnelBean>();\r\n    try {\r\n        list = wd1.getAllHCPsAssignedToWard(1L);\r\n        assertNotNull(list);\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.getAllHCPsAssignedToWard(1L);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2587, "methodname":"testgetAllWardRoomsByWardID()", "methodnamerefined":"testgetAllWardRoomsByWardID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testgetAllWardRoomsByWardID", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testgetAllWardRoomsByWardID()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testgetAllWardRoomsByWardID() {\r\n    List<WardRoomBean> list = new ArrayList<WardRoomBean>();\r\n    try {\r\n        list = wd1.getAllWardRoomsByWardID(1L);\r\n        assertNotNull(list);\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.getAllWardRoomsByWardID(1L);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2588, "methodname":"testgetAllWardsByHCP()", "methodnamerefined":"testgetAllWardsByHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testgetAllWardsByHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testgetAllWardsByHCP()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testgetAllWardsByHCP() {\r\n    List<WardBean> list = new ArrayList<WardBean>();\r\n    try {\r\n        list = wd1.getAllWardsByHCP(1L);\r\n        assertNotNull(list);\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.getAllWardsByHCP(1L);\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2589, "methodname":"testgetAllWardsByHospitalID()", "methodnamerefined":"testgetAllWardsByHospitalID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.WardDAOTest.testgetAllWardsByHospitalID", "fullmethod":"edu.ncsu.csc.itrust.dao.WardDAOTest.testgetAllWardsByHospitalID()", "classid":341, "classname":"edu.ncsu.csc.itrust.dao.WardDAOTest", "shortclassname":"WardDAOTest", "method":"public void testgetAllWardsByHospitalID() {\r\n    List<WardBean> list = new ArrayList<WardBean>();\r\n    try {\r\n        list = wd1.getAllWardsByHospitalID(\"1\");\r\n        assertNotNull(list);\r\n    } catch (DBException e) {\r\n    }\r\n    try {\r\n        expect(factory2.getConnection()).andThrow(new SQLException());\r\n        ctrl.replay();\r\n        wd2.getAllWardsByHospitalID(\"1\");\r\n        fail();\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":2590, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.-init-()", "classid":342, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest", "shortclassname":"LOINCDAOExceptionTest", "method":"LOINCDAOExceptionTest() {\r\n}"},
 {"id":2591, "methodname":"testAddLOINC()", "methodnamerefined":"testAddLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.testAddLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.testAddLOINC()", "classid":342, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest", "shortclassname":"LOINCDAOExceptionTest", "method":"public void testAddLOINC() throws Exception {\r\n    LOINCbean lb = new LOINCbean();\r\n    try {\r\n        lDAO.addLOINC(lb);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2592, "methodname":"testGetAllLOINC()", "methodnamerefined":"testGetAllLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.testGetAllLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.testGetAllLOINC()", "classid":342, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest", "shortclassname":"LOINCDAOExceptionTest", "method":"public void testGetAllLOINC() throws Exception {\r\n    try {\r\n        lDAO.getAllLOINC();\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2593, "methodname":"testGetProcedures()", "methodnamerefined":"testGetProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.testGetProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.testGetProcedures()", "classid":342, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest", "shortclassname":"LOINCDAOExceptionTest", "method":"public void testGetProcedures() throws Exception {\r\n    try {\r\n        lDAO.getProcedures(\"2\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2594, "methodname":"testUpdate()", "methodnamerefined":"testUpdate", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.testUpdate", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest.testUpdate()", "classid":342, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOExceptionTest", "shortclassname":"LOINCDAOExceptionTest", "method":"public void testUpdate() throws Exception {\r\n    LOINCbean lb = new LOINCbean();\r\n    try {\r\n        lDAO.update(lb);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2595, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.-init-()", "classid":343, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest", "shortclassname":"LOINCDAOTest", "method":"LOINCDAOTest() {\r\n}"},
 {"id":2596, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.setUp()", "classid":343, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest", "shortclassname":"LOINCDAOTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.loincs();\r\n}"},
 {"id":2597, "methodname":"testAddLOINC()", "methodnamerefined":"testAddLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.testAddLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.testAddLOINC()", "classid":343, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest", "shortclassname":"LOINCDAOTest", "method":"public void testAddLOINC() throws Exception {\r\n    LOINCbean lb = new LOINCbean();\r\n    lb.setLabProcedureCode(\"33333-3\");\r\n    lb.setComponent(\"boo\");\r\n    lb.setKindOfProperty(\"\");\r\n    lb.setMethodType(\" \");\r\n    lb.setScaleType(\"453\");\r\n    lb.setSystem(\"Windows\");\r\n    lb.setTimeAspect(\"30 minutes\");\r\n    lDAO.addLOINC(lb);\r\n    LOINCbean lb2 = lDAO.getProcedures(\"33333-3\").get(0);\r\n    assertEquals(\"boo\", lb2.getComponent());\r\n}"},
 {"id":2598, "methodname":"testGetAllLOINC()", "methodnamerefined":"testGetAllLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.testGetAllLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.testGetAllLOINC()", "classid":343, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest", "shortclassname":"LOINCDAOTest", "method":"public void testGetAllLOINC() throws Exception {\r\n    LOINCbean lb = new LOINCbean();\r\n    lb.setLabProcedureCode(\"77777-3\");\r\n    lb.setComponent(\"boo\");\r\n    lb.setKindOfProperty(\"\");\r\n    lb.setMethodType(\" \");\r\n    lb.setScaleType(\"453\");\r\n    lb.setSystem(\"Windows\");\r\n    lb.setTimeAspect(\"30 minutes\");\r\n    lDAO.addLOINC(lb);\r\n    lb = new LOINCbean();\r\n    lb.setLabProcedureCode(\"77777-3\");\r\n    lb.setComponent(\"works\");\r\n    lb.setKindOfProperty(\"\");\r\n    lb.setMethodType(\" \");\r\n    lb.setScaleType(\"453\");\r\n    lb.setSystem(\"Windows\");\r\n    lb.setTimeAspect(\"30 minutes\");\r\n    lDAO.update(lb);\r\n    List<LOINCbean> lb2 = lDAO.getAllLOINC();\r\n    assertEquals(5, lb2.size());\r\n}"},
 {"id":2599, "methodname":"testUpdate()", "methodnamerefined":"testUpdate", "methodabbreviation":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.testUpdate", "fullmethod":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest.testUpdate()", "classid":343, "classname":"edu.ncsu.csc.itrust.dao.LOINC.LOINCDAOTest", "shortclassname":"LOINCDAOTest", "method":"public void testUpdate() throws Exception {\r\n    LOINCbean lb = new LOINCbean();\r\n    lb.setLabProcedureCode(\"77777-3\");\r\n    lb.setComponent(\"boo\");\r\n    lb.setKindOfProperty(\"\");\r\n    lb.setMethodType(\" \");\r\n    lb.setScaleType(\"453\");\r\n    lb.setSystem(\"Windows\");\r\n    lb.setTimeAspect(\"30 minutes\");\r\n    lDAO.addLOINC(lb);\r\n    lb = new LOINCbean();\r\n    lb.setLabProcedureCode(\"77777-3\");\r\n    lb.setComponent(\"works\");\r\n    lb.setKindOfProperty(\"\");\r\n    lb.setMethodType(\" \");\r\n    lb.setScaleType(\"453\");\r\n    lb.setSystem(\"Windows\");\r\n    lb.setTimeAspect(\"30 minutes\");\r\n    lDAO.update(lb);\r\n    LOINCbean lb2 = lDAO.getProcedures(\"77777-3\").get(0);\r\n    assertEquals(\"works\", lb2.getComponent());\r\n}"},
 {"id":2600, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.-init-()", "classid":344, "classname":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest", "shortclassname":"AccessDAOExceptionTest", "method":"AccessDAOExceptionTest() {\r\n}"},
 {"id":2601, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.setUp()", "classid":344, "classname":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest", "shortclassname":"AccessDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":2602, "methodname":"testDBException()", "methodnamerefined":"testDBException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.testDBException", "fullmethod":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.testDBException()", "classid":344, "classname":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest", "shortclassname":"AccessDAOExceptionTest", "method":"public void testDBException() throws Exception {\r\n    DBException e = new DBException(null);\r\n    assertEquals(\"No extended information.\", e.getExtendedMessage());\r\n    e = new DBException(new SQLException(\"Fake SQL Exception\"));\r\n    assertEquals(\"Fake SQL Exception\", e.getExtendedMessage());\r\n}"},
 {"id":2603, "methodname":"testGetSessionTimeoutException()", "methodnamerefined":"testGetSessionTimeoutException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.testGetSessionTimeoutException", "fullmethod":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.testGetSessionTimeoutException()", "classid":344, "classname":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest", "shortclassname":"AccessDAOExceptionTest", "method":"public void testGetSessionTimeoutException() throws Exception {\r\n    try {\r\n        evilDAO.getSessionTimeoutMins();\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2604, "methodname":"testSetSessionTimeoutException()", "methodnamerefined":"testSetSessionTimeoutException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.testSetSessionTimeoutException", "fullmethod":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.testSetSessionTimeoutException()", "classid":344, "classname":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest", "shortclassname":"AccessDAOExceptionTest", "method":"public void testSetSessionTimeoutException() throws Exception {\r\n    try {\r\n        evilDAO.setSessionTimeoutMins(0);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertSame(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2605, "methodname":"testiTrustException()", "methodnamerefined":"testiTrustException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.testiTrustException", "fullmethod":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest.testiTrustException()", "classid":344, "classname":"edu.ncsu.csc.itrust.dao.access.AccessDAOExceptionTest", "shortclassname":"AccessDAOExceptionTest", "method":"public void testiTrustException() throws Exception {\r\n    iTrustException e = new iTrustException(null);\r\n    assertEquals(\"An error has occurred. Please see log for details.\", e.getMessage());\r\n    assertEquals(\"No extended information.\", e.getExtendedMessage());\r\n}"},
 {"id":2606, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.-init-()", "classid":345, "classname":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest", "shortclassname":"GetSessionTimeoutTest", "method":"GetSessionTimeoutTest() {\r\n}"},
 {"id":2607, "methodname":"deleteTimeout()", "methodnamerefined":"deleteTimeout", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.deleteTimeout", "fullmethod":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.deleteTimeout()", "classid":345, "classname":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest", "shortclassname":"GetSessionTimeoutTest", "method":"private void deleteTimeout() throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = TestDAOFactory.getTestInstance().getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM globalvariables WHERE Name=Timeout\");\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2608, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.setUp()", "classid":345, "classname":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest", "shortclassname":"GetSessionTimeoutTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.timeout();\r\n}"},
 {"id":2609, "methodname":"testChangeTimeout()", "methodnamerefined":"testChangeTimeout", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.testChangeTimeout", "fullmethod":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.testChangeTimeout()", "classid":345, "classname":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest", "shortclassname":"GetSessionTimeoutTest", "method":"public void testChangeTimeout() throws Exception {\r\n    assertEquals(20, accessDAO.getSessionTimeoutMins());\r\n    accessDAO.setSessionTimeoutMins(5);\r\n    assertEquals(5, accessDAO.getSessionTimeoutMins());\r\n}"},
 {"id":2610, "methodname":"testUpdateBadTimeout()", "methodnamerefined":"testUpdateBadTimeout", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.testUpdateBadTimeout", "fullmethod":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest.testUpdateBadTimeout()", "classid":345, "classname":"edu.ncsu.csc.itrust.dao.access.GetSessionTimeoutTest", "shortclassname":"GetSessionTimeoutTest", "method":"public void testUpdateBadTimeout() throws Exception {\r\n    deleteTimeout();\r\n    assertEquals(20, accessDAO.getSessionTimeoutMins());\r\n    deleteTimeout();\r\n    accessDAO.setSessionTimeoutMins(5);\r\n    assertEquals(5, accessDAO.getSessionTimeoutMins());\r\n}"},
 {"id":2611, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.-init-()", "classid":346, "classname":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest", "shortclassname":"UpdatePrivacyLevelTest", "method":"UpdatePrivacyLevelTest() {\r\n}"},
 {"id":2612, "methodname":"getDiagnoses()", "methodnamerefined":"getDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.getDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.getDiagnoses()", "classid":346, "classname":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest", "shortclassname":"UpdatePrivacyLevelTest", "method":"private List<DiagnosisBean> getDiagnoses() throws DBException {\r\n    List<DiagnosisBean> diagnoses = diagDAO.getList(960);\r\n    Collections.sort(diagnoses, new Comparator<DiagnosisBean>() {\r\n        public int compare(DiagnosisBean o1, DiagnosisBean o2) {\r\n            return Long.valueOf(o1.getOvDiagnosisID()).compareTo(Long.valueOf(o2.getOvDiagnosisID()));\r\n        }\r\n    });\r\n    return diagnoses;\r\n}"},
 {"id":2613, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.setUp()", "classid":346, "classname":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest", "shortclassname":"UpdatePrivacyLevelTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":2614, "methodname":"testUpdatePrivacyLevelWithAccess()", "methodnamerefined":"testUpdatePrivacyLevelWithAccess", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.testUpdatePrivacyLevelWithAccess", "fullmethod":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.testUpdatePrivacyLevelWithAccess()", "classid":346, "classname":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest", "shortclassname":"UpdatePrivacyLevelTest", "method":"public void testUpdatePrivacyLevelWithAccess() throws Exception {\r\n    List<DiagnosisBean> diagnoses = getDiagnoses();\r\n    assertEquals(5, diagnoses.size());\r\n    DiagnosisBean d = new DiagnosisBean();\r\n    d.setOvDiagnosisID(diagnoses.get(1).getOvDiagnosisID());\r\n    diagnoses = getDiagnoses();\r\n    assertEquals(5, diagnoses.size());\r\n}"},
 {"id":2615, "methodname":"testUpdatePrivacyLevelWithoutAccess()", "methodnamerefined":"testUpdatePrivacyLevelWithoutAccess", "methodabbreviation":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.testUpdatePrivacyLevelWithoutAccess", "fullmethod":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest.testUpdatePrivacyLevelWithoutAccess()", "classid":346, "classname":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest", "shortclassname":"UpdatePrivacyLevelTest", "method":"public void testUpdatePrivacyLevelWithoutAccess() throws Exception {\r\n    List<DiagnosisBean> diagnoses = getDiagnoses();\r\n    DiagnosisBean d = new DiagnosisBean();\r\n    d.setOvDiagnosisID(diagnoses.get(0).getOvDiagnosisID());\r\n    d.setDescription(\"My Description\");\r\n    d.setICDCode(\"79.3\");\r\n    diagnoses = getDiagnoses();\r\n    assertEquals(5, diagnoses.size());\r\n}"},
 {"id":2616, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.-init-()", "classid":347, "classname":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest", "shortclassname":"AdverseEventDAOExceptionTest", "method":"AdverseEventDAOExceptionTest() {\r\n}"},
 {"id":2617, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.setUp()", "classid":347, "classname":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest", "shortclassname":"AdverseEventDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":2618, "methodname":"testGetHCPMID()", "methodnamerefined":"testGetHCPMID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.testGetHCPMID", "fullmethod":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.testGetHCPMID()", "classid":347, "classname":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest", "shortclassname":"AdverseEventDAOExceptionTest", "method":"public void testGetHCPMID() throws Exception {\r\n    try {\r\n        evilDAO.getHCPMID(1);\r\n        fail(\"Should have thrown DBException\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2619, "methodname":"testGetReport()", "methodnamerefined":"testGetReport", "methodabbreviation":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.testGetReport", "fullmethod":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.testGetReport()", "classid":347, "classname":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest", "shortclassname":"AdverseEventDAOExceptionTest", "method":"public void testGetReport() throws Exception {\r\n    try {\r\n        evilDAO.getReport(1);\r\n        fail(\"Should have thrown DBException\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2620, "methodname":"testGetReportsFor()", "methodnamerefined":"testGetReportsFor", "methodabbreviation":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.testGetReportsFor", "fullmethod":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest.testGetReportsFor()", "classid":347, "classname":"edu.ncsu.csc.itrust.dao.adverseevent.AdverseEventDAOExceptionTest", "shortclassname":"AdverseEventDAOExceptionTest", "method":"public void testGetReportsFor() throws Exception {\r\n    try {\r\n        evilDAO.getReportsFor(1);\r\n        fail(\"Should have thrown DBException\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2621, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.AddAllergiesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.AddAllergiesTest.-init-()", "classid":348, "classname":"edu.ncsu.csc.itrust.dao.allergies.AddAllergiesTest", "shortclassname":"AddAllergiesTest", "method":"AddAllergiesTest() {\r\n}"},
 {"id":2622, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.AddAllergiesTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.AddAllergiesTest.setUp()", "classid":348, "classname":"edu.ncsu.csc.itrust.dao.allergies.AddAllergiesTest", "shortclassname":"AddAllergiesTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n}"},
 {"id":2623, "methodname":"testGetAllergiesFor2()", "methodnamerefined":"testGetAllergiesFor2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.AddAllergiesTest.testGetAllergiesFor2", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.AddAllergiesTest.testGetAllergiesFor2()", "classid":348, "classname":"edu.ncsu.csc.itrust.dao.allergies.AddAllergiesTest", "shortclassname":"AddAllergiesTest", "method":"/* updated to reflect the new way addAllergy updates allergyDAO. */\r\npublic void testGetAllergiesFor2() throws Exception {\r\n    AllergyBean bean = new AllergyBean();\r\n    bean.setPatientID(2);\r\n    bean.setNDCode(\"081096\");\r\n    bean.setDescription(\"Aspirin\");\r\n    assertEquals(2, allergyDAO.getAllergies(2L).size());\r\n    allergyDAO.addAllergy(bean);\r\n    List<AllergyBean> allergies = allergyDAO.getAllergies(2L);\r\n    assertEquals(3, allergies.size());\r\n    assertEquals(\"Aspirin\", allergies.get(0).getDescription());\r\n}"},
 {"id":2624, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest.-init-()", "classid":349, "classname":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest", "shortclassname":"AllergyDAOExceptionTest", "method":"AllergyDAOExceptionTest() {\r\n}"},
 {"id":2625, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest.setUp()", "classid":349, "classname":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest", "shortclassname":"AllergyDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":2626, "methodname":"testAddAllergyException()", "methodnamerefined":"testAddAllergyException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest.testAddAllergyException", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest.testAddAllergyException()", "classid":349, "classname":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest", "shortclassname":"AllergyDAOExceptionTest", "method":"/* updated to reflect the new way addAllergy updates allergyDAO. */\r\npublic void testAddAllergyException() throws Exception {\r\n    try {\r\n        AllergyBean bean = new AllergyBean();\r\n        bean.setPatientID(0);\r\n        bean.setNDCode(\"\");\r\n        bean.setDescription(\"\");\r\n        evilDAO.addAllergy(bean);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2627, "methodname":"testGetAllergyException()", "methodnamerefined":"testGetAllergyException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest.testGetAllergyException", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest.testGetAllergyException()", "classid":349, "classname":"edu.ncsu.csc.itrust.dao.allergies.AllergyDAOExceptionTest", "shortclassname":"AllergyDAOExceptionTest", "method":"public void testGetAllergyException() throws Exception {\r\n    try {\r\n        evilDAO.getAllergies(0);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2628, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest.-init-()", "classid":350, "classname":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest", "shortclassname":"GetAllergiesTest", "method":"GetAllergiesTest() {\r\n}"},
 {"id":2629, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest.setUp()", "classid":350, "classname":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest", "shortclassname":"GetAllergiesTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.patient1();\r\n}"},
 {"id":2630, "methodname":"testGetAllergiesFor1()", "methodnamerefined":"testGetAllergiesFor1", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest.testGetAllergiesFor1", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest.testGetAllergiesFor1()", "classid":350, "classname":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest", "shortclassname":"GetAllergiesTest", "method":"public void testGetAllergiesFor1() throws Exception {\r\n    assertEquals(0, allergyDAO.getAllergies(1L).size());\r\n}"},
 {"id":2631, "methodname":"testGetAllergiesFor2()", "methodnamerefined":"testGetAllergiesFor2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest.testGetAllergiesFor2", "fullmethod":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest.testGetAllergiesFor2()", "classid":350, "classname":"edu.ncsu.csc.itrust.dao.allergies.GetAllergiesTest", "shortclassname":"GetAllergiesTest", "method":"public void testGetAllergiesFor2() throws Exception {\r\n    List<AllergyBean> allergies = allergyDAO.getAllergies(2L);\r\n    assertEquals(2, allergies.size());\r\n    assertEquals(\"Pollen\", allergies.get(0).getDescription());\r\n    assertEquals(2, allergies.get(0).getPatientID());\r\n    assertEquals(\"664662530\", allergies.get(1).getNDCode());\r\n    assertEquals(2, allergies.get(1).getPatientID());\r\n}"},
 {"id":2632, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.-init-()", "classid":351, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest", "shortclassname":"ApptDAOTest", "method":"ApptDAOTest() {\r\n}"},
 {"id":2633, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.setUp()", "classid":351, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest", "shortclassname":"ApptDAOTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.appointmentType();\r\n    a1 = new ApptBean();\r\n    a1.setDate(new Timestamp(new Date().getTime()));\r\n    a1.setApptType(\"Ultrasound\");\r\n    a1.setHcp(doctorMID);\r\n    a1.setPatient(patientMID);\r\n    a2 = new ApptBean();\r\n    a2.setDate(new Timestamp(((new Date().getTime()) + ((1000 * 60) * 15))));// 15 minutes later\r\n\r\n    a2.setApptType(\"Ultrasound\");\r\n    a2.setHcp(doctorMID);\r\n    a2.setPatient(patientMID);\r\n    a3 = new ApptBean();\r\n    a3.setDate(new Timestamp(((new Date().getTime()) + ((1000 * 60) * 45))));// 45 minutes later\r\n\r\n    a3.setApptType(\"Ultrasound\");\r\n    a3.setHcp(doctorMID);\r\n    a3.setPatient(patientMID);\r\n}"},
 {"id":2634, "methodname":"testAppointment()", "methodnamerefined":"testAppointment", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testAppointment", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testAppointment()", "classid":351, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest", "shortclassname":"ApptDAOTest", "method":"public void testAppointment() throws Exception {\r\n    long doctorMID = 9000000000L;\r\n    List<ApptBean> conflicts = apptDAO.getAllConflictsForDoctor(doctorMID);\r\n    assertEquals(0, conflicts.size());\r\n    apptDAO.scheduleAppt(a1);\r\n    apptDAO.scheduleAppt(a3);\r\n    conflicts = apptDAO.getAllConflictsForDoctor(doctorMID);\r\n    assertEquals(0, conflicts.size());\r\n}"},
 {"id":2635, "methodname":"testAppointmentConflict()", "methodnamerefined":"testAppointmentConflict", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testAppointmentConflict", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testAppointmentConflict()", "classid":351, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest", "shortclassname":"ApptDAOTest", "method":"public void testAppointmentConflict() throws Exception {\r\n    long doctorMID = 9000000000L;\r\n    List<ApptBean> conflicts = apptDAO.getAllConflictsForDoctor(doctorMID);\r\n    assertEquals(0, conflicts.size());\r\n    apptDAO.scheduleAppt(a1);\r\n    apptDAO.scheduleAppt(a2);\r\n    conflicts = apptDAO.getAllConflictsForDoctor(doctorMID);\r\n    assertEquals(2, conflicts.size());\r\n}"},
 {"id":2636, "methodname":"testAppointmentPatientConflict()", "methodnamerefined":"testAppointmentPatientConflict", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testAppointmentPatientConflict", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testAppointmentPatientConflict()", "classid":351, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest", "shortclassname":"ApptDAOTest", "method":"public void testAppointmentPatientConflict() throws Exception {\r\n    List<ApptBean> conflicts = apptDAO.getAllConflictsForPatient(patientMID);\r\n    assertEquals(0, conflicts.size());\r\n    apptDAO.scheduleAppt(a1);\r\n    apptDAO.scheduleAppt(a2);\r\n    conflicts = apptDAO.getAllConflictsForPatient(patientMID);\r\n    assertEquals(2, conflicts.size());\r\n}"},
 {"id":2637, "methodname":"testGetApptType()", "methodnamerefined":"testGetApptType", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testGetApptType", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testGetApptType()", "classid":351, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest", "shortclassname":"ApptDAOTest", "method":"public void testGetApptType() throws Exception {\r\n    ApptTypeDAO apptTypeDAO = factory.getApptTypeDAO();\r\n    ApptTypeBean type = apptTypeDAO.getApptType(\"Ultrasound\");\r\n    assertEquals(30, type.getDuration());\r\n    assertEquals(\"Ultrasound\", type.getName());\r\n}"},
 {"id":2638, "methodname":"testGetConflictForAppointment()", "methodnamerefined":"testGetConflictForAppointment", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testGetConflictForAppointment", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testGetConflictForAppointment()", "classid":351, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest", "shortclassname":"ApptDAOTest", "method":"public void testGetConflictForAppointment() throws Exception {\r\n    List<ApptBean> conflicts = apptDAO.getAllHCPConflictsForAppt(doctorMID, a1);\r\n    assertEquals(0, conflicts.size());\r\n    apptDAO.scheduleAppt(a1);\r\n    conflicts = apptDAO.getAllHCPConflictsForAppt(doctorMID, a1);\r\n    assertEquals(1, conflicts.size());\r\n    ApptBean a1new = conflicts.get(0);\r\n    conflicts = apptDAO.getAllHCPConflictsForAppt(doctorMID, a1new);\r\n    assertEquals(0, conflicts.size());\r\n    apptDAO.scheduleAppt(a2);\r\n    conflicts = apptDAO.getAllHCPConflictsForAppt(doctorMID, a1new);\r\n    assertEquals(1, conflicts.size());\r\n}"},
 {"id":2639, "methodname":"testGetPatientConflictForAppointment()", "methodnamerefined":"testGetPatientConflictForAppointment", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testGetPatientConflictForAppointment", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest.testGetPatientConflictForAppointment()", "classid":351, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptDAOTest", "shortclassname":"ApptDAOTest", "method":"public void testGetPatientConflictForAppointment() throws Exception {\r\n    List<ApptBean> conflicts = apptDAO.getAllPatientConflictsForAppt(patientMID, a1);\r\n    assertEquals(0, conflicts.size());\r\n    apptDAO.scheduleAppt(a1);\r\n    conflicts = apptDAO.getAllPatientConflictsForAppt(patientMID, a1);\r\n    assertEquals(1, conflicts.size());\r\n    ApptBean a1new = conflicts.get(0);\r\n    conflicts = apptDAO.getAllHCPConflictsForAppt(doctorMID, a1new);\r\n    assertEquals(0, conflicts.size());\r\n    apptDAO.scheduleAppt(a2);\r\n    conflicts = apptDAO.getAllPatientConflictsForAppt(patientMID, a1new);\r\n    assertEquals(1, conflicts.size());\r\n}"},
 {"id":2640, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.-init-()", "classid":352, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest", "shortclassname":"ApptRequestDAOTest", "method":"ApptRequestDAOTest() {\r\n}"},
 {"id":2641, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.setUp()", "classid":352, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest", "shortclassname":"ApptRequestDAOTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.apptRequestConflicts();\r\n    arDAO = TestDAOFactory.getTestInstance().getApptRequestDAO();\r\n}"},
 {"id":2642, "methodname":"testAddApptRequest()", "methodnamerefined":"testAddApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.testAddApptRequest", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.testAddApptRequest()", "classid":352, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest", "shortclassname":"ApptRequestDAOTest", "method":"public void testAddApptRequest() throws Exception {\r\n    gen.clearAllTables();\r\n    ApptBean bean = new ApptBean();\r\n    bean.setApptType(\"General Checkup\");\r\n    bean.setHcp(9000000000L);\r\n    bean.setPatient(2L);\r\n    bean.setDate(new Timestamp(System.currentTimeMillis()));\r\n    ApptRequestBean req = new ApptRequestBean();\r\n    req.setRequestedAppt(bean);\r\n    arDAO.addApptRequest(req);\r\n    List<ApptRequestBean> reqs = arDAO.getApptRequestsFor(9000000000L);\r\n    assertEquals(1, reqs.size());\r\n    assertEquals(bean.getPatient(), reqs.get(0).getRequestedAppt().getPatient());\r\n    assertTrue(reqs.get(0).isPending());\r\n    assertFalse(reqs.get(0).isAccepted());\r\n}"},
 {"id":2643, "methodname":"testGetApptRequest()", "methodnamerefined":"testGetApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.testGetApptRequest", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.testGetApptRequest()", "classid":352, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest", "shortclassname":"ApptRequestDAOTest", "method":"public void testGetApptRequest() throws Exception {\r\n    List<ApptRequestBean> beans = arDAO.getApptRequestsFor(9000000000L);\r\n    ApptRequestBean b = beans.get(0);\r\n    int id = b.getRequestedAppt().getApptID();\r\n    ApptRequestBean b2 = arDAO.getApptRequest(id);\r\n    assertEquals(b.getRequestedAppt().getApptID(), b2.getRequestedAppt().getApptID());\r\n}"},
 {"id":2644, "methodname":"testGetApptRequestsFor()", "methodnamerefined":"testGetApptRequestsFor", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.testGetApptRequestsFor", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.testGetApptRequestsFor()", "classid":352, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest", "shortclassname":"ApptRequestDAOTest", "method":"public void testGetApptRequestsFor() throws Exception {\r\n    List<ApptRequestBean> beans = arDAO.getApptRequestsFor(9000000000L);\r\n    assertEquals(1, beans.size());\r\n    assertEquals(2L, beans.get(0).getRequestedAppt().getPatient());\r\n    assertTrue(beans.get(0).isPending());\r\n}"},
 {"id":2645, "methodname":"testUpdateApptRequest()", "methodnamerefined":"testUpdateApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.testUpdateApptRequest", "fullmethod":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest.testUpdateApptRequest()", "classid":352, "classname":"edu.ncsu.csc.itrust.dao.appointment.ApptRequestDAOTest", "shortclassname":"ApptRequestDAOTest", "method":"public void testUpdateApptRequest() throws Exception {\r\n    List<ApptRequestBean> beans = arDAO.getApptRequestsFor(9000000000L);\r\n    ApptRequestBean b = beans.get(0);\r\n    int id = b.getRequestedAppt().getApptID();\r\n    b.setPending(false);\r\n    b.setAccepted(true);\r\n    arDAO.updateApptRequest(b);\r\n    ApptRequestBean b2 = arDAO.getApptRequest(id);\r\n    assertEquals(b.getRequestedAppt().getApptID(), b2.getRequestedAppt().getApptID());\r\n    assertFalse(b2.isPending());\r\n    assertTrue(b2.isAccepted());\r\n}"},
 {"id":2646, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.-init-()", "classid":353, "classname":"edu.ncsu.csc.itrust.dao.auth.AddUserTest", "shortclassname":"AddUserTest", "method":"AddUserTest() {\r\n}"},
 {"id":2647, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.setUp()", "classid":353, "classname":"edu.ncsu.csc.itrust.dao.auth.AddUserTest", "shortclassname":"AddUserTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":2648, "methodname":"test500Gone()", "methodnamerefined":"test500Gone", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.test500Gone", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.test500Gone()", "classid":353, "classname":"edu.ncsu.csc.itrust.dao.auth.AddUserTest", "shortclassname":"AddUserTest", "method":"public void test500Gone() throws Exception {\r\n    try {\r\n        authDAO.getUserRole(500);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"User does not exist\", e.getMessage());\r\n    }\r\n}"},
 {"id":2649, "methodname":"testAdd500WithHCP()", "methodnamerefined":"testAdd500WithHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.testAdd500WithHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.testAdd500WithHCP()", "classid":353, "classname":"edu.ncsu.csc.itrust.dao.auth.AddUserTest", "shortclassname":"AddUserTest", "method":"public void testAdd500WithHCP() throws Exception {\r\n    String password = authDAO.addUser(500L, Role.HCP, \"password\");\r\n    assertEquals(Role.HCP, authDAO.getUserRole(500L));\r\n    // Ensure that the password returned is the one given to the method\r\n    assertTrue(password.equals(\"password\"));\r\n}"},
 {"id":2650, "methodname":"testAddWithPatient()", "methodnamerefined":"testAddWithPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.testAddWithPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AddUserTest.testAddWithPatient()", "classid":353, "classname":"edu.ncsu.csc.itrust.dao.auth.AddUserTest", "shortclassname":"AddUserTest", "method":"public void testAddWithPatient() throws Exception {\r\n    String password = authDAO.addUser(500L, Role.PATIENT, \"password\");\r\n    assertEquals(Role.PATIENT, authDAO.getUserRole(500L));\r\n    // Ensure that the password returned is the one given to the method\r\n    assertTrue(password.equals(\"password\"));\r\n}"},
 {"id":2651, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.-init-()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"AuthDAOExceptionTest() {\r\n}"},
 {"id":2652, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.setUp()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":2653, "methodname":"testAddUserException()", "methodnamerefined":"testAddUserException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testAddUserException", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testAddUserException()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testAddUserException() throws Exception {\r\n    try {\r\n        evilDAO.addUser(0L, Role.ADMIN, \"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2654, "methodname":"testCheckUserExistsException()", "methodnamerefined":"testCheckUserExistsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testCheckUserExistsException", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testCheckUserExistsException()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testCheckUserExistsException() throws Exception {\r\n    try {\r\n        evilDAO.checkUserExists(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2655, "methodname":"testGetSecurityAnswer()", "methodnamerefined":"testGetSecurityAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testGetSecurityAnswer", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testGetSecurityAnswer()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testGetSecurityAnswer() throws Exception {\r\n    try {\r\n        evilDAO.getSecurityQuestion(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2656, "methodname":"testGetSecurityQuestion()", "methodnamerefined":"testGetSecurityQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testGetSecurityQuestion", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testGetSecurityQuestion()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testGetSecurityQuestion() throws Exception {\r\n    try {\r\n        evilDAO.getSecurityAnswer(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2657, "methodname":"testGetUserNameException()", "methodnamerefined":"testGetUserNameException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testGetUserNameException", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testGetUserNameException()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testGetUserNameException() throws Exception {\r\n    try {\r\n        evilDAO.getUserName(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2658, "methodname":"testGetUserRoleException()", "methodnamerefined":"testGetUserRoleException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testGetUserRoleException", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testGetUserRoleException()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testGetUserRoleException() throws Exception {\r\n    try {\r\n        evilDAO.getUserRole(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2659, "methodname":"testLoginFailuresException()", "methodnamerefined":"testLoginFailuresException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testLoginFailuresException", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testLoginFailuresException()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testLoginFailuresException() throws Exception {\r\n    try {\r\n        evilDAO.getLoginFailures(\"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2660, "methodname":"testRecordLoginFailureException()", "methodnamerefined":"testRecordLoginFailureException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testRecordLoginFailureException", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testRecordLoginFailureException()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testRecordLoginFailureException() throws Exception {\r\n    try {\r\n        evilDAO.recordLoginFailure(\"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2661, "methodname":"testRecordResetPasswordFailure()", "methodnamerefined":"testRecordResetPasswordFailure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testRecordResetPasswordFailure", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testRecordResetPasswordFailure()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testRecordResetPasswordFailure() throws Exception {\r\n    try {\r\n        evilDAO.recordResetPasswordFailure(\"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2662, "methodname":"testResetPasswordException()", "methodnamerefined":"testResetPasswordException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testResetPasswordException", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testResetPasswordException()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testResetPasswordException() throws Exception {\r\n    try {\r\n        evilDAO.resetPassword(0L, \"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2663, "methodname":"testSetSecurityQuestionAnswer()", "methodnamerefined":"testSetSecurityQuestionAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testSetSecurityQuestionAnswer", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest.testSetSecurityQuestionAnswer()", "classid":354, "classname":"edu.ncsu.csc.itrust.dao.auth.AuthDAOExceptionTest", "shortclassname":"AuthDAOExceptionTest", "method":"public void testSetSecurityQuestionAnswer() throws Exception {\r\n    try {\r\n        evilDAO.setSecurityQuestionAnswer(null, null, 0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2664, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest.-init-()", "classid":355, "classname":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest", "shortclassname":"CheckUserActivatedTest", "method":"CheckUserActivatedTest() {\r\n}"},
 {"id":2665, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest.setUp()", "classid":355, "classname":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest", "shortclassname":"CheckUserActivatedTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patientDeactivate();\r\n}"},
 {"id":2666, "methodname":"testActivatedUser()", "methodnamerefined":"testActivatedUser", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest.testActivatedUser", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest.testActivatedUser()", "classid":355, "classname":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest", "shortclassname":"CheckUserActivatedTest", "method":"public void testActivatedUser() throws Exception {\r\n    try {\r\n        assertFalse(authDAO.getDeactivated(1));\r\n    } catch (iTrustException e) {\r\n        fail(\"Exception should not be thrown.\");\r\n    }\r\n}"},
 {"id":2667, "methodname":"testDeactivatedUser()", "methodnamerefined":"testDeactivatedUser", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest.testDeactivatedUser", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest.testDeactivatedUser()", "classid":355, "classname":"edu.ncsu.csc.itrust.dao.auth.CheckUserActivatedTest", "shortclassname":"CheckUserActivatedTest", "method":"public void testDeactivatedUser() throws Exception {\r\n    try {\r\n        assertTrue(authDAO.getDeactivated(314159));\r\n    } catch (iTrustException e) {\r\n        fail(\"Exception should not be thrown.\");\r\n    }\r\n}"},
 {"id":2668, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.-init-()", "classid":356, "classname":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest", "shortclassname":"GetLoginFailureTest", "method":"GetLoginFailureTest() {\r\n}"},
 {"id":2669, "methodname":"addLoginFailure(int,java.sql.Timestamp)", "methodnamerefined":"addLoginFailure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.addLoginFailure", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.addLoginFailure(int,java.sql.Timestamp)", "classid":356, "classname":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest", "shortclassname":"GetLoginFailureTest", "method":"private void addLoginFailure(int count, Timestamp lastFailure) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO loginfailures(IPAddress,failureCount, lastFailure) \" + \"VALUES(?,?,?)\"));\r\n        ps.setString(1, ipAddr);\r\n        ps.setInt(2, count);\r\n        ps.setTimestamp(3, lastFailure);\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2670, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.setUp()", "classid":356, "classname":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest", "shortclassname":"GetLoginFailureTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearLoginFailures();\r\n}"},
 {"id":2671, "methodname":"testGetLoginFailures15MinutesAgo()", "methodnamerefined":"testGetLoginFailures15MinutesAgo", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.testGetLoginFailures15MinutesAgo", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.testGetLoginFailures15MinutesAgo()", "classid":356, "classname":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest", "shortclassname":"GetLoginFailureTest", "method":"public void testGetLoginFailures15MinutesAgo() throws Exception {\r\n    // for BVA here, make it 10s greater than the timeout time\r\n    addLoginFailure(5, new Timestamp((((System.currentTimeMillis()) - (AuthDAO.LOGIN_TIMEOUT)) + 10000)));\r\n    assertEquals(5, authDAO.getLoginFailures(ipAddr));\r\n}"},
 {"id":2672, "methodname":"testGetLoginFailuresNoEntry()", "methodnamerefined":"testGetLoginFailuresNoEntry", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.testGetLoginFailuresNoEntry", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.testGetLoginFailuresNoEntry()", "classid":356, "classname":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest", "shortclassname":"GetLoginFailureTest", "method":"public void testGetLoginFailuresNoEntry() throws Exception {\r\n    assertEquals(0, authDAO.getLoginFailures(ipAddr));\r\n}"},
 {"id":2673, "methodname":"testGetLoginFailuresWithEntry5()", "methodnamerefined":"testGetLoginFailuresWithEntry5", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.testGetLoginFailuresWithEntry5", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest.testGetLoginFailuresWithEntry5()", "classid":356, "classname":"edu.ncsu.csc.itrust.dao.auth.GetLoginFailureTest", "shortclassname":"GetLoginFailureTest", "method":"// no need to do it *exactly* if we have -10s and +10s; we dont need that level of accuracy\r\npublic void testGetLoginFailuresWithEntry5() throws Exception {\r\n    // also doing BVA - make it 10s less than the timeout time\r\n    addLoginFailure(5, new Timestamp(((System.currentTimeMillis()) - ((AuthDAO.LOGIN_TIMEOUT) - 10000))));\r\n    assertEquals(5, authDAO.getLoginFailures(ipAddr));\r\n}"},
 {"id":2674, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.-init-()", "classid":357, "classname":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest", "shortclassname":"GetUserNameTest", "method":"GetUserNameTest() {\r\n}"},
 {"id":2675, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.setUp()", "classid":357, "classname":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest", "shortclassname":"GetUserNameTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":2676, "methodname":"testAdmin1()", "methodnamerefined":"testAdmin1", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.testAdmin1", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.testAdmin1()", "classid":357, "classname":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest", "shortclassname":"GetUserNameTest", "method":"public void testAdmin1() throws Exception {\r\n    gen.admin1();\r\n    assertEquals(\"Admin 1\", \"Shape Shifter\", authDAO.getUserName(9000000001L));\r\n}"},
 {"id":2677, "methodname":"testHCP0()", "methodnamerefined":"testHCP0", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.testHCP0", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.testHCP0()", "classid":357, "classname":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest", "shortclassname":"GetUserNameTest", "method":"public void testHCP0() throws Exception {\r\n    gen.hcp0();\r\n    assertEquals(\"HCP 0\", \"Kelly Doctor\", authDAO.getUserName(9000000000L));\r\n}"},
 {"id":2678, "methodname":"testPatient1()", "methodnamerefined":"testPatient1", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.testPatient1", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest.testPatient1()", "classid":357, "classname":"edu.ncsu.csc.itrust.dao.auth.GetUserNameTest", "shortclassname":"GetUserNameTest", "method":"public void testPatient1() throws Exception {\r\n    gen.patient1();\r\n    assertEquals(\"Patient 1\", \"Random Person\", authDAO.getUserName(1L));\r\n}"},
 {"id":2679, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetUserRoleTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetUserRoleTest.-init-()", "classid":358, "classname":"edu.ncsu.csc.itrust.dao.auth.GetUserRoleTest", "shortclassname":"GetUserRoleTest", "method":"GetUserRoleTest() {\r\n}"},
 {"id":2680, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetUserRoleTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetUserRoleTest.setUp()", "classid":358, "classname":"edu.ncsu.csc.itrust.dao.auth.GetUserRoleTest", "shortclassname":"GetUserRoleTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":2681, "methodname":"testHCPMeganHunt()", "methodnamerefined":"testHCPMeganHunt", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.GetUserRoleTest.testHCPMeganHunt", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.GetUserRoleTest.testHCPMeganHunt()", "classid":358, "classname":"edu.ncsu.csc.itrust.dao.auth.GetUserRoleTest", "shortclassname":"GetUserRoleTest", "method":"public void testHCPMeganHunt() throws Exception {\r\n    gen.hcp0();\r\n    assertEquals(\"HCP 90..0\", \"hcp\", TestDAOFactory.getTestInstance().getAuthDAO().getUserRole(9000000000L).getUserRolesString());\r\n}"},
 {"id":2682, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest.-init-()", "classid":359, "classname":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest", "shortclassname":"RecordLoginFailureTest", "method":"RecordLoginFailureTest() {\r\n}"},
 {"id":2683, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest.setUp()", "classid":359, "classname":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest", "shortclassname":"RecordLoginFailureTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearLoginFailures();\r\n}"},
 {"id":2684, "methodname":"testGetLoginFailuresNoEntry()", "methodnamerefined":"testGetLoginFailuresNoEntry", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest.testGetLoginFailuresNoEntry", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest.testGetLoginFailuresNoEntry()", "classid":359, "classname":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest", "shortclassname":"RecordLoginFailureTest", "method":"public void testGetLoginFailuresNoEntry() throws Exception {\r\n    authDAO.recordLoginFailure(ipAddr);\r\n    assertEquals(1, authDAO.getLoginFailures(ipAddr));\r\n}"},
 {"id":2685, "methodname":"testGetLoginFailuresWithEntry()", "methodnamerefined":"testGetLoginFailuresWithEntry", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest.testGetLoginFailuresWithEntry", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest.testGetLoginFailuresWithEntry()", "classid":359, "classname":"edu.ncsu.csc.itrust.dao.auth.RecordLoginFailureTest", "shortclassname":"RecordLoginFailureTest", "method":"public void testGetLoginFailuresWithEntry() throws Exception {\r\n    assertEquals(0, authDAO.getLoginFailures(ipAddr));\r\n    authDAO.recordLoginFailure(ipAddr);\r\n    assertEquals(1, authDAO.getLoginFailures(ipAddr));\r\n    authDAO.recordLoginFailure(ipAddr);\r\n    assertEquals(2, authDAO.getLoginFailures(ipAddr));\r\n    authDAO.recordLoginFailure(ipAddr);\r\n    assertEquals(3, authDAO.getLoginFailures(ipAddr));\r\n}"},
 {"id":2686, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.-init-()", "classid":360, "classname":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest", "shortclassname":"ResetPasswordTest", "method":"ResetPasswordTest() {\r\n}"},
 {"id":2687, "methodname":"getPassword(long)", "methodnamerefined":"getPassword", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.getPassword", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.getPassword(long)", "classid":360, "classname":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest", "shortclassname":"ResetPasswordTest", "method":"private String getPassword(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT password from users WHERE MID=\" + mid));\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return rs.getString(\"password\");\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2688, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.setUp()", "classid":360, "classname":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest", "shortclassname":"ResetPasswordTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n}"},
 {"id":2689, "methodname":"testGetNoSecurityAnswer()", "methodnamerefined":"testGetNoSecurityAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testGetNoSecurityAnswer", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testGetNoSecurityAnswer()", "classid":360, "classname":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest", "shortclassname":"ResetPasswordTest", "method":"public void testGetNoSecurityAnswer() throws Exception {\r\n    long mid = factory.getPatientDAO().addEmptyPatient();\r\n    try {\r\n        authDAO.getSecurityAnswer(mid);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals((\"No security answer set for MID \" + mid), e.getMessage());\r\n    }\r\n}"},
 {"id":2690, "methodname":"testGetNoSecurityQuestion()", "methodnamerefined":"testGetNoSecurityQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testGetNoSecurityQuestion", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testGetNoSecurityQuestion()", "classid":360, "classname":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest", "shortclassname":"ResetPasswordTest", "method":"public void testGetNoSecurityQuestion() throws Exception {\r\n    long mid = factory.getPatientDAO().addEmptyPatient();\r\n    try {\r\n        authDAO.getSecurityQuestion(mid);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals((\"No security question set for MID: \" + mid), e.getMessage());\r\n    }\r\n}"},
 {"id":2691, "methodname":"testResetPassword()", "methodnamerefined":"testResetPassword", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testResetPassword", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testResetPassword()", "classid":360, "classname":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest", "shortclassname":"ResetPasswordTest", "method":"public void testResetPassword() throws Exception {\r\n    assertEquals(DigestUtils.shaHex(\"pw\"), getPassword(2L));\r\n    authDAO.resetPassword(2L, \"password\");\r\n    assertEquals(DigestUtils.shaHex(\"password\"), getPassword(2L));\r\n}"},
 {"id":2692, "methodname":"testResetPasswordNonExistent()", "methodnamerefined":"testResetPasswordNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testResetPasswordNonExistent", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testResetPasswordNonExistent()", "classid":360, "classname":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest", "shortclassname":"ResetPasswordTest", "method":"public void testResetPasswordNonExistent() throws Exception {\r\n    // Still runs with no exception - thats the expected behavior\r\n    authDAO.resetPassword(500L, \"password\");\r\n}"},
 {"id":2693, "methodname":"testResetSecurityQuestionAnswer()", "methodnamerefined":"testResetSecurityQuestionAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testResetSecurityQuestionAnswer", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest.testResetSecurityQuestionAnswer()", "classid":360, "classname":"edu.ncsu.csc.itrust.dao.auth.ResetPasswordTest", "shortclassname":"ResetPasswordTest", "method":"public void testResetSecurityQuestionAnswer() throws DBException {\r\n    authDAO.setSecurityQuestionAnswer(\"how you doin?\", \"good\", 2L);\r\n}"},
 {"id":2694, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.UserExistsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.UserExistsTest.-init-()", "classid":361, "classname":"edu.ncsu.csc.itrust.dao.auth.UserExistsTest", "shortclassname":"UserExistsTest", "method":"UserExistsTest() {\r\n}"},
 {"id":2695, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.UserExistsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.UserExistsTest.setUp()", "classid":361, "classname":"edu.ncsu.csc.itrust.dao.auth.UserExistsTest", "shortclassname":"UserExistsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n}"},
 {"id":2696, "methodname":"testUserExists()", "methodnamerefined":"testUserExists", "methodabbreviation":"edu.ncsu.csc.itrust.dao.auth.UserExistsTest.testUserExists", "fullmethod":"edu.ncsu.csc.itrust.dao.auth.UserExistsTest.testUserExists()", "classid":361, "classname":"edu.ncsu.csc.itrust.dao.auth.UserExistsTest", "shortclassname":"UserExistsTest", "method":"public void testUserExists() throws Exception {\r\n    assertTrue(authDAO.checkUserExists(1L));\r\n    assertFalse(authDAO.checkUserExists(200L));\r\n}"},
 {"id":2697, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.-init-()", "classid":362, "classname":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest", "shortclassname":"DrugInteractionDAOTest", "method":"DrugInteractionDAOTest() {\r\n}"},
 {"id":2698, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.setUp()", "classid":362, "classname":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest", "shortclassname":"DrugInteractionDAOTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n}"},
 {"id":2699, "methodname":"testDeleteInteraction()", "methodnamerefined":"testDeleteInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.testDeleteInteraction", "fullmethod":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.testDeleteInteraction()", "classid":362, "classname":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest", "shortclassname":"DrugInteractionDAOTest", "method":"public void testDeleteInteraction() throws Exception {\r\n    gen.drugInteractions();\r\n    interactionDAO.deleteInteraction(\"009042407\", \"548680955\");\r\n    List<DrugInteractionBean> testList = interactionDAO.getInteractions(\"548680955\");\r\n    assertTrue(testList.isEmpty());\r\n}"},
 {"id":2700, "methodname":"testReportInteraction()", "methodnamerefined":"testReportInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.testReportInteraction", "fullmethod":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.testReportInteraction()", "classid":362, "classname":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest", "shortclassname":"DrugInteractionDAOTest", "method":"public void testReportInteraction() throws Exception {\r\n    interactionDAO.reportInteraction(\"619580501\", \"081096\", \"May increase the risk and severity of nephrotoxicity due to additive effects on the kidney.\");\r\n    List<DrugInteractionBean> testList = interactionDAO.getInteractions(\"619580501\");\r\n    DrugInteractionBean interaction = testList.get(0);\r\n    assertEquals(\"619580501\", interaction.getFirstDrug());\r\n    assertEquals(\"081096\", interaction.getSecondDrug());\r\n}"},
 {"id":2701, "methodname":"testReportInteractionThatExists()", "methodnamerefined":"testReportInteractionThatExists", "methodabbreviation":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.testReportInteractionThatExists", "fullmethod":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.testReportInteractionThatExists()", "classid":362, "classname":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest", "shortclassname":"DrugInteractionDAOTest", "method":"public void testReportInteractionThatExists() throws Exception {\r\n    gen.drugInteractions();\r\n    try {\r\n        interactionDAO.reportInteraction(\"009042407\", \"548680955\", \"This is not allowed.\");\r\n        fail(\"Drug interaction already exists for these drugs.\");\r\n    } catch (Exception e) {\r\n        // Good job, it works\r\n    }\r\n}"},
 {"id":2702, "methodname":"testReportInteractionThatExistsReverseOrder()", "methodnamerefined":"testReportInteractionThatExistsReverseOrder", "methodabbreviation":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.testReportInteractionThatExistsReverseOrder", "fullmethod":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest.testReportInteractionThatExistsReverseOrder()", "classid":362, "classname":"edu.ncsu.csc.itrust.dao.druginteraction.DrugInteractionDAOTest", "shortclassname":"DrugInteractionDAOTest", "method":"public void testReportInteractionThatExistsReverseOrder() throws Exception {\r\n    gen.drugInteractions();\r\n    try {\r\n        interactionDAO.reportInteraction(\"548680955\", \"009042407\", \"This is not allowed.\");\r\n        fail(\"Drug interaction already exists for these drugs.\");\r\n    } catch (Exception e) {\r\n        // Good job, it works\r\n    }\r\n}"},
 {"id":2703, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest.-init-()", "classid":363, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest", "shortclassname":"EmailExceptionTest", "method":"EmailExceptionTest() {\r\n}"},
 {"id":2704, "methodname":"testGetAllException()", "methodnamerefined":"testGetAllException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest.testGetAllException", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest.testGetAllException()", "classid":363, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest", "shortclassname":"EmailExceptionTest", "method":"public void testGetAllException() throws Exception {\r\n    factory = EvilDAOFactory.getEvilInstance();\r\n    try {\r\n        factory.getFakeEmailDAO().getAllEmails();\r\n        fail(\"exception should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2705, "methodname":"testGetPersonException()", "methodnamerefined":"testGetPersonException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest.testGetPersonException", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest.testGetPersonException()", "classid":363, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest", "shortclassname":"EmailExceptionTest", "method":"public void testGetPersonException() throws Exception {\r\n    factory = EvilDAOFactory.getEvilInstance();\r\n    try {\r\n        factory.getFakeEmailDAO().getEmailsByPerson(\"gstormcrow@iTrust.org\");\r\n        fail(\"exception should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2706, "methodname":"testSendException()", "methodnamerefined":"testSendException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest.testSendException", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest.testSendException()", "classid":363, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailExceptionTest", "shortclassname":"EmailExceptionTest", "method":"public void testSendException() throws Exception {\r\n    factory = EvilDAOFactory.getEvilInstance();\r\n    try {\r\n        factory.getFakeEmailDAO().sendEmailRecord(new Email());\r\n        fail(\"exception should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2707, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.-init-()", "classid":364, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest", "shortclassname":"EmailTest", "method":"EmailTest() {\r\n}"},
 {"id":2708, "methodname":"getTestEmail()", "methodnamerefined":"getTestEmail", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.getTestEmail", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.getTestEmail()", "classid":364, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest", "shortclassname":"EmailTest", "method":"private Email getTestEmail() {\r\n    Email email = new Email();\r\n    email.setBody(\"this is the body\");\r\n    email.setFrom(\"ncsucsc326@gmail.com\");\r\n    email.setSubject(\"this is the subject\");\r\n    email.setToList(Arrays.asList(\"ncsucsc326@gmail.com\"));\r\n    return email;\r\n}"},
 {"id":2709, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.setUp()", "classid":364, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest", "shortclassname":"EmailTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearFakeEmail();\r\n    gen.fakeEmail();\r\n}"},
 {"id":2710, "methodname":"testFindWithString()", "methodnamerefined":"testFindWithString", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.testFindWithString", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.testFindWithString()", "classid":364, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest", "shortclassname":"EmailTest", "method":"public void testFindWithString() throws Exception {\r\n    factory.getFakeEmailDAO().sendEmailRecord(getTestEmail());\r\n    factory.getFakeEmailDAO().sendEmailRecord(getTestEmail());\r\n    Email other = getTestEmail();\r\n    other.setBody(\"\");\r\n    // assertEquals(true, factory.getFakeEmailDAO().sendRealEmail(other ));\r\n    factory.getFakeEmailDAO().sendEmailRecord(other);\r\n    List<Email> emails = factory.getFakeEmailDAO().getEmailWithBody(\"is the\");\r\n    assertEquals(2, emails.size());\r\n    assertEquals(getTestEmail(), emails.get(0));\r\n    assertEquals(getTestEmail(), emails.get(1));\r\n}"},
 {"id":2711, "methodname":"testListAllEmails()", "methodnamerefined":"testListAllEmails", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.testListAllEmails", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.testListAllEmails()", "classid":364, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest", "shortclassname":"EmailTest", "method":"public void testListAllEmails() throws Exception {\r\n    List<Email> emails = factory.getFakeEmailDAO().getAllEmails();\r\n    assertEquals(4, emails.size());\r\n    Email email = getTestEmail();\r\n    new EmailUtil(factory).sendEmail(email);\r\n    emails = factory.getFakeEmailDAO().getAllEmails();\r\n    assertEquals(5, emails.size());\r\n    assertEquals(getTestEmail(), emails.get(0));\r\n}"},
 {"id":2712, "methodname":"testListEmailsByPerson()", "methodnamerefined":"testListEmailsByPerson", "methodabbreviation":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.testListEmailsByPerson", "fullmethod":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest.testListEmailsByPerson()", "classid":364, "classname":"edu.ncsu.csc.itrust.dao.fakeemail.EmailTest", "shortclassname":"EmailTest", "method":"public void testListEmailsByPerson() throws Exception {\r\n    String email = \"gstormcrow@iTrust.org\";\r\n    List<Email> emails = factory.getFakeEmailDAO().getEmailsByPerson(email);\r\n    assertEquals(2, emails.size());\r\n    assertEquals(\"this is an email\", emails.get(0).getSubject());\r\n    assertEquals(\"this is another email\", emails.get(1).getSubject());\r\n}"},
 {"id":2713, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyDAOExceptionTest.-init-()", "classid":365, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyDAOExceptionTest", "shortclassname":"FamilyDAOExceptionTest", "method":"FamilyDAOExceptionTest() {\r\n}"},
 {"id":2714, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyDAOExceptionTest.setUp()", "classid":365, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyDAOExceptionTest", "shortclassname":"FamilyDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":2715, "methodname":"testFamilyMemberException()", "methodnamerefined":"testFamilyMemberException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyDAOExceptionTest.testFamilyMemberException", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyDAOExceptionTest.testFamilyMemberException()", "classid":365, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyDAOExceptionTest", "shortclassname":"FamilyDAOExceptionTest", "method":"public void testFamilyMemberException() throws Exception {\r\n    try {\r\n        evilDAO.getParents(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2716, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.-init-()", "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "shortclassname":"FamilyMembersTest", "method":"FamilyMembersTest() {\r\n}"},
 {"id":2717, "methodname":"compare(edu.ncsu.csc.itrust.beans.FamilyMemberBean,edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "methodnamerefined":"compare", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.compare", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.compare(edu.ncsu.csc.itrust.beans.FamilyMemberBean,edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "shortclassname":"FamilyMembersTest", "method":"public int compare(FamilyMemberBean o1, FamilyMemberBean o2) {\r\n    return o1.getFirstName().compareTo(o2.getFirstName());\r\n}"},
 {"id":2718, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.setUp()", "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "shortclassname":"FamilyMembersTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hospitals();\r\n    gen.hcp0();\r\n    gen.icd9cmCodes();\r\n    gen.family();\r\n}"},
 {"id":2719, "methodname":"testGetAllSiblings()", "methodnamerefined":"testGetAllSiblings", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetAllSiblings", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetAllSiblings()", "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "shortclassname":"FamilyMembersTest", "method":"public void testGetAllSiblings() throws Exception {\r\n    List<FamilyMemberBean> siblings = familyDAO.getSiblings(3);\r\n    assertEquals(3, siblings.size());\r\n    Collections.sort(siblings, this);\r\n    assertEquals(\"Sib1\", siblings.get(0).getFirstName());\r\n    assertEquals(\"Sib2\", siblings.get(1).getFirstName());\r\n    assertEquals(\"Sib3\", siblings.get(2).getFirstName());\r\n    assertEquals(\"Sibling\", siblings.get(0).getRelation());\r\n}"},
 {"id":2720, "methodname":"testGetBothParents()", "methodnamerefined":"testGetBothParents", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetBothParents", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetBothParents()", "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "shortclassname":"FamilyMembersTest", "method":"public void testGetBothParents() throws Exception {\r\n    List<FamilyMemberBean> parents = familyDAO.getParents(3);\r\n    assertEquals(2, parents.size());\r\n    Collections.sort(parents, this);\r\n    assertEquals(\"Dad\", parents.get(0).getFirstName());\r\n    assertEquals(\"\", parents.get(0).getLastName());\r\n    assertEquals(\"Dad \", parents.get(0).getFullName());\r\n    assertEquals(\"Mom\", parents.get(1).getFirstName());\r\n    assertEquals(\"Parent\", parents.get(0).getRelation());\r\n}"},
 {"id":2721, "methodname":"testGetChildrenWithMom()", "methodnamerefined":"testGetChildrenWithMom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetChildrenWithMom", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetChildrenWithMom()", "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "shortclassname":"FamilyMembersTest", "method":"public void testGetChildrenWithMom() throws Exception {\r\n    // Note that you dont get Patient 9\r\n    assertEquals(3, familyDAO.getChildren(4).size());\r\n}"},
 {"id":2722, "methodname":"testGetChildrenWithPerson()", "methodnamerefined":"testGetChildrenWithPerson", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetChildrenWithPerson", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetChildrenWithPerson()", "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "shortclassname":"FamilyMembersTest", "method":"public void testGetChildrenWithPerson() throws Exception {\r\n    List<FamilyMemberBean> children = familyDAO.getChildren(3);\r\n    assertEquals(2, children.size());\r\n    Collections.sort(children, this);\r\n    assertEquals(\"Kid1\", children.get(0).getFirstName());\r\n    assertEquals(\"Kid2\", children.get(1).getFirstName());\r\n    assertEquals(\"Child\", children.get(0).getRelation());\r\n}"},
 {"id":2723, "methodname":"testGetNoParents()", "methodnamerefined":"testGetNoParents", "methodabbreviation":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetNoParents", "fullmethod":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.testGetNoParents()", "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "shortclassname":"FamilyMembersTest", "method":"public void testGetNoParents() throws Exception {\r\n    assertEquals(0, familyDAO.getParents(5).size());\r\n}"},
 {"id":2724, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.-init-()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"AddEditHospitalDAOTest() {\r\n}"},
 {"id":2725, "methodname":"clearHospitals()", "methodnamerefined":"clearHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.clearHospitals", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.clearHospitals()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"private void clearHospitals() throws SQLException {\r\n    new DBBuilder(factory).executeSQL(Arrays.asList(\"DELETE FROM hospitals;\"));\r\n}"},
 {"id":2726, "methodname":"genericAdd(java.lang.String,java.lang.String)", "methodnamerefined":"genericAdd", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.genericAdd", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.genericAdd(java.lang.String,java.lang.String)", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"private HospitalBean genericAdd(String id, String name) throws DBException, iTrustException {\r\n    HospitalBean hosp = new HospitalBean(id, name);\r\n    assertTrue(hospitalDAO.addHospital(hosp));\r\n    assertEquals(name, hospitalDAO.getHospital(id).getHospitalName());\r\n    return hosp;\r\n}"},
 {"id":2727, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.setUp()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    // clearHospitals();\r\n    gen.clearAllTables();\r\n    gen.hospitals();\r\n}"},
 {"id":2728, "methodname":"testAddDupe()", "methodnamerefined":"testAddDupe", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testAddDupe", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testAddDupe()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"public void testAddDupe() throws DBException, iTrustException, SQLException {\r\n    final String id = \"0000000000\";\r\n    final String name0 = \"testAddDupe Hospital\";\r\n    HospitalBean hosp = genericAdd(id, name0);\r\n    try {\r\n        hosp.setHospitalName(\"\");\r\n        hospitalDAO.addHospital(hosp);\r\n        fail(\"CPTCodeTest.testAddDupe failed to catch dupe\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Error: Hospital already exists.\", e.getMessage());\r\n        hosp = hospitalDAO.getHospital(id);\r\n        assertEquals(name0, hosp.getHospitalName());\r\n    }\r\n}"},
 {"id":2729, "methodname":"testAddHospital()", "methodnamerefined":"testAddHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testAddHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testAddHospital()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"public void testAddHospital() throws DBException, iTrustException {\r\n    final String id = \"9191919192\";\r\n    final String name = \"testAddHospital Hospital \";\r\n    genericAdd(id, name);\r\n    List<HospitalBean> allCodes = hospitalDAO.getAllHospitals();\r\n    assertEquals(id, allCodes.get(((allCodes.size()) - 1)).getHospitalID());\r\n    assertEquals(name, allCodes.get(((allCodes.size()) - 1)).getHospitalName());\r\n}"},
 {"id":2730, "methodname":"testGetAllFromEmptyTable()", "methodnamerefined":"testGetAllFromEmptyTable", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testGetAllFromEmptyTable", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testGetAllFromEmptyTable()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"public void testGetAllFromEmptyTable() throws DBException, SQLException {\r\n    clearHospitals();\r\n    assertEquals(0, hospitalDAO.getAllHospitals().size());\r\n}"},
 {"id":2731, "methodname":"testGetAllHospitals()", "methodnamerefined":"testGetAllHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testGetAllHospitals", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testGetAllHospitals()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"/**\r\n * Test All hospital\r\n * test Get HospitalFromEmptyTable\r\n * test GetHospital\r\n * test AddDupe\r\n * testUpdateName\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testGetAllHospitals() throws Exception {\r\n    List<HospitalBean> hospitals = hospitalDAO.getAllHospitals();\r\n    assertEquals(9, hospitals.size());\r\n    // All hospitals in alphabetical order.\r\n    assertEquals(\"Facebook Rehab Center\", hospitals.get(0).getHospitalName());\r\n    assertEquals(\"Health Institute Dr. E\", hospitals.get(1).getHospitalName());\r\n    assertEquals(\"Health Institute Mr. Barry\", hospitals.get(2).getHospitalName());\r\n    assertEquals(\"Health Institute Mr. Donghoon\", hospitals.get(3).getHospitalName());\r\n    assertEquals(\"Le Awesome Hospital\", hospitals.get(4).getHospitalName());\r\n    assertEquals(\"Mental Hospital 4 iTrust Devs\", hospitals.get(5).getHospitalName());\r\n    assertEquals(\"Ninja Hospital\", hospitals.get(6).getHospitalName());\r\n}"},
 {"id":2732, "methodname":"testGetHospital()", "methodnamerefined":"testGetHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testGetHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testGetHospital()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"public void testGetHospital() throws DBException {\r\n    HospitalBean hosp = hospitalDAO.getHospital(\"9191919191\");\r\n    assertEquals(\"9191919191\", hosp.getHospitalID());\r\n    assertEquals(\"Test Hospital 9191919191\", hosp.getHospitalName());\r\n}"},
 {"id":2733, "methodname":"testGetHospitalFromEmptyTable()", "methodnamerefined":"testGetHospitalFromEmptyTable", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testGetHospitalFromEmptyTable", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testGetHospitalFromEmptyTable()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"public void testGetHospitalFromEmptyTable() throws DBException, SQLException {\r\n    clearHospitals();\r\n    assertEquals(null, hospitalDAO.getHospital(\"9191919191\"));\r\n}"},
 {"id":2734, "methodname":"testUpdateName()", "methodnamerefined":"testUpdateName", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testUpdateName", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testUpdateName()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"public void testUpdateName() throws DBException, iTrustException {\r\n    final String id = \"7777777777\";\r\n    final String name = \"testUpdateName NEW Hospital\";\r\n    HospitalBean hosp = genericAdd(id, \"\");\r\n    hosp.setHospitalName(name);\r\n    assertEquals(1, hospitalDAO.updateHospital(hosp));\r\n    hosp = hospitalDAO.getHospital(id);\r\n    assertEquals(name, hosp.getHospitalName());\r\n}"},
 {"id":2735, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest.testUpdateNonExistent()", "classid":367, "classname":"edu.ncsu.csc.itrust.dao.hospital.AddEditHospitalDAOTest", "shortclassname":"AddEditHospitalDAOTest", "method":"public void testUpdateNonExistent() throws DBException, SQLException {\r\n    clearHospitals();\r\n    final String id = \"0000000000\";\r\n    HospitalBean hosp = new HospitalBean(id, \"\");\r\n    assertEquals(0, hospitalDAO.updateHospital(hosp));\r\n    assertEquals(0, hospitalDAO.getAllHospitals().size());\r\n}"},
 {"id":2736, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.-init-()", "classid":368, "classname":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest", "shortclassname":"AssignHospitalDAOTest", "method":"AssignHospitalDAOTest() {\r\n}"},
 {"id":2737, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.setUp()", "classid":368, "classname":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest", "shortclassname":"AssignHospitalDAOTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hospitals();\r\n    gen.hcp0();\r\n}"},
 {"id":2738, "methodname":"testAssignNewHospital()", "methodnamerefined":"testAssignNewHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.testAssignNewHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.testAssignNewHospital()", "classid":368, "classname":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest", "shortclassname":"AssignHospitalDAOTest", "method":"public void testAssignNewHospital() throws Exception {\r\n    assertEquals(2, personnelDAO.getHospitals(9000000000L).size());\r\n    hosDAO.assignHospital(9000000000L, \"1\");\r\n    assertEquals(3, personnelDAO.getHospitals(9000000000L).size());\r\n}"},
 {"id":2739, "methodname":"testDoItTwice()", "methodnamerefined":"testDoItTwice", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.testDoItTwice", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.testDoItTwice()", "classid":368, "classname":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest", "shortclassname":"AssignHospitalDAOTest", "method":"public void testDoItTwice() throws Exception {\r\n    hosDAO.assignHospital(9000000000L, \"1\");\r\n    try {\r\n        hosDAO.assignHospital(9000000000L, \"1\");\r\n        fail(\"Exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"HCP 9000000000 already assigned to hospital 1\", e.getMessage());\r\n    }\r\n}"},
 {"id":2740, "methodname":"testPersonnelHospitals()", "methodnamerefined":"testPersonnelHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.testPersonnelHospitals", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest.testPersonnelHospitals()", "classid":368, "classname":"edu.ncsu.csc.itrust.dao.hospital.AssignHospitalDAOTest", "shortclassname":"AssignHospitalDAOTest", "method":"public void testPersonnelHospitals() throws Exception {\r\n    List<HospitalBean> hospitals = personnelDAO.getHospitals(9000000000L);\r\n    assertEquals(2, hospitals.size());\r\n    assertEquals(\"8181818181\", hospitals.get(0).getHospitalID());\r\n    assertEquals(\"9191919191\", hospitals.get(1).getHospitalID());\r\n}"},
 {"id":2741, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.-init-()", "classid":369, "classname":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest", "shortclassname":"HospitalDAOExceptionTest", "method":"HospitalDAOExceptionTest() {\r\n}"},
 {"id":2742, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.setUp()", "classid":369, "classname":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest", "shortclassname":"HospitalDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":2743, "methodname":"testAddHospitalException()", "methodnamerefined":"testAddHospitalException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testAddHospitalException", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testAddHospitalException()", "classid":369, "classname":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest", "shortclassname":"HospitalDAOExceptionTest", "method":"public void testAddHospitalException() throws Exception {\r\n    try {\r\n        evilDAO.addHospital(new HospitalBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2744, "methodname":"testAssignHospitalException()", "methodnamerefined":"testAssignHospitalException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testAssignHospitalException", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testAssignHospitalException()", "classid":369, "classname":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest", "shortclassname":"HospitalDAOExceptionTest", "method":"public void testAssignHospitalException() throws Exception {\r\n    try {\r\n        evilDAO.assignHospital(0L, \"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2745, "methodname":"testGetAllHospitalsException()", "methodnamerefined":"testGetAllHospitalsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testGetAllHospitalsException", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testGetAllHospitalsException()", "classid":369, "classname":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest", "shortclassname":"HospitalDAOExceptionTest", "method":"public void testGetAllHospitalsException() throws Exception {\r\n    try {\r\n        evilDAO.getAllHospitals();\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2746, "methodname":"testGetHospitalException()", "methodnamerefined":"testGetHospitalException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testGetHospitalException", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testGetHospitalException()", "classid":369, "classname":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest", "shortclassname":"HospitalDAOExceptionTest", "method":"public void testGetHospitalException() throws Exception {\r\n    try {\r\n        evilDAO.getHospital(\"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2747, "methodname":"testRemoveAllHospitalAssignmentsException()", "methodnamerefined":"testRemoveAllHospitalAssignmentsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testRemoveAllHospitalAssignmentsException", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testRemoveAllHospitalAssignmentsException()", "classid":369, "classname":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest", "shortclassname":"HospitalDAOExceptionTest", "method":"public void testRemoveAllHospitalAssignmentsException() throws Exception {\r\n    try {\r\n        evilDAO.removeAllHospitalAssignmentsFrom(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2748, "methodname":"testRemoveHospitalAssignmentException()", "methodnamerefined":"testRemoveHospitalAssignmentException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testRemoveHospitalAssignmentException", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testRemoveHospitalAssignmentException()", "classid":369, "classname":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest", "shortclassname":"HospitalDAOExceptionTest", "method":"public void testRemoveHospitalAssignmentException() throws Exception {\r\n    try {\r\n        evilDAO.removeHospitalAssignment(0L, \"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2749, "methodname":"testUpdateHospitalException()", "methodnamerefined":"testUpdateHospitalException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testUpdateHospitalException", "fullmethod":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest.testUpdateHospitalException()", "classid":369, "classname":"edu.ncsu.csc.itrust.dao.hospital.HospitalDAOExceptionTest", "shortclassname":"HospitalDAOExceptionTest", "method":"public void testUpdateHospitalException() throws Exception {\r\n    try {\r\n        evilDAO.updateHospital(new HospitalBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2750, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest.-init-()", "classid":370, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest", "shortclassname":"AddLabProcedureTest", "method":"AddLabProcedureTest() {\r\n}"},
 {"id":2751, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest.setUp()", "classid":370, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest", "shortclassname":"AddLabProcedureTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.labProcedures();\r\n    l = new LabProcedureBean();\r\n    l.setPid(1L);\r\n    l.setOvID(905L);\r\n    l.setLoinc(\"10763-1\");\r\n    l.statusComplete();\r\n    l.setCommentary(\"Awaiting results\");\r\n    l.setResults(\"Good\");\r\n}"},
 {"id":2752, "methodname":"testAddLabProcedure()", "methodnamerefined":"testAddLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest.testAddLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest.testAddLabProcedure()", "classid":370, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest", "shortclassname":"AddLabProcedureTest", "method":"public void testAddLabProcedure() throws Exception {\r\n    long id = lpDAO.addLabProcedure(l);\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(LabProcedureBean.Completed, procedures.getStatus());\r\n    assertEquals(1L, procedures.getPid());\r\n    assertEquals(905L, l.getOvID());\r\n    assertEquals(\"10763-1\", procedures.getLoinc());\r\n    assertEquals(\"Awaiting results\", procedures.getCommentary());\r\n    assertEquals(\"Good\", procedures.getResults());\r\n}"},
 {"id":2753, "methodname":"testFailLabProcedure()", "methodnamerefined":"testFailLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest.testFailLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest.testFailLabProcedure()", "classid":370, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.AddLabProcedureTest", "shortclassname":"AddLabProcedureTest", "method":"public void testFailLabProcedure() throws Exception {\r\n    l.setPid(0);\r\n    try {\r\n        lpDAO.addLabProcedure(l);\r\n        fail();\r\n    } catch (DBException e) {\r\n        assertEquals(\"PatientMID cannot be null\", e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":2754, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest.-init-()", "classid":371, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest", "shortclassname":"GetAllLabProceduresDateTest", "method":"GetAllLabProceduresDateTest() {\r\n}"},
 {"id":2755, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest.setUp()", "classid":371, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest", "shortclassname":"GetAllLabProceduresDateTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.labProcedures();\r\n}"},
 {"id":2756, "methodname":"testFailGetLabProcedures()", "methodnamerefined":"testFailGetLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest.testFailGetLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest.testFailGetLabProcedures()", "classid":371, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest", "shortclassname":"GetAllLabProceduresDateTest", "method":"public void testFailGetLabProcedures() throws Exception {\r\n    try {\r\n        lpDAO.getAllLabProceduresDate(0L);\r\n        fail(\"Exception should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(\"PatientMID cannot be null\", e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":2757, "methodname":"testGetAllLabProcedures()", "methodnamerefined":"testGetAllLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest.testGetAllLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest.testGetAllLabProcedures()", "classid":371, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresDateTest", "shortclassname":"GetAllLabProceduresDateTest", "method":"public void testGetAllLabProcedures() throws Exception {\r\n    List<LabProcedureBean> procedures = lpDAO.getAllLabProcedures();\r\n    assertEquals(7, procedures.size());\r\n    assertEquals(\"10640-1\", procedures.get(0).getLoinc());\r\n    assertEquals(\"10640-1\", procedures.get(1).getLoinc());\r\n    assertEquals(\"10763-1\", procedures.get(2).getLoinc());\r\n    assertEquals(\"10666-6\", procedures.get(3).getLoinc());\r\n    assertEquals(\"10763-1\", procedures.get(4).getLoinc());\r\n    assertEquals(\"10763-1\", procedures.get(5).getLoinc());\r\n}"},
 {"id":2758, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest.-init-()", "classid":372, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest", "shortclassname":"GetAllLabProceduresForDocOVTest", "method":"GetAllLabProceduresForDocOVTest() {\r\n}"},
 {"id":2759, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest.setUp()", "classid":372, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest", "shortclassname":"GetAllLabProceduresForDocOVTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.labProcedures();\r\n}"},
 {"id":2760, "methodname":"testFailGetLabProcedures()", "methodnamerefined":"testFailGetLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest.testFailGetLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest.testFailGetLabProcedures()", "classid":372, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest", "shortclassname":"GetAllLabProceduresForDocOVTest", "method":"public void testFailGetLabProcedures() throws Exception {\r\n    try {\r\n        lpDAO.getAllLabProceduresForDocOV(0L, 905L);\r\n        fail(\"Exception should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(\"PatientMID cannot be null\", e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":2761, "methodname":"testGetAllLabProceduresForDocOV()", "methodnamerefined":"testGetAllLabProceduresForDocOV", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest.testGetAllLabProceduresForDocOV", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest.testGetAllLabProceduresForDocOV()", "classid":372, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresForDocOVTest", "shortclassname":"GetAllLabProceduresForDocOVTest", "method":"public void testGetAllLabProceduresForDocOV() throws Exception {\r\n    List<LabProcedureBean> procedures = lpDAO.getAllLabProceduresForDocOV(1L, 11L);\r\n    assertEquals(3, procedures.size());\r\n    assertEquals(\"10763-1\", procedures.get(0).getLoinc());\r\n    assertEquals(\"10666-6\", procedures.get(1).getLoinc());\r\n    assertEquals(\"10640-1\", procedures.get(2).getLoinc());\r\n}"},
 {"id":2762, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.-init-()", "classid":373, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest", "shortclassname":"GetAllLabProceduresLOINCTest", "method":"GetAllLabProceduresLOINCTest() {\r\n}"},
 {"id":2763, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.setUp()", "classid":373, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest", "shortclassname":"GetAllLabProceduresLOINCTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.labProcedures();\r\n}"},
 {"id":2764, "methodname":"testFailGetLabProcedures()", "methodnamerefined":"testFailGetLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.testFailGetLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.testFailGetLabProcedures()", "classid":373, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest", "shortclassname":"GetAllLabProceduresLOINCTest", "method":"public void testFailGetLabProcedures() throws Exception {\r\n    try {\r\n        lpDAO.getAllLabProceduresLOINC(0L);\r\n        fail();\r\n    } catch (DBException e) {\r\n        assertEquals(\"PatientMID cannot be null\", e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":2765, "methodname":"testGetAllLabProcedures()", "methodnamerefined":"testGetAllLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.testGetAllLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.testGetAllLabProcedures()", "classid":373, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest", "shortclassname":"GetAllLabProceduresLOINCTest", "method":"public void testGetAllLabProcedures() throws Exception {\r\n    List<LabProcedureBean> procedures = lpDAO.getAllLabProceduresLOINC(1L);\r\n    assertEquals(3, procedures.size());\r\n    assertEquals(\"10640-1\", procedures.get(0).getLoinc());\r\n    assertEquals(\"10666-6\", procedures.get(1).getLoinc());\r\n    assertEquals(\"10763-1\", procedures.get(2).getLoinc());\r\n}"},
 {"id":2766, "methodname":"testGetAllLabProceduresLOINC()", "methodnamerefined":"testGetAllLabProceduresLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.testGetAllLabProceduresLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest.testGetAllLabProceduresLOINC()", "classid":373, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetAllLabProceduresLOINCTest", "shortclassname":"GetAllLabProceduresLOINCTest", "method":"public void testGetAllLabProceduresLOINC() throws Exception {\r\n    List<LabProcedureBean> procedures = lpDAO.getAllLabProceduresLOINC(1, \"10640-1\");\r\n    assertEquals(1, procedures.size());\r\n    assertEquals(\"10640-1\", procedures.get(0).getLoinc());\r\n}"},
 {"id":2767, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest.-init-()", "classid":374, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest", "shortclassname":"GetLabProceduresForLHCPForNextMonthTest", "method":"GetLabProceduresForLHCPForNextMonthTest() {\r\n}"},
 {"id":2768, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest.setUp()", "classid":374, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest", "shortclassname":"GetLabProceduresForLHCPForNextMonthTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.labProcedures();\r\n    // first procedure\r\n    l1 = new LabProcedureBean();\r\n    l1.setPid(3L);\r\n    l1.setOvID(918L);\r\n    l1.setLoinc(\"10763-1\");\r\n    l1.statusComplete();\r\n    l1.setCommentary(\"\");\r\n    // l1.setStatus(\"\");\r\n}"},
 {"id":2769, "methodname":"testFailGetLabProcedures()", "methodnamerefined":"testFailGetLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest.testFailGetLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest.testFailGetLabProcedures()", "classid":374, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest", "shortclassname":"GetLabProceduresForLHCPForNextMonthTest", "method":"public void testFailGetLabProcedures() throws Exception {\r\n    try {\r\n        lpDAO.getLabProceduresForLHCPForNextMonth(0L);\r\n        fail();\r\n    } catch (DBException e) {\r\n        assertEquals(\"OfficeVisitID cannot be null\", e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":2770, "methodname":"testGetLabProceduresForLHCPForNextMonth()", "methodnamerefined":"testGetLabProceduresForLHCPForNextMonth", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest.testGetLabProceduresForLHCPForNextMonth", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest.testGetLabProceduresForLHCPForNextMonth()", "classid":374, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForLHCPForNextMonthTest", "shortclassname":"GetLabProceduresForLHCPForNextMonthTest", "method":"public void testGetLabProceduresForLHCPForNextMonth() throws Exception {\r\n    long id1 = lpDAO.addLabProcedure(l1);\r\n    List<LabProcedureBean> procedures = lpDAO.getLabProceduresForLHCPForNextMonth(918L);\r\n    assertEquals(1, procedures.size());\r\n    assertEquals(id1, procedures.get(0).getProcedureID());\r\n}"},
 {"id":2771, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest.-init-()", "classid":375, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest", "shortclassname":"GetLabProceduresForPatientForNextMonthTest", "method":"GetLabProceduresForPatientForNextMonthTest() {\r\n}"},
 {"id":2772, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest.setUp()", "classid":375, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest", "shortclassname":"GetLabProceduresForPatientForNextMonthTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.labProcedures();\r\n    // first procedure\r\n    l1 = new LabProcedureBean();\r\n    l1.setPid(3L);\r\n    l1.setOvID(905L);\r\n    l1.setLoinc(\"10763-1\");\r\n    l1.statusComplete();\r\n    l1.setCommentary(\"\");\r\n    // l1.setStatus(\"\");\r\n}"},
 {"id":2773, "methodname":"testFailGetLabProcedures()", "methodnamerefined":"testFailGetLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest.testFailGetLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest.testFailGetLabProcedures()", "classid":375, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest", "shortclassname":"GetLabProceduresForPatientForNextMonthTest", "method":"public void testFailGetLabProcedures() throws Exception {\r\n    try {\r\n        lpDAO.getLabProceduresForPatientForNextMonth(0L);\r\n        fail();\r\n    } catch (DBException e) {\r\n        assertEquals(\"PatientMID cannot be null\", e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":2774, "methodname":"testGetLabProceduresForPatientForNextMonth()", "methodnamerefined":"testGetLabProceduresForPatientForNextMonth", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest.testGetLabProceduresForPatientForNextMonth", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest.testGetLabProceduresForPatientForNextMonth()", "classid":375, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientForNextMonthTest", "shortclassname":"GetLabProceduresForPatientForNextMonthTest", "method":"public void testGetLabProceduresForPatientForNextMonth() throws Exception {\r\n    long id1 = lpDAO.addLabProcedure(l1);\r\n    List<LabProcedureBean> procedures = lpDAO.getLabProceduresForPatientForNextMonth(3L);\r\n    assertEquals(1, procedures.size());\r\n    assertEquals(id1, procedures.get(0).getProcedureID());\r\n}"},
 {"id":2775, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest.-init-()", "classid":376, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest", "shortclassname":"GetLabProceduresForPatientTest", "method":"GetLabProceduresForPatientTest() {\r\n}"},
 {"id":2776, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest.setUp()", "classid":376, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest", "shortclassname":"GetLabProceduresForPatientTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.labProcedures();\r\n}"},
 {"id":2777, "methodname":"testFailGetLabProcedures()", "methodnamerefined":"testFailGetLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest.testFailGetLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest.testFailGetLabProcedures()", "classid":376, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest", "shortclassname":"GetLabProceduresForPatientTest", "method":"public void testFailGetLabProcedures() throws Exception {\r\n    try {\r\n        lpDAO.getLabProceduresForPatient(0L);\r\n        fail(\"Exception should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(\"PatientMID cannot be null\", e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":2778, "methodname":"testGetAllLabProceduresForDocOV()", "methodnamerefined":"testGetAllLabProceduresForDocOV", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest.testGetAllLabProceduresForDocOV", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest.testGetAllLabProceduresForDocOV()", "classid":376, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.GetLabProceduresForPatientTest", "shortclassname":"GetLabProceduresForPatientTest", "method":"public void testGetAllLabProceduresForDocOV() throws Exception {\r\n    List<LabProcedureBean> procedures = lpDAO.getLabProceduresForPatient(1L);\r\n    assertEquals(2, procedures.size());// 2 because the one doesnt have rights\r\n\r\n    assertEquals(\"10763-1\", procedures.get(0).getLoinc());\r\n    assertEquals(\"10640-1\", procedures.get(1).getLoinc());\r\n}"},
 {"id":2779, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.-init-()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"LabPocedureDAOExceptionTest() {\r\n}"},
 {"id":2780, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.setUp()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n}"},
 {"id":2781, "methodname":"testAddLabProcedure()", "methodnamerefined":"testAddLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testAddLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testAddLabProcedure()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testAddLabProcedure() {\r\n    LabProcedureBean bean = new LabProcedureBean();\r\n    bean.setPid(1);\r\n    try {\r\n        dao.addLabProcedure(bean);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2782, "methodname":"testGetAllLabProcedures()", "methodnamerefined":"testGetAllLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProcedures()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetAllLabProcedures() {\r\n    try {\r\n        dao.getAllLabProcedures();\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2783, "methodname":"testGetAllLabProceduresDate()", "methodnamerefined":"testGetAllLabProceduresDate", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresDate", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresDate()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetAllLabProceduresDate() {\r\n    try {\r\n        dao.getAllLabProceduresDate(9000000000L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2784, "methodname":"testGetAllLabProceduresForDocOVLong()", "methodnamerefined":"testGetAllLabProceduresForDocOVLong", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresForDocOVLong", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresForDocOVLong()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetAllLabProceduresForDocOVLong() {\r\n    try {\r\n        dao.getAllLabProceduresForDocOV(9000000000L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2785, "methodname":"testGetAllLabProceduresForDocOVLongLong()", "methodnamerefined":"testGetAllLabProceduresForDocOVLongLong", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresForDocOVLongLong", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresForDocOVLongLong()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetAllLabProceduresForDocOVLongLong() {\r\n    try {\r\n        dao.getAllLabProceduresForDocOV(9000000000L, 1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2786, "methodname":"testGetAllLabProceduresLOINC()", "methodnamerefined":"testGetAllLabProceduresLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresLOINC()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetAllLabProceduresLOINC() {\r\n    try {\r\n        dao.getAllLabProceduresLOINC(9000000000L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2787, "methodname":"testGetAllLabProceduresLOINC2()", "methodnamerefined":"testGetAllLabProceduresLOINC2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresLOINC2", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetAllLabProceduresLOINC2()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetAllLabProceduresLOINC2() {\r\n    try {\r\n        dao.getAllLabProceduresLOINC(22, \"10763-1\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2788, "methodname":"testGetLabProcedure()", "methodnamerefined":"testGetLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProcedure()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetLabProcedure() {\r\n    try {\r\n        dao.getLabProcedure(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2789, "methodname":"testGetLabProceduresForLHCPForNextMonth()", "methodnamerefined":"testGetLabProceduresForLHCPForNextMonth", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresForLHCPForNextMonth", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresForLHCPForNextMonth()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetLabProceduresForLHCPForNextMonth() {\r\n    try {\r\n        dao.getLabProceduresForLHCPForNextMonth(9000000000L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2790, "methodname":"testGetLabProceduresForPatient()", "methodnamerefined":"testGetLabProceduresForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresForPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresForPatient()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetLabProceduresForPatient() {\r\n    try {\r\n        dao.getLabProceduresForPatient(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2791, "methodname":"testGetLabProceduresForPatientForNextMonth()", "methodnamerefined":"testGetLabProceduresForPatientForNextMonth", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresForPatientForNextMonth", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresForPatientForNextMonth()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetLabProceduresForPatientForNextMonth() {\r\n    try {\r\n        dao.getLabProceduresForPatientForNextMonth(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2792, "methodname":"testGetLabProceduresInTransitForLabTech()", "methodnamerefined":"testGetLabProceduresInTransitForLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresInTransitForLabTech", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresInTransitForLabTech()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetLabProceduresInTransitForLabTech() {\r\n    try {\r\n        dao.getLabProceduresInTransitForLabTech(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2793, "methodname":"testGetLabProceduresReceivedForLabTech()", "methodnamerefined":"testGetLabProceduresReceivedForLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresReceivedForLabTech", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresReceivedForLabTech()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetLabProceduresReceivedForLabTech() {\r\n    try {\r\n        dao.getLabProceduresReceivedForLabTech(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2794, "methodname":"testGetLabProceduresTestingForLabTech()", "methodnamerefined":"testGetLabProceduresTestingForLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresTestingForLabTech", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testGetLabProceduresTestingForLabTech()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testGetLabProceduresTestingForLabTech() {\r\n    try {\r\n        dao.getLabProceduresTestingForLabTech(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2795, "methodname":"testMarkViewed()", "methodnamerefined":"testMarkViewed", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testMarkViewed", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testMarkViewed()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testMarkViewed() {\r\n    LabProcedureBean bean = new LabProcedureBean();\r\n    bean.setPid(1);\r\n    try {\r\n        dao.markViewed(bean);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2796, "methodname":"testRemoveLabProcedure()", "methodnamerefined":"testRemoveLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testRemoveLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testRemoveLabProcedure()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testRemoveLabProcedure() {\r\n    try {\r\n        dao.removeLabProcedure(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2797, "methodname":"testSetLPToTesting()", "methodnamerefined":"testSetLPToTesting", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testSetLPToTesting", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testSetLPToTesting()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testSetLPToTesting() {\r\n    try {\r\n        dao.setLPToTesting(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2798, "methodname":"testSubmitReceivedLP()", "methodnamerefined":"testSubmitReceivedLP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testSubmitReceivedLP", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testSubmitReceivedLP()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testSubmitReceivedLP() {\r\n    try {\r\n        dao.submitReceivedLP(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2799, "methodname":"testSubmitTestResults()", "methodnamerefined":"testSubmitTestResults", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testSubmitTestResults", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testSubmitTestResults()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testSubmitTestResults() {\r\n    try {\r\n        dao.submitTestResults(1, \"\", \"\", \"\", \"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2800, "methodname":"testUpdateLabProcedure()", "methodnamerefined":"testUpdateLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testUpdateLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testUpdateLabProcedure()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testUpdateLabProcedure() {\r\n    LabProcedureBean bean = new LabProcedureBean();\r\n    bean.setPid(1);\r\n    try {\r\n        dao.updateLabProcedure(bean);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2801, "methodname":"testUpdateRights()", "methodnamerefined":"testUpdateRights", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testUpdateRights", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest.testUpdateRights()", "classid":377, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabPocedureDAOExceptionTest", "shortclassname":"LabPocedureDAOExceptionTest", "method":"public void testUpdateRights() {\r\n    LabProcedureBean bean = new LabProcedureBean();\r\n    bean.setPid(1);\r\n    try {\r\n        dao.updateRights(bean);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":2802, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabProcedureDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabProcedureDAOTest.-init-()", "classid":378, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabProcedureDAOTest", "shortclassname":"LabProcedureDAOTest", "method":"LabProcedureDAOTest() {\r\n}"},
 {"id":2803, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabProcedureDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabProcedureDAOTest.setUp()", "classid":378, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabProcedureDAOTest", "shortclassname":"LabProcedureDAOTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":2804, "methodname":"testMarkViewed()", "methodnamerefined":"testMarkViewed", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.LabProcedureDAOTest.testMarkViewed", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.LabProcedureDAOTest.testMarkViewed()", "classid":378, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.LabProcedureDAOTest", "shortclassname":"LabProcedureDAOTest", "method":"public void testMarkViewed() throws Exception {\r\n    LabProcedureBean bean = new LabProcedureBean();\r\n    bean.setPid(1);\r\n    bean.statusComplete();\r\n    bean.setViewedByPatient(false);\r\n    long id = lpDAO.addLabProcedure(bean);\r\n    bean = lpDAO.getLabProcedure(id);\r\n    assertEquals(false, bean.isViewedByPatient());\r\n    bean.setViewedByPatient(true);\r\n    lpDAO.markViewed(bean);\r\n    bean = lpDAO.getLabProcedure(id);\r\n    assertEquals(true, bean.isViewedByPatient());\r\n}"},
 {"id":2805, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest.-init-()", "classid":379, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest", "shortclassname":"UpdateLabProcedureTest", "method":"UpdateLabProcedureTest() {\r\n}"},
 {"id":2806, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest.setUp()", "classid":379, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest", "shortclassname":"UpdateLabProcedureTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.labProcedures();\r\n    l = new LabProcedureBean();\r\n    l.setPid(1L);\r\n    l.setOvID(905L);\r\n    l.setLoinc(\"10763-1\");\r\n    l.statusPending();\r\n    l.setCommentary(\"Awaiting results\");\r\n    l.setResults(\"\");\r\n}"},
 {"id":2807, "methodname":"testFailLabProcedure()", "methodnamerefined":"testFailLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest.testFailLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest.testFailLabProcedure()", "classid":379, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest", "shortclassname":"UpdateLabProcedureTest", "method":"public void testFailLabProcedure() throws Exception {\r\n    l.setPid(0);\r\n    try {\r\n        lpDAO.updateLabProcedure(l);\r\n        fail();\r\n    } catch (DBException e) {\r\n        assertEquals(\"PatientMID cannot be null\", e.getExtendedMessage());\r\n    }\r\n}"},
 {"id":2808, "methodname":"testUpdateLabProcedure()", "methodnamerefined":"testUpdateLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest.testUpdateLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest.testUpdateLabProcedure()", "classid":379, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateLabProcedureTest", "shortclassname":"UpdateLabProcedureTest", "method":"public void testUpdateLabProcedure() throws Exception {\r\n    long id = lpDAO.addLabProcedure(l);\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(1L, procedures.getPid());\r\n    l.statusComplete();\r\n    l.setResults(\"The results were good\");\r\n    l.setProcedureID(id);\r\n    // the database cuts off milliseconds so we have to do that here\r\n    long i = ((System.currentTimeMillis()) / 1000) * 1000;\r\n    lpDAO.updateLabProcedure(l);\r\n    Timestamp t = new Timestamp(i);\r\n    LabProcedureBean updprocedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(t.toString(), updprocedures.getTimestamp().toString());\r\n    assertEquals(LabProcedureBean.Completed, updprocedures.getStatus());\r\n    assertEquals(\"The results were good\", updprocedures.getResults());\r\n}"},
 {"id":2809, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateRightsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateRightsTest.-init-()", "classid":380, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateRightsTest", "shortclassname":"UpdateRightsTest", "method":"UpdateRightsTest() {\r\n}"},
 {"id":2810, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateRightsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateRightsTest.setUp()", "classid":380, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateRightsTest", "shortclassname":"UpdateRightsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.labProcedures();\r\n    l = new LabProcedureBean();\r\n    l.setPid(1L);\r\n    l.setOvID(905L);\r\n    l.setLoinc(\"10763-8\");\r\n    l.statusPending();\r\n    l.setCommentary(\"Awaiting results\");\r\n    l.setResults(\"\");\r\n    l.restrict();\r\n}"},
 {"id":2811, "methodname":"testUpdateRights()", "methodnamerefined":"testUpdateRights", "methodabbreviation":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateRightsTest.testUpdateRights", "fullmethod":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateRightsTest.testUpdateRights()", "classid":380, "classname":"edu.ncsu.csc.itrust.dao.labprocedure.UpdateRightsTest", "shortclassname":"UpdateRightsTest", "method":"public void testUpdateRights() throws Exception {\r\n    long id = lpDAO.addLabProcedure(l);\r\n    LabProcedureBean procedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(1L, procedures.getPid());\r\n    l.allow();\r\n    l.setProcedureID(id);\r\n    lpDAO.updateRights(l);\r\n    LabProcedureBean updprocedures = lpDAO.getLabProcedure(id);\r\n    assertEquals(LabProcedureBean.Allow, updprocedures.getRights());\r\n}"},
 {"id":2812, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":381, "classname":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO", "shortclassname":"AccessDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AccessDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2813, "methodname":"getSessionTimeoutMins()", "methodnamerefined":"getSessionTimeoutMins", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO.getSessionTimeoutMins", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO.getSessionTimeoutMins()", "classid":381, "classname":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO", "shortclassname":"AccessDAO", "method":"/**\r\n * Returns the number of minutes it would take for a session to time out. This is done by effectively\r\n * using the database table as a hash table. If a row in GlobalVariables does not exist, one is inserted\r\n * with the default value 20.\r\n *\r\n * @return An int for the number of minutes.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int getSessionTimeoutMins() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT Value FROM globalvariables WHERE Name=Timeout\");\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return rs.getInt(\"Value\");\r\n        else {\r\n            insertDefaultTimeout(conn, 20);\r\n            return 20;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2814, "methodname":"insertDefaultTimeout(java.sql.Connection,int)", "methodnamerefined":"insertDefaultTimeout", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO.insertDefaultTimeout", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO.insertDefaultTimeout(java.sql.Connection,int)", "classid":381, "classname":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO", "shortclassname":"AccessDAO", "method":"private void insertDefaultTimeout(Connection conn, int mins) throws SQLException {\r\n    PreparedStatement ps = null;\r\n    ps = conn.prepareStatement(\"INSERT INTO globalvariables(Name,Value) VALUES (Timeout, ?)\");\r\n    ps.setInt(1, mins);\r\n    ps.executeUpdate();\r\n}"},
 {"id":2815, "methodname":"setSessionTimeoutMins(int)", "methodnamerefined":"setSessionTimeoutMins", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO.setSessionTimeoutMins", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO.setSessionTimeoutMins(int)", "classid":381, "classname":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO", "shortclassname":"AccessDAO", "method":"/**\r\n * Sets the number of minutes it would take for a session to timeout.\r\n *\r\n * @param mins\r\n * \t\tAn int specifying the number of minutes\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void setSessionTimeoutMins(int mins) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE globalvariables SET Value=? WHERE Name=Timeout\");\r\n        ps.setInt(1, mins);\r\n        int numUpdated = ps.executeUpdate();\r\n        // no value in the table\r\n        if (numUpdated == 0)\r\n            insertDefaultTimeout(conn, mins);\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2816, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AdverseEventDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.aeLoader = new AdverseEventBeanLoader();\r\n}"},
 {"id":2817, "methodname":"addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean,long)", "methodnamerefined":"addReport", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.addReport", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean,long)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"/**\r\n * Adds a message to the database.\r\n *\r\n * @param mBean\r\n * \t\tA bean representing the message to be added.\r\n * @throws SQLException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void addReport(AdverseEventBean aeBean, long hcpmid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO adverseevents (PatientMID, PresImmu, Code, Comment, Prescriber, Status) \" + \"VALUES (?, ?, ?, ?, ?, ?)\"));\r\n        ps.setString(1, aeBean.getMID());\r\n        ps.setString(2, aeBean.getDrug());\r\n        ps.setString(3, aeBean.getCode());\r\n        ps.setString(4, aeBean.getDescription());\r\n        ps.setLong(5, hcpmid);\r\n        ps.setString(6, \"Active\");\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2818, "methodname":"getHCPMID(int)", "methodnamerefined":"getHCPMID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getHCPMID", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getHCPMID(int)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"public long getHCPMID(int id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE id=?\");\r\n        ps.setInt(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        long hcpMID = 0;\r\n        if (rs.next()) {\r\n            hcpMID = rs.getLong(\"Prescriber\");\r\n        }\r\n        return hcpMID;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2819, "methodname":"getImmunizations(java.lang.String,java.lang.String)", "methodnamerefined":"getImmunizations", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getImmunizations", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getImmunizations(java.lang.String,java.lang.String)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"public List<AdverseEventBean> getImmunizations(String start, String end) throws DBException, ParseException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        SimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\r\n        Date beginning = fmt.parse(start);\r\n        Date ending = fmt.parse(end);\r\n        conn = factory.getConnection();\r\n        // AND NDCodes.Code=AdverseEvents.Code\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents,cptcodes WHERE adverseevents.TimeLogged >= ? AND adverseevents.TimeLogged <= ? AND cptcodes.Code=adverseevents.Code ORDER BY adverseevents.Code, adverseevents.TimeLogged DESC\");\r\n        ps.setTimestamp(1, new Timestamp(beginning.getTime()));\r\n        ps.setTimestamp(2, new Timestamp(((ending.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n        return aeList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2820, "methodname":"getNameForCode(java.lang.String)", "methodnamerefined":"getNameForCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getNameForCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getNameForCode(java.lang.String)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"public String getNameForCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT PresImmu FROM adverseevents WHERE code=?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getString(\"PresImmu\");\r\n        }\r\n        return \"Name not Found\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2821, "methodname":"getPerscriptions(java.lang.String,java.lang.String)", "methodnamerefined":"getPerscriptions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getPerscriptions", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getPerscriptions(java.lang.String,java.lang.String)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"public List<AdverseEventBean> getPerscriptions(String start, String end) throws DBException, ParseException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        SimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\r\n        Date beginning = fmt.parse(start);\r\n        Date ending = fmt.parse(end);\r\n        conn = factory.getConnection();\r\n        // AND NDCodes.Code=AdverseEvents.Code\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents,ndcodes WHERE adverseevents.TimeLogged >= ? AND adverseevents.TimeLogged <= ? AND ndcodes.Code=adverseevents.Code ORDER BY adverseevents.Code, adverseevents.TimeLogged DESC\");\r\n        ps.setTimestamp(1, new Timestamp(beginning.getTime()));\r\n        ps.setTimestamp(2, new Timestamp(((ending.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n        return aeList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2822, "methodname":"getReport(int)", "methodnamerefined":"getReport", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getReport", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getReport(int)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"public AdverseEventBean getReport(int id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE id=?\");\r\n        ps.setInt(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n        return aeList.get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2823, "methodname":"getReportsFor(long)", "methodnamerefined":"getReportsFor", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getReportsFor", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getReportsFor(long)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"/**\r\n * Gets all the adverse event reports for a certain user MID.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to be looked up.\r\n * @return A java.util.List of AdverseEventBeans.\r\n * @throws SQLException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<AdverseEventBean> getReportsFor(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE PatientMID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<AdverseEventBean> aeList = this.aeLoader.loadList(rs);\r\n        return aeList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2824, "methodname":"getUnremovedAdverseEventsByCode(java.lang.String)", "methodnamerefined":"getUnremovedAdverseEventsByCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getUnremovedAdverseEventsByCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.getUnremovedAdverseEventsByCode(java.lang.String)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"public List<AdverseEventBean> getUnremovedAdverseEventsByCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE code=? AND status=?\");\r\n        ps.setString(1, code);\r\n        ps.setString(2, \"Active\");\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        return aeLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2825, "methodname":"removeReport(int)", "methodnamerefined":"removeReport", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.removeReport", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.removeReport(int)", "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "shortclassname":"AdverseEventDAO", "method":"public long removeReport(int id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE adverseevents SET Status = ? WHERE id = ?\");\r\n        String removed = \"removed\";\r\n        ps.setString(1, removed);\r\n        ps.setInt(2, id);\r\n        ps.executeUpdate();\r\n        long a = DBUtil.getLastInsert(conn);\r\n        return a;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2826, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":383, "classname":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO", "shortclassname":"AllergyDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AllergyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2827, "methodname":"addAllergy(edu.ncsu.csc.itrust.beans.AllergyBean)", "methodnamerefined":"addAllergy", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.addAllergy", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.addAllergy(edu.ncsu.csc.itrust.beans.AllergyBean)", "classid":383, "classname":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO", "shortclassname":"AllergyDAO", "method":"/**\r\n * Adds an allergy to this patients list.\r\n *\r\n * @param allergy:\r\n * \t\tallergy bean\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void addAllergy(AllergyBean allergy) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO allergies(PatientID, Code, FirstFound, Description) VALUES (?,?,?,?)\");\r\n        ps.setLong(1, allergy.getPatientID());\r\n        ps.setString(2, allergy.getNDCode());\r\n        if ((allergy.getFirstFound()) == null) {\r\n            ps.setDate(3, null);\r\n        } else {\r\n            ps.setDate(3, new Date(allergy.getFirstFound().getTime()));\r\n        }\r\n        ps.setString(4, allergy.getDescription());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2828, "methodname":"getAllergies(long)", "methodnamerefined":"getAllergies", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.getAllergies", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.getAllergies(long)", "classid":383, "classname":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO", "shortclassname":"AllergyDAO", "method":"/**\r\n * Returns a list of patients allergies.\r\n *\r\n * @param pid\r\n * \t\tA long for the MID of the patient we are looking up.\r\n * @return A java.util.List of AllergyBeans associated with this patient.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<AllergyBean> getAllergies(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM allergies WHERE PatientID=? ORDER BY FirstFound DESC\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return allergyBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2829, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"public ApptDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n    this.abloader = new ApptBeanLoader();\r\n}"},
 {"id":2830, "methodname":"editAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"editAppt", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.editAppt", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.editAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"public void editAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"UPDATE appointment SET appt_type=?, sched_date=?, comment=? WHERE appt_id=?\");\r\n    ps.setString(1, appt.getApptType());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setString(3, appt.getComment());\r\n    ps.setInt(4, appt.getApptID());\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}"},
 {"id":2831, "methodname":"getAllApptsFor(long)", "methodnamerefined":"getAllApptsFor", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllApptsFor", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllApptsFor(long)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"public List<ApptBean> getAllApptsFor(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE doctor_id=? ORDER BY sched_date;\");\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE patient_id=? ORDER BY sched_date;\");\r\n    }\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> abList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return abList;\r\n}"},
 {"id":2832, "methodname":"getAllConflictsForDoctor(long)", "methodnamerefined":"getAllConflictsForDoctor", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllConflictsForDoctor", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllConflictsForDoctor(long)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"/**\r\n * Returns all past and future appointment conflicts for the doctor with the given MID\r\n *\r\n * @param mid\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<ApptBean> getAllConflictsForDoctor(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT a1.* \" + ((((((((\"FROM appointment a1, appointment a2, \"// all possible sets of 2 appts\r\n     + \"appointmenttype type1,appointmenttype type2 \")// and the corresponding types\r\n     + \"WHERE a1.appt_id!=a2.appt_id AND \")// exclude itself\r\n     + \"a1.appt_type=type1.appt_type AND a2.appt_type=type2.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a1.sched_date, INTERVAL type1.duration MINUTE)>a2.sched_date AND \")// a1 ends after a2 starts AND\r\n     + \"a1.sched_date<=a2.sched_date) OR\")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(a2.sched_date, INTERVAL type2.duration MINUTE)>a1.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"a2.sched_date<=a1.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a1.doctor_id=? AND a2.doctor_id=?;\")));\r\n    ps.setLong(1, mid);\r\n    ps.setLong(2, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}"},
 {"id":2833, "methodname":"getAllConflictsForPatient(long)", "methodnamerefined":"getAllConflictsForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllConflictsForPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllConflictsForPatient(long)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"/**\r\n * Returns all past and future appointment conflicts for the patient with the given MID\r\n *\r\n * @param mid\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<ApptBean> getAllConflictsForPatient(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT a1.* \" + ((((((((\"FROM appointment a1, appointment a2, \"// all possible sets of 2 appts\r\n     + \"appointmenttype type1,appointmenttype type2 \")// and the corresponding types\r\n     + \"WHERE a1.appt_id!=a2.appt_id AND \")// exclude itself\r\n     + \"a1.appt_type=type1.appt_type AND a2.appt_type=type2.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a1.sched_date, INTERVAL type1.duration MINUTE)>a2.sched_date AND \")// a1 ends after a2 starts AND\r\n     + \"a1.sched_date<=a2.sched_date) OR\")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(a2.sched_date, INTERVAL type2.duration MINUTE)>a1.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"a2.sched_date<=a1.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a1.patient_id=? AND a2.patient_id=?;\")));\r\n    ps.setLong(1, mid);\r\n    ps.setLong(2, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}"},
 {"id":2834, "methodname":"getAllHCPConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"getAllHCPConflictsForAppt", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllHCPConflictsForAppt", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllHCPConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"public List<ApptBean> getAllHCPConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.doctor_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}"},
 {"id":2835, "methodname":"getAllPatientConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"getAllPatientConflictsForAppt", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllPatientConflictsForAppt", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllPatientConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"public List<ApptBean> getAllPatientConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.patient_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}"},
 {"id":2836, "methodname":"getAppt(int)", "methodnamerefined":"getAppt", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAppt", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAppt(int)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"public List<ApptBean> getAppt(int apptID) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE appt_id=?\");\r\n    ps.setInt(1, apptID);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> abList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return abList;\r\n}"},
 {"id":2837, "methodname":"getApptsFor(long)", "methodnamerefined":"getApptsFor", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getApptsFor", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getApptsFor(long)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"public List<ApptBean> getApptsFor(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE doctor_id=? AND sched_date > NOW() ORDER BY sched_date;\");\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT * FROM appointment WHERE patient_id=? AND sched_date > NOW() ORDER BY sched_date;\");\r\n    }\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> abList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return abList;\r\n}"},
 {"id":2838, "methodname":"removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"removeAppt", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.removeAppt", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"public void removeAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"DELETE FROM appointment WHERE appt_id=?\");\r\n    ps.setInt(1, appt.getApptID());\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}"},
 {"id":2839, "methodname":"scheduleAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"scheduleAppt", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.scheduleAppt", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.scheduleAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "shortclassname":"ApptDAO", "method":"public void scheduleAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO appointment (appt_type, patient_id, doctor_id, sched_date, comment) \" + \"VALUES (?, ?, ?, ?, ?)\"));\r\n    ps = this.abloader.loadParameters(ps, appt);\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}"},
 {"id":2840, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":385, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO", "shortclassname":"ApptRequestDAO", "method":"public ApptRequestDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    loader = new ApptRequestBeanLoader();\r\n}"},
 {"id":2841, "methodname":"addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)", "methodnamerefined":"addApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.addApptRequest", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)", "classid":385, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO", "shortclassname":"ApptRequestDAO", "method":"/**\r\n *\r\n *\r\n * @param req\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic void addApptRequest(ApptRequestBean req) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"INSERT INTO appointmentrequests (appt_type, patient_id, doctor_id, sched_date, comment, pending, accepted) VALUES (?, ?, ?, ?, ?, ?, ?)\");\r\n    loader.loadParameters(stmt, req);\r\n    stmt.executeUpdate();\r\n    DBUtil.closeConnection(conn, stmt);\r\n}"},
 {"id":2842, "methodname":"getApptRequest(int)", "methodnamerefined":"getApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.getApptRequest", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.getApptRequest(int)", "classid":385, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO", "shortclassname":"ApptRequestDAO", "method":"public ApptRequestBean getApptRequest(int reqID) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"SELECT * FROM appointmentrequests WHERE appt_id=?\");\r\n    stmt.setInt(1, reqID);\r\n    ResultSet rs = stmt.executeQuery();\r\n    if (rs.next()) {\r\n        ApptRequestBean b = loader.loadSingle(rs);\r\n        DBUtil.closeConnection(conn, stmt);\r\n        return b;\r\n    } else {\r\n        DBUtil.closeConnection(conn, stmt);\r\n        return null;\r\n    }\r\n}"},
 {"id":2843, "methodname":"getApptRequestsFor(long)", "methodnamerefined":"getApptRequestsFor", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.getApptRequestsFor", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.getApptRequestsFor(long)", "classid":385, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO", "shortclassname":"ApptRequestDAO", "method":"/**\r\n *\r\n *\r\n * @param hcpid\r\n * \t\t\r\n * @return \r\n */\r\npublic List<ApptRequestBean> getApptRequestsFor(long hcpid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"SELECT * FROM appointmentrequests WHERE doctor_id=? ORDER BY sched_date\");\r\n    stmt.setLong(1, hcpid);\r\n    ResultSet rs = stmt.executeQuery();\r\n    List<ApptRequestBean> list = loader.loadList(rs);\r\n    DBUtil.closeConnection(conn, stmt);\r\n    return list;\r\n}"},
 {"id":2844, "methodname":"updateApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)", "methodnamerefined":"updateApptRequest", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.updateApptRequest", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.updateApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)", "classid":385, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO", "shortclassname":"ApptRequestDAO", "method":"/**\r\n *\r\n *\r\n * @param req\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic void updateApptRequest(ApptRequestBean req) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"UPDATE appointmentrequests SET pending=?, accepted=? WHERE appt_id=?\");\r\n    stmt.setBoolean(1, req.isPending());\r\n    stmt.setBoolean(2, req.isAccepted());\r\n    stmt.setInt(3, req.getRequestedAppt().getApptID());\r\n    stmt.executeUpdate();\r\n    DBUtil.closeConnection(conn, stmt);\r\n}"},
 {"id":2845, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":386, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO", "shortclassname":"ApptTypeDAO", "method":"public ApptTypeDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.atLoader = new ApptTypeBeanLoader();\r\n}"},
 {"id":2846, "methodname":"addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "methodnamerefined":"addApptType", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.addApptType", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "classid":386, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO", "shortclassname":"ApptTypeDAO", "method":"public boolean addApptType(ApptTypeBean apptType) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO appointmenttype (appt_type, duration) \" + \"VALUES (?, ?)\"));\r\n    this.atLoader.loadParameters(ps, apptType);\r\n    int x = ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n    if (x > 0)\r\n        return true;\r\n    else\r\n        return false;\r\n\r\n}"},
 {"id":2847, "methodname":"editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "methodnamerefined":"editApptType", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.editApptType", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "classid":386, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO", "shortclassname":"ApptTypeDAO", "method":"public boolean editApptType(ApptTypeBean apptType) throws DBException, SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"UPDATE appointmenttype SET duration=? WHERE appt_type=?\");\r\n    ps.setInt(1, apptType.getDuration());\r\n    ps.setString(2, apptType.getName());\r\n    int x = ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n    if (x > 0)\r\n        return true;\r\n    else\r\n        return false;\r\n\r\n}"},
 {"id":2848, "methodname":"getApptType(java.lang.String)", "methodnamerefined":"getApptType", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.getApptType", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.getApptType(java.lang.String)", "classid":386, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO", "shortclassname":"ApptTypeDAO", "method":"public ApptTypeBean getApptType(String apptType) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM appointmenttype WHERE appt_type=?\");\r\n    ps.setString(1, apptType);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptTypeBean> beans = atLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    if ((beans.size()) > 0) {\r\n        return beans.get(0);\r\n    } else {\r\n        return null;\r\n    }\r\n}"},
 {"id":2849, "methodname":"getApptTypes()", "methodnamerefined":"getApptTypes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.getApptTypes", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.getApptTypes()", "classid":386, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO", "shortclassname":"ApptTypeDAO", "method":"public List<ApptTypeBean> getApptTypes() throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM appointmenttype\");\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptTypeBean> atList = this.atLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return atList;\r\n}"},
 {"id":2850, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AuthDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2851, "methodname":"addUser(java.lang.Long,edu.ncsu.csc.itrust.enums.Role,java.lang.String)", "methodnamerefined":"addUser", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.addUser", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.addUser(java.lang.Long,edu.ncsu.csc.itrust.enums.Role,java.lang.String)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).\r\n * Initially sets security question to a random set of characters, so that nobody should be able to guess\r\n * its value.\r\n *\r\n * @param mid\r\n * \t\tThe users MID as a Long.\r\n * @param role\r\n * \t\tThe role of the user as a Role enum {@link Role}\r\n * @param password\r\n * \t\tThe password for the new user.\r\n * @return A string representing the newly added randomly-generated password.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String addUser(Long mid, Role role, String password) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"INSERT INTO users (MID, PASSWORD, ROLE, sQuestion, sAnswer) VALUES (?,?,?,?,?)\");\r\n        pstmt.setLong(1, mid);\r\n        String hashedPassword = DigestUtils.shaHex(password);\r\n        pstmt.setString(2, hashedPassword);\r\n        pstmt.setString(3, role.toString());\r\n        pstmt.setString(4, \"Enter the random password given in your account email\");\r\n        pstmt.setString(5, password);\r\n        pstmt.executeUpdate();\r\n        return password;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}"},
 {"id":2852, "methodname":"checkUserExists(long)", "methodnamerefined":"checkUserExists", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.checkUserExists", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.checkUserExists(long)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Check that a user actually exists.\r\n *\r\n * @param mid\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean checkUserExists(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM users WHERE MID=?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2853, "methodname":"getDeactivated(long)", "methodnamerefined":"getDeactivated", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getDeactivated", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getDeactivated(long)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Returns whether a user is deactivated.\r\n * Currently works only for patients\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to look up.\r\n * @return Activation status of the user\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean getDeactivated(long mid) throws DBException, iTrustException {\r\n    Role role = getUserRole(mid);\r\n    switch (role) {\r\n        case PATIENT :\r\n            Connection conn = null;\r\n            PreparedStatement pstmt = null;\r\n            try {\r\n                conn = factory.getConnection();\r\n                pstmt = conn.prepareStatement(\"SELECT DateOfDeactivation FROM patients WHERE MID=?\");\r\n                pstmt.setLong(1, mid);\r\n                ResultSet rs;\r\n                rs = pstmt.executeQuery();\r\n                if (rs.next()) {\r\n                    if ((rs.getString(\"DateOfDeactivation\")) == null) {\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    throw new iTrustException(\"User does not exist\");\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n                throw new DBException(e);\r\n            } finally {\r\n                DBUtil.closeConnection(conn, pstmt);\r\n            }\r\n        default :\r\n            return false;\r\n    }\r\n}"},
 {"id":2854, "methodname":"getLoginFailures(java.lang.String)", "methodnamerefined":"getLoginFailures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getLoginFailures", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getLoginFailures(java.lang.String)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Return the number of failures from login failures a password, given an IP address.\r\n *\r\n * @param ipAddr\r\n * \t\tThe IP address for this attempt as a String.\r\n * @return An int representing the number of failures which have occured.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int getLoginFailures(String ipAddr) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM loginfailures WHERE IPADDRESS=?\");\r\n        ps.setString(1, ipAddr);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            // if were more than X minutes out, clear the failure count\r\n            if (((System.currentTimeMillis()) - (rs.getTimestamp(\"lastFailure\").getTime())) > (AuthDAO.LOGIN_TIMEOUT)) {\r\n                updateFailuresToZero(ipAddr, conn);\r\n                return 0;\r\n            } else {\r\n                return rs.getInt(\"failureCount\");\r\n            }\r\n        } else {\r\n            insertLoginFailureRow(ipAddr, 0, conn);\r\n            return 0;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2855, "methodname":"getResetPasswordFailures(java.lang.String)", "methodnamerefined":"getResetPasswordFailures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getResetPasswordFailures", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getResetPasswordFailures(java.lang.String)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Return the number of failures from resetting a password, given an IP address.\r\n *\r\n * @param ipAddr\r\n * \t\tAn IP address for the associated attempt as a String.\r\n * @return An int representing the number of failures.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int getResetPasswordFailures(String ipAddr) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM resetpasswordfailures WHERE IPADDRESS=?\");\r\n        ps.setString(1, ipAddr);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            // if were more than X minutes out, clear the failure count\r\n            if (((System.currentTimeMillis()) - (rs.getTimestamp(\"lastFailure\").getTime())) > (AuthDAO.LOGIN_TIMEOUT)) {\r\n                updateResetFailuresToZero(ipAddr, conn);\r\n                return 0;\r\n            } else {\r\n                return rs.getInt(\"failureCount\");\r\n            }\r\n        } else {\r\n            insertResetPasswordRow(ipAddr, 0, conn);\r\n            return 0;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2856, "methodname":"getSecurityAnswer(long)", "methodnamerefined":"getSecurityAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getSecurityAnswer", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getSecurityAnswer(long)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Return the security answer of a particular user\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user we are looking up.\r\n * @return The security answer as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getSecurityAnswer(long mid) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT sAnswer FROM users WHERE MID=?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet r = ps.executeQuery();\r\n        if (r.next())\r\n            return r.getString(\"sAnswer\");\r\n        else\r\n            throw new iTrustException((\"No security answer set for MID \" + mid));\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2857, "methodname":"getSecurityQuestion(long)", "methodnamerefined":"getSecurityQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getSecurityQuestion", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getSecurityQuestion(long)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Return the security question for a particular user.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user we are looking up.\r\n * @return The security question of the user we are looking up.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getSecurityQuestion(long mid) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT sQuestion FROM users WHERE MID=?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet r = ps.executeQuery();\r\n        if (r.next())\r\n            return r.getString(\"sQuestion\");\r\n        else\r\n            throw new iTrustException((\"No security question set for MID: \" + mid));\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2858, "methodname":"getUserName(long)", "methodnamerefined":"getUserName", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getUserName", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getUserName(long)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Returns the user name of a user from just the MID\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to get the name of.\r\n * @return The users name as a String.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getUserName(long mid) throws DBException, iTrustException {\r\n    Role role = getUserRole(mid);\r\n    switch (role) {\r\n        case HCP :\r\n        case PHA :\r\n        case ADMIN :\r\n        case UAP :\r\n        case ER :\r\n        case LT :\r\n            return factory.getPersonnelDAO().getName(mid);\r\n        case PATIENT :\r\n            return factory.getPatientDAO().getName(mid);\r\n        case TESTER :\r\n            return String.valueOf(mid);\r\n        default :\r\n            throw new iTrustException(((\"Role \" + role) + \" not supported\"));\r\n    }\r\n}"},
 {"id":2859, "methodname":"getUserRole(long)", "methodnamerefined":"getUserRole", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getUserRole", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.getUserRole(long)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Returns the role of a particular MID\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to look up.\r\n * @return The {@link Role} of the user as an enum.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic Role getUserRole(long mid) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"SELECT role FROM users WHERE MID=?\");\r\n        pstmt.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = pstmt.executeQuery();\r\n        if (rs.next()) {\r\n            return Role.parse(rs.getString(\"role\"));\r\n        } else {\r\n            throw new iTrustException(\"User does not exist\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}"},
 {"id":2860, "methodname":"insertLoginFailureRow(java.lang.String,int,java.sql.Connection)", "methodnamerefined":"insertLoginFailureRow", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertLoginFailureRow", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertLoginFailureRow(java.lang.String,int,java.sql.Connection)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"private void insertLoginFailureRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"INSERT INTO loginfailures(IPAddress, failureCount) VALUES(?,?)\");\r\n    ps.setString(1, ipAddr);\r\n    ps.setInt(2, failureCount);\r\n    ps.executeUpdate();\r\n}"},
 {"id":2861, "methodname":"insertResetPasswordRow(java.lang.String,int,java.sql.Connection)", "methodnamerefined":"insertResetPasswordRow", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertResetPasswordRow", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.insertResetPasswordRow(java.lang.String,int,java.sql.Connection)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"private void insertResetPasswordRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"INSERT INTO resetpasswordfailures(IPAddress, failureCount) VALUES(?,?)\");\r\n    ps.setString(1, ipAddr);\r\n    ps.setInt(2, failureCount);\r\n    ps.executeUpdate();\r\n}"},
 {"id":2862, "methodname":"recordLoginFailure(java.lang.String)", "methodnamerefined":"recordLoginFailure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.recordLoginFailure", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.recordLoginFailure(java.lang.String)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where\r\n * the key is the users IP address. If the users IP address is not in the table, a row with \"1\" is\r\n * added.\r\n *\r\n * @param ipAddr\r\n * \t\tThe IP address of the user as a String.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void recordLoginFailure(String ipAddr) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE loginfailures SET FailureCount=FailureCount+1, lastFailure=CURRENT_TIMESTAMP WHERE IPAddress=?\");\r\n        // .prepareStatement(\"INSERT INTO LoginFailures VALUES(?,?,?)\");\r\n        ps.setString(1, ipAddr);\r\n        // ps.setInt(2, failures);\r\n        // ps.setDate(3, Calendar.getInstance().getTime());\r\n        int numUpdated = ps.executeUpdate();\r\n        // if there wasnt an empty row to begin with\r\n        if (numUpdated == 0)\r\n            insertLoginFailureRow(ipAddr, 1, conn);\r\n        // now they have a row AND a strike against\r\n\r\n        // em\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2863, "methodname":"recordResetPasswordFailure(java.lang.String)", "methodnamerefined":"recordResetPasswordFailure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.recordResetPasswordFailure", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.recordResetPasswordFailure(java.lang.String)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash\r\n * table where the key is the users IP address. If the users IP address is not in the table, a row with\r\n * \"1\" is added.\r\n *\r\n * @param ipAddr\r\n * \t\tThe IP address of the user as a String.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void recordResetPasswordFailure(String ipAddr) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE resetpasswordfailures SET failurecount=failurecount+1 WHERE ipaddress=?\");\r\n        ps.setString(1, ipAddr);\r\n        int numUpdated = ps.executeUpdate();\r\n        // if there wasnt an empty row to begin with\r\n        if (numUpdated == 0)\r\n            insertResetPasswordRow(ipAddr, 1, conn);\r\n        // now they have a row AND a strike against\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2864, "methodname":"resetLoginFailuresToZero(java.lang.String)", "methodnamerefined":"resetLoginFailuresToZero", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.resetLoginFailuresToZero", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.resetLoginFailuresToZero(java.lang.String)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"public void resetLoginFailuresToZero(String ipAddr) throws DBException, SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE loginfailures SET failureCount=0 WHERE IPAddress=?\");\r\n        ps.setString(1, ipAddr);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2865, "methodname":"resetPassword(long,java.lang.String)", "methodnamerefined":"resetPassword", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.resetPassword", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.resetPassword(long,java.lang.String)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Change the password of a particular user\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user whose password we are changing.\r\n * @param password\r\n * \t\tThe new password.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void resetPassword(long mid, String password) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE users SET password=? WHERE MID=?\");\r\n        password = DigestUtils.shaHex(password);\r\n        ps.setString(1, password);\r\n        ps.setLong(2, mid);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2866, "methodname":"setSecurityQuestionAnswer(java.lang.String,java.lang.String,long)", "methodnamerefined":"setSecurityQuestionAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.setSecurityQuestionAnswer", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.setSecurityQuestionAnswer(java.lang.String,java.lang.String,long)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"/**\r\n * Reset the security question and answer for a particular user\r\n *\r\n * @param question\r\n * \t\tThe security question as a string.\r\n * @param answer\r\n * \t\tThe security answer as a string.\r\n * @param mid\r\n * \t\tThe MID of the user as a long.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void setSecurityQuestionAnswer(String question, String answer, long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"UPDATE users SET sQuestion = ?, sAnswer = ? WHERE MID = ?\");\r\n        pstmt.setString(1, question);\r\n        pstmt.setString(2, answer);\r\n        pstmt.setLong(3, mid);\r\n        pstmt.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}"},
 {"id":2867, "methodname":"updateFailuresToZero(java.lang.String,java.sql.Connection)", "methodnamerefined":"updateFailuresToZero", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.updateFailuresToZero", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.updateFailuresToZero(java.lang.String,java.sql.Connection)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"private void updateFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"UPDATE loginfailures SET failureCount=0 WHERE IPAddress=?\");\r\n    ps.setString(1, ipAddr);\r\n    ps.executeUpdate();\r\n}"},
 {"id":2868, "methodname":"updateResetFailuresToZero(java.lang.String,java.sql.Connection)", "methodnamerefined":"updateResetFailuresToZero", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.updateResetFailuresToZero", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.updateResetFailuresToZero(java.lang.String,java.sql.Connection)", "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "shortclassname":"AuthDAO", "method":"private void updateResetFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\r\n    PreparedStatement ps = conn.prepareStatement(\"UPDATE resetpasswordfailures SET failureCount=0 WHERE IPAddress=?\");\r\n    ps.setString(1, ipAddr);\r\n    ps.executeUpdate();\r\n}"},
 {"id":2869, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "shortclassname":"CPTCodesDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic CPTCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2870, "methodname":"addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"addCPTCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.addCPTCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "shortclassname":"CPTCodesDAO", "method":"/**\r\n * Adds a new CPT code, returns that it was added successfully\r\n *\r\n * @param proc\r\n * \t\tA ProcedureBean representing the new code information.\r\n * @return A boolean for whether the operation was successful.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addCPTCode(ProcedureBean proc) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO cptcodes (Code, Description, Attribute) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, proc.getCPTCode());\r\n        ps.setString(2, proc.getDescription());\r\n        ps.setString(3, proc.getAttribute());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2871, "methodname":"getAllCPTCodes()", "methodnamerefined":"getAllCPTCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getAllCPTCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getAllCPTCodes()", "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "shortclassname":"CPTCodesDAO", "method":"/**\r\n * Returns a list of all CPT codes.\r\n *\r\n * @return A java.util.List of ProcedureBeans for the CPT codes.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ProcedureBean> getAllCPTCodes() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM cptcodes ORDER BY CODE\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return procedureBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2872, "methodname":"getCPTCode(java.lang.String)", "methodnamerefined":"getCPTCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getCPTCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getCPTCode(java.lang.String)", "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "shortclassname":"CPTCodesDAO", "method":"/**\r\n * Returns a particular procedure description for a code.\r\n *\r\n * @param code\r\n * \t\tThe string representation of the code.\r\n * @return The textual description of the code.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic ProcedureBean getCPTCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM cptcodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return procedureBeanLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2873, "methodname":"getImmunizationCPTCodes()", "methodnamerefined":"getImmunizationCPTCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getImmunizationCPTCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getImmunizationCPTCodes()", "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "shortclassname":"CPTCodesDAO", "method":"/**\r\n * Returns a list of all immunization CPT codes.\r\n *\r\n * @return A java.util.List of all Immunization-related CPT codes.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ProcedureBean> getImmunizationCPTCodes() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"select * from cptcodes where attribute=immunization order by code\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return procedureBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2874, "methodname":"getProcedureCPTCodes()", "methodnamerefined":"getProcedureCPTCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getProcedureCPTCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.getProcedureCPTCodes()", "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "shortclassname":"CPTCodesDAO", "method":"/**\r\n * Returns a list of all non-immunization CPT codes.\r\n *\r\n * @return A java.util.List of all Immunization-related CPT codes.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ProcedureBean> getProcedureCPTCodes() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"select * from cptcodes where attribute is NULL order by code\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return procedureBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2875, "methodname":"updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"updateCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.updateCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "shortclassname":"CPTCodesDAO", "method":"/**\r\n * Change the procedure description for a particular CPT code\r\n *\r\n * @param proc\r\n * \t\tA ProcedureBean representing the new code information.\r\n * @return A boolean for whether the operation was successful.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateCode(ProcedureBean proc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE cptcodes SET Description = ?, Attribute = ? WHERE Code = ?\");\r\n        ps.setString(1, proc.getDescription());\r\n        ps.setString(2, proc.getAttribute());\r\n        ps.setString(3, proc.getCPTCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2876, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "shortclassname":"DiagnosesDAO", "method":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n */\r\npublic DiagnosesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2877, "methodname":"add(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.add", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.add(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "shortclassname":"DiagnosesDAO", "method":"/**\r\n * Adds a diagnosis bean to the database.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(DiagnosisBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO ovdiagnosis \" + \"(VisitID,ICDCode) VALUES (?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getICDCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2878, "methodname":"edit(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"edit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.edit", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.edit(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "shortclassname":"DiagnosesDAO", "method":"/**\r\n * Edits an existing prescription bean.\r\n *\r\n * @param pres\r\n * \t\tThe newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long edit(DiagnosisBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        // String statement = \"UPDATE ovdiagnosis \" +\r\n        // \"SET VisitID=?, ICDCode=? \" +\r\n        // \"WHERE ID=?\";\r\n        String statement = \"UPDATE ovdiagnosis \" + (\"SET VisitID=?, ICDCode=? \" + \"WHERE ID = ?\");\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getICDCode());\r\n        ps.setLong(3, bean.getOvDiagnosisID());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2879, "methodname":"findEarliestIncident(java.lang.String)", "methodnamerefined":"findEarliestIncident", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.findEarliestIncident", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.findEarliestIncident(java.lang.String)", "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "shortclassname":"DiagnosesDAO", "method":"public Date findEarliestIncident(String icdCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT MIN(visitDate) AS visitDate FROM ovdiagnosis d INNER JOIN officevisits o \" + (\" ON d.VisitID=o.ID \" + \" WHERE ICDCode LIKE ?\")));\r\n        ps.setString(1, (icdCode + \"%\"));\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            Date date = rs.getDate(\"visitDate\");\r\n            return date;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return null;\r\n}"},
 {"id":2880, "methodname":"getCountForWeekOf(java.lang.String,java.lang.String,java.util.Date)", "methodnamerefined":"getCountForWeekOf", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getCountForWeekOf", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getCountForWeekOf(java.lang.String,java.lang.String,java.util.Date)", "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "shortclassname":"DiagnosesDAO", "method":"public DiagnosisStatisticsBean getCountForWeekOf(String icdCode, String zipCode, Date lower) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    return getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n}"},
 {"id":2881, "methodname":"getDiagnosisCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)", "methodnamerefined":"getDiagnosisCounts", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getDiagnosisCounts", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getDiagnosisCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)", "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "shortclassname":"DiagnosesDAO", "method":"/**\r\n * Gets a local zip code count and regional count of a specified diagnosis code\r\n *\r\n * @param icdCode\r\n * \t\tThe diagnosis code\r\n * @param zipCode\r\n * \t\tThe zip code to evaluate\r\n * @param lower\r\n * \t\tThe starting date\r\n * @param upper\r\n * \t\tThe ending date\r\n * @return A bean containing the local and regional counts\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic DiagnosisStatisticsBean getDiagnosisCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    DiagnosisStatisticsBean dsBean = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip=? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, zipCode);\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.last();\r\n        int local = rs.getRow();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis INNER JOIN officevisits ON ovdiagnosis.VisitID=officevisits.ID INNER JOIN patients ON officevisits.PatientID=patients.MID WHERE ICDCode=? AND zip LIKE ? AND visitDate >= ? AND visitDate <= ? \");\r\n        ps.setString(1, icdCode);\r\n        ps.setString(2, ((zipCode.substring(0, 3)) + \"%\"));\r\n        ps.setTimestamp(3, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(4, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        rs = ps.executeQuery();\r\n        rs.last();\r\n        int region = rs.getRow();\r\n        dsBean = new DiagnosisStatisticsBean(zipCode, local, region, lower, upper);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return dsBean;\r\n}"},
 {"id":2882, "methodname":"getList(long)", "methodnamerefined":"getList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getList", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getList(long)", "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "shortclassname":"DiagnosesDAO", "method":"/**\r\n *\r\n *\r\n * @param visitID\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<DiagnosisBean> getList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovdiagnosis,icdcodes Where ovdiagnosis.VisitID = ? \" + \"AND icdcodes.Code=ovdiagnosis.ICDCode\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2883, "methodname":"getWeeklyCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)", "methodnamerefined":"getWeeklyCounts", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getWeeklyCounts", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.getWeeklyCounts(java.lang.String,java.lang.String,java.util.Date,java.util.Date)", "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "shortclassname":"DiagnosesDAO", "method":"/**\r\n * Gets a weekly local zip code count and regional count of a specified diagnosis code over a time period\r\n *\r\n * @param icdCode\r\n * \t\tThe diagnosis code\r\n * @param zipCode\r\n * \t\tThe zip code to evaluate\r\n * @param lower\r\n * \t\tThe starting date\r\n * @param upper\r\n * \t\tThe ending date\r\n * @return A list of beans containing the local and regional count for each week in the time period\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic ArrayList<DiagnosisStatisticsBean> getWeeklyCounts(String icdCode, String zipCode, Date lower, Date upper) throws DBException {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(lower);\r\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    Date lowerDate = cal.getTime();\r\n    cal.add(Calendar.HOUR, (24 * 6));\r\n    Date upperDate = cal.getTime();\r\n    ArrayList<DiagnosisStatisticsBean> weekStats = new ArrayList<DiagnosisStatisticsBean>();\r\n    do {\r\n        DiagnosisStatisticsBean db = getDiagnosisCounts(icdCode, zipCode, lowerDate, upperDate);\r\n        weekStats.add(db);\r\n        cal.setTime(upperDate);\r\n        cal.add(Calendar.HOUR, 24);\r\n        lowerDate = cal.getTime();\r\n        cal.add(Calendar.HOUR, (24 * 6));\r\n        upperDate = cal.getTime();\r\n    } while (lowerDate.before(upper) );\r\n    return weekStats;\r\n}"},
 {"id":2884, "methodname":"remove(long)", "methodnamerefined":"remove", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.remove", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.remove(long)", "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "shortclassname":"DiagnosesDAO", "method":"/**\r\n * Removes the given diagnosis from its office visit\r\n *\r\n * @param ovMedicationID\r\n * \t\tThe unique ID of the medication to be removed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void remove(long ovDiagnosisID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ovdiagnosis WHERE ID=? \");\r\n        ps.setLong(1, ovDiagnosisID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2885, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":390, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO", "shortclassname":"DrugInteractionDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic DrugInteractionDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    interactionLoader = new DrugInteractionBeanLoader();\r\n}"},
 {"id":2886, "methodname":"deleteInteraction(java.lang.String,java.lang.String)", "methodnamerefined":"deleteInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.deleteInteraction", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.deleteInteraction(java.lang.String,java.lang.String)", "classid":390, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO", "shortclassname":"DrugInteractionDAO", "method":"/**\r\n * Remove an interaction from the database\r\n *\r\n * @param firstDrug\r\n * \t\tThe name of the first patient\r\n * @param secondDrug\r\n * \t\tThe name of the second patient\r\n * @return true if removed successfully, false if not in list\r\n */\r\npublic boolean deleteInteraction(String firstDrug, String secondDrug) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM druginteractions WHERE (FirstDrug = ? OR SecondDrug = ?) AND (FirstDrug = ? OR SecondDrug = ?)\");\r\n        ps.setString(1, firstDrug);\r\n        ps.setString(2, firstDrug);\r\n        ps.setString(3, secondDrug);\r\n        ps.setString(4, secondDrug);\r\n        if ((ps.executeUpdate()) == 0)\r\n            return false;\r\n\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2887, "methodname":"getInteractions(java.lang.String)", "methodnamerefined":"getInteractions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.getInteractions", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.getInteractions(java.lang.String)", "classid":390, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO", "shortclassname":"DrugInteractionDAO", "method":"/**\r\n * Returns a list of all drug interactions for the input drug name\r\n *\r\n * @return A java.util.List of DrugInteractionBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<DrugInteractionBean> getInteractions(String drugCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM druginteractions WHERE FirstDrug = ? OR SecondDrug = ?\");\r\n        ps.setString(1, drugCode);\r\n        ps.setString(2, drugCode);\r\n        ResultSet rs = ps.executeQuery();\r\n        return interactionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2888, "methodname":"reportInteraction(java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"reportInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.reportInteraction", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.reportInteraction(java.lang.String,java.lang.String,java.lang.String)", "classid":390, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO", "shortclassname":"DrugInteractionDAO", "method":"/**\r\n * Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param firstDrug\r\n * \t\tThe name of the first drug in an interaction.\r\n * @param secondDrug\r\n * \t\tThe name of the second drug in an interaction.\r\n * @param description\r\n * \t\tExplanation of the drug interaction.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean reportInteraction(String firstDrug, String secondDrug, String description) throws DBException, iTrustException {\r\n    if (firstDrug.equals(secondDrug))\r\n        throw new iTrustException(\"Drug cannot interact with itself.\");\r\n\r\n    List<DrugInteractionBean> currentIntsDrug2 = getInteractions(secondDrug);\r\n    for (DrugInteractionBean dib : currentIntsDrug2) {\r\n        if (dib.getSecondDrug().equals(firstDrug)) {\r\n            throw new iTrustException(\"Error: Interaction between these drugs already exists.\");\r\n        }\r\n    }\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO druginteractions (FirstDrug, SecondDrug, Description) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, firstDrug);\r\n        ps.setString(2, secondDrug);\r\n        ps.setString(3, description);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Interaction between these drugs already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2889, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":391, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO", "shortclassname":"DrugReactionOverrideCodesDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic DrugReactionOverrideCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2890, "methodname":"addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"addORCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.addORCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":391, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO", "shortclassname":"DrugReactionOverrideCodesDAO", "method":"/**\r\n * Adds a new override reason code, returns whether or not the change was made. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param orc\r\n * \t\tThe overridereason bean to be added.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addORCode(OverrideReasonBean orc) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO drugreactionoverridecodes (Code, Description) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, orc.getORCode());\r\n        ps.setString(2, orc.getDescription());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2891, "methodname":"getAllORCodes()", "methodnamerefined":"getAllORCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.getAllORCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.getAllORCodes()", "classid":391, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO", "shortclassname":"DrugReactionOverrideCodesDAO", "method":"/**\r\n * Returns a list of all ND codes\r\n *\r\n * @return A java.util.List of OverrideReasonBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<OverrideReasonBean> getAllORCodes() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM drugreactionoverridecodes ORDER BY CODE\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return orcLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2892, "methodname":"getORCode(java.lang.String)", "methodnamerefined":"getORCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.getORCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.getORCode(java.lang.String)", "classid":391, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO", "shortclassname":"DrugReactionOverrideCodesDAO", "method":"/**\r\n * Returns a particular description for a given code.\r\n *\r\n * @param code\r\n * \t\tThe override reason code to be looked up.\r\n * @return A bean representing the override reason that was looked up.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic OverrideReasonBean getORCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM drugreactionoverridecodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return orcLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2893, "methodname":"updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"updateCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.updateCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":391, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO", "shortclassname":"DrugReactionOverrideCodesDAO", "method":"/**\r\n * Updates a particular codes description\r\n *\r\n * @param orc\r\n * \t\tA bean representing the particular override reason to be updated.\r\n * @return An int representing the number of updated rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateCode(OverrideReasonBean orc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE drugreactionoverridecodes SET Description = ? \" + \"WHERE Code = ?\"));\r\n        ps.setString(1, orc.getDescription());\r\n        ps.setString(2, orc.getORCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2894, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":392, "classname":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO", "shortclassname":"FakeEmailDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic FakeEmailDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2895, "methodname":"getAllEmails()", "methodnamerefined":"getAllEmails", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.getAllEmails", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.getAllEmails()", "classid":392, "classname":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO", "shortclassname":"FakeEmailDAO", "method":"/**\r\n * Return all emails that have been \"sent\" (inserted into the database)\r\n *\r\n * @return A java.util.List of Email objects representing fake e-mails.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<Email> getAllEmails() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM fakeemail ORDER BY AddedDate DESC\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return emailBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2896, "methodname":"getEmailWithBody(java.lang.String)", "methodnamerefined":"getEmailWithBody", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.getEmailWithBody", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.getEmailWithBody(java.lang.String)", "classid":392, "classname":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO", "shortclassname":"FakeEmailDAO", "method":"/**\r\n * Returns a list of emails that have the given string as a substring of the body\r\n *\r\n * @param string\r\n * \t\tThe string to search within the body.\r\n * @return A java.util.List of fake emails.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<Email> getEmailWithBody(String bodySubstring) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM fakeemail WHERE Instr(Body,?)>0 ORDER BY AddedDate DESC\");\r\n        ps.setString(1, bodySubstring);\r\n        ResultSet rs = ps.executeQuery();\r\n        return emailBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2897, "methodname":"getEmailsByPerson(java.lang.String)", "methodnamerefined":"getEmailsByPerson", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.getEmailsByPerson", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.getEmailsByPerson(java.lang.String)", "classid":392, "classname":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO", "shortclassname":"FakeEmailDAO", "method":"/**\r\n * Return all emails that a person has sent\r\n *\r\n * @param email\r\n * \t\tThe \"From\" email address as a string.\r\n * @return A java.util.List of fake emails.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<Email> getEmailsByPerson(String email) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM fakeemail WHERE ToAddr LIKE ? ORDER BY AddedDate DESC\");\r\n        ps.setString(1, ((\"%\" + email) + \"%\"));\r\n        ResultSet rs = ps.executeQuery();\r\n        return emailBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2898, "methodname":"sendEmailRecord(edu.ncsu.csc.itrust.beans.Email)", "methodnamerefined":"sendEmailRecord", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.sendEmailRecord", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.sendEmailRecord(edu.ncsu.csc.itrust.beans.Email)", "classid":392, "classname":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO", "shortclassname":"FakeEmailDAO", "method":"/**\r\n * \"Send\" an email, which just inserts it into the database.\r\n *\r\n * @param email\r\n * \t\tThe Email object to insert.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void sendEmailRecord(Email email) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO fakeemail (ToAddr, FromAddr, Subject, Body) \" + \"VALUES (?,?,?,?)\"));\r\n        emailBeanLoader.loadParameters(ps, email);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2899, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":393, "classname":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO", "shortclassname":"FamilyDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic FamilyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2900, "methodname":"getChildren(long)", "methodnamerefined":"getChildren", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getChildren", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getChildren(long)", "classid":393, "classname":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO", "shortclassname":"FamilyDAO", "method":"/**\r\n * Return a list of patients whose mother or father is this patient\r\n *\r\n * @param pid\r\n * \t\t-\r\n * \t\tthis patient\r\n * @return A java.util.List of FamilyMemberBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<FamilyMemberBean> getChildren(long pid) throws DBException {\r\n    return getFamilyMembers(pid, \"Child\", (\"SELECT FirstName, LastName, MID FROM patients \" + \"WHERE MotherMID=? or FatherMID=?\"), true);\r\n}"},
 {"id":2901, "methodname":"getFamilyMembers(long,java.lang.String,java.lang.String,boolean)", "methodnamerefined":"getFamilyMembers", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getFamilyMembers", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getFamilyMembers(long,java.lang.String,java.lang.String,boolean)", "classid":393, "classname":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO", "shortclassname":"FamilyDAO", "method":"/**\r\n * Private helper method (since all three are alike)\r\n *\r\n * @param pid\r\n * \t\t\r\n * @param relation\r\n * \t\t\r\n * @param query\r\n * \t\t\r\n * @param secondParam\r\n * \t\t-\r\n * \t\tadd the pid as the second parameter (the 3rd query was a little different)\r\n * @return A java.util.List of FamilyMemberBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate List<FamilyMemberBean> getFamilyMembers(long pid, String relation, String query, boolean secondParam) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    familyBeanLoader = new FamilyBeanLoader(relation);\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(query);\r\n        ps.setLong(1, pid);\r\n        if (secondParam)\r\n            ps.setLong(2, pid);\r\n\r\n        ResultSet rs = ps.executeQuery();\r\n        return familyBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2902, "methodname":"getParents(long)", "methodnamerefined":"getParents", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getParents", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getParents(long)", "classid":393, "classname":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO", "shortclassname":"FamilyDAO", "method":"/**\r\n * Return the information of the mother and father of this patient\r\n *\r\n * @param pid\r\n * \t\t-\r\n * \t\tthis patient\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<FamilyMemberBean> getParents(long pid) throws DBException {\r\n    return getFamilyMembers(pid, \"Parent\", (\"SELECT p2.FirstName AS FirstName, p2.LastName AS LastName, p2.MID as MID \" + (\"FROM patients p1, patients p2 \" + \"WHERE p1.MID=? AND (p1.MotherMID=p2.MID OR p1.FatherMID=p2.MID)\")), false);\r\n}"},
 {"id":2903, "methodname":"getSiblings(long)", "methodnamerefined":"getSiblings", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getSiblings", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.getSiblings(long)", "classid":393, "classname":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO", "shortclassname":"FamilyDAO", "method":"/**\r\n * Return a list of patients who share at least one parent (and that parent is not 0) with this patient\r\n *\r\n * @param pid\r\n * \t\t-\r\n * \t\tthis patient\r\n * @return A java.util.list of FamilyMemberBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<FamilyMemberBean> getSiblings(long pid) throws DBException {\r\n    return getFamilyMembers(pid, \"Sibling\", (\"SELECT p2.FirstName AS FirstName, p2.LastName AS LastName, p2.MID as MID \" + (((\"FROM patients p1, patients p2 \" + \"WHERE p1.MID=? AND p1.MID<>p2.MID \") + \"AND( (p1.MotherMID=p2.MotherMID AND p2.MotherMID<>0)\") + \"  OR (p1.FatherMID=p2.FatherMID AND p1.FatherMID<>0))\")), false);\r\n}"},
 {"id":2904, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":394, "classname":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO", "shortclassname":"HealthRecordsDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic HealthRecordsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2905, "methodname":"add(edu.ncsu.csc.itrust.beans.HealthRecord)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.add", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.add(edu.ncsu.csc.itrust.beans.HealthRecord)", "classid":394, "classname":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO", "shortclassname":"HealthRecordsDAO", "method":"/**\r\n * Adds a health record for a particular patient\r\n *\r\n * @param record\r\n * \t\tThe HealthRecord object to insert.\r\n * @return A boolean indicating whether the insert was successful.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean add(HealthRecord record) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO personalhealthinformation(PatientID,Height,Weight,\" + (\"Smoker,SmokingStatus,BloodPressureN,BloodPressureD,CholesterolHDL,CholesterolLDL,CholesterolTri,\" + \"HCPID) VALUES(?,?,?,?,?,?,?,?,?,?,?)\")));\r\n        loader.loadParameters(ps, record);\r\n        int numInserted = ps.executeUpdate();\r\n        return numInserted == 1;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2906, "methodname":"getAllHealthRecords(long)", "methodnamerefined":"getAllHealthRecords", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.getAllHealthRecords", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.getAllHealthRecords(long)", "classid":394, "classname":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO", "shortclassname":"HealthRecordsDAO", "method":"/**\r\n * Returns a list of all health records for a particular patient\r\n *\r\n * @param mid\r\n * \t\tThe MID of the patient to look up.\r\n * @return A java.util.List of HealthRecords.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<HealthRecord> getAllHealthRecords(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM personalhealthinformation \" + \"WHERE PatientID=? ORDER BY ASOFDATE DESC\"));\r\n        ps.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2907, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "shortclassname":"HospitalsDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic HospitalsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2908, "methodname":"addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "methodnamerefined":"addHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.addHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "shortclassname":"HospitalsDAO", "method":"/**\r\n * Adds a hospital\r\n *\r\n * @param hosp\r\n * \t\tThe HospitalBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addHospital(HospitalBean hosp) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO hospitals (HospitalID, HospitalName, Address, City, State, Zip) \" + \"VALUES (?,?,?,?,?,?)\"));\r\n        ps.setString(1, hosp.getHospitalID());\r\n        ps.setString(2, hosp.getHospitalName());\r\n        ps.setString(3, hosp.getHospitalAddress());\r\n        ps.setString(4, hosp.getHospitalCity());\r\n        ps.setString(5, hosp.getHospitalState());\r\n        ps.setString(6, hosp.getHospitalZip());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Hospital already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2909, "methodname":"assignHospital(long,java.lang.String)", "methodnamerefined":"assignHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.assignHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.assignHospital(long,java.lang.String)", "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "shortclassname":"HospitalsDAO", "method":"/**\r\n * Assign an HCP to a hospital. If they have already been assigned to that hospital, then an\r\n * iTrustException is thrown.\r\n *\r\n * @param hcpID\r\n * \t\tThe HCPs MID to assign to the hospital.\r\n * @param hospitalID\r\n * \t\tThe ID of the hospital to assign them to.\r\n * @return A boolean indicating whether the assignment was a success.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean assignHospital(long hcpID, String hospitalID) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO hcpassignedhos (HCPID, HosID) VALUES (?,?)\");\r\n        ps.setLong(1, hcpID);\r\n        ps.setString(2, hospitalID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException((((\"HCP \" + hcpID) + \" already assigned to hospital \") + hospitalID));\r\n\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2910, "methodname":"checkLTHasHospital(long)", "methodnamerefined":"checkLTHasHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.checkLTHasHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.checkLTHasHospital(long)", "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "shortclassname":"HospitalsDAO", "method":"/**\r\n * Checks to see if the LT has an assigned hospital\r\n *\r\n * @param hcpID\r\n * \t\tThe MID of the LT.\r\n * @return true If the LT has an assigned hospital to them\r\n * @return false If the LT does not have an assigned hospital to them\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean checkLTHasHospital(long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hcpassignedhos WHERE HCPID = ?\");\r\n        ps.setLong(1, hcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2911, "methodname":"getAllHospitals()", "methodnamerefined":"getAllHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.getAllHospitals", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.getAllHospitals()", "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "shortclassname":"HospitalsDAO", "method":"/**\r\n * Returns a list of all hospitals sorted alphabetically\r\n *\r\n * @return A java.util.List of HospitalBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<HospitalBean> getAllHospitals() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals ORDER BY HospitalName\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return hospitalLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2912, "methodname":"getHospital(java.lang.String)", "methodnamerefined":"getHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.getHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.getHospital(java.lang.String)", "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "shortclassname":"HospitalsDAO", "method":"/**\r\n * Returns a particular hospital given its ID\r\n *\r\n * @param id\r\n * \t\tThe String ID of the hospital.\r\n * @return A HospitalBean representing this hospital.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic HospitalBean getHospital(String id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals WHERE HospitalID = ?\");\r\n        ps.setString(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return hospitalLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2913, "methodname":"removeAllHospitalAssignmentsFrom(long)", "methodnamerefined":"removeAllHospitalAssignmentsFrom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.removeAllHospitalAssignmentsFrom", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.removeAllHospitalAssignmentsFrom(long)", "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "shortclassname":"HospitalsDAO", "method":"/**\r\n * Removes all hospital assignments for a particular HCP. Returns the number of rows affected.\r\n *\r\n * @param hcpID\r\n * \t\tThe MID of the HCP.\r\n * @return An int representing the number of hospital assignments removed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int removeAllHospitalAssignmentsFrom(long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM hcpassignedhos WHERE HCPID = ?\");\r\n        ps.setLong(1, hcpID);\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2914, "methodname":"removeHospitalAssignment(long,java.lang.String)", "methodnamerefined":"removeHospitalAssignment", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.removeHospitalAssignment", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.removeHospitalAssignment(long,java.lang.String)", "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "shortclassname":"HospitalsDAO", "method":"/**\r\n * Unassigns an HCP to a hospital. Returns whether or not any changes were made\r\n *\r\n * @param hcpID\r\n * \t\tThe MID of the HCP to remove.\r\n * @param hospitalID\r\n * \t\tThe ID of the hospital being removed from.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean removeHospitalAssignment(long hcpID, String hospitalID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM hcpassignedhos WHERE HCPID = ? AND HosID = ?\");\r\n        ps.setLong(1, hcpID);\r\n        ps.setString(2, hospitalID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2915, "methodname":"updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "methodnamerefined":"updateHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.updateHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "shortclassname":"HospitalsDAO", "method":"/**\r\n * Updates a particular hospitals description. Returns the number of rows affected (should be 1)\r\n *\r\n * @param hosp\r\n * \t\tThe HospitalBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateHospital(HospitalBean hosp) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE hospitals SET HospitalName=?,Address=?,City=?,State=?,Zip=?\" + \"WHERE HospitalID = ?\"));\r\n        ps.setString(1, hosp.getHospitalName());\r\n        ps.setString(2, hosp.getHospitalAddress());\r\n        ps.setString(3, hosp.getHospitalCity());\r\n        ps.setString(4, hosp.getHospitalState());\r\n        ps.setString(5, hosp.getHospitalZip());\r\n        ps.setString(6, hosp.getHospitalID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2916, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":396, "classname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO", "shortclassname":"ICDCodesDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ICDCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2917, "methodname":"addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"addICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.addICDCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":396, "classname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO", "shortclassname":"ICDCodesDAO", "method":"/**\r\n * Adds an ICD9CM code. Returns whether or not the change was made.\r\n *\r\n * @param diag\r\n * \t\tThe DiagnosisBean representing the changes.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addICDCode(DiagnosisBean diag) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO icdcodes (Code, Description, Chronic) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, diag.getICDCode());\r\n        ps.setString(2, diag.getDescription());\r\n        ps.setString(3, diag.getClassification());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2918, "methodname":"getAllICDCodes()", "methodnamerefined":"getAllICDCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.getAllICDCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.getAllICDCodes()", "classid":396, "classname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO", "shortclassname":"ICDCodesDAO", "method":"/**\r\n * Returns all ICD9CM codes sorted by code\r\n *\r\n * @return java.util.List of DiagnosisBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<DiagnosisBean> getAllICDCodes() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM icdcodes ORDER BY CODE\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return diagnosisLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2919, "methodname":"getICDCode(java.lang.String)", "methodnamerefined":"getICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.getICDCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.getICDCode(java.lang.String)", "classid":396, "classname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO", "shortclassname":"ICDCodesDAO", "method":"/**\r\n * Returns a particular description for a given code\r\n *\r\n * @param code\r\n * \t\tThe String representation of the code.\r\n * @return A DiagnosisBean of the code.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic DiagnosisBean getICDCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM icdcodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return diagnosisLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2920, "methodname":"updateCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"updateCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.updateCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":396, "classname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO", "shortclassname":"ICDCodesDAO", "method":"/**\r\n * Changes a the description of a particular code.\r\n *\r\n * @param diag\r\n * \t\tA DiagnosisBean representing the changes.\r\n * @return A boolean indicating the number of updated rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateCode(DiagnosisBean diag) throws DBException {\r\n    int rows;\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE icdcodes SET Description = ?, Chronic = ?, URL = ? WHERE Code = ?\");\r\n        ps.setString(1, diag.getDescription());\r\n        ps.setString(2, diag.getClassification());\r\n        ps.setString(3, diag.getURL());\r\n        ps.setString(4, diag.getICDCode());\r\n        rows = ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return rows;\r\n}"},
 {"id":2921, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":397, "classname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO", "shortclassname":"LOINCDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic LOINCDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    LOINCLoader = new LOINCBeanLoader();\r\n}"},
 {"id":2922, "methodname":"addLOINC(edu.ncsu.csc.itrust.beans.LOINCbean)", "methodnamerefined":"addLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.addLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.addLOINC(edu.ncsu.csc.itrust.beans.LOINCbean)", "classid":397, "classname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO", "shortclassname":"LOINCDAO", "method":"/**\r\n * Adds a LOINC\r\n *\r\n * @param hosp\r\n * \t\tThe LOINCbean representing the new code to be added.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void addLOINC(LOINCbean hosp) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO loinc (LaboratoryProcedureCode, Component, KindOfProperty, TimeAspect, System, ScaleType, MethodType) \" + \"VALUES (?,?,?,?,?,?,?)\"));\r\n        ps.setString(1, hosp.getLabProcedureCode());\r\n        ps.setString(2, hosp.getComponent());\r\n        ps.setString(3, hosp.getKindOfProperty());\r\n        ps.setString(4, hosp.getTimeAspect());\r\n        ps.setString(5, hosp.getSystem());\r\n        ps.setString(6, hosp.getScaleType());\r\n        ps.setString(7, hosp.getMethodType());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: LOINC already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2923, "methodname":"getAllLOINC()", "methodnamerefined":"getAllLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.getAllLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.getAllLOINC()", "classid":397, "classname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO", "shortclassname":"LOINCDAO", "method":"/**\r\n * Returns all LOINCs as a list.\r\n *\r\n * @return A java.util.List of LOINCbeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LOINCbean> getAllLOINC() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM loinc\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return LOINCLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2924, "methodname":"getProcedures(java.lang.String)", "methodnamerefined":"getProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.getProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.getProcedures(java.lang.String)", "classid":397, "classname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO", "shortclassname":"LOINCDAO", "method":"/**\r\n * Returns all LOINCs associated with LaboratoryProcedureCode\r\n *\r\n * @param labProcCode\r\n * \t\tThe code of the Laboratory Procedure Code as a String.\r\n * @return A java.util.List of LOINCBeans matching the Laboratory Procedure Code.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LOINCbean> getProcedures(String labProcCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From loinc Where LaboratoryProcedureCode = ? \");\r\n        ps.setString(1, labProcCode);\r\n        ResultSet rs = ps.executeQuery();\r\n        return LOINCLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2925, "methodname":"update(edu.ncsu.csc.itrust.beans.LOINCbean)", "methodnamerefined":"update", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.update", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.update(edu.ncsu.csc.itrust.beans.LOINCbean)", "classid":397, "classname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO", "shortclassname":"LOINCDAO", "method":"/**\r\n * Updates the information in LOINC.\r\n *\r\n * @param ov\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int update(LOINCbean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE loinc SET Component=?, KindOfProperty=?, TimeAspect=?, System=?, ScaleType=?, MethodType=? WHERE LaboratoryProcedureCode=?\");\r\n        ps.setString(1, ov.getComponent());\r\n        ps.setString(2, ov.getKindOfProperty());\r\n        ps.setString(3, ov.getTimeAspect());\r\n        ps.setString(4, ov.getSystem());\r\n        ps.setString(5, ov.getScaleType());\r\n        ps.setString(6, ov.getMethodType());\r\n        ps.setString(7, ov.getLabProcedureCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2926, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic LabProcedureDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    labProcedureLoader = new LabProcedureBeanLoader();\r\n}"},
 {"id":2927, "methodname":"addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"addLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.addLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Inserts a lab procedure into the database.\r\n *\r\n * @param b\r\n * \t\tThe LabProcedureBean to be inserted.\r\n * @return A long containing the ID of the newly inserted lab procedure bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long addLabProcedure(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO labprocedure \" + (((\"(PatientMID, LaboratoryProcedureCode, Status, Commentary, \" + \"Results, OfficeVisitID, Rights, LabTechID, PriorityCode, \") + \"NumericalResults, LowerBound, UpperBound) \") + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?)\")));\r\n        ps.setLong(1, b.getPid());\r\n        ps.setString(2, b.getLoinc());\r\n        ps.setString(3, b.getStatus());\r\n        ps.setString(4, b.getCommentary());\r\n        ps.setString(5, b.getResults());\r\n        ps.setLong(6, b.getOvID());\r\n        ps.setString(7, b.getRights());\r\n        ps.setLong(8, b.getLTID());\r\n        ps.setInt(9, b.getPriorityCode());\r\n        ps.setString(10, b.getNumericalResult());\r\n        ps.setString(11, b.getLowerBound());\r\n        ps.setString(12, b.getUpperBound());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2928, "methodname":"getAllLabProcedures()", "methodnamerefined":"getAllLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProcedures()", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Gets all lab procedures, period.\r\n *\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getAllLabProcedures() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure ORDER BY UpdatedDate ASC\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2929, "methodname":"getAllLabProceduresDate(long)", "methodnamerefined":"getAllLabProceduresDate", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresDate", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresDate(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Gets all procedures for Patient\r\n *\r\n * @param mid\r\n * \t\tpatient id\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresDate(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2930, "methodname":"getAllLabProceduresForDocOV(long)", "methodnamerefined":"getAllLabProceduresForDocOV", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresForDocOV", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresForDocOV(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * This gets all the procedures for a particular patient on a particular office visit\r\n *\r\n * @param ovid\r\n * \t\tThe Office Visit ID.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresForDocOV(long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE OfficeVisitID = ? \");\r\n        ps.setLong(1, ovid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2931, "methodname":"getAllLabProceduresForDocOV(long,long)", "methodnamerefined":"getAllLabProceduresForDocOV", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresForDocOV", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresForDocOV(long,long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * This gets all the procedures for a particular patient on a particular office visit\r\n *\r\n * @param mid\r\n * \t\tThe MID of the patient.\r\n * @param ovid\r\n * \t\tThe Office Visit ID.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresForDocOV(long mid, long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND OfficeVisitID = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, mid);\r\n        ps.setLong(2, ovid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2932, "methodname":"getAllLabProceduresLOINC(long)", "methodnamerefined":"getAllLabProceduresLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresLOINC(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"public List<LabProcedureBean> getAllLabProceduresLOINC(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? ORDER BY LaboratoryProcedureCode ASC\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2933, "methodname":"getAllLabProceduresLOINC(long,java.lang.String)", "methodnamerefined":"getAllLabProceduresLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresLOINC", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getAllLabProceduresLOINC(long,java.lang.String)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Gets all the lab procedures that correspond to a particular LOINC.\r\n *\r\n * @param id\r\n * \t\tThe LOINC in question.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getAllLabProceduresLOINC(long id, String loinc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND LaboratoryProcedureCode = ? AND Status = ?\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, loinc);\r\n        ps.setString(3, \"Completed\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2934, "methodname":"getHCPLabProcedures(long)", "methodnamerefined":"getHCPLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getHCPLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getHCPLabProcedures(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get all lab procedures associated with a particular HCP.\r\n *\r\n * @param mid\r\n * \t\tThe HCPs id.\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getHCPLabProcedures(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"HCP id cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM LabProcedure WHERE labprocedure.OfficeVisitID IN \" + \"(SELECT officevisits.ID FROM officevisits WHERE officevisits.HCPID = ?)\"));\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2935, "methodname":"getHCPPendingCount(long)", "methodnamerefined":"getHCPPendingCount", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getHCPPendingCount", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getHCPPendingCount(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get a count of all pending lab procedures for a particular HCP.\r\n *\r\n * @param mid\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int getHCPPendingCount(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        int count = 0;\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT COUNT(*) FROM labprocedure WHERE Status = ? AND labprocedure.OfficeVisitID IN \" + \"(SELECT officevisits.ID FROM officevisits WHERE officevisits.HCPID = ?)\"));\r\n        ps.setString(1, LabProcedureBean.Pending);\r\n        ps.setLong(2, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            count = rs.getInt(1);\r\n        }\r\n        return count;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2936, "methodname":"getLabProcedure(long)", "methodnamerefined":"getLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProcedure(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Gets an individual lab procedure.\r\n *\r\n * @param id\r\n * \t\tThe ID of the lab procedure.\r\n * @return A LabProcedureBean representing the procedure.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic LabProcedureBean getLabProcedure(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE LaboratoryProcedureID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return labProcedureLoader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2937, "methodname":"getLabProcedures(long,long)", "methodnamerefined":"getLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProcedures(long,long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get all lab procedures associated with a particular HCP and Patient.\r\n *\r\n * @param mid\r\n * \t\tThe HCPs id.\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getLabProcedures(long mid, long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"HCP id cannot be null\");\r\n\r\n        if (pid == 0L)\r\n            throw new SQLException(\"HCP id cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM labprocedure WHERE labprocedure.OfficeVisitID IN \" + (\"(SELECT officevisits.ID FROM officevisits WHERE \" + \" officevisits.HCPID = ? AND officevisits.PatientID = ?)\")));\r\n        ps.setLong(1, mid);\r\n        ps.setLong(2, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2938, "methodname":"getLabProceduresForLHCPForNextMonth(long)", "methodnamerefined":"getLabProceduresForLHCPForNextMonth", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForLHCPForNextMonth", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForLHCPForNextMonth(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Gets the lab procedures for a given LHCP that occur within the next month.\r\n *\r\n * @param ovid\r\n * \t\tThe Office Visit ID conducted by the LHCP in question.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getLabProceduresForLHCPForNextMonth(long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (ovid == 0L)\r\n            throw new SQLException(\"OfficeVisitID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE OfficeVisitID = ? AND Status = ? AND (DateDiff(SYSDATE(),UpdatedDate) <= 30) ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, ovid);\r\n        ps.setString(2, LabProcedureBean.Completed);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2939, "methodname":"getLabProceduresForPatient(long)", "methodnamerefined":"getLabProceduresForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForPatient(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get a list of the lab procedures associated with a given patient.\r\n *\r\n * @param id\r\n * \t\tThe MID of the patient as a long.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getLabProceduresForPatient(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND Rights = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.Allow);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2940, "methodname":"getLabProceduresForPatientForNextMonth(long)", "methodnamerefined":"getLabProceduresForPatientForNextMonth", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForPatientForNextMonth", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForPatientForNextMonth(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Gets all the lab procedures for a given patient that occur within the next month.\r\n *\r\n * @param id\r\n * \t\tThe MID of the patient as a long.\r\n * @return A java.util.List of LabProcedureBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getLabProceduresForPatientForNextMonth(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE PatientMID = ? AND Rights = ? AND Status = ? AND (DateDiff(SYSDATE(),UpdatedDate) <= 30) ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.Allow);\r\n        ps.setString(3, LabProcedureBean.Completed);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2941, "methodname":"getLabProceduresForPatientOV(long)", "methodnamerefined":"getLabProceduresForPatientOV", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForPatientOV", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresForPatientOV(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get lab procedures for a specific office visit, but excluding lab\r\n * procedures which a patient does not have access to.\r\n *\r\n * @param ovid\r\n * \t\tOffice visit id.\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getLabProceduresForPatientOV(long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE OfficeVisitID = ? AND Rights = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, ovid);\r\n        ps.setString(2, LabProcedureBean.Allow);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2942, "methodname":"getLabProceduresInTransitForLabTech(long)", "methodnamerefined":"getLabProceduresInTransitForLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresInTransitForLabTech", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresInTransitForLabTech(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get a list of the lab procedures in transit associated with a given Lab Tech.\r\n *\r\n * @param id\r\n * \t\tThe MID of the LT as a long.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getLabProceduresInTransitForLabTech(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE LabTechID = ? AND Status = ? ORDER BY UpdatedDate ASC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.In_Transit);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2943, "methodname":"getLabProceduresReceivedForLabTech(long)", "methodnamerefined":"getLabProceduresReceivedForLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresReceivedForLabTech", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresReceivedForLabTech(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get a list of the lab procedures received for a given Lab Tech.\r\n *\r\n * @param id\r\n * \t\tThe MID of the LT as a long.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getLabProceduresReceivedForLabTech(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE LabTechID = ? AND Status = ? ORDER BY PriorityCode ASC, UpdatedDate DESC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.Received);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2944, "methodname":"getLabProceduresTestingForLabTech(long)", "methodnamerefined":"getLabProceduresTestingForLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresTestingForLabTech", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabProceduresTestingForLabTech(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get a list of the lab procedures testing for a given Lab Tech.\r\n *\r\n * @param id\r\n * \t\tThe MID of the LT as a long.\r\n * @return A java.util.List of LabProcedureBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<LabProcedureBean> getLabProceduresTestingForLabTech(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM labprocedure WHERE LabTechID = ? AND Status = ? ORDER BY UpdatedDate DESC\");\r\n        ps.setLong(1, id);\r\n        ps.setString(2, LabProcedureBean.Testing);\r\n        ResultSet rs = ps.executeQuery();\r\n        return labProcedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2945, "methodname":"getLabTechQueueSize(long)", "methodnamerefined":"getLabTechQueueSize", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabTechQueueSize", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabTechQueueSize(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get the count of the In_Transit and Received lab procedures assigned to\r\n * a specific lab tech.\r\n *\r\n * @param mid\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int getLabTechQueueSize(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        int count = 0;\r\n        ps = conn.prepareStatement(\"SELECT COUNT(*) FROM labprocedure WHERE LabTechID = ? AND (Status = ? OR Status = ?)\");\r\n        ps.setLong(1, mid);\r\n        ps.setString(2, LabProcedureBean.In_Transit);\r\n        ps.setString(3, LabProcedureBean.Received);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            count = rs.getInt(1);\r\n        }\r\n        return count;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2946, "methodname":"getLabTechQueueSizeByPriority(long)", "methodnamerefined":"getLabTechQueueSizeByPriority", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabTechQueueSizeByPriority", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getLabTechQueueSizeByPriority(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get the count of the In_Transit and Received lab procedures assigned to\r\n * a specific lab tech grouped by priority.\r\n *\r\n * @param mid\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int[] getLabTechQueueSizeByPriority(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    int[] sizes = new int[4];\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"LabTechID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        for (int i = 1; i <= 3; i++) {\r\n            int count = 0;\r\n            ps = conn.prepareStatement(\"SELECT COUNT(*) FROM labprocedure WHERE LabTechID = ? AND (Status = ? OR Status = ?) AND PriorityCode = ?\");\r\n            ps.setLong(1, mid);\r\n            ps.setString(2, LabProcedureBean.In_Transit);\r\n            ps.setString(3, LabProcedureBean.Received);\r\n            ps.setInt(4, i);\r\n            ResultSet rs = ps.executeQuery();\r\n            if (rs.next()) {\r\n                count = rs.getInt(1);\r\n            }\r\n            sizes[i] = count;\r\n        }\r\n        return sizes;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2947, "methodname":"getPatientUnviewedCount(long)", "methodnamerefined":"getPatientUnviewedCount", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getPatientUnviewedCount", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.getPatientUnviewedCount(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Get the count of unviewed lab procedures for a particular patient.\r\n *\r\n * @param pid\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int getPatientUnviewedCount(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        int count = 0;\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT COUNT(*) FROM labprocedure WHERE PatientMID = ? AND Rights = ? AND Status = ? AND ViewedByPatient = FALSE \");\r\n        ps.setLong(1, pid);\r\n        ps.setString(2, LabProcedureBean.Allow);\r\n        ps.setString(3, LabProcedureBean.Completed);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            count = rs.getInt(1);\r\n        }\r\n        return count;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2948, "methodname":"markViewed(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"markViewed", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.markViewed", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.markViewed(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Marks a lab procedure as viewed by the patient\r\n *\r\n * @param b\r\n * \t\tThe LabProcedureBean representing the procedure to be marked as viewed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void markViewed(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET ViewedByPatient = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setBoolean(1, b.isViewedByPatient());\r\n        ps.setLong(2, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2949, "methodname":"removeLabProcedure(long)", "methodnamerefined":"removeLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.removeLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.removeLabProcedure(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Delete a given lab procedure form the database.\r\n *\r\n * @param procedureID\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void removeLabProcedure(long procedureID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM labprocedure WHERE LaboratoryProcedureID=? \");\r\n        ps.setLong(1, procedureID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2950, "methodname":"setLPToTesting(long)", "methodnamerefined":"setLPToTesting", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.setLPToTesting", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.setLPToTesting(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n *\r\n *\r\n * @param parseLong\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void setLPToTesting(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, \"Testing\");\r\n        ps.setTimestamp(2, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(3, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2951, "methodname":"submitReceivedLP(long)", "methodnamerefined":"submitReceivedLP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitReceivedLP", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitReceivedLP(long)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n *\r\n *\r\n * @param parseLong\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void submitReceivedLP(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, \"Received\");\r\n        ps.setTimestamp(2, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(3, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2952, "methodname":"submitTestResults(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "methodnamerefined":"submitTestResults", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitTestResults", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.submitTestResults(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n *\r\n *\r\n * @param id\r\n * \t\t\r\n * @param parseLong\r\n * \t\t\r\n * @param parseLong2\r\n * \t\t\r\n * @param parseLong3\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void submitTestResults(long id, String numericalResult, String numericalResultUnit, String upper, String lower) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET NumericalResults = ?, NumericalResultsUnit = ?, UpperBound = ?, LowerBound = ?, Status = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, numericalResult);\r\n        ps.setString(2, numericalResultUnit);\r\n        ps.setString(3, upper);\r\n        ps.setString(4, lower);\r\n        ps.setString(5, \"Pending\");\r\n        ps.setTimestamp(6, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(7, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2953, "methodname":"updateLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"updateLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Updates an existing lab procedure.\r\n *\r\n * @param b\r\n * \t\tThe LabProcedureBean representing the procedure to be updated.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void updateLabProcedure(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE labprocedure SET \" + (((\" Status = ?, Commentary = ?, Results = ?, UpdatedDate = ?, \" + \" LabTechID = ?, PriorityCode = ? , NumericalResults = ?, \") + \" LowerBound = ?, UpperBound = ? \") + \" WHERE LaboratoryProcedureID=?\")));\r\n        ps.setString(1, b.getStatus());\r\n        ps.setString(2, b.getCommentary());\r\n        ps.setString(3, b.getResults());\r\n        ps.setTimestamp(4, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(5, b.getLTID());\r\n        ps.setInt(6, b.getPriorityCode());\r\n        ps.setString(7, b.getNumericalResult());\r\n        ps.setString(8, b.getLowerBound());\r\n        ps.setString(9, b.getUpperBound());\r\n        ps.setLong(10, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2954, "methodname":"updateRights(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"updateRights", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateRights", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateRights(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "shortclassname":"LabProcedureDAO", "method":"/**\r\n * Updates the rights of a user on a given lab procedure.\r\n *\r\n * @param b\r\n * \t\tThe LabProcedureBean in question.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void updateRights(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET Rights = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, b.getRights());\r\n        ps.setTimestamp(2, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(3, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2955, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic MessageDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.mbLoader = new MessageBeanLoader();\r\n}"},
 {"id":2956, "methodname":"addMessage(edu.ncsu.csc.itrust.beans.MessageBean)", "methodnamerefined":"addMessage", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.addMessage", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.addMessage(edu.ncsu.csc.itrust.beans.MessageBean)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * Adds a message to the database.\r\n *\r\n * @param mBean\r\n * \t\tA bean representing the message to be added.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic void addMessage(MessageBean mBean) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO message (from_id, to_id, sent_date, message, subject, been_read, parent_msg_id, original_msg_id) \" + \"  VALUES (?, ?, NOW(), ?, ?, ?, ?, ?)\"));\r\n    this.mbLoader.loadParameters(ps, mBean);\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}"},
 {"id":2957, "methodname":"getCCdMessages(long)", "methodnamerefined":"getCCdMessages", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getCCdMessages", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getCCdMessages(long)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"public List<MessageBean> getCCdMessages(long refID) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE original_msg_id=?\");\r\n    ps.setLong(1, refID);\r\n    rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}"},
 {"id":2958, "methodname":"getMessageID(edu.ncsu.csc.itrust.beans.MessageBean)", "methodnamerefined":"getMessageID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessageID", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessageID(edu.ncsu.csc.itrust.beans.MessageBean)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"public long getMessageID(MessageBean mBean) throws DBException {\r\n    return mBean.getMessageId();\r\n}"},
 {"id":2959, "methodname":"getMessagesFor(long)", "methodnamerefined":"getMessagesFor", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFor", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFor(long)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * Gets all the messages for a certain user MID.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getMessagesFor(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE to_id = ? ORDER BY sent_date DESC\");\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}"},
 {"id":2960, "methodname":"getMessagesFrom(long)", "methodnamerefined":"getMessagesFrom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFrom", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFrom(long)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * Gets all the messages from a certain user MID.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getMessagesFrom(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE from_id = ? ORDER BY sent_date DESC\");\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}"},
 {"id":2961, "methodname":"getMessagesFromNameAscending(long)", "methodnamerefined":"getMessagesFromNameAscending", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFromNameAscending", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFromNameAscending(long)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * Gets all the messages for a certain user MID sorted by name ascending.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getMessagesFromNameAscending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.to_id=patients.mid AND message.from_id=? ORDER BY patients.lastName ASC, patients.firstName ASC, message.sent_date ASC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.to_id=personnel.mid AND message.from_id=? ORDER BY personnel.lastName ASC, personnel.firstName ASC, message.sent_date ASC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    }\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}"},
 {"id":2962, "methodname":"getMessagesFromNameDescending(long)", "methodnamerefined":"getMessagesFromNameDescending", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFromNameDescending", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFromNameDescending(long)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * Gets all the messages for a certain user MID sorted by name descending.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getMessagesFromNameDescending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.to_id=patients.mid AND message.from_id=? ORDER BY patients.lastName DESC, patients.firstName DESC, message.sent_date DESC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.to_id=personnel.mid AND message.from_id=? ORDER BY personnel.lastName DESC, personnel.firstName DESC, message.sent_date DESC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    }\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}"},
 {"id":2963, "methodname":"getMessagesFromTimeAscending(long)", "methodnamerefined":"getMessagesFromTimeAscending", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFromTimeAscending", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesFromTimeAscending(long)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * Gets all the messages for a certain user MID sorted by ascending time.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getMessagesFromTimeAscending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE from_id = ? ORDER BY sent_date ASC\");\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}"},
 {"id":2964, "methodname":"getMessagesNameAscending(long)", "methodnamerefined":"getMessagesNameAscending", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesNameAscending", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesNameAscending(long)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * Gets all the messages for a certain user MID sorted by name ascending.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getMessagesNameAscending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.from_id=patients.mid AND message.to_id=? ORDER BY patients.lastName ASC, patients.firstName ASC, message.sent_date ASC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.from_id=personnel.mid AND message.to_id=? ORDER BY personnel.lastName ASC, personnel.firstName ASC, message.sent_date ASC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    }\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}"},
 {"id":2965, "methodname":"getMessagesNameDescending(long)", "methodnamerefined":"getMessagesNameDescending", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesNameDescending", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesNameDescending(long)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * Gets all the messages for a certain user MID sorted by name descending.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getMessagesNameDescending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs;\r\n    conn = factory.getConnection();\r\n    if (mid >= 999999999) {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, patients WHERE message.from_id=patients.mid AND message.to_id=? ORDER BY patients.lastName DESC, patients.firstName DESC, message.sent_date DESC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    } else {\r\n        ps = conn.prepareStatement(\"SELECT message.* FROM message, personnel WHERE message.from_id=personnel.mid AND message.to_id=? ORDER BY personnel.lastName DESC, personnel.firstName DESC, message.sent_date DESC\");\r\n        ps.setLong(1, mid);\r\n        rs = ps.executeQuery();\r\n    }\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}"},
 {"id":2966, "methodname":"getMessagesTimeAscending(long)", "methodnamerefined":"getMessagesTimeAscending", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesTimeAscending", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessagesTimeAscending(long)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"/**\r\n * Gets all the messages for a certain user MID sorted by ascending time.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the user to be looked up.\r\n * @return A java.util.List of MessageBeans.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<MessageBean> getMessagesTimeAscending(long mid) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"SELECT * FROM message WHERE to_id = ? ORDER BY sent_date ASC\");\r\n    ps.setLong(1, mid);\r\n    ResultSet rs = ps.executeQuery();\r\n    List<MessageBean> mbList = this.mbLoader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return mbList;\r\n}"},
 {"id":2967, "methodname":"updateRead(edu.ncsu.csc.itrust.beans.MessageBean)", "methodnamerefined":"updateRead", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.updateRead", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.updateRead(edu.ncsu.csc.itrust.beans.MessageBean)", "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "shortclassname":"MessageDAO", "method":"public void updateRead(MessageBean mBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE message SET been_read=1 WHERE message_id=?\");\r\n        ps.setLong(1, mBean.getMessageId());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2968, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "shortclassname":"NDCodesDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic NDCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2969, "methodname":"addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"addNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.addNDCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "shortclassname":"NDCodesDAO", "method":"/**\r\n * Adds a new ND code, returns whether or not the change was made. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param med\r\n * \t\tThe medication bean to be added.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addNDCode(MedicationBean med) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO ndcodes (Code, Description) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, med.getNDCode());\r\n        ps.setString(2, med.getDescription());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2970, "methodname":"getAllNDCodes()", "methodnamerefined":"getAllNDCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.getAllNDCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.getAllNDCodes()", "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "shortclassname":"NDCodesDAO", "method":"/**\r\n * Returns a list of all ND codes\r\n *\r\n * @return A java.util.List of MedicationBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<MedicationBean> getAllNDCodes() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ndcodes ORDER BY CODE\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return medicationLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2971, "methodname":"getNDCode(java.lang.String)", "methodnamerefined":"getNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.getNDCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.getNDCode(java.lang.String)", "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "shortclassname":"NDCodesDAO", "method":"/**\r\n * Returns a particular description for a given code.\r\n *\r\n * @param code\r\n * \t\tThe ND code to be looked up.\r\n * @return A bean representing the Medication that was looked up.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic MedicationBean getNDCode(String code) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ndcodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return medicationLoader.loadSingle(rs);\r\n\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2972, "methodname":"removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"removeNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.removeNDCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "shortclassname":"NDCodesDAO", "method":"/**\r\n * Removes a ND code, returns whether or not the change was made.\r\n *\r\n * @param med\r\n * \t\tThe medication bean to be removed.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean removeNDCode(MedicationBean med) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ndcodes WHERE Code=?\");\r\n        ps.setString(1, med.getNDCode());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2973, "methodname":"updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"updateCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.updateCode", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "shortclassname":"NDCodesDAO", "method":"/**\r\n * Updates a particular codes description\r\n *\r\n * @param med\r\n * \t\tA bean representing the particular medication to be updated.\r\n * @return An int representing the number of updated rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateCode(MedicationBean med) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE ndcodes SET Description = ? \" + \"WHERE Code = ?\"));\r\n        ps.setString(1, med.getDescription());\r\n        ps.setString(2, med.getNDCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2974, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/* private PrescriptionBeanLoader prescriptionLoader = new PrescriptionBeanLoader();\nprivate PrescriptionReportBeanLoader prescriptionReportBeanLoader = new PrescriptionReportBeanLoader();\nprivate ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader(true);\n */\r\n/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic OfficeVisitDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2975, "methodname":"add(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.add", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.add(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/**\r\n * Adds an visit and return its ID\r\n *\r\n * @param ov\r\n * \t\tThe OfficeVisitBean to be added.\r\n * @return A long indicating the unique ID for the office visit.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(OfficeVisitBean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits (VisitDate, Notes, HCPID, PatientID, HospitalID, IsERIncident) VALUES (?,?,?,?,?,?)\");\r\n        setValues(ps, ov);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2976, "methodname":"checkOfficeVisitExists(long,long)", "methodnamerefined":"checkOfficeVisitExists", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.checkOfficeVisitExists", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.checkOfficeVisitExists(long,long)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/**\r\n * Returns whether or not an office visit actually exists\r\n *\r\n * @param ovID\r\n * \t\tThe ID of the office visit to be checked.\r\n * @param pid\r\n * \t\tThe MID of the patient associated with this transaction.\r\n * @return A boolean indicating its existence.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean checkOfficeVisitExists(long ovID, long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE ID=? AND PatientID=?\");\r\n        ps.setLong(1, ovID);\r\n        ps.setLong(2, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2977, "methodname":"getAllOfficeVisits(long)", "methodnamerefined":"getAllOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getAllOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getAllOfficeVisits(long)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/**\r\n * Returns a list of all office visits for a given patient\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of OfficeVisitBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisits(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE PatientID=? ORDER BY VisitDate DESC\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return officeVisitLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2978, "methodname":"getAllOfficeVisitsForDiagnosis(java.lang.String)", "methodnamerefined":"getAllOfficeVisitsForDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getAllOfficeVisitsForDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(java.lang.String)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/**\r\n * Gets all office visits corresponding to a particular ICD diagnosis.\r\n *\r\n * @param icdcode\r\n * \t\tA string represnting the ICD diagnosis to look up.\r\n * @return A java.util.List of Office visits.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisitsForDiagnosis(String icdcode) throws DBException {\r\n    List<DiagnosisBean> diags = null;\r\n    List<OfficeVisitBean> ovs = new ArrayList<OfficeVisitBean>();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        if (icdcode == null)\r\n            throw new SQLException(\"icdcode cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovdiagnosis ovd, icdcodes icd WHERE ovd.ICDCode=? and icd.Code=?\");\r\n        ps.setString(1, icdcode);\r\n        ps.setString(2, icdcode);\r\n        rs = ps.executeQuery();\r\n        diags = diagnosisLoader.loadList(rs);\r\n        rs.close();\r\n        ps.close();\r\n        ps = null;\r\n        rs = null;\r\n        for (DiagnosisBean bean : diags) {\r\n            ps = conn.prepareStatement(\"SELECT * FROM officevisits ov WHERE ov.ID=?\");\r\n            ps.setInt(1, ((int) (bean.getVisitID())));\r\n            rs = ps.executeQuery();\r\n            if (rs.next()) {\r\n                ovs.add(officeVisitLoader.loadSingle(rs));\r\n            }\r\n            rs.close();\r\n            ps.close();\r\n        }\r\n        return ovs;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2979, "methodname":"getAllOfficeVisitsForLHCP(long)", "methodnamerefined":"getAllOfficeVisitsForLHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getAllOfficeVisitsForLHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getAllOfficeVisitsForLHCP(long)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/**\r\n * Returns a list of all office visits for a given patient\r\n *\r\n * @param mid\r\n * \t\tThe MID of the LHCP you are looking up.\r\n * @return A java.util.List of Office Visits.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getAllOfficeVisitsForLHCP(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"HCPID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE HCPID=? ORDER BY VisitDate DESC\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return officeVisitLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2980, "methodname":"getOfficeVisit(long)", "methodnamerefined":"getOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisit(long)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/**\r\n * Returns a particular office visit given an ID\r\n *\r\n * @param visitID\r\n * \t\tThe unique ID of the office visit.\r\n * @return An OfficeVisitBean with the specifics for that office visit.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic OfficeVisitBean getOfficeVisit(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From officevisits Where ID = ?\");\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return officeVisitLoader.loadSingle(rs);\r\n        else\r\n            return null;\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2981, "methodname":"getOfficeVisitsFromHospital(java.lang.String)", "methodnamerefined":"getOfficeVisitsFromHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisitsFromHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisitsFromHospital(java.lang.String)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/**\r\n * Returns a list of all office visits at a given hospital\r\n *\r\n * @param hospitalID\r\n * \t\tthe id of the hospital\r\n * @return a list of the OfficeVisitBeans that hold the office visits\r\n * @throws DBException\r\n * \t\tin the event of a database error\r\n */\r\npublic List<OfficeVisitBean> getOfficeVisitsFromHospital(String hospitalID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits WHERE hospitalID = ? ORDER BY ID DESC\");\r\n        ps.setString(1, hospitalID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return officeVisitLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2982, "methodname":"getOfficeVisitsWithNoSurvey(long)", "methodnamerefined":"getOfficeVisitsWithNoSurvey", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisitsWithNoSurvey", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.getOfficeVisitsWithNoSurvey(long)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/**\r\n * Returns a list of all office visits for a given patient\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient.\r\n * @return A java.util.List of Office Visits.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getOfficeVisitsWithNoSurvey(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM officevisits where id not in (select visitid from ovsurvey) and PatientID = ? ORDER BY VisitDate DESC\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return officeVisitLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2983, "methodname":"setValues(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "methodnamerefined":"setValues", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.setValues", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.setValues(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"private void setValues(PreparedStatement ps, OfficeVisitBean ov) throws SQLException {\r\n    ps.setDate(1, new Date(ov.getVisitDate().getTime()));\r\n    ps.setString(2, ov.getNotes());\r\n    ps.setLong(3, ov.getHcpID());\r\n    ps.setLong(4, ov.getPatientID());\r\n    ps.setString(5, ov.getHospitalID());\r\n    ps.setBoolean(6, ov.isERIncident());\r\n}"},
 {"id":2984, "methodname":"update(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "methodnamerefined":"update", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.update", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.update(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "shortclassname":"OfficeVisitDAO", "method":"/**\r\n * Updates the information in a particular office visit.\r\n *\r\n * @param ov\r\n * \t\tThe Office Visit bean representing the changes.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void update(OfficeVisitBean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE officevisits SET VisitDate=?, Notes=?, HCPID=?, \" + \"PatientID=?, HospitalID=? WHERE ID=?\"));\r\n        setValues(ps, ov);\r\n        ps.setLong(6, ov.getID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2985, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic PatientDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.patientLoader = new PatientLoader();\r\n    this.personnelLoader = new PersonnelLoader();\r\n    this.diagnosisLoader = new DiagnosisBeanLoader(true);\r\n    this.prescriptionLoader = new PrescriptionBeanLoader();\r\n    this.procedureLoader = new ProcedureBeanLoader(true);\r\n}"},
 {"id":2986, "methodname":"addEmptyPatient()", "methodnamerefined":"addEmptyPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addEmptyPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addEmptyPatient()", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Adds an empty patient to the table, returns the new MID\r\n *\r\n * @return The MID of the patient as a long.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long addEmptyPatient() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO patients(MID) VALUES(NULL)\");\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2987, "methodname":"addHistory(long,long)", "methodnamerefined":"addHistory", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addHistory", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addHistory(long,long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"public void addHistory(long pid, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO historypatients SELECT null, CURDATE(), ?, p.* FROM patients p WHERE p.mid=?\");\r\n        ps.setLong(1, hcpid);\r\n        ps.setLong(2, pid);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2988, "methodname":"addRepresentative(long,long)", "methodnamerefined":"addRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addRepresentative", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.addRepresentative(long,long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Assign a representer to the representee\r\n *\r\n * @param representer\r\n * \t\tThe MID of the representer as a long.\r\n * @param representee\r\n * \t\tThe MID of the representee as a long.\r\n * @return A boolean as to whether the insertion was correct.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addRepresentative(long representer, long representee) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO representatives(RepresenterMID,RepresenteeMID) VALUES (?,?)\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException((((\"Patient \" + representer) + \" already represents patient \") + representee));\r\n\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2989, "methodname":"checkDeclaredHCP(long,long)", "methodnamerefined":"checkDeclaredHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.checkDeclaredHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.checkDeclaredHCP(long,long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Check if a patient has declared the given HCP\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question as a long.\r\n * @param hcpid\r\n * \t\tThe MID of the HCP in question as a long.\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean checkDeclaredHCP(long pid, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM declaredhcp WHERE PatientID=? AND HCPID=?\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpid);\r\n        return ps.executeQuery().next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2990, "methodname":"checkPatientExists(long)", "methodnamerefined":"checkPatientExists", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.checkPatientExists", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.checkPatientExists(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Returns whether or not the patient exists\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @return A boolean indicating whether the patient exists.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean checkPatientExists(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE MID=?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2991, "methodname":"declareHCP(long,long)", "methodnamerefined":"declareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.declareHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.declareHCP(long,long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Declares an HCP for a particular patient\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @param hcpID\r\n * \t\tThe HCPs MID.\r\n * @return A boolean as to whether the insertion was successful.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean declareHCP(long pid, long hcpID) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO declaredhcp(PatientID, HCPID) VALUES(?,?)\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException((((\"HCP \" + hcpID) + \" has already been declared for patient \") + pid));\r\n\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2992, "methodname":"editPatient(edu.ncsu.csc.itrust.beans.PatientBean,long)", "methodnamerefined":"editPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.editPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.editPatient(edu.ncsu.csc.itrust.beans.PatientBean,long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Updates a patients information for the given MID\r\n *\r\n * @param p\r\n * \t\tThe patient bean representing the new information for the patient.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void editPatient(PatientBean p, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE patients SET firstName=?,lastName=?,email=?,\" + ((((((\"address1=?,address2=?,city=?,state=?,zip=?,phone=?,\" + \"eName=?,ePhone=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\") + \"ICState=?,iCZip=?,iCPhone=?,iCID=?,DateOfBirth=?,\") + \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\") + \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, \") + \"DirectionsToHome=?, Religion=?, Language=?, SpiritualPractices=?, \") + \"AlternateName=?, DateOfDeactivation=? WHERE MID=?\")));\r\n        patientLoader.loadParameters(ps, p);\r\n        ps.setLong(37, p.getMID());\r\n        ps.executeUpdate();\r\n        addHistory(p.getMID(), hcpid);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2993, "methodname":"fuzzySearchForPatientsWithName(java.lang.String,java.lang.String)", "methodnamerefined":"fuzzySearchForPatientsWithName", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.fuzzySearchForPatientsWithName", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.fuzzySearchForPatientsWithName(java.lang.String,java.lang.String)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Returns all patients with names \"LIKE\" with wildcards (as in SQL) the passed in parameters.\r\n *\r\n * @param first\r\n * \t\tThe patients first name.\r\n * @param last\r\n * \t\tThe patients last name.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientBean> fuzzySearchForPatientsWithName(String first, String last) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if ((first.equals(\"%\")) && (last.equals(\"%\")))\r\n        return new Vector<PatientBean>();\r\n\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, ((\"%\" + first) + \"%\"));\r\n        ps.setString(2, ((\"%\" + last) + \"%\"));\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2994, "methodname":"getAllPatients()", "methodnamerefined":"getAllPatients", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getAllPatients", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getAllPatients()", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Lists every patient in the database.\r\n *\r\n * @return A java.util.List of PatientBeans representing the patients.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getAllPatients() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients \");\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2995, "methodname":"getCurrentPrescriptions(long)", "methodnamerefined":"getCurrentPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getCurrentPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getCurrentPrescriptions(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Return a list of prescriptions which are currently prescribed for a patient\r\n *\r\n * @param patientID\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of prescription beans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getCurrentPrescriptions(long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (patientID == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovmedication,ndcodes,officevisits \" + (((\"Where officevisits.PatientID = ? AND ovmedication.VisitID = \" + \"officevisits.ID AND ndcodes.Code=ovmedication.NDCode AND \") + \"ovmedication.EndDate >= ?\") + \"ORDER BY ovmedication.ID DESC;\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(0));\r\n        ResultSet rs = ps.executeQuery();\r\n        return prescriptionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2996, "methodname":"getDeclaredHCPs(long)", "methodnamerefined":"getDeclaredHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getDeclaredHCPs", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getDeclaredHCPs(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Returns a list of HCPs who are declared by the given patient\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of Personnel Beans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getDeclaredHCPs(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM declaredhcp, personnel \" + \"WHERE PatientID=? AND personnel.MID=declaredhcp.HCPID\"));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2997, "methodname":"getDiagnoses(long)", "methodnamerefined":"getDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getDiagnoses(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Return a list of all diagnoses for a given patient\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of Diagnoses.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<DiagnosisBean> getDiagnoses(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ovdiagnosis ovd, officevisits ov, icdcodes icd \" + (\"WHERE ovd.VisitID=ov.ID and icd.Code=ovd.ICDCode and ov.PatientID=? \" + \"ORDER BY ov.visitDate DESC\")));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return diagnosisLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2998, "methodname":"getExpiredPrescriptions(long)", "methodnamerefined":"getExpiredPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getExpiredPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getExpiredPrescriptions(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Return a list of prescriptions which are expired prescription for a patient\r\n *\r\n * @param patientID\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of prescriptions.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getExpiredPrescriptions(long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (patientID == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovmedication,ndcodes,officevisits \" + (((\"Where officevisits.PatientID = ? AND ovmedication.VisitID = \" + \"officevisits.ID AND ndcodes.Code=ovmedication.NDCode AND \") + \"ovmedication.EndDate < ?\") + \"ORDER BY ovmedication.ID DESC;\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(0));\r\n        ResultSet rs = ps.executeQuery();\r\n        return prescriptionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":2999, "methodname":"getImmunizationProcedures(long)", "methodnamerefined":"getImmunizationProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getImmunizationProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getImmunizationProcedures(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Return a list of all immunization procedures for a given patient\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of the procedures.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ProcedureBean> getImmunizationProcedures(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure ovp, officevisits ov, cptcodes cpt \" + (\"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? and cpt.attribute=immunization\" + \"ORDER BY ov.visitDate desc\")));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return procedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3000, "methodname":"getName(long)", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getName", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getName(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Returns the name for the given MID\r\n *\r\n * @param mid\r\n * \t\tThe MID of the patient in question.\r\n * @return A String representing the patients first name and last name.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String getName(long mid) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT firstName, lastName FROM patients WHERE MID=?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return ((rs.getString(\"firstName\")) + \" \") + (rs.getString(\"lastName\"));\r\n        } else {\r\n            throw new iTrustException(\"User does not exist\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3001, "methodname":"getPatient(long)", "methodnamerefined":"getPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPatient(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Returns the patients information for a given ID\r\n *\r\n * @param mid\r\n * \t\tThe MID of the patient to retrieve.\r\n * @return A PatientBean representing the patient.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PatientBean getPatient(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return patientLoader.loadSingle(rs);\r\n        } else\r\n            return null;\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3002, "methodname":"getPatientHistory(long)", "methodnamerefined":"getPatientHistory", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPatientHistory", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPatientHistory(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"public List<PatientHistoryBean> getPatientHistory(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ArrayList<PatientHistoryBean> pList;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM historypatients WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        pList = new ArrayList<PatientHistoryBean>();\r\n        while (rs.next()) {\r\n            pList.add(patientLoader.loadSingleHistory(rs));\r\n        } \r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return pList;\r\n}"},
 {"id":3003, "methodname":"getPrescriptions(long)", "methodnamerefined":"getPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getPrescriptions(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Return a list of all prescriptions for a patient\r\n *\r\n * @param patientID\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of prescriptions.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PrescriptionBean> getPrescriptions(long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (patientID == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovmedication,ndcodes,officevisits \" + ((\"Where officevisits.PatientID = ? AND ovmedication.VisitID = \" + \"officevisits.ID AND ndcodes.Code=ovmedication.NDCode \") + \"ORDER BY officevisits.visitDate DESC, ovmedication.NDCode ASC;\")));\r\n        ps.setLong(1, patientID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return prescriptionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3004, "methodname":"getProcedures(long)", "methodnamerefined":"getProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getProcedures(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Return a list of all procedures for a given patient\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of all the procedures.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ProcedureBean> getProcedures(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure ovp, officevisits ov, cptcodes cpt \" + (\"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? \" + \"ORDER BY ov.visitDate desc\")));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return procedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3005, "methodname":"getRenewalNeedsPatients(long)", "methodnamerefined":"getRenewalNeedsPatients", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRenewalNeedsPatients", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRenewalNeedsPatients(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Return a list of patients with a special-diagnosis-history who\r\n * have the logged in HCP as a DHCP and whose medications are going to\r\n * expire within seven days.\r\n *\r\n * @param hcpMID\r\n * \t\tThe MID of the logged in HCP\r\n * @return A list of patients satisfying the conditions.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getRenewalNeedsPatients(long hcpMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ( \" + (((((((((((((((((((((((\"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \" + \"Where \") + \"declaredhcp.HCPID = ? AND \") + \"patients.MID = declaredhcp.PatientID AND \") + \"( \") + \"ovdiagnosis.VisitID = officevisits.ID AND officevisits.PatientID = declaredhcp.PatientID \") + \"AND \") + \"((ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \") + \"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \") + \"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?)) \") + \") \") + \"UNION ALL \") + \"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \") + \"Where \") + \"declaredhcp.HCPID = ? AND \") + \"patients.MID = declaredhcp.PatientID AND \") + \"( \") + \"declaredhcp.PatientID = officevisits.PatientID AND officevisits.ID = ovmedication.VisitID \") + \"AND \") + \"ovmedication.EndDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) \") + \") \") + \") AS final \") + \"GROUP BY final.MID HAVING COUNT(*) = 2 \") + \"ORDER BY final.lastname ASC, final.firstname ASC\")));\r\n        ps.setLong(1, hcpMID);\r\n        ps.setFloat(2, 250.0F);\r\n        ps.setFloat(3, 251.0F);\r\n        ps.setFloat(4, 493.0F);\r\n        ps.setFloat(5, 494.0F);\r\n        ps.setFloat(6, 390.0F);\r\n        ps.setFloat(7, 460.99F);\r\n        ps.setLong(8, hcpMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3006, "methodname":"getRepresented(long)", "methodnamerefined":"getRepresented", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRepresented", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRepresented(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Return a list of patients that the given patient represents\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of PatientBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getRepresented(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT patients.* FROM representatives, patients \" + \"WHERE RepresenterMID=? AND RepresenteeMID=patients.MID\"));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3007, "methodname":"getRepresenting(long)", "methodnamerefined":"getRepresenting", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRepresenting", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRepresenting(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Return a list of patients that the given patient is represented by\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientBean> getRepresenting(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT patients.* FROM representatives, patients \" + \"WHERE RepresenteeMID=? AND RepresenterMID=patients.MID\"));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3008, "methodname":"getRole(long,java.lang.String)", "methodnamerefined":"getRole", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRole", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.getRole(long,java.lang.String)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO\r\n *\r\n * @param mid\r\n * \t\tThe MID of the patient in question.\r\n * @param role\r\n * \t\tA String representing the role of the patient.\r\n * @return A String representing the patients role.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String getRole(long mid, String role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT role FROM users WHERE MID=? AND Role=?\");\r\n        ps.setLong(1, mid);\r\n        ps.setString(2, role);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getString(\"role\");\r\n        } else {\r\n            throw new iTrustException(\"User does not exist with the designated role\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3009, "methodname":"hasHistory(long)", "methodnamerefined":"hasHistory", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.hasHistory", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.hasHistory(long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"public boolean hasHistory(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    boolean hasHistory = false;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM historypatients WHERE mid=?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        hasHistory = rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return hasHistory;\r\n}"},
 {"id":3010, "methodname":"removeRepresentative(long,long)", "methodnamerefined":"removeRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.removeRepresentative", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.removeRepresentative(long,long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Unassign the representation\r\n *\r\n * @param representer\r\n * \t\tThe MID of the representer in question.\r\n * @param representee\r\n * \t\tThe MID of the representee in question.\r\n * @return A boolean indicating whether the unassignment was sucessful.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean removeRepresentative(long representer, long representee) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3011, "methodname":"represents(long,long)", "methodnamerefined":"represents", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.represents", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.represents(long,long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Check if the given representer represents the representee\r\n *\r\n * @param representer\r\n * \t\tThe MID of the representer in question.\r\n * @param representee\r\n * \t\tThe MID of the representee in question.\r\n * @return A boolean indicating whether represenation is in place.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean represents(long representer, long representee) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3012, "methodname":"searchForPatientsWithName(java.lang.String,java.lang.String)", "methodnamerefined":"searchForPatientsWithName", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.searchForPatientsWithName", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.searchForPatientsWithName(java.lang.String,java.lang.String)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Returns all patients with names \"LIKE\" (as in SQL) the passed in parameters.\r\n *\r\n * @param first\r\n * \t\tThe patients first name.\r\n * @param last\r\n * \t\tThe patients last name.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientBean> searchForPatientsWithName(String first, String last) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if ((first.equals(\"%\")) && (last.equals(\"%\")))\r\n        return new Vector<PatientBean>();\r\n\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, first);\r\n        ps.setString(2, last);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3013, "methodname":"undeclareHCP(long,long)", "methodnamerefined":"undeclareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.undeclareHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.undeclareHCP(long,long)", "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "shortclassname":"PatientDAO", "method":"/**\r\n * Undeclare an HCP for a given patient\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @param hcpID\r\n * \t\tThe MID of the HCP in question.\r\n * @return A boolean indicating whether the action was successful.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean undeclareHCP(long pid, long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM declaredhcp WHERE PatientID=? AND HCPID=?\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3014, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":403, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO", "shortclassname":"PatientInstructionsDAO", "method":"public PatientInstructionsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3015, "methodname":"add(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.add", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.add(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "classid":403, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO", "shortclassname":"PatientInstructionsDAO", "method":"/**\r\n * Add a new patient instructions record.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to add.\r\n * @return The id of the newly added instructions record.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(PatientInstructionsBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO patientspecificinstructions \" + \"(VisitID,Modified,Name,URL,Comment) VALUES (?,?,?,?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps = loader.loadParameters(ps, bean);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3016, "methodname":"edit(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "methodnamerefined":"edit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.edit", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.edit(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "classid":403, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO", "shortclassname":"PatientInstructionsDAO", "method":"/**\r\n * Edit an existing patient instructions record in the database.\r\n *\r\n * @param bean\r\n * \t\tThe instruction to modify.\r\n * @return The id of the modified instruction.  This will be that same as the id given in the bean itself.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long edit(PatientInstructionsBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"UPDATE patientspecificinstructions \" + (\"SET VisitID=?, Modified=?, Name=?, URL=?, Comment=? \" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        loader.loadParameters(ps, bean);\r\n        ps.setLong(6, bean.getId());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3017, "methodname":"getList(long)", "methodnamerefined":"getList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.getList", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.getList(long)", "classid":403, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO", "shortclassname":"PatientInstructionsDAO", "method":"/**\r\n * Get a list of patient instructions for a given office visit.\r\n *\r\n * @param visitID\r\n * \t\tThe id of the office visit to lookup.\r\n * @return The list of patient instructions.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PatientInstructionsBean> getList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From patientspecificinstructions Where patientspecificinstructions.VisitID = ? \");\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3018, "methodname":"getOfficeVisitsWithInstructions(long)", "methodnamerefined":"getOfficeVisitsWithInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.getOfficeVisitsWithInstructions", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.getOfficeVisitsWithInstructions(long)", "classid":403, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO", "shortclassname":"PatientInstructionsDAO", "method":"/**\r\n * Get a list of all office visits by a given patient which has patient specific instructions.\r\n *\r\n * @param pid\r\n * \t\tThe patient id to look up.\r\n * @return A list of office visits.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<OfficeVisitBean> getOfficeVisitsWithInstructions(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        OfficeVisitLoader ovloader = new OfficeVisitLoader();\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From officevisits Where \" + (\"officevisits.ID in (Select VisitID From patientspecificinstructions) \" + \"and officevisits.PatientID = ?\")));\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return ovloader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3019, "methodname":"remove(long)", "methodnamerefined":"remove", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.remove", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.remove(long)", "classid":403, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO", "shortclassname":"PatientInstructionsDAO", "method":"/**\r\n * Remove a patient instructions record from the database.\r\n *\r\n * @param patientInstructionsID\r\n * \t\tThe id of the record to delete.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void remove(long patientInstructionsID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM patientspecificinstructions WHERE ID=? \");\r\n        ps.setLong(1, patientInstructionsID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3020, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic PersonnelDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    personnelLoader = new PersonnelLoader();\r\n    hospitalBeanLoader = new HospitalBeanLoader();\r\n}"},
 {"id":3021, "methodname":"addEmptyPersonnel(edu.ncsu.csc.itrust.enums.Role)", "methodnamerefined":"addEmptyPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.addEmptyPersonnel", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.addEmptyPersonnel(edu.ncsu.csc.itrust.enums.Role)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Adds an empty personnel, and returns the MID.\r\n *\r\n * @return A long indicating the new MID.\r\n * @param role\r\n * \t\tA {@link Role} enum indicating the personnels specific role.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long addEmptyPersonnel(Role role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    long nextID = getNextID(role);\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO personnel(MID, Role) VALUES(?,?)\");\r\n        ps.setString(1, (\"\" + nextID));\r\n        ps.setString(2, role.name());\r\n        ps.executeUpdate();\r\n        return nextID;\r\n    } catch (SQLException e) {\r\n        System.out.println(e.getMessage());\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3022, "methodname":"checkPersonnelExists(long)", "methodnamerefined":"checkPersonnelExists", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.checkPersonnelExists", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.checkPersonnelExists(long)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Indicates whether a certain personnel is in the database.\r\n *\r\n * @param pid\r\n * \t\tThe MID of the personnel in question.\r\n * @return A boolean indicating whether this personnel exists.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean checkPersonnelExists(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID=?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3023, "methodname":"editPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"editPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.editPersonnel", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.editPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Updates the demographics for a personnel.\r\n *\r\n * @param p\r\n * \t\tThe personnel bean with the updated information.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void editPersonnel(PersonnelBean p) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE personnel SET AMID=?,firstName=?,lastName=?,\" + (\"phone=?, address1=?,address2=?,city=?, state=?, zip=?, specialty=?, email=?\" + \" WHERE MID=?\")));\r\n        personnelLoader.loadParameters(ps, p);\r\n        ps.setLong(12, p.getMID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3024, "methodname":"getAllPersonnel()", "methodnamerefined":"getAllPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getAllPersonnel", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getAllPersonnel()", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Returns all personnel in the database.\r\n *\r\n * @return A java.util.List of personnel.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getAllPersonnel() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel where role in (hcp,uap,er) \");\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3025, "methodname":"getHospitals(long)", "methodnamerefined":"getHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getHospitals", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getHospitals(long)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Returns all of the hospitals this LHCP is associated with.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the personnel in question.\r\n * @return A java.util.List of HospitalBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<HospitalBean> getHospitals(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM hcpassignedhos hah,hospitals h \" + \"WHERE hah.HCPID=? AND hah.HosID=h.HospitalID ORDER BY HospitalName ASC\"));\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return hospitalBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3026, "methodname":"getLabTechs()", "methodnamerefined":"getLabTechs", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getLabTechs", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getLabTechs()", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Returns list of personnel who are Lab Techs.\r\n *\r\n * @return List of personnel beans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getLabTechs() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE role = lt \");\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3027, "methodname":"getName(long)", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getName", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getName(long)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Returns the name for a given MID\r\n *\r\n * @param mid\r\n * \t\tThe MID of the personnel in question.\r\n * @return A String representing the name of the personnel.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String getName(long mid) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"SELECT firstName, lastName FROM personnel WHERE MID=?\");\r\n        pstmt.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = pstmt.executeQuery();\r\n        if (rs.next()) {\r\n            return ((rs.getString(\"firstName\")) + \" \") + (rs.getString(\"lastName\"));\r\n        } else {\r\n            throw new iTrustException(\"User does not exist\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}"},
 {"id":3028, "methodname":"getNextID(edu.ncsu.csc.itrust.enums.Role)", "methodnamerefined":"getNextID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getNextID", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getNextID(edu.ncsu.csc.itrust.enums.Role)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"public long getNextID(Role role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    // long newID = 9000000000L;\r\n    long minID = (role.getMidFirstDigit()) * 1000000000L;\r\n    minID = (minID == 0) ? 1 : minID;// Do not use 0 as an ID.\r\n\r\n    long maxID = minID + 999999998L;\r\n    long nextID = minID;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT MAX(users.mid) FROM users WHERE mid BETWEEN ? AND ?\");\r\n        ps.setLong(1, minID);\r\n        ps.setLong(2, maxID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            nextID = (rs.getLong(1)) + 1;\r\n            if (nextID < minID) {\r\n                nextID = minID;\r\n            }\r\n        }\r\n        return nextID;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3029, "methodname":"getPersonnel(long)", "methodnamerefined":"getPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnel", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnel(long)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Retrieves a PersonnelBean with all of the specific information for a given employee.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the personnel in question.\r\n * @return A PersonnelBean representing the employee.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPersonnel(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return personnelLoader.loadSingle(rs);\r\n        } else\r\n            return null;\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3030, "methodname":"getPersonnelFromHospital(java.lang.String)", "methodnamerefined":"getPersonnelFromHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnelFromHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnelFromHospital(java.lang.String)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Returns all personnel of specified specialty from the specified hospital.\r\n *\r\n * @param hosid,\r\n * \t\tthe ID of the Hospital to get personnel from\r\n * @param specialty,\r\n * \t\tthe type of specialty to search for\r\n * @return A java.util.List of PersonnelBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getPersonnelFromHospital(String hosid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hcpassignedhos hah inner join personnel p where hah.hosID = ? and hah.HCPID = p.MID and p.role = hcp\");\r\n        ps.setString(1, hosid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3031, "methodname":"getPersonnelFromHospital(java.lang.String,java.lang.String)", "methodnamerefined":"getPersonnelFromHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnelFromHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPersonnelFromHospital(java.lang.String,java.lang.String)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Returns all personnel of specified specialty from the specified hospital.\r\n *\r\n * @param hosid,\r\n * \t\tthe ID of the Hospital to get personnel from\r\n * @param specialty,\r\n * \t\tthe type of specialty to search for\r\n * @return A java.util.List of PersonnelBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getPersonnelFromHospital(String hosid, String specialty) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hcpassignedhos hah inner join personnel p where hah.hosID = ? and hah.HCPID = p.MID and p.specialty = ? and p.role = hcp\");\r\n        ps.setString(1, hosid);\r\n        ps.setString(2, specialty);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3032, "methodname":"getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"getPrescribingDoctor", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPrescribingDoctor", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Given a prescription that has been given, this method returns all the information for the\r\n * doctor who authorized that prescription.\r\n *\r\n * @param prescription\r\n * \t\tThe PrescriptionBean describing the prescription in question.\r\n * @return The PersonnelBean describing the doctor who authorized it.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID IN (SELECT HCPID FROM officevisits WHERE ID=?)\");\r\n        ps.setLong(1, prescription.getVisitID());\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs).get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3033, "methodname":"getUAPsForHCP(long)", "methodnamerefined":"getUAPsForHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getUAPsForHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getUAPsForHCP(long)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Returns a list of UAPs who work for this LHCP.\r\n *\r\n * @param hcpid\r\n * \t\tThe MID of the personnel in question.\r\n * @return A java.util.List of UAPs.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getUAPsForHCP(long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID IN (SELECT UAP FROM hcprelations WHERE HCP=?)\");\r\n        ps.setLong(1, hcpid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3034, "methodname":"searchForPersonnelWithName(java.lang.String,java.lang.String)", "methodnamerefined":"searchForPersonnelWithName", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.searchForPersonnelWithName", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.searchForPersonnelWithName(java.lang.String,java.lang.String)", "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "shortclassname":"PersonnelDAO", "method":"/**\r\n * Matches all personnel who have names LIKE (as in SQL) the first and last names passed in.\r\n *\r\n * @param first\r\n * \t\tThe first name to be searched for.\r\n * @param last\r\n * \t\tThe last name to be searched for.\r\n * @return A java.util.List of personnel who match these names.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> searchForPersonnelWithName(String first, String last) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if ((first.equals(\"%\")) && (last.equals(\"%\")))\r\n        return new Vector<PersonnelBean>();\r\n\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, first);\r\n        ps.setString(2, last);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3035, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":405, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO", "shortclassname":"PrescriptionOverrideDAO", "method":"public PrescriptionOverrideDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3036, "methodname":"add(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.add", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.add(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":405, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO", "shortclassname":"PrescriptionOverrideDAO", "method":"/**\r\n * Adds a prescription bean to the database.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(OverrideReasonBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovreactionoverride (OVMedicationID,OverrideCode) VALUES (?,?)\");\r\n        ps.setLong(1, pres.getPresID());\r\n        ps.setString(2, pres.getORCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3037, "methodname":"getList(long)", "methodnamerefined":"getList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.getList", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.getList(long)", "classid":405, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO", "shortclassname":"PrescriptionOverrideDAO", "method":"public List<OverrideReasonBean> getList(long medID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From ovreactionoverride Where ovmedicationID = ? \");\r\n        ps.setLong(1, medID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3038, "methodname":"remove(long)", "methodnamerefined":"remove", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.remove", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.remove(long)", "classid":405, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO", "shortclassname":"PrescriptionOverrideDAO", "method":"/**\r\n * Removes the given medication from its office visit\r\n *\r\n * @param ovMedicationID\r\n * \t\tThe unique ID of the medication to be removed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void remove(long ovMedicationID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ovreactionoverride WHERE OVMedicationID=? \");\r\n        ps.setLong(1, ovMedicationID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3039, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":406, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO", "shortclassname":"PrescriptionReportDAO", "method":"public PrescriptionReportDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3040, "methodname":"buildPreps(int)", "methodnamerefined":"buildPreps", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.buildPreps", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.buildPreps(int)", "classid":406, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO", "shortclassname":"PrescriptionReportDAO", "method":"private String buildPreps(int size) {\r\n    String prep = \"\";\r\n    for (int i = 0; i < size; i++) {\r\n        prep += \"?,\";\r\n    }\r\n    if ((prep.length()) > 0)\r\n        return prep.substring(0, ((prep.length()) - 1));\r\n    else\r\n        return prep;\r\n\r\n}"},
 {"id":3041, "methodname":"byDate(long,java.lang.String,java.lang.String)", "methodnamerefined":"byDate", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.byDate", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.byDate(long,java.lang.String,java.lang.String)", "classid":406, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO", "shortclassname":"PrescriptionReportDAO", "method":"/**\r\n * Returns a list of information related to prescription reports given all of the office visits and the\r\n * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the\r\n * disambiguation is for security reasons).\r\n *\r\n * @param ovIDs\r\n * \t\tA java.util.List of Longs for the office visits.\r\n * @param patientID\r\n * \t\tA long representing the MID of the patient in question.\r\n * @return A java.util.List of prescription reports.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PrescriptionReportBean> byDate(long patientID, String startDate, String endDate) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ndcodes, ovmedication, officevisits \" + ((((\"WHERE ndcodes.Code=ovmedication.NDCode AND ovmedication.VisitID=officevisits.ID \" + \"AND PatientID=? AND ((DATE(?) < ovmedication.EndDate AND DATE(?) > ovmedication.StartDate)\") + \"OR (DATE(?) > ovmedication.StartDate  AND DATE(?) < ovmedication.EndDate ) OR \") + \"(DATE(?) <= ovmedication.StartDate AND DATE(?) >= ovmedication.StartDate)) \") + \"ORDER BY VisitDate DESC\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setString(2, startDate);\r\n        ps.setString(3, startDate);\r\n        ps.setString(4, endDate);\r\n        ps.setString(5, endDate);\r\n        ps.setString(6, startDate);\r\n        ps.setString(7, endDate);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3042, "methodname":"byOfficeVisitAndPatient(java.util.List,long)", "methodnamerefined":"byOfficeVisitAndPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.byOfficeVisitAndPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.byOfficeVisitAndPatient(java.util.List,long)", "classid":406, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO", "shortclassname":"PrescriptionReportDAO", "method":"/**\r\n * Returns a list of information related to prescription reports given all of the office visits and the\r\n * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the\r\n * disambiguation is for security reasons).\r\n *\r\n * @param ovIDs\r\n * \t\tA java.util.List of Longs for the office visits.\r\n * @param patientID\r\n * \t\tA long representing the MID of the patient in question.\r\n * @return A java.util.List of prescription reports.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PrescriptionReportBean> byOfficeVisitAndPatient(List<Long> ovIDs, long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String preps = buildPreps(ovIDs.size());\r\n        ps = conn.prepareStatement((((\"SELECT * FROM ndcodes, ovmedication, officevisits \" + (\"WHERE ndcodes.Code=ovmedication.NDCode AND ovmedication.VisitID=officevisits.ID \" + \"AND PatientID=? AND VisitID IN(\")) + preps) + \") ORDER BY VisitDate DESC\"));\r\n        ps.setLong(1, patientID);\r\n        prepareOVIDs(ps, ovIDs);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3043, "methodname":"prepareOVIDs(java.sql.PreparedStatement,java.util.List)", "methodnamerefined":"prepareOVIDs", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.prepareOVIDs", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.prepareOVIDs(java.sql.PreparedStatement,java.util.List)", "classid":406, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO", "shortclassname":"PrescriptionReportDAO", "method":"private void prepareOVIDs(PreparedStatement ps, List<Long> ovIDs) throws SQLException {\r\n    for (int i = 0; i < (ovIDs.size()); i++) {\r\n        ps.setLong((i + 2), ovIDs.get(i));\r\n    }\r\n}"},
 {"id":3044, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":407, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO", "shortclassname":"PrescriptionsDAO", "method":"public PrescriptionsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3045, "methodname":"add(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.add", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.add(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":407, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO", "shortclassname":"PrescriptionsDAO", "method":"/**\r\n * Adds a prescription bean to the database.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(PrescriptionBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovmedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions,OverrideOther) VALUES (?,?,?,?,?,?,?)\");\r\n        loader.loadParameters(ps, pres);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3046, "methodname":"edit(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "methodnamerefined":"edit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.edit", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.edit(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "classid":407, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO", "shortclassname":"PrescriptionsDAO", "method":"/**\r\n * Edits an existing prescription bean.\r\n *\r\n * @param pres\r\n * \t\tThe newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long edit(PrescriptionBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        // ps = conn.prepareStatement(\"UPDATE OVMedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions) VALUES (?,?,?,?,?,?)\");\r\n        String statement = \"UPDATE ovmedication \" + (\"SET VisitID=?, NDCode=?, StartDate=?, EndDate=?, Dosage=?, Instructions=?, OverrideOther=? \" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        loader.loadParameters(ps, pres);\r\n        ps.setLong(8, pres.getId());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3047, "methodname":"getList(long)", "methodnamerefined":"getList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.getList", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.getList(long)", "classid":407, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO", "shortclassname":"PrescriptionsDAO", "method":"public List<PrescriptionBean> getList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovmedication,ndcodes Where ovmedication.VisitID = ? \" + \"AND ndcodes.Code=ovmedication.NDCode\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3048, "methodname":"remove(long)", "methodnamerefined":"remove", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.remove", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.remove(long)", "classid":407, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO", "shortclassname":"PrescriptionsDAO", "method":"/**\r\n * Removes the given medication from its office visit\r\n *\r\n * @param ovMedicationID\r\n * \t\tThe unique ID of the medication to be removed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void remove(long ovMedicationID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ovmedication WHERE ID=? \");\r\n        ps.setLong(1, ovMedicationID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3049, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "shortclassname":"ProceduresDAO", "method":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n */\r\npublic ProceduresDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3050, "methodname":"add(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"add", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.add", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.add(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "shortclassname":"ProceduresDAO", "method":"/**\r\n * Adds a diagnosis bean to the database.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(ProcedureBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO ovprocedure \" + \"(VisitID,CPTCode) VALUES (?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getCPTCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3051, "methodname":"edit(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"edit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.edit", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.edit(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "shortclassname":"ProceduresDAO", "method":"/**\r\n * Edits an existing procedure bean.\r\n *\r\n * @param pres\r\n * \t\tThe newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long edit(ProcedureBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"UPDATE ovprocedure \" + (\"SET VisitID=?, CPTCode=?\" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getCPTCode());\r\n        ps.setLong(3, bean.getOvProcedureID());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3052, "methodname":"getImmunizationList(long)", "methodnamerefined":"getImmunizationList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.getImmunizationList", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.getImmunizationList(long)", "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "shortclassname":"ProceduresDAO", "method":"/**\r\n *\r\n *\r\n * @param visitID\r\n * \t\t\r\n * @return list of inmmunization\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ProcedureBean> getImmunizationList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure,cptcodes,officevisits Where ovprocedure.VisitID = ? \" + \"AND officevisits.ID=ovprocedure.VisitID AND cptcodes.Code=ovprocedure.CPTCode AND cptcodes.attribute=immunization\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3053, "methodname":"getList(long)", "methodnamerefined":"getList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.getList", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.getList(long)", "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "shortclassname":"ProceduresDAO", "method":"/**\r\n * List procedure bean in database\r\n *\r\n * @param visitID\r\n * \t\t\r\n * @return procedure\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ProcedureBean> getList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure,cptcodes,officevisits Where ovprocedure.VisitID = ? \" + \"AND officevisits.ID=ovprocedure.VisitID AND cptcodes.Code=ovprocedure.CPTCode\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3054, "methodname":"getMedProceduresList(long)", "methodnamerefined":"getMedProceduresList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.getMedProceduresList", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.getMedProceduresList(long)", "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "shortclassname":"ProceduresDAO", "method":"public List<ProcedureBean> getMedProceduresList(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"Select * From ovprocedure,cptcodes,officevisits Where ovprocedure.VisitID = ? \" + \"AND officevisits.ID=ovprocedure.VisitID AND cptcodes.Code=ovprocedure.CPTCode AND cptcodes.attribute is NULL\"));\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3055, "methodname":"remove(long)", "methodnamerefined":"remove", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.remove", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.remove(long)", "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "shortclassname":"ProceduresDAO", "method":"/**\r\n * Removes the given medication from its office visit\r\n *\r\n * @param ovMedicationID\r\n * \t\tThe unique ID of the medication to be removed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void remove(long ovProcedureID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ovprocedure WHERE ID=? \");\r\n        ps.setLong(1, ovProcedureID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3056, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ReferralDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    referralLoader = new ReferralBeanLoader();\r\n    verboseLoader = new VerboseReferralBeanLoader();\r\n}"},
 {"id":3057, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Create a new ReferralListQuery object.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param userid\r\n * \t\t\r\n */\r\npublic ReferralListQuery(DAOFactory factory, long userid) {\r\n    this.factory = factory;\r\n    this.userid = userid;\r\n    // initialize lookup map\r\n    sortColumns = new HashMap<String, String>();\r\n    sortColumns.put(\"patientName\", \"CONCAT(patients.lastName,  , patients.firstName)\");\r\n    sortColumns.put(\"receiverName\", \"CONCAT(preceiver.lastName, preceiver.firstName)\");\r\n    sortColumns.put(\"senderName\", \"CONCAT(psender.lastName, psender.firstName)\");\r\n    sortColumns.put(\"timestamp\", \"referrals.timestamp\");\r\n    sortColumns.put(\"priority\", \"referrals.PriorityCode\");\r\n}"},
 {"id":3058, "methodname":"addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"addReferral", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.addReferral", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Adds a given referral to the database.\r\n *\r\n * @param r\r\n * \t\tThe referral to add.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long addReferral(ReferralBean r) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO referrals (PatientID,SenderID,ReceiverID,\" + (\"ReferralDetails,OVID,viewed_by_patient,viewed_by_HCP,PriorityCode,TimeStamp)  \" + \"VALUES (?,?,?,?,?,?,?,?,NOW())\")));\r\n        ps = referralLoader.loadParameters(ps, r);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3059, "methodname":"editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"editReferral", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.editReferral", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Updates a given referral in the database.\r\n *\r\n * @param r\r\n * \t\tThe referral to update.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void editReferral(ReferralBean r) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE referrals SET PatientID=?,SenderID=?,ReceiverID=?,\" + \"ReferralDetails=?,OVID=?,viewed_by_patient=?,viewed_by_HCP=?,PriorityCode=?  WHERE ID=?\"));\r\n        referralLoader.loadParameters(ps, r);\r\n        ps.setLong(9, r.getId());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3060, "methodname":"getPatientQuery(long)", "methodnamerefined":"getPatientQuery", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getPatientQuery", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getPatientQuery(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Get a referral query for a patient.\r\n *\r\n * @param mid\r\n * \t\tThe patient id.\r\n * @return A ReferralListQuery object.\r\n */\r\npublic ReferralDAO.ReferralListQuery getPatientQuery(long pid) {\r\n    return new ReferralDAO.PatientReferralListQuery(this.factory, pid);\r\n}"},
 {"id":3061, "methodname":"getReceiverQuery(long)", "methodnamerefined":"getReceiverQuery", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReceiverQuery", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReceiverQuery(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Get a referral query for a receiving HCP.\r\n *\r\n * @param mid\r\n * \t\tThe HCP id.\r\n * @return A ReferralListQuery object.\r\n */\r\npublic ReferralDAO.ReferralListQuery getReceiverQuery(long mid) {\r\n    return new ReferralDAO.ReceiverReferralListQuery(this.factory, mid);\r\n}"},
 {"id":3062, "methodname":"getReferral(long)", "methodnamerefined":"getReferral", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferral", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferral(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Get a specific referral.\r\n *\r\n * @param id\r\n * \t\tThe id of the referral to retrieve.\r\n * @return A ReferralBean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic ReferralBean getReferral(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE id = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return referralLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3063, "methodname":"getReferralsForPatient(long)", "methodnamerefined":"getReferralsForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForPatient(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Gets a list of all referrals sent to a patient.\r\n *\r\n * @param mid\r\n * \t\tThe patientss mid.\r\n * @return The list of the referrals they received.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReferralBean> getReferralsForPatient(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE PatientID = ? ORDER BY viewed_by_patient, PriorityCode ASC\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3064, "methodname":"getReferralsForPatientUnread(long)", "methodnamerefined":"getReferralsForPatientUnread", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForPatientUnread", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForPatientUnread(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Gets a list of all referrals sent to a patient\r\n *\r\n * @param mid\r\n * \t\tThe patientss mid.\r\n * @return The list of the referrals they received that were unread.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReferralBean> getReferralsForPatientUnread(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE PatientID = ? AND viewed_by_patient = false\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3065, "methodname":"getReferralsForReceivingHCP(long)", "methodnamerefined":"getReferralsForReceivingHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForReceivingHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForReceivingHCP(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Gets a list of all referrals a HCP has received\r\n *\r\n * @param mid\r\n * \t\tThe patientss mid.\r\n * @return The list of the referrals they received.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReferralBean> getReferralsForReceivingHCP(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ReceiverID = ? ORDER BY PriorityCode ASC\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3066, "methodname":"getReferralsForReceivingHCPUnread(long)", "methodnamerefined":"getReferralsForReceivingHCPUnread", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForReceivingHCPUnread", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsForReceivingHCPUnread(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Gets a list of all referrals sent to a patient\r\n *\r\n * @param mid\r\n * \t\tThe patientss mid.\r\n * @return The list of the referrals they received that were unread.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReferralBean> getReferralsForReceivingHCPUnread(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ReceiverID = ? AND viewed_by_HCP = false\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3067, "methodname":"getReferralsFromOV(long)", "methodnamerefined":"getReferralsFromOV", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsFromOV", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsFromOV(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Get all referrals associated with a particular office visit.\r\n *\r\n * @param ovid\r\n * \t\tThe office visit id.\r\n * @return A list of ReferralBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReferralBean> getReferralsFromOV(long ovid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ovID = ?\");\r\n        ps.setLong(1, ovid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3068, "methodname":"getReferralsSentFrom(long)", "methodnamerefined":"getReferralsSentFrom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsSentFrom", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsSentFrom(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Gets a list of all referrals sent from an HCP\r\n *\r\n * @param mid\r\n * \t\tThe HCPs mid.\r\n * @return The list of the referrals they sent.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReferralBean> getReferralsSentFrom(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE SenderID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3069, "methodname":"getReferralsSentTo(long)", "methodnamerefined":"getReferralsSentTo", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsSentTo", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getReferralsSentTo(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Gets a list of all referrals sent to an HCP\r\n *\r\n * @param mid\r\n * \t\tThe HCPs mid.\r\n * @return The list of the referrals sent to them.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReferralBean> getReferralsSentTo(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ReceiverID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3070, "methodname":"getSenderQuery(long)", "methodnamerefined":"getSenderQuery", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getSenderQuery", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.getSenderQuery(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Get a referral query for a sending HCP.\r\n *\r\n * @param mid\r\n * \t\tThe HCP id.\r\n * @return A ReferralListQuery object.\r\n */\r\npublic ReferralDAO.ReferralListQuery getSenderQuery(long mid) {\r\n    return new ReferralDAO.SenderReferralListQuery(this.factory, mid);\r\n}"},
 {"id":3071, "methodname":"isReferralMessage(long)", "methodnamerefined":"isReferralMessage", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.isReferralMessage", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.isReferralMessage(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Set referral message.\r\n *\r\n * @param id\r\n * \t\tThe id of the referral to retrieve.\r\n * @return A ReferralBean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long isReferralMessage(long messageID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referralmessage WHERE messageID = ?\");\r\n        ps.setLong(1, messageID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getLong(2);\r\n        } else {\r\n            return 0;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3072, "methodname":"removeReferral(long)", "methodnamerefined":"removeReferral", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.removeReferral", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.removeReferral(long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Removes the given referral.\r\n *\r\n * @param id\r\n * \t\tThe unique ID of the referral to be removed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void removeReferral(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM referrals WHERE ID=? \");\r\n        ps.setLong(1, id);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3073, "methodname":"setReferralMessage(long,long)", "methodnamerefined":"setReferralMessage", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.setReferralMessage", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.setReferralMessage(long,long)", "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "shortclassname":"ReferralDAO", "method":"/**\r\n * Set referral message.\r\n *\r\n * @param id\r\n * \t\tThe id of the referral to retrieve.\r\n * @return A ReferralBean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean setReferralMessage(long messageID, long referralID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO referralmessage (messageID,referralID) VALUES (?,?) \");\r\n        ps.setLong(1, messageID);\r\n        ps.setLong(2, referralID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return true;\r\n}"},
 {"id":3074, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":409, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery", "shortclassname":"ReferralDAO$PatientReferralListQuery", "method":"public PatientReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}"},
 {"id":3075, "methodname":"getUserField()", "methodnamerefined":"getUserField", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery.getUserField", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery.getUserField()", "classid":409, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery", "shortclassname":"ReferralDAO$PatientReferralListQuery", "method":"@Override\r\nprotected String getUserField() {\r\n    return \"referrals.PatientID\";\r\n}"},
 {"id":3076, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":410, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery", "shortclassname":"ReferralDAO$ReceiverReferralListQuery", "method":"public ReceiverReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}"},
 {"id":3077, "methodname":"getUserField()", "methodnamerefined":"getUserField", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery.getUserField", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery.getUserField()", "classid":410, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery", "shortclassname":"ReferralDAO$ReceiverReferralListQuery", "method":"@Override\r\nprotected String getUserField() {\r\n    return \"referrals.ReceiverID\";\r\n}"},
 {"id":3078, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "shortclassname":"ReferralDAO$ReferralListQuery", "method":"/**\r\n * Create a new ReferralListQuery object.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param userid\r\n * \t\t\r\n */\r\npublic ReferralListQuery(DAOFactory factory, long userid) {\r\n    this.factory = factory;\r\n    this.userid = userid;\r\n    // initialize lookup map\r\n    sortColumns = new HashMap<String, String>();\r\n    sortColumns.put(\"patientName\", \"CONCAT(patients.lastName,  , patients.firstName)\");\r\n    sortColumns.put(\"receiverName\", \"CONCAT(preceiver.lastName, preceiver.firstName)\");\r\n    sortColumns.put(\"senderName\", \"CONCAT(psender.lastName, psender.firstName)\");\r\n    sortColumns.put(\"timestamp\", \"referrals.timestamp\");\r\n    sortColumns.put(\"priority\", \"referrals.PriorityCode\");\r\n}"},
 {"id":3079, "methodname":"buildSort(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "methodnamerefined":"buildSort", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.buildSort", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.buildSort(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "shortclassname":"ReferralDAO$ReferralListQuery", "method":"/**\r\n * Builds the sort portion of the SQL query (i.e. the ORDER BY... portion).\r\n *\r\n * @param sortField\r\n * \t\tThe pseudo-field to sort on.\r\n * @param dir\r\n * \t\tThe sort direction.\r\n * @return A string which can be a part of an SQL query.\r\n */\r\nprotected String buildSort(String sortField, SortDirection dir) {\r\n    String sortexp = sortColumns.get(sortField);\r\n    return String.format(\" ORDER BY %s %s \", sortexp, dir);\r\n}"},
 {"id":3080, "methodname":"doquery(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "methodnamerefined":"doquery", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.doquery", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.doquery(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "shortclassname":"ReferralDAO$ReferralListQuery", "method":"/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * \t\tThe pseudo-field name in which to sort.\r\n * @param dir\r\n * \t\tThe direction of the desired sort (ascending or\r\n * \t\tdescending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprotected List<VerboseReferralBean> doquery(String sortField, SortDirection dir) throws DBException {\r\n    String stmt = \"SELECT \" + (((((((((((((((\"CONCAT(psender.firstName, ,psender.lastName) AS senderName, \" + \"CONCAT(preceiver.firstName, ,preceiver.lastName) AS receiverName, \") + \"referrals.*, \") + \"officevisits.visitDate, \") + \"CONCAT(patients.firstName, ,patients.lastName) AS patientName \") + \"FROM \") + \"referrals, \") + \"personnel AS psender, \") + \"personnel AS preceiver, \") + \"patients, \") + \"officevisits \") + \"WHERE \") + \"referrals.SenderID=psender.mid \") + \"AND referrals.ReceiverID=preceiver.mid \") + \"AND referrals.PatientID=patients.mid \") + \"AND referrals.ovid=officevisits.id \");\r\n    stmt += String.format(\"AND %s = ? \", getUserField());\r\n    stmt += buildSort(sortField, dir);\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(stmt);\r\n        ps.setLong(1, getUserId());\r\n        ResultSet rs = ps.executeQuery();\r\n        return verboseLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3081, "methodname":"getUserField()", "methodnamerefined":"getUserField", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.getUserField", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.getUserField()", "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "shortclassname":"ReferralDAO$ReferralListQuery", "method":"/**\r\n * Get the name of the user pseudo-field which is used to limit the\r\n * query.  Only referrals where this field equals a specific user id\r\n * will be returned.  This must be overridden by derived classes.\r\n *\r\n * @return The user field as a string.\r\n */\r\nprotected abstract String getUserField();"},
 {"id":3082, "methodname":"getUserId()", "methodnamerefined":"getUserId", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.getUserId", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.getUserId()", "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "shortclassname":"ReferralDAO$ReferralListQuery", "method":"protected long getUserId() {\r\n    return userid;\r\n}"},
 {"id":3083, "methodname":"query(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "methodnamerefined":"query", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.query", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.query(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "shortclassname":"ReferralDAO$ReferralListQuery", "method":"/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * \t\tThe pseudo-field name in which to sort.\r\n * @param dir\r\n * \t\tThe direction of the desired sort (ascending or\r\n * \t\tdescending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<VerboseReferralBean> query(String sortField, SortDirection dir) throws DBException {\r\n    List<VerboseReferralBean> beans = doquery(sortField, dir);\r\n    return beans;\r\n}"},
 {"id":3084, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":412, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery", "shortclassname":"ReferralDAO$SenderReferralListQuery", "method":"public SenderReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}"},
 {"id":3085, "methodname":"getUserField()", "methodnamerefined":"getUserField", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery.getUserField", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery.getUserField()", "classid":412, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery", "shortclassname":"ReferralDAO$SenderReferralListQuery", "method":"@Override\r\nprotected String getUserField() {\r\n    return \"referrals.SenderID\";\r\n}"},
 {"id":3086, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic RemoteMonitoringDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3087, "methodname":"addPatientToList(long,long,edu.ncsu.csc.itrust.beans.TelemedicineBean)", "methodnamerefined":"addPatientToList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.addPatientToList", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.addPatientToList(long,long,edu.ncsu.csc.itrust.beans.TelemedicineBean)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"/**\r\n * Add a patient to the list of HCPs monitoring lists of Patients\r\n *\r\n * @param patientMID\r\n * \t\tThe MID of the patient\r\n * @param HCPMID\r\n * \t\tThe MID of the HCP\r\n * @param tBean\r\n * \t\tThe TelemedicineBean indicating what telemedicine data the patient is allowed to enter.\r\n * @return true if added successfully, false if already in list\r\n */\r\npublic boolean addPatientToList(long patientMID, long HCPMID, TelemedicineBean tBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return false;\r\n\r\n        String permissionPS = \"SystolicBloodPressure, DiastolicBloodPressure, GlucoseLevel, Height, Weight, PedometerReading\";\r\n        ps = conn.prepareStatement(((\"INSERT INTO remotemonitoringlists(PatientMID, HCPMID, \" + permissionPS) + \") VALUES(?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ps.setBoolean(3, tBean.isSystolicBloodPressureAllowed());\r\n        ps.setBoolean(4, tBean.isDiastolicBloodPressureAllowed());\r\n        ps.setBoolean(5, tBean.isGlucoseLevelAllowed());\r\n        ps.setBoolean(6, tBean.isHeightAllowed());\r\n        ps.setBoolean(7, tBean.isWeightAllowed());\r\n        ps.setBoolean(8, tBean.isPedometerReadingAllowed());\r\n        ps.executeUpdate();\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3088, "methodname":"getMonitoringHCPs(long)", "methodnamerefined":"getMonitoringHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getMonitoringHCPs", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getMonitoringHCPs(long)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"/**\r\n * Show the list of HCPs monitoring this patient\r\n *\r\n * @param patientMID\r\n * \t\tThe MID of the patient\r\n * @return list of HCPs monitoring the provided patient\r\n */\r\npublic List<PersonnelBean> getMonitoringHCPs(long patientMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM personnel, remotemonitoringlists \" + \"WHERE remotemonitoringlists.PatientMID=? AND remotemonitoringlists.HCPMID=personnel.MID\"));\r\n        ps.setLong(1, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3089, "methodname":"getNumberOfDailyEntries(long,java.lang.String)", "methodnamerefined":"getNumberOfDailyEntries", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getNumberOfDailyEntries", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getNumberOfDailyEntries(long,java.lang.String)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"/**\r\n * Private method to get the number of entries for a certain patientID for today.\r\n *\r\n * @param patientMID\r\n * \t\t\r\n * @return the number of entries\r\n * @throws DBException\r\n * \t\t\r\n */\r\n/* private int getNumberOfDailyEntries(long patientMID) throws DBException{\nConnection conn = null;\nPreparedStatement ps = null;\ntry {\nconn = factory.getConnection();\nps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringData WHERE PatientID=? AND DATE(timeLogged)=CURRENT_DATE\");\nps.setLong(1, patientMID);\nResultSet rs = ps.executeQuery();\nList<RemoteMonitoringDataBean> patients = loader.loadList(rs);\nreturn patients.size();\n\n} catch (SQLException e) {\ne.printStackTrace();\nthrow new DBException(e);\n} finally {\nDBUtil.closeConnection(conn, ps);\n}\n}\n */\r\n/**\r\n * Private method to get the number of entries for a certain patientID and a certain\r\n * data type for today.\r\n *\r\n * @param patientMID\r\n * \t\t\r\n * @param dataType\r\n * \t\t\r\n * @return the number of entries\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate int getNumberOfDailyEntries(long patientMID, String dataType) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND \" + dataType) + \"!=? AND DATE(timeLogged)=CURRENT_DATE\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setInt(2, (-1));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> patients = loader.loadList(rs);\r\n        return patients.size();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3090, "methodname":"getPatientDataByDate(long,java.util.Date,java.util.Date)", "methodnamerefined":"getPatientDataByDate", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientDataByDate", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientDataByDate(long,java.util.Date,java.util.Date)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"public List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, Date lower, Date upper) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3091, "methodname":"getPatientDataByType(long,java.lang.String)", "methodnamerefined":"getPatientDataByType", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientDataByType", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientDataByType(long,java.lang.String)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"/**\r\n * Get the requested type of data for the specified patient.\r\n *\r\n * @param patientMID\r\n * \t\tThe MID of the patient\r\n * @param dataType\r\n * \t\tThe type of telemedicine data to return\r\n * @return A list of beans which all contain information of the requested type\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientDataByType(long patientMID, String dataType) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND \" + dataType) + \" != -1 ORDER BY timeLogged ASC\"));\r\n        ps.setLong(1, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3092, "methodname":"getPatientsData(long)", "methodnamerefined":"getPatientsData", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientsData", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getPatientsData(long)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"/**\r\n * Returns patient data for a given HCP\r\n *\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<RemoteMonitoringDataBean> getPatientsData(long loggedInMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE HCPMID=? ORDER BY PatientMID\");\r\n        ps.setLong(1, loggedInMID);\r\n        ResultSet patientRS = ps.executeQuery();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringdata WHERE timelogged >= CURRENT_DATE ORDER BY PatientID, timeLogged DESC\");\r\n        ResultSet dataRS = ps.executeQuery();\r\n        List<String> patientList = new ArrayList<String>();\r\n        while (patientRS.next()) {\r\n            patientList.add(((patientRS.getLong(\"PatientMID\")) + \"\"));\r\n        } \r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(dataRS);\r\n        int i;\r\n        int j;\r\n        // Go through all patients and remove any that arent monitored by this HCP\r\n        for (i = 0; i < (dataList.size()); i++) {\r\n            if (!(patientList.contains(((dataList.get(i).getPatientMID()) + \"\")))) {\r\n                dataList.remove(i);\r\n                i--;\r\n            }\r\n        }\r\n        // Add values in patient list with no data for today to list.\r\n        boolean itsThere;\r\n        for (i = 0; i < (patientList.size()); i++) {\r\n            itsThere = false;\r\n            for (j = 0; j < (dataList.size()); j++) {\r\n                if (((dataList.get(j).getPatientMID()) + \"\").equals(patientList.get(i))) {\r\n                    itsThere = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!itsThere) {\r\n                dataList.add(new RemoteMonitoringDataBean(Long.parseLong(patientList.get(i))));\r\n            }\r\n        }\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3093, "methodname":"getTelemedicineBean(long)", "methodnamerefined":"getTelemedicineBean", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getTelemedicineBean", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.getTelemedicineBean(long)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"/**\r\n * Return remote monitoring list data for a given patient.\r\n *\r\n * @param patientMID\r\n * \t\tPatient to retrieve data for.\r\n * @return List of TelemedicineBeans\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<TelemedicineBean> getTelemedicineBean(long patientMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE PatientMID=?\");\r\n        ps.setLong(1, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rmListLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3094, "methodname":"removePatientFromList(long,long)", "methodnamerefined":"removePatientFromList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.removePatientFromList", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.removePatientFromList(long,long)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"/**\r\n * Remove a patient from the list of HCPs monitoring lists of Patients\r\n *\r\n * @param patientMID\r\n * \t\tThe MID of the patient\r\n * @param HCPMID\r\n * \t\tThe MID of the HCP\r\n * @return true if removed successfully, false if not in list\r\n */\r\npublic boolean removePatientFromList(long patientMID, long HCPMID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM remotemonitoringlists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        if ((ps.executeUpdate()) == 0)\r\n            return false;\r\n\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3095, "methodname":"storePatientData(long,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean,java.lang.String,long)", "methodnamerefined":"storePatientData", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.storePatientData", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.storePatientData(long,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean,java.lang.String,long)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"/**\r\n * Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID\r\n * \t\tThe MID of the patient\r\n * @param height\r\n * \t\tThe height of the patient\r\n * @param weight\r\n * \t\tThe weight of the patient\r\n * @param pedometerReading\r\n * \t\tThe pedometer reading of the patient\r\n * @param reporterRole\r\n * \t\tThe role of the person that reported these monitoring stats\r\n * @param reporterMID\r\n * \t\tThe MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void storePatientData(long patientMID, RemoteMonitoringDataBean bean, String reporterRole, long reporterMID) throws DBException, iTrustException {\r\n    float height = bean.getHeight();\r\n    float weight = bean.getWeight();\r\n    int pedometer = bean.getPedometerReading();\r\n    int sbp = bean.getSystolicBloodPressure();\r\n    int dbp = bean.getDiastolicBloodPressure();\r\n    int glucose = bean.getGlucoseLevel();\r\n    if (height == 0)\r\n        height = -1;\r\n\r\n    if (weight == 0)\r\n        weight = -1;\r\n\r\n    if (pedometer == 0)\r\n        pedometer = -1;\r\n\r\n    if (sbp == 0)\r\n        sbp = -1;\r\n\r\n    if (dbp == 0)\r\n        dbp = -1;\r\n\r\n    if (glucose == 0)\r\n        glucose = -1;\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"height\")) >= 1) && (height != (-1)))\r\n        throw new iTrustException(\"Patient height entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"weight\")) >= 1) && (weight != (-1)))\r\n        throw new iTrustException(\"Patient weight entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"pedometerReading\")) >= 1) && (pedometer != (-1)))\r\n        throw new iTrustException(\"Patient pedometer reading entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"glucoseLevel\")) >= 10) && (glucose != (-1)))\r\n        throw new iTrustException(\"Patient glucose level entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"systolicBloodPressure\")) >= 10) && (sbp != (-1)))\r\n        throw new iTrustException(\"Patient systolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"diastolicBloodPressure\")) >= 10) && (dbp != (-1)))\r\n        throw new iTrustException(\"Patient diastolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO remotemonitoringdata(PatientID, height, weight, \" + \"pedometerReading, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setFloat(2, height);\r\n        ps.setFloat(3, weight);\r\n        ps.setInt(4, pedometer);\r\n        ps.setInt(5, sbp);\r\n        ps.setInt(6, dbp);\r\n        ps.setInt(7, glucose);\r\n        ps.setString(8, reporterRole);\r\n        ps.setLong(9, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3096, "methodname":"validatePR(long,long)", "methodnamerefined":"validatePR", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.validatePR", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.validatePR(long,long)", "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "shortclassname":"RemoteMonitoringDAO", "method":"public void validatePR(long representativeMID, long patientMID) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representativeMID);\r\n        ps.setLong(2, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        // no rows\r\n        if (!(rs.next()))\r\n            throw new iTrustException((\"Representer is not valid for patient \" + patientMID));\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3097, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":415, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO", "shortclassname":"ReportRequestDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ReportRequestDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    loader = new ReportRequestBeanLoader();\r\n}"},
 {"id":3098, "methodname":"addReportRequest(long,long,java.util.Date)", "methodnamerefined":"addReportRequest", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.addReportRequest", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.addReportRequest(long,long,java.util.Date)", "classid":415, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO", "shortclassname":"ReportRequestDAO", "method":"// /**\r\n// * Returns every report request in the database.\r\n// * @return A java.util.List of report requests.\r\n// * @throws DBException\r\n// */\r\n// public List<ReportRequestBean> getAllReportRequests() throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// \r\n// try {\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"SELECT * FROM ReportRequests\");\r\n// ResultSet rs = ps.executeQuery();\r\n// return loader.loadList(rs);\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n/**\r\n * Adds a request for a report.\r\n *\r\n * @param requesterMID\r\n * \t\tThe MID of the requester.\r\n * @param patientMID\r\n * \t\tThe MID of the patient in question.\r\n * @param date\r\n * \t\tThe date the request was made.\r\n * @return A long of the unique ID of the report request.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long addReportRequest(long requesterMID, long patientMID, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (requesterMID == 0L)\r\n            throw new SQLException(\"RequesterMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO reportrequests (ID, RequesterMID, PatientMID, RequestedDate, Status) VALUES (null,?,?,?,Requested)\");\r\n        ps.setLong(1, requesterMID);\r\n        ps.setLong(2, patientMID);\r\n        ps.setTimestamp(3, new Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3099, "methodname":"getAllReportRequestsForPatient(long)", "methodnamerefined":"getAllReportRequestsForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getAllReportRequestsForPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getAllReportRequestsForPatient(long)", "classid":415, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO", "shortclassname":"ReportRequestDAO", "method":"/**\r\n * Returns all of the report requests associated with a specific patient.\r\n *\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of report requests.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReportRequestBean> getAllReportRequestsForPatient(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM reportrequests WHERE PatientMID = ?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3100, "methodname":"getAllReportRequestsForRequester(long)", "methodnamerefined":"getAllReportRequestsForRequester", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getAllReportRequestsForRequester", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getAllReportRequestsForRequester(long)", "classid":415, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO", "shortclassname":"ReportRequestDAO", "method":"/**\r\n * Returns all report requests associated with a given requester.\r\n *\r\n * @param mid\r\n * \t\tThe MID of the personnel in question.\r\n * @return A java.util.List of report requests.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<ReportRequestBean> getAllReportRequestsForRequester(long mid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"RequesterMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM reportrequests WHERE RequesterMID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3101, "methodname":"getReportRequest(long)", "methodnamerefined":"getReportRequest", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getReportRequest", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.getReportRequest(long)", "classid":415, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO", "shortclassname":"ReportRequestDAO", "method":"/**\r\n * Returns a full bean describing a given report request.\r\n *\r\n * @param id\r\n * \t\tThe unique ID of the bean in the database.\r\n * @return The bean describing this report request.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic ReportRequestBean getReportRequest(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"ID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM reportrequests WHERE ID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return loader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3102, "methodname":"setViewed(long,java.util.Date)", "methodnamerefined":"setViewed", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.setViewed", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.setViewed(long,java.util.Date)", "classid":415, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO", "shortclassname":"ReportRequestDAO", "method":"// /**\r\n// * Sets the status of a request to Approved\r\n// *\r\n// * @param ID The unique ID of the report.\r\n// * @param approverMID The MID of the person approving the request.\r\n// * @param date The date the approval was made.\r\n// * @throws DBException\r\n// */\r\n// public void approveReportRequest(long ID, long approverMID, Date date) throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// try {\r\n// if (ID == 0L) throw new SQLException(\"ID cannot be null\");\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = Approved where ID = ?\");\r\n// ps.setLong(1, approverMID);\r\n// ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\r\n// ps.setLong(3, ID);\r\n// ps.executeUpdate();\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n// \r\n// /**\r\n// * Sets the status of a report request to Rejected\r\n// *\r\n// * @param ID The unique ID of the request in question.\r\n// * @param approverMID The MID of the rejecter in question.\r\n// * @param date The date the rejection was made.\r\n// * @param comment A comment describing why the request was rejected.\r\n// * @throws DBException\r\n// */\r\n// public void rejectReportRequest(long ID, long approverMID, Date date, String comment) throws DBException {\r\n// Connection conn = null;\r\n// PreparedStatement ps = null;\r\n// try {\r\n// if (ID == 0L) throw new SQLException(\"ID cannot be null\");\r\n// conn = factory.getConnection();\r\n// ps = conn.prepareStatement(\"UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = Rejected, comment = ? where ID = ?\");\r\n// ps.setLong(1, approverMID);\r\n// ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\r\n// ps.setString(3, comment);\r\n// ps.setLong(4, ID);\r\n// ps.executeUpdate();\r\n// } catch (SQLException e) {\r\n// e.printStackTrace();\r\n// throw new DBException(e);\r\n// } finally {\r\n// DBUtil.closeConnection(conn, ps);\r\n// }\r\n// }\r\n/**\r\n * Sets the status of a report request to Viewed\r\n *\r\n * @param ID\r\n * \t\tThe unique ID of the request in question.\r\n * @param date\r\n * \t\tThe date the request was viewed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void setViewed(long ID, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (ID == 0L)\r\n            throw new SQLException(\"ID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE reportrequests set ViewedDate = ?, Status = Viewed where ID = ?\");\r\n        ps.setTimestamp(1, new Timestamp(date.getTime()));\r\n        ps.setLong(2, ID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3103, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":416, "classname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO", "shortclassname":"RiskDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic RiskDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3104, "methodname":"createPrepared(int)", "methodnamerefined":"createPrepared", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.createPrepared", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.createPrepared(int)", "classid":416, "classname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO", "shortclassname":"RiskDAO", "method":"private String createPrepared(int length) {\r\n    String str = \"\";\r\n    for (int i = 0; i < length; i++)\r\n        str += \"?,\";\r\n\r\n    return str.substring(0, ((str.length()) - 1));\r\n}"},
 {"id":3105, "methodname":"getFamilyMembers(long)", "methodnamerefined":"getFamilyMembers", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.getFamilyMembers", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.getFamilyMembers(long)", "classid":416, "classname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO", "shortclassname":"RiskDAO", "method":"private List<FamilyMemberBean> getFamilyMembers(long patientID) throws DBException {\r\n    FamilyDAO famDAO = factory.getFamilyDAO();\r\n    List<FamilyMemberBean> familyMembers = famDAO.getParents(patientID);\r\n    familyMembers.addAll(famDAO.getSiblings(patientID));\r\n    return familyMembers;\r\n}"},
 {"id":3106, "methodname":"hadChildhoodInfection(long,double[])", "methodnamerefined":"hadChildhoodInfection", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hadChildhoodInfection", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hadChildhoodInfection(long,double[])", "classid":416, "classname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO", "shortclassname":"RiskDAO", "method":"/**\r\n * Returns whether or not a patient had a childhood infection for the exact, given ICD codes.\r\n *\r\n * @param patientID\r\n * \t\tThe MID of the patient in question.\r\n * @param icdCodes\r\n * \t\tA parameter list of the ICD codes to match.\r\n * @return A boolean indicating whether this patient had all the listed ICD codes.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean hadChildhoodInfection(long patientID, double... icdCodes) throws DBException {\r\n    // Note the datediff call - this is a MySQL function that takes the difference between two\r\n    // dates and returns that value in terms of days. 6570 days is 18 years (not counting leap years)\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((\"SELECT * FROM ovdiagnosis ovd, officevisits ov, patients p \" + (\"WHERE ovd.visitID=ov.id AND ov.patientid=p.mid AND p.mid=? \" + \"AND datediff(ov.visitdate,p.dateofbirth) < 6570 AND ovd.icdcode IN (\")) + (createPrepared(icdCodes.length))) + \")\"));\r\n        ps.setLong(1, patientID);\r\n        setICDs(2, ps, icdCodes);\r\n        return ps.executeQuery().next();// if this query has ANY rows, then yes\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3107, "methodname":"hadPriorDiagnoses(long,double,double)", "methodnamerefined":"hadPriorDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hadPriorDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hadPriorDiagnoses(long,double,double)", "classid":416, "classname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO", "shortclassname":"RiskDAO", "method":"/**\r\n * Returns if a patient has ever been diagnosed with the given ICD code, in the range [lower,upper)\r\n *\r\n * @param patientID\r\n * \t\tThe MID of the patient in question.\r\n * @param lowerICDCode\r\n * \t\tA double of the lower ICD code.\r\n * @param upperICDCode\r\n * \t\tA double of the upper ICD code.\r\n * @return A boolean indicating whether there was a match in the given range.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean hadPriorDiagnoses(long patientID, double lowerICDCode, double upperICDCode) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT * FROM ovdiagnosis ovd, officevisits ov, patients p \" + (\"WHERE ovd.visitID=ov.id AND ov.patientid=p.mid AND p.mid=? \" + \"AND ovd.icdcode>=? AND ovd.icdcode<?\")));\r\n        ps.setLong(1, patientID);\r\n        ps.setDouble(2, lowerICDCode);\r\n        ps.setDouble(3, upperICDCode);\r\n        return ps.executeQuery().next();// if this query has ANY rows, then yes\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3108, "methodname":"hasFamilyHistory(long,double,double)", "methodnamerefined":"hasFamilyHistory", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hasFamilyHistory", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hasFamilyHistory(long,double,double)", "classid":416, "classname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO", "shortclassname":"RiskDAO", "method":"/**\r\n * This method is implemented using {@link FamilyDAO} for 2 reasons: (a) definitions of family members\r\n * might change, so its better to centralize that code and (2) to make this code a little bit \"nicer\"\r\n * even though it executes one query per family member. If this method gets slow, then you will need to\r\n * refactor. Otherwise, lets just keep it simple...\r\n *\r\n * @param patientID\r\n * \t\tThe MID of the patient in question.\r\n * @param icdLower\r\n * \t\tA double of the lower bound for the codes.\r\n * @param icdUpper\r\n * \t\tA double of the upper bound for the codes.\r\n * @return A boolean indicating whether a family member had a match in this range.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean hasFamilyHistory(long patientID, double icdLower, double icdUpper) throws DBException {\r\n    List<FamilyMemberBean> familyMembers = getFamilyMembers(patientID);\r\n    for (FamilyMemberBean famMember : familyMembers) {\r\n        if (hadPriorDiagnoses(famMember.getMid(), icdLower, icdUpper))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":3109, "methodname":"hasSmoked(long)", "methodnamerefined":"hasSmoked", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hasSmoked", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.hasSmoked(long)", "classid":416, "classname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO", "shortclassname":"RiskDAO", "method":"/**\r\n * Returns if the patient has ever smoked in their life\r\n *\r\n * @param patientID\r\n * \t\tThe MID of the patient in question.\r\n * @return A boolean indicating whether the patient smoked.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean hasSmoked(long patientID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personalhealthinformation WHERE PatientID=? AND Smoker=1\");\r\n        ps.setLong(1, patientID);\r\n        return ps.executeQuery().next();// if this query has ANY rows, then yes\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3110, "methodname":"setICDs(int,java.sql.PreparedStatement,double[])", "methodnamerefined":"setICDs", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.setICDs", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.setICDs(int,java.sql.PreparedStatement,double[])", "classid":416, "classname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO", "shortclassname":"RiskDAO", "method":"private void setICDs(int start, PreparedStatement ps, double[] icdCodes) throws SQLException {\r\n    for (double icdCode : icdCodes) {\r\n        ps.setDouble((start++), icdCode);\r\n    }\r\n}"},
 {"id":3111, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":417, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO", "shortclassname":"SurveyDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic SurveyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.surveyLoader = new SurveyLoader();\r\n}"},
 {"id":3112, "methodname":"addCompletedSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,java.util.Date)", "methodnamerefined":"addCompletedSurvey", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.addCompletedSurvey", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.addCompletedSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,java.util.Date)", "classid":417, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO", "shortclassname":"SurveyDAO", "method":"/**\r\n * Insert survey data into database.\r\n *\r\n * @param surveyBean\r\n * \t\tThe Bean representing the users responses which will be inserted.\r\n * @param date\r\n * \t\tThe date the survey was completed.\r\n */\r\npublic void addCompletedSurvey(SurveyBean surveyBean, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovsurvey (VisitID, SurveyDate) VALUES (?,?)\");\r\n        ps.setLong(1, surveyBean.getVisitID());\r\n        ps.setTimestamp(2, new Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        if ((surveyBean.getWaitingRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set WaitingRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getWaitingRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getExamRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set ExamRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getExamRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getVisitSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set VisitSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getVisitSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getTreatmentSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set TreatmentSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getTreatmentSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3113, "methodname":"getSurveyData(long)", "methodnamerefined":"getSurveyData", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.getSurveyData", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.getSurveyData(long)", "classid":417, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO", "shortclassname":"SurveyDAO", "method":"/**\r\n * Gets survey data from the database by the office visit id. Creates an instance of an\r\n * SurveyBean with data and returns it.\r\n *\r\n * @param id\r\n * \t\tThe unique ID of the survey in question.\r\n * @return A bean containing the SurveyBean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic SurveyBean getSurveyData(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ovsurvey WHERE VisitID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return surveyLoader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3114, "methodname":"isSurveyCompleted(long)", "methodnamerefined":"isSurveyCompleted", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.isSurveyCompleted", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.isSurveyCompleted(long)", "classid":417, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO", "shortclassname":"SurveyDAO", "method":"/**\r\n * Has this survey been completed?\r\n *\r\n * @param visitID\r\n * \t\tThe unique ID of the office visit we are wondering about.\r\n * @return boolean indicating whether this survey is completed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean isSurveyCompleted(long visitID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT count(*) FROM ovsurvey WHERE VisitID = ?\");\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return (rs.getInt(1)) == 0 ? false : true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3115, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":418, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO", "shortclassname":"SurveyResultDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic SurveyResultDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.loader = new SurveyResultBeanLoader();\r\n}"},
 {"id":3116, "methodname":"getSurveyResultsForHospital(java.lang.String,java.lang.String)", "methodnamerefined":"getSurveyResultsForHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.getSurveyResultsForHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.getSurveyResultsForHospital(java.lang.String,java.lang.String)", "classid":418, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO", "shortclassname":"SurveyResultDAO", "method":"/**\r\n * Returns all the survey data associated with a given hospital and a certain specialty.\r\n *\r\n * @param hospitalID\r\n * \t\tThe unique ID of the iTrust hospital we are querying about.\r\n * @param specialty\r\n * \t\tA string representing the specialty we are interested in.\r\n * @return A java.util.List of SurveyResultBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForHospital(String hospitalID, String specialty) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    StringBuffer sql = new StringBuffer();\r\n    sql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\r\n    sql.append(\"h.hosid hospitalID, \");\r\n    sql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\r\n    sql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\r\n    sql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\r\n    sql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\r\n    sql.append(\"count(*) / \");\r\n    sql.append(\"\t(select count(*) from personnel p1, officevisits v1, hcpassignedhos h1 \");\r\n    sql.append(\"\t where v1.hcpid = p1.mid \");\r\n    sql.append(\"\t and v1.hcpid = h1.hcpid \");\r\n    sql.append(\"\t and h1.hosid = ? \");\r\n    sql.append(\"\t and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\r\n    sql.append(\"from ovsurvey s, personnel p, officevisits v, hcpassignedhos h \");\r\n    sql.append(\"where s.visitid = v.id \");\r\n    sql.append(\"and v.hcpid = p.mid \");\r\n    sql.append(\"and v.hcpid = h.hcpid \");\r\n    sql.append(\"and h.hosid = ? \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\"and p.specialty = ?\");\r\n\r\n    sql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\", p.specialty \");\r\n\r\n    sql.append(\"order by p.mid \");\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(sql.toString());\r\n        ps.setString(1, hospitalID);\r\n        ps.setString(2, hospitalID);\r\n        if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY))) {\r\n            ps.setString(3, specialty);\r\n        }\r\n        return loader.loadList(ps.executeQuery());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3117, "methodname":"getSurveyResultsForZip(java.lang.String,java.lang.String)", "methodnamerefined":"getSurveyResultsForZip", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.getSurveyResultsForZip", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.getSurveyResultsForZip(java.lang.String,java.lang.String)", "classid":418, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO", "shortclassname":"SurveyResultDAO", "method":"/**\r\n * Returns all the survey results in the database that correspond to a particular zip code.\r\n *\r\n * @param zip\r\n * \t\tThe zipcode we are interested in as a String.\r\n * @param specialty\r\n * \t\tThe specialty we are interested in as a String.\r\n * @return A java.util.List of SurveyResultBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForZip(String zip, String specialty) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    StringBuffer sql = new StringBuffer();\r\n    sql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\r\n    sql.append(\"na hospitalID, \");\r\n    sql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\r\n    sql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\r\n    sql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\r\n    sql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\r\n    sql.append(\"count(*) / \");\r\n    sql.append(\"\t(select count(*) from personnel p1, officevisits v1 \");\r\n    sql.append(\"\t where v1.hcpid = p1.mid \");\r\n    sql.append(\"\t and substr(p1.zip,1,3) = ? \");\r\n    sql.append(\"\t and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\r\n    sql.append(\"from ovsurvey s, personnel p, officevisits v \");\r\n    sql.append(\"where s.visitid = v.id \");\r\n    sql.append(\"and v.hcpid = p.mid \");\r\n    sql.append(\"and substr(p.zip,1,3) = ? \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\"and specialty = ?\");\r\n\r\n    sql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\r\n    if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n        sql.append(\", p.specialty \");\r\n\r\n    sql.append(\"order by p.mid \");\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(sql.toString());\r\n        ps.setString(1, zip.substring(0, 3));\r\n        ps.setString(2, zip.substring(0, 3));\r\n        if (!(specialty.equals(SurveyResultBean.ANY_SPECIALTY)))\r\n            ps.setString(3, specialty);\r\n\r\n        return loader.loadList(ps.executeQuery());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3118, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "shortclassname":"TransactionDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic TransactionDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3119, "methodname":"addAndSortRoles(java.util.List,long,boolean)", "methodnamerefined":"addAndSortRoles", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.addAndSortRoles", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.addAndSortRoles(java.util.List,long,boolean)", "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "shortclassname":"TransactionDAO", "method":"/**\r\n *\r\n *\r\n * @param tbList\r\n * \t\t\r\n * @param patientID\r\n * \t\t\r\n * @param sortByRole\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate List<TransactionBean> addAndSortRoles(List<TransactionBean> tbList, long patientID, boolean sortByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        for (TransactionBean t : tbList) {\r\n            ps = conn.prepareStatement(\"SELECT Role FROM users WHERE MID=?\");\r\n            ps.setLong(1, t.getLoggedInMID());\r\n            ResultSet rs = ps.executeQuery();\r\n            String role = \"\";\r\n            if (rs.next())\r\n                role = rs.getString(\"Role\");\r\n\r\n            if (role.equals(\"er\"))\r\n                role = \"Emergency Responder\";\r\n            else\r\n                if (role.equals(\"uap\"))\r\n                    role = \"UAP\";\r\n                else\r\n                    if (role.equals(\"hcp\")) {\r\n                        role = \"LHCP\";\r\n                        ps = conn.prepareStatement(\"SELECT PatientID FROM declaredhcp WHERE HCPID=?\");\r\n                        ps.setLong(1, t.getLoggedInMID());\r\n                        ResultSet rs2 = ps.executeQuery();\r\n                        while (rs2.next()) {\r\n                            if ((rs2.getLong(\"PatientID\")) == patientID) {\r\n                                role = \"DLHCP\";\r\n                                break;\r\n                            }\r\n                        } \r\n                    } else\r\n                        if (role.equals(\"patient\")) {\r\n                            role = \"Patient\";\r\n                            ps = conn.prepareStatement(\"SELECT representeeMID FROM representatives WHERE representerMID=?\");\r\n                            ps.setLong(1, t.getLoggedInMID());\r\n                            ResultSet rs2 = ps.executeQuery();\r\n                            while (rs2.next()) {\r\n                                if ((rs2.getLong(\"representeeMID\")) == patientID) {\r\n                                    role = \"Personal Health Representative\";\r\n                                    break;\r\n                                }\r\n                            } \r\n                        }\r\n\r\n\r\n\r\n            t.setRole(role);\r\n        }\r\n        if (sortByRole) {\r\n            TransactionBean[] array = new TransactionBean[tbList.size()];\r\n            array[0] = tbList.get(0);\r\n            TransactionBean t;\r\n            for (int i = 1; i < (tbList.size()); i++) {\r\n                t = tbList.get(i);\r\n                String role = t.getRole();\r\n                int j = 0;\r\n                while (((array[j]) != null) && ((role.compareToIgnoreCase(array[j].getRole())) >= 0))\r\n                    j++;\r\n\r\n                for (int k = i; k > j; k--) {\r\n                    array[k] = array[(k - 1)];\r\n                }\r\n                array[j] = t;\r\n            }\r\n            int size = tbList.size();\r\n            for (int i = 0; i < size; i++)\r\n                tbList.set(i, array[i]);\r\n\r\n        }\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3120, "methodname":"getAllRecordAccesses(long,long,boolean)", "methodnamerefined":"getAllRecordAccesses", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getAllRecordAccesses", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getAllRecordAccesses(long,long,boolean)", "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "shortclassname":"TransactionDAO", "method":"/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record\r\n *\r\n * @param patientID\r\n * \t\tThe MID of the patient in question.\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<TransactionBean> getAllRecordAccesses(long patientID, long dlhcpID, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode \" + \"IN(\") + (TransactionType.patientViewableStr)) + \") AND loggedInMID!=? ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setLong(2, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3121, "methodname":"getAllTransactions()", "methodnamerefined":"getAllTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getAllTransactions", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getAllTransactions()", "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "shortclassname":"TransactionDAO", "method":"/**\r\n * Returns the whole transaction log\r\n *\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<TransactionBean> getAllTransactions() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM transactionlog ORDER BY timeLogged DESC\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3122, "methodname":"getOperationalProfile()", "methodnamerefined":"getOperationalProfile", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getOperationalProfile", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getOperationalProfile()", "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "shortclassname":"TransactionDAO", "method":"/**\r\n * Returns the operation profile\r\n *\r\n * @return The OperationalProfile as a bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic OperationalProfile getOperationalProfile() throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT TransactionCode, count(transactionID) as TotalCount, \" + ((\"count(if(loggedInMID<9000000000, transactionID, null)) as PatientCount, \" + \"count(if(loggedInMID>=9000000000, transactionID, null)) as PersonnelCount \") + \"FROM transactionlog GROUP BY transactionCode ORDER BY transactionCode ASC\")));\r\n        ResultSet rs = ps.executeQuery();\r\n        return operationalProfileLoader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3123, "methodname":"getRecordAccesses(long,long,java.util.Date,java.util.Date,boolean)", "methodnamerefined":"getRecordAccesses", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getRecordAccesses", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getRecordAccesses(long,long,java.util.Date,java.util.Date,boolean)", "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "shortclassname":"TransactionDAO", "method":"/**\r\n * Return a list of all transactions in which an HCP accessed the given patients record, within the dates\r\n *\r\n * @param patientID\r\n * \t\tThe MID of the patient in question.\r\n * @param lower\r\n * \t\tThe starting date as a java.util.Date\r\n * @param upper\r\n * \t\tThe ending date as a java.util.Date\r\n * @return A java.util.List of transactions.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<TransactionBean> getRecordAccesses(long patientID, long dlhcpID, Date lower, Date upper, boolean getByRole) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((((((\"SELECT * FROM transactionlog WHERE secondaryMID=? AND transactionCode IN (\" + (TransactionType.patientViewableStr)) + \") \") + \"AND timeLogged >= ? AND timeLogged <= ? \") + \"AND loggedInMID!=? \") + \"ORDER BY timeLogged DESC\"));\r\n        ps.setLong(1, patientID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 days worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(((upper.getTime()) + (((1000L * 60L) * 60) * 24L))));\r\n        ps.setLong(4, dlhcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3124, "methodname":"getTransactionsAffecting(long,long,java.util.Date,int)", "methodnamerefined":"getTransactionsAffecting", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getTransactionsAffecting", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.getTransactionsAffecting(long,long,java.util.Date,int)", "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "shortclassname":"TransactionDAO", "method":"/**\r\n * The Most Thorough Fetch\r\n *\r\n * @param mid\r\n * \t\tMID of the logged in user\r\n * @param dlhcpID\r\n * \t\tMID of the users DLHCP\r\n * @param start\r\n * \t\tIndex to start pulling entries from\r\n * @param range\r\n * \t\tNumber of entries to retrieve\r\n * @return List of <range> TransactionBeans affecting the user starting from the <start>th entry\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<TransactionBean> getTransactionsAffecting(long mid, long dlhcpID, Date start, int range) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(((((((((\"SELECT * FROM transactionlog WHERE ((timeLogged < ?) \" + (\"AND  (secondaryMID=? AND transactionCode \" + \"IN (\")) + (TransactionType.patientViewableStr)) + \")) \") + \"OR (loggedInMID=? AND transactionCode=?) ) \") + \"AND NOT (loggedInMID=? AND transactionCode IN (\")// exclude if DLHCP as specified in UC43\r\n         + (TransactionType.dlhcpHiddenStr)) + \")) \") + \"ORDER BY timeLogged DESC LIMIT 0,?\"));\r\n        ps.setString(2, (mid + \"\"));\r\n        ps.setString(3, (mid + \"\"));\r\n        ps.setInt(4, TransactionType.LOGIN_SUCCESS.getCode());\r\n        ps.setTimestamp(1, new Timestamp(start.getTime()));\r\n        ps.setLong(5, dlhcpID);\r\n        ps.setInt(6, range);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<TransactionBean> tbList = loader.loadList(rs);\r\n        return tbList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3125, "methodname":"logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long)", "methodnamerefined":"logTransaction", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long)", "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "shortclassname":"TransactionDAO", "method":"/**\r\n * Log a transaction, just giving it the person who is logged in and the type\r\n *\r\n * @param type\r\n * \t\tThe {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is logged in.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID) throws DBException {\r\n    logTransaction(type, loggedInMID, 0L, \"\");\r\n}"},
 {"id":3126, "methodname":"logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "methodnamerefined":"logTransaction", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "shortclassname":"TransactionDAO", "method":"/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * \t\tThe {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is logged in.\r\n * @param secondaryMID\r\n * \t\tTypically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * \t\tA note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO transactionlog(loggedInMID, secondaryMID, \" + \"transactionCode, addedInfo) VALUES(?,?,?,?)\"));\r\n        ps.setLong(1, loggedInMID);\r\n        ps.setLong(2, secondaryMID);\r\n        ps.setInt(3, type.getCode());\r\n        ps.setString(4, addedInfo);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3127, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":420, "classname":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO", "shortclassname":"VisitRemindersDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic VisitRemindersDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3128, "methodname":"getDiagnosedVisitNeeders(long)", "methodnamerefined":"getDiagnosedVisitNeeders", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.getDiagnosedVisitNeeders", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.getDiagnosedVisitNeeders(long)", "classid":420, "classname":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO", "shortclassname":"VisitRemindersDAO", "method":"/**\r\n * Returns a list of patients who need a visit for this HCP. This means:\r\n *\r\n * Alive patient, no office visit for > 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx -\r\n * Circulatory-System Disease: [ 390.00 , 459.99 ]\r\n *\r\n * @param hcpid\r\n * \t\tThe MID of the HCP in question.\r\n * @return A java.util.List of visit reminders.\r\n */\r\npublic List<VisitReminderReturnForm> getDiagnosedVisitNeeders(long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT  hid, MID, lastName, firstName, phone, ICDcode, visitDate FROM \" + (((((((((((((((((((((((((((((((((((((((((((((\"(SELECT DISTINCT \" + \"  ? as hid, \") + \"  p.MID as MID, \") + \"  p.lastName, \") + \"  p.firstName, \") + \"  p.phone, \") + \"  ovd.ICDcode \") + \" FROM \") + \"  patients p, \") + \"  officevisits ov, \") + \"  ovdiagnosis ovd \") + \" WHERE \") + \"  p.MID = ov.PatientID \") + \" AND \") + \"  p.DateOfDeath is null \") + \" AND \") + \"  ov.ID = ovd.VisitID \") + \" AND \") + \"  (\") + \"    ovd.ICDCode BETWEEN ? AND ? \") + \"   OR \") + \"    ovd.ICDCode BETWEEN ? AND ? \") + \"   OR \") + \"    ovd.ICDCode BETWEEN ? AND ? \") + \"  ) \") + \" AND \") + \"  p.MID NOT IN \") + \"   ( \") + \"    SELECT p.MID FROM patients p, officevisits ov \") + \"    WHERE \") + \"     p.MID = ov.PatientID \") + \"\t AND \") + \"     ov.visitDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) \") + \"   ) \") + \") a \") + \" INNER JOIN \") + \"  ( \") + \"   SELECT p.MID, MAX(ov.visitDate) as visitDate FROM patients p, officevisits ov \") + \"   WHERE \") + \"    p.MID = ov.PatientID \") + \"   GROUP BY \") + \"    p.mid \") + \"  ) b \") + \" USING(MID) \") + \"ORDER BY \") + \" lastName, firstName, MID, ICDcode \")));\r\n        ps.setLong(1, hcpid);\r\n        ps.setFloat(2, 250.0F);\r\n        ps.setFloat(3, 250.99F);\r\n        ps.setFloat(4, 390.0F);\r\n        ps.setFloat(5, 459.99F);\r\n        ps.setFloat(6, 493.0F);\r\n        ps.setFloat(7, 493.99F);\r\n        rs = ps.executeQuery();\r\n        List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();\r\n        VisitReminderReturnForm temp = null;\r\n        VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\r\n        long lastId = -1;\r\n        while (rs.next()) {\r\n            if (lastId == (rs.getLong(2))) {\r\n                patients.get(((patients.size()) - 1)).addVisitFlag(new VisitFlag(VisitFlag.DIAGNOSED, rs.getString(6)));\r\n            } else {\r\n                lastId = rs.getLong(2);\r\n                temp = loader.loadSingle(rs);\r\n                temp.addVisitFlag(new VisitFlag(VisitFlag.DIAGNOSED, rs.getString(6)));\r\n                temp.addVisitFlag(new VisitFlag(VisitFlag.LAST_VISIT, rs.getString(7)));\r\n                patients.add(temp);\r\n            }\r\n        } \r\n        return patients;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3129, "methodname":"getFluShotDelinquents(long)", "methodnamerefined":"getFluShotDelinquents", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.getFluShotDelinquents", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.getFluShotDelinquents(long)", "classid":420, "classname":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO", "shortclassname":"VisitRemindersDAO", "method":"/**\r\n * Returns a list of old people who need a flu shot\r\n *\r\n * CURRENT SPEC: Alive patient, over 50 years old, no flu shot - 90656, 90658, 90660 a) during the months\r\n * 09 - 12 of current calendar year if in 09 - 12 b) during the months 09 - 12 of last calendar year if\r\n * not in 09 - 12\r\n *\r\n * Determines current date and calls one of two private methods these methods return different sets of\r\n * people - a: people who havent had a flu shot yet this year and need one - b: people who missed last\r\n * years flu shot and need a check-up\r\n *\r\n * @return A java.util.List of Visit Reminder Forms.\r\n * @param hcpid\r\n * \t\tThe MID of the HCP in question.\r\n * @param patientBirthday\r\n * \t\tThe birthday of the patient in question.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<VisitReminderReturnForm> getFluShotDelinquents(long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs = null;\r\n    /* Fall 2007 Bug Fix: Use the correct range for a zero-based calendar (eg January is 0) */\r\n    boolean thisYear = DateUtil.currentlyInMonthRange(8, 11);\r\n    String flagType = (thisYear) ? VisitFlag.MISSING_MEDICATION : VisitFlag.MISSED_MEDICATION;\r\n    Date september = new Date(0L);\r\n    Date december = new Date(0L);\r\n    DateUtil.setSQLMonthRange(september, 8, (thisYear ? 0 : 1), december, 11, (thisYear ? 0 : 1));\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT DISTINCT \" + ((((((((((((\"? as hid, p.mid as patientid, p.lastname, p.firstname, p.phone \" + \"FROM officevisits ov, patients p \") + \"WHERE (ov.patientid=p.mid \") + \"OR p.mid NOT IN (SELECT ov.patientid FROM officevisits ov)) \") + \"AND p.dateofdeath IS NULL \") + \"AND p.dateofbirth < DATE_SUB(CURDATE(), INTERVAL 50 YEAR) \") + \"AND p.mid NOT IN \") + \"(SELECT patientid AS mid FROM officevisits ov, ovprocedure op \") + \"WHERE ov.id=op.visitid \") + \"AND CPTCode IN (90656, 90658, 90660) \") + \"AND ((ov.visitdate BETWEEN ? AND ?) \") + \"OR (ov.visitdate BETWEEN ? AND ?))) \") + \"ORDER BY lastname, firstname, p.mid\")));\r\n        // ps = conn.prepareStatement(\"SELECT DISTINCT \"\r\n        // + \"? as hid, ov.patientid, p.lastname, p.firstname, \" + \"p.phone1, p.phone2, p.phone3 \"\r\n        // + \"FROM OfficeVisits ov, Patients p \" + \"WHERE ov.patientid=p.mid \"\r\n        // + \"AND p.dateofdeath IS NULL \"\r\n        // + \"AND p.dateofbirth < DATE_SUB(CURDATE(), INTERVAL 50 YEAR) \" + \"AND patientid NOT IN \"\r\n        // + \"(SELECT patientid FROM OfficeVisits ov, OVMedication om \" + \"WHERE ov.id=om.visitid \"\r\n        // + \"AND NDCode IN (90656, 90658, 90660) \" + \"AND ((StartDate BETWEEN ? AND ?) \"\r\n        // + \"OR (EndDate BETWEEN ? AND ?))) \" + \"ORDER BY lastname, firstname, ov.patientid\");\r\n        ps.setLong(1, hcpid);\r\n        ps.setDate(2, september);\r\n        ps.setDate(3, december);\r\n        ps.setDate(4, september);\r\n        ps.setDate(5, december);\r\n        rs = ps.executeQuery();\r\n        List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();\r\n        VisitReminderReturnForm temp;\r\n        VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\r\n        while (rs.next()) {\r\n            temp = loader.loadSingle(rs);\r\n            temp.addVisitFlag(new VisitFlag(flagType, \"Flu Shot\"));\r\n            patients.add(temp);\r\n        } \r\n        return patients;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3130, "methodname":"getPatients(long)", "methodnamerefined":"getPatients", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.getPatients", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.getPatients(long)", "classid":420, "classname":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO", "shortclassname":"VisitRemindersDAO", "method":"/**\r\n * Returns a list of patients associated with a given HCP.\r\n *\r\n * @param hcpid\r\n * \t\tThe MID of the HCP in question.\r\n * @return A java.util.List of Visit Reminder Forms.\r\n */\r\npublic List<VisitReminderReturnForm> getPatients(long hcpid) throws DBException {\r\n    VisitReminderReturnForm temp;\r\n    VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\r\n    List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT DISTINCT\" + (((((((((((((((\"       ? as hid, \" + \"       dhcp.patientid, \") + \"       p.lastName, \") + \"       p.firstName, \") + \"       p.phone \") + \"  FROM \") + \"       patients p, \") + \"       declaredhcp dhcp \") + \" WHERE \") + \"\t\tdhcp.hcpid = ? \") + \" AND \") + \"     p.MID = dhcp.patientid \") + \" AND \") + \"\t\tp.dateofdeath is null \") + \" AND \") + \"     p.dateofbirth > DATE_SUB(CURDATE(), INTERVAL 19 YEAR) \")));\r\n        ps.setLong(1, hcpid);\r\n        ps.setLong(2, hcpid);\r\n        rs = ps.executeQuery();\r\n        while (rs.next()) {\r\n            temp = loader.loadSingle(rs);\r\n            patients.add(temp);\r\n        } \r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return patients;\r\n}"},
 {"id":3131, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic WardDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3132, "methodname":"addWard(edu.ncsu.csc.itrust.beans.WardBean)", "methodnamerefined":"addWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWard", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWard(edu.ncsu.csc.itrust.beans.WardBean)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Adds a Ward\r\n *\r\n * @param ward\r\n * \t\tThe WardBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addWard(WardBean ward) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO Wards (RequiredSpecialty, InHospital) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, ward.getRequiredSpecialty());\r\n        ps.setLong(2, ward.getInHospital());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Ward already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3133, "methodname":"addWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)", "methodnamerefined":"addWardRoom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWardRoom", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Adds a WardRoom\r\n *\r\n * @param wardRoom\r\n * \t\tThe WardRoomBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addWardRoom(WardRoomBean wardRoom) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO WardRooms (InWard, RoomName, Status) \" + \"VALUES (?,?,?)\"));\r\n        ps.setLong(1, wardRoom.getInWard());\r\n        ps.setString(2, wardRoom.getRoomName());\r\n        ps.setString(3, wardRoom.getStatus());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: WardRoom already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3134, "methodname":"assignHCPToWard(long,long)", "methodnamerefined":"assignHCPToWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.assignHCPToWard", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.assignHCPToWard(long,long)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Assigns an HCP to a the specified ward.\r\n *\r\n * @param hcpID\r\n * \t\tThe id of the HCP to assign\r\n * @param wardID\r\n * \t\tThe ward to assign the HCP to.\r\n * @return A boolean whether or not the insert worked correctly.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean assignHCPToWard(long hcpID, long wardID) throws iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO HCPAssignedToWard (HCP, WARD) Values(?,?)\");\r\n        ps.setLong(1, hcpID);\r\n        ps.setLong(2, wardID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: HCP or WARD ID dont exist!\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3135, "methodname":"checkOutPatientReason(long,java.lang.String)", "methodnamerefined":"checkOutPatientReason", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.checkOutPatientReason", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.checkOutPatientReason(long,java.lang.String)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Logs the checkout reason for a patient\r\n *\r\n * @param mid\r\n * \t\tThe mid of the Patient checking out\r\n * @param reason\r\n * \t\tThe reason the patient is being checked out.\r\n * @return Whether 1 patient was inserted\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean checkOutPatientReason(long mid, String reason) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO WardRoomCheckout (PID, Reason) Values(?,?)\");\r\n        ps.setLong(1, mid);\r\n        ps.setString(2, reason);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3136, "methodname":"getAllHCPsAssignedToWard(long)", "methodnamerefined":"getAllHCPsAssignedToWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllHCPsAssignedToWard", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllHCPsAssignedToWard(long)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Returns a list of all HCPs assigned to a ward sorted alphabetically\r\n *\r\n * @param id\r\n * \t\tThe id of the ward to get HCPs for\r\n * @return A java.util.List of PersonnelBean that represent the HCPs assigned to a ward.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<PersonnelBean> getAllHCPsAssignedToWard(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM HCPAssignedToWard haw INNER JOIN Personnel p WHERE haw.HCP = p.MID AND WARD = ? ORDER BY lastName\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3137, "methodname":"getAllWardRoomsByWardID(long)", "methodnamerefined":"getAllWardRoomsByWardID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllWardRoomsByWardID", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllWardRoomsByWardID(long)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Returns a list of all wardrooms under a ward sorted alphabetically\r\n *\r\n * @param id\r\n * \t\tThe id of the ward to get all rooms for\r\n * @return A java.util.List of all WardRoomBeans in a ward.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<WardRoomBean> getAllWardRoomsByWardID(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM WARDROOMS WHERE InWard = ? ORDER BY RoomName\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return wardRoomLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3138, "methodname":"getAllWardsByHCP(long)", "methodnamerefined":"getAllWardsByHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllWardsByHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllWardsByHCP(long)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Returns a list of all wards assigned to a HCP sorted alphabetically\r\n *\r\n * @param id\r\n * \t\tThe id of the HCP to get wards for\r\n * @return A java.util.List of all WardBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<WardBean> getAllWardsByHCP(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM HCPAssignedToWard haw INNER JOIN Wards w WHERE HCP = ? AND haw.ward = w.wardid ORDER BY RequiredSpecialty\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return wardLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3139, "methodname":"getAllWardsByHospitalID(java.lang.String)", "methodnamerefined":"getAllWardsByHospitalID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllWardsByHospitalID", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getAllWardsByHospitalID(java.lang.String)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Returns a list of all wards under a hospital sorted alphabetically\r\n *\r\n * @param id\r\n * \t\tThe ID of the hospital to get wards from\r\n * @return A java.util.List of WardBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<WardBean> getAllWardsByHospitalID(String id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM WARDS WHERE InHospital = ? ORDER BY RequiredSpecialty\");\r\n        ps.setString(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        return wardLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3140, "methodname":"getHospitalByPatientID(long)", "methodnamerefined":"getHospitalByPatientID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getHospitalByPatientID", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getHospitalByPatientID(long)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Returns the hospital that the specified user is located in\r\n *\r\n * @param pid\r\n * \t\tThe id of the user to get the hospital for\r\n * @return The HospitalBean that the specified patient is located in.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic HospitalBean getHospitalByPatientID(long pid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals h inner join wards ward inner join wardrooms room where room.OccupiedBy = ? and room.inward = ward.wardid and ward.inhospital = h.hospitalid\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return hospitalLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3141, "methodname":"getHospitalByWard(java.lang.String)", "methodnamerefined":"getHospitalByWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getHospitalByWard", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getHospitalByWard(java.lang.String)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Returns the hospital that the specified ward room is located in\r\n *\r\n * @param wardRoomID\r\n * \t\tThe id of the ward room to get the hospital for\r\n * @return The HospitalBean that the specified ward room is located in.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic HospitalBean getHospitalByWard(String wardRoomID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM hospitals h inner join wards ward inner join wardrooms room where room.RoomID = ? and room.inward = ward.wardid and ward.inhospital = h.hospitalid\");\r\n        ps.setString(1, wardRoomID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return hospitalLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3142, "methodname":"getWard(java.lang.String)", "methodnamerefined":"getWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWard", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWard(java.lang.String)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Returns a Ward specified by the id\r\n *\r\n * @param wardID\r\n * \t\tThe id of the ward to get\r\n * @return A WardBean with the ID specified\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic WardBean getWard(String wardID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM wards where wardid = ?\");\r\n        ps.setString(1, wardID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return wardLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3143, "methodname":"getWardRoom(java.lang.String)", "methodnamerefined":"getWardRoom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWardRoom", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWardRoom(java.lang.String)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Returns a WardRoom specified by the id\r\n *\r\n * @param wardRoomID\r\n * \t\tThe id of the ward room to get\r\n * @return A WardRoomBean with the ID specified\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic WardRoomBean getWardRoom(String wardRoomID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM wardrooms where RoomID = ?\");\r\n        ps.setString(1, wardRoomID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return wardRoomLoader.loadSingle(rs);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3144, "methodname":"getWardRoomsByStatus(java.lang.String,java.lang.Long)", "methodnamerefined":"getWardRoomsByStatus", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWardRoomsByStatus", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.getWardRoomsByStatus(java.lang.String,java.lang.Long)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Returns a list of all wards with the status specified that the hcp has access to\r\n *\r\n * @param status\r\n * \t\tThe Status to search on\r\n * @param hcpID\r\n * \t\tThe id of the HCP to get wards for\r\n * @return A java.util.List of WardRoomBeans that the specified hcp has access too.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<WardRoomBean> getWardRoomsByStatus(String status, Long hcpID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM wardrooms wr inner join hcpassignedtoward hw where wr.status = ? and wr.inward = hw.ward and hw.hcp = ?\");\r\n        ps.setString(1, status);\r\n        ps.setLong(2, hcpID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return wardRoomLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3145, "methodname":"removeWard(long)", "methodnamerefined":"removeWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWard", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWard(long)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Removes a ward from a hospital. Returns whether or not any changes were made\r\n *\r\n * @param id\r\n * \t\tThe WardId of the Ward to remove.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean removeWard(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM Wards WHERE WardID = ?\");\r\n        ps.setLong(1, id);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3146, "methodname":"removeWard(long,long)", "methodnamerefined":"removeWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWard", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWard(long,long)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Removes a HCP and Ward association\r\n *\r\n * @param wardID\r\n * \t\tThe Ward ID of the Ward associated to the HCP.\r\n * @param hcpID\r\n * \t\tThe HCP ID of the HCP associated with the Ward.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean removeWard(long hcpID, long wardID) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM HCPAssignedToWard WHERE Ward = ? and hcp = ?\");\r\n        ps.setLong(1, wardID);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3147, "methodname":"removeWardRoom(long)", "methodnamerefined":"removeWardRoom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWardRoom", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.removeWardRoom(long)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Removes a room from a ward. Returns whether or not any changes were made\r\n *\r\n * @param id\r\n * \t\tThe RoomId of the Room to remove.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean removeWardRoom(long id) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM WardRooms WHERE RoomID = ?\");\r\n        ps.setLong(1, id);\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3148, "methodname":"updateWard(edu.ncsu.csc.itrust.beans.WardBean)", "methodnamerefined":"updateWard", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWard", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWard(edu.ncsu.csc.itrust.beans.WardBean)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Updates a particular wards information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param ward\r\n * \t\tThe WardBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateWard(WardBean ward) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wards SET RequiredSpecialty=?, InHospital=? \" + \"WHERE WardID = ?\"));\r\n        ps.setString(1, ward.getRequiredSpecialty());\r\n        ps.setLong(2, ward.getInHospital());\r\n        ps.setLong(3, ward.getWardID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3149, "methodname":"updateWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)", "methodnamerefined":"updateWardRoom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoom", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Updates a particular wardrooms information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param wardRoom\r\n * \t\tThe WardRoomBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateWardRoom(WardRoomBean wardRoom) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wardrooms SET InWard=?, RoomName=?, Status=? \" + \"WHERE RoomID = ?\"));\r\n        ps.setLong(1, wardRoom.getInWard());\r\n        ps.setString(2, wardRoom.getRoomName());\r\n        ps.setString(3, wardRoom.getStatus());\r\n        ps.setLong(4, wardRoom.getRoomID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3150, "methodname":"updateWardRoomOccupant(edu.ncsu.csc.itrust.beans.WardRoomBean)", "methodnamerefined":"updateWardRoomOccupant", "methodabbreviation":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoomOccupant", "fullmethod":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoomOccupant(edu.ncsu.csc.itrust.beans.WardRoomBean)", "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "shortclassname":"WardDAO", "method":"/**\r\n * Updates a particular wardrooms occupiedBy information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param wardRoom\r\n * \t\tThe WardRoomBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateWardRoomOccupant(WardRoomBean wardRoom) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wardRooms SET OccupiedBy=? \" + \"WHERE RoomID = ?\"));\r\n        if ((wardRoom.getOccupiedBy()) == null) {\r\n            ps.setNull(1, Types.BIGINT);\r\n        } else {\r\n            ps.setLong(1, wardRoom.getOccupiedBy());\r\n        }\r\n        ps.setLong(2, wardRoom.getRoomID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3151, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.-init-()", "classid":422, "classname":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest", "shortclassname":"AddOfficeVisitTest", "method":"AddOfficeVisitTest() {\r\n}"},
 {"id":3152, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.setUp()", "classid":422, "classname":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest", "shortclassname":"AddOfficeVisitTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.patient1();\r\n    gen.officeVisit1();\r\n}"},
 {"id":3153, "methodname":"testAddNewOfficeVisit()", "methodnamerefined":"testAddNewOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.testAddNewOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.testAddNewOfficeVisit()", "classid":422, "classname":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest", "shortclassname":"AddOfficeVisitTest", "method":"public void testAddNewOfficeVisit() throws Exception {\r\n    OfficeVisitBean ovPut = new OfficeVisitBean();\r\n    long newOVID = ovDAO.add(ovPut);\r\n    OfficeVisitBean ovGet = ovDAO.getOfficeVisit(newOVID);\r\n    assertEquals(newOVID, ovGet.getVisitID());\r\n}"},
 {"id":3154, "methodname":"testGetEmptyOfficeVisit()", "methodnamerefined":"testGetEmptyOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.testGetEmptyOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.testGetEmptyOfficeVisit()", "classid":422, "classname":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest", "shortclassname":"AddOfficeVisitTest", "method":"public void testGetEmptyOfficeVisit() throws Exception {\r\n    assertNull(ovDAO.getOfficeVisit(0L));\r\n}"},
 {"id":3155, "methodname":"testGetOfficeVisit()", "methodnamerefined":"testGetOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.testGetOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest.testGetOfficeVisit()", "classid":422, "classname":"edu.ncsu.csc.itrust.dao.officevisit.AddOfficeVisitTest", "shortclassname":"AddOfficeVisitTest", "method":"public void testGetOfficeVisit() {\r\n    try {\r\n        OfficeVisitBean ov = ovDAO.getOfficeVisit(1);\r\n        assertEquals(1, ov.getVisitID());\r\n        assertEquals(9000000000L, ov.getHcpID());\r\n        assertEquals(\"Generated for Death for Patient: 1\", ov.getNotes());\r\n        assertEquals(1, ov.getPatientID());\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":3156, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.-init-()", "classid":423, "classname":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest", "shortclassname":"EditPrescriptionsTest", "method":"EditPrescriptionsTest() {\r\n}"},
 {"id":3157, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.setUp()", "classid":423, "classname":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest", "shortclassname":"EditPrescriptionsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.ndCodes();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n    epa = new EditPrescriptionsAction(TestDAOFactory.getTestInstance(), 9000000000L, \"2\", \"955\");\r\n}"},
 {"id":3158, "methodname":"testEditDosage()", "methodnamerefined":"testEditDosage", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.testEditDosage", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.testEditDosage()", "classid":423, "classname":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest", "shortclassname":"EditPrescriptionsTest", "method":"public void testEditDosage() throws Exception {\r\n    pres = prDAO.getList(955).get(0);\r\n    assertEquals(5, pres.getDosage());\r\n    pres.setDosage(10);\r\n    epa.editPrescription(pres);\r\n    pres.setDosage(1);\r\n    pres = prDAO.getList(955).get(0);\r\n    assertEquals(10, pres.getDosage());\r\n}"},
 {"id":3159, "methodname":"testEditInstructions()", "methodnamerefined":"testEditInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.testEditInstructions", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.testEditInstructions()", "classid":423, "classname":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest", "shortclassname":"EditPrescriptionsTest", "method":"public void testEditInstructions() throws Exception {\r\n    pres = prDAO.getList(955).get(0);\r\n    assertEquals(\"Take twice daily\", pres.getInstructions());\r\n    pres.setInstructions(\"Take thrice daily\");\r\n    epa.editPrescription(pres);\r\n    pres.setInstructions(\"fail\");\r\n    pres = prDAO.getList(955).get(0);\r\n    assertEquals(\"Take thrice daily\", pres.getInstructions());\r\n}"},
 {"id":3160, "methodname":"testEditVisitID()", "methodnamerefined":"testEditVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.testEditVisitID", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest.testEditVisitID()", "classid":423, "classname":"edu.ncsu.csc.itrust.dao.officevisit.EditPrescriptionsTest", "shortclassname":"EditPrescriptionsTest", "method":"public void testEditVisitID() throws Exception {\r\n    pres = prDAO.getList(955).get(0);\r\n    assertEquals(5, pres.getDosage());\r\n    pres.setDosage(6001);\r\n    pres.setVisitID(11);\r\n    epa.editPrescription(pres);\r\n    pres = prDAO.getList(11).get(0);\r\n    assertEquals(6001, pres.getDosage());\r\n}"},
 {"id":3161, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.-init-()", "classid":424, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest", "shortclassname":"GetAllOfficeVisitsTest", "method":"GetAllOfficeVisitsTest() {\r\n}"},
 {"id":3162, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.setUp()", "classid":424, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest", "shortclassname":"GetAllOfficeVisitsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n}"},
 {"id":3163, "methodname":"testGetAllVisitsWithNoSurvey()", "methodnamerefined":"testGetAllVisitsWithNoSurvey", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.testGetAllVisitsWithNoSurvey", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.testGetAllVisitsWithNoSurvey()", "classid":424, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest", "shortclassname":"GetAllOfficeVisitsTest", "method":"public void testGetAllVisitsWithNoSurvey() throws Exception {\r\n    List<OfficeVisitBean> visits = ovDAO.getOfficeVisitsWithNoSurvey(2L);\r\n    assertEquals(7, visits.size());\r\n}"},
 {"id":3164, "methodname":"testVisitsFor1()", "methodnamerefined":"testVisitsFor1", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.testVisitsFor1", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.testVisitsFor1()", "classid":424, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest", "shortclassname":"GetAllOfficeVisitsTest", "method":"public void testVisitsFor1() throws Exception {\r\n    List<OfficeVisitBean> visits = ovDAO.getAllOfficeVisits(1L);\r\n    assertEquals(1, visits.size());\r\n}"},
 {"id":3165, "methodname":"testVisitsFor2()", "methodnamerefined":"testVisitsFor2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.testVisitsFor2", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.testVisitsFor2()", "classid":424, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest", "shortclassname":"GetAllOfficeVisitsTest", "method":"public void testVisitsFor2() throws Exception {\r\n    List<OfficeVisitBean> visits = ovDAO.getAllOfficeVisits(2L);\r\n    assertEquals(9, visits.size());\r\n    assertEquals(955, visits.get(0).getID());\r\n    assertEquals(9000000000L, visits.get(0).getHcpID());\r\n    assertEquals(2L, visits.get(0).getPatientID());\r\n    assertEquals(\"1\", visits.get(0).getHospitalID());\r\n    assertEquals(\"Yet another office visit.\", visits.get(0).getNotes());\r\n    // Note that that \"all office visits\" doesnt return the procedures, etc. since its not needed (yet)\r\n    // assertEquals(0, visits.get(0).getDiagnoses().size());\r\n    // assertEquals(0, visits.get(0).getProcedures().size());\r\n    // assertEquals(0, visits.get(0).getProcedures().size());\r\n    // Now check the order\r\n    assertEquals(952L, visits.get(1).getID());\r\n    assertEquals(959L, visits.get(2).getID());\r\n}"},
 {"id":3166, "methodname":"testVisitsForHCP0()", "methodnamerefined":"testVisitsForHCP0", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.testVisitsForHCP0", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest.testVisitsForHCP0()", "classid":424, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetAllOfficeVisitsTest", "shortclassname":"GetAllOfficeVisitsTest", "method":"public void testVisitsForHCP0() throws Exception {\r\n    List<OfficeVisitBean> visits = ovDAO.getAllOfficeVisitsForLHCP(9000000000L);\r\n    assertEquals(10, visits.size());\r\n}"},
 {"id":3167, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.-init-()", "classid":425, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"GetPrescriptionsTest() {\r\n}"},
 {"id":3168, "methodname":"assertPrescription(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)", "methodnamerefined":"assertPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)", "classid":425, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"private void assertPrescription(PrescriptionReportBean prescription) {\r\n    assertEquals(\"009042407\", prescription.getPrescription().getMedication().getNDCode());\r\n    assertEquals(\"Tetracycline\", prescription.getPrescription().getMedication().getDescription());\r\n    assertEquals(955L, prescription.getPrescription().getVisitID());\r\n    assertEquals(5, prescription.getPrescription().getDosage());\r\n    assertEquals(\"10/10/2006\", prescription.getPrescription().getStartDateStr());\r\n    assertEquals(\"10/11/2006\", prescription.getPrescription().getEndDateStr());\r\n    assertEquals(\"Take twice daily\", prescription.getPrescription().getInstructions());\r\n    assertEquals(9000000000L, prescription.getOfficeVisit().getHcpID());\r\n    assertEquals(\"1\", prescription.getOfficeVisit().getHospitalID());\r\n    assertEquals(2L, prescription.getOfficeVisit().getPatientID());\r\n    assertEquals(\"06/10/2007\", prescription.getOfficeVisit().getVisitDateStr());\r\n}"},
 {"id":3169, "methodname":"assertPrescription2(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)", "methodnamerefined":"assertPrescription2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription2", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription2(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)", "classid":425, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"private void assertPrescription2(PrescriptionReportBean prescription) {\r\n    assertEquals(\"647641512\", prescription.getPrescription().getMedication().getNDCode());\r\n    assertEquals(\"Prioglitazone\", prescription.getPrescription().getMedication().getDescription());\r\n    assertEquals(955L, prescription.getPrescription().getVisitID());\r\n    assertEquals(5, prescription.getPrescription().getDosage());\r\n    assertEquals(\"10/10/2006\", prescription.getPrescription().getStartDateStr());\r\n    assertEquals(\"10/11/2020\", prescription.getPrescription().getEndDateStr());\r\n    assertEquals(\"Take twice daily\", prescription.getPrescription().getInstructions());\r\n    assertEquals(9000000000L, prescription.getOfficeVisit().getHcpID());\r\n    assertEquals(\"1\", prescription.getOfficeVisit().getHospitalID());\r\n    assertEquals(2L, prescription.getOfficeVisit().getPatientID());\r\n    assertEquals(\"06/10/2007\", prescription.getOfficeVisit().getVisitDateStr());\r\n}"},
 {"id":3170, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.setUp()", "classid":425, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.hcp0();\r\n    gen.hospitals();\r\n    gen.ndCodes();\r\n}"},
 {"id":3171, "methodname":"testGetPrescriptions()", "methodnamerefined":"testGetPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.testGetPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.testGetPrescriptions()", "classid":425, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"public void testGetPrescriptions() throws Exception {\r\n    List<Long> ovIDs = Arrays.asList(955L, 952L);\r\n    List<PrescriptionReportBean> prescriptions = preportDAO.byOfficeVisitAndPatient(ovIDs, 2L);\r\n    for (int i = 0; i < 3; i++) {\r\n        if (prescriptions.get(i).getPrescription().getMedication().getNDCode().equals(\"009042407\")) {\r\n            assertPrescription(prescriptions.get(i));\r\n        } else\r\n            if (prescriptions.get(i).getPrescription().getMedication().getNDCode().equals(\"647641512\")) {\r\n                assertPrescription2(prescriptions.get(i));\r\n            } else {\r\n                fail(\"This prescription should not be in database\");\r\n            }\r\n\r\n    }\r\n}"},
 {"id":3172, "methodname":"testGetWithNotRightPID()", "methodnamerefined":"testGetWithNotRightPID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.testGetWithNotRightPID", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.testGetWithNotRightPID()", "classid":425, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"public void testGetWithNotRightPID() throws Exception {\r\n    List<Long> ovIDs = Arrays.asList(5L, 2L);\r\n    List<PrescriptionReportBean> prescriptions = preportDAO.byOfficeVisitAndPatient(ovIDs, 1L);// injection!\r\n\r\n    assertEquals(0, prescriptions.size());\r\n}"},
 {"id":3173, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.-init-()", "classid":426, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest", "shortclassname":"OVDiagnosesTest", "method":"OVDiagnosesTest() {\r\n}"},
 {"id":3174, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.setUp()", "classid":426, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest", "shortclassname":"OVDiagnosesTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patient_hcp_vists();\r\n    gen.hcp_diagnosis_data();\r\n}"},
 {"id":3175, "methodname":"testAddBadDiagnosis()", "methodnamerefined":"testAddBadDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testAddBadDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testAddBadDiagnosis()", "classid":426, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest", "shortclassname":"OVDiagnosesTest", "method":"public void testAddBadDiagnosis() throws Exception {\r\n    DiagnosisBean bean = new DiagnosisBean();\r\n    bean.setVisitID((-1));\r\n    bean.setICDCode(null);\r\n    try {\r\n        diagDAO.add(bean);\r\n        fail(\"expected an exception\");\r\n    } catch (DBException e) {\r\n    }\r\n}"},
 {"id":3176, "methodname":"testAddRemoveOneOVDiagnosis()", "methodnamerefined":"testAddRemoveOneOVDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testAddRemoveOneOVDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testAddRemoveOneOVDiagnosis()", "classid":426, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest", "shortclassname":"OVDiagnosesTest", "method":"public void testAddRemoveOneOVDiagnosis() throws Exception {\r\n    assertEquals(\"no current diagnoses on office vist 1\", 0, diagDAO.getList(1).size());\r\n    DiagnosisBean bean = new DiagnosisBean();\r\n    bean.setICDCode(\"250.1\");\r\n    bean.setVisitID(1);\r\n    long ovDID = diagDAO.add(bean);\r\n    List<DiagnosisBean> diagnoses = diagDAO.getList(1);\r\n    assertEquals(\"now theres 1\", 1, diagnoses.size());\r\n    assertEquals(\"test the description\", \"Diabetes with ketoacidosis\", diagnoses.get(0).getDescription());\r\n    diagDAO.remove(ovDID);\r\n    assertEquals(\"now theres none\", 0, diagDAO.getList(1).size());\r\n}"},
 {"id":3177, "methodname":"testEditBadDiagnosis()", "methodnamerefined":"testEditBadDiagnosis", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testEditBadDiagnosis", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testEditBadDiagnosis()", "classid":426, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest", "shortclassname":"OVDiagnosesTest", "method":"public void testEditBadDiagnosis() throws Exception {\r\n    DiagnosisBean bean = new DiagnosisBean();\r\n    bean.setVisitID((-1));\r\n    bean.setICDCode(null);\r\n    try {\r\n        diagDAO.edit(bean);\r\n        // fail(\"expected an exception\");\r\n    } catch (DBException e) {\r\n    }\r\n}"},
 {"id":3178, "methodname":"testFindEarliestIncident()", "methodnamerefined":"testFindEarliestIncident", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testFindEarliestIncident", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testFindEarliestIncident()", "classid":426, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest", "shortclassname":"OVDiagnosesTest", "method":"public void testFindEarliestIncident() throws Exception {\r\n    Date earliest = diagDAO.findEarliestIncident(\"487.00\");\r\n    assertEquals(new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"10/10/2005\"), earliest);\r\n}"},
 {"id":3179, "methodname":"testGetStatisticsValid()", "methodnamerefined":"testGetStatisticsValid", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testGetStatisticsValid", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testGetStatisticsValid()", "classid":426, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest", "shortclassname":"OVDiagnosesTest", "method":"public void testGetStatisticsValid() throws Exception {\r\n    Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"06/28/2011\");\r\n    Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"09/28/2011\");\r\n    DiagnosisStatisticsBean dsBean = diagDAO.getDiagnosisCounts(\"487.00\", \"27607\", lower, upper);\r\n    assertEquals(3, dsBean.getZipStats());\r\n    assertEquals(5, dsBean.getRegionStats());\r\n}"},
 {"id":3180, "methodname":"testGetWeeklyStatisticsValid()", "methodnamerefined":"testGetWeeklyStatisticsValid", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testGetWeeklyStatisticsValid", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testGetWeeklyStatisticsValid()", "classid":426, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest", "shortclassname":"OVDiagnosesTest", "method":"public void testGetWeeklyStatisticsValid() throws Exception {\r\n    Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"06/28/2011\");\r\n    Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"09/28/2011\");\r\n    List<DiagnosisStatisticsBean> db = diagDAO.getWeeklyCounts(\"487.00\", \"27607\", lower, upper);\r\n    assertEquals(new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"06/27/2011\"), db.get(0).getStartDate());\r\n    assertEquals(new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"07/03/2011\"), db.get(0).getEndDate());\r\n    assertEquals(new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"09/26/2011\"), db.get(((db.size()) - 1)).getStartDate());\r\n    long totalRegion = 0;\r\n    for (DiagnosisStatisticsBean d : db) {\r\n        totalRegion += d.getRegionStats();\r\n    }\r\n    // If previous test fails, this test may fail\r\n    long totalRegionNonsplit = diagDAO.getDiagnosisCounts(\"487.00\", \"27607\", lower, upper).getRegionStats();\r\n    assertEquals(totalRegionNonsplit, totalRegion);\r\n}"},
 {"id":3181, "methodname":"testMalaria()", "methodnamerefined":"testMalaria", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testMalaria", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest.testMalaria()", "classid":426, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVDiagnosesTest", "shortclassname":"OVDiagnosesTest", "method":"public void testMalaria() throws Exception {\r\n    DAOFactory factory = TestDAOFactory.getTestInstance();\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.malaria_epidemic();\r\n    ViewDiagnosisStatisticsAction a = new ViewDiagnosisStatisticsAction(factory);\r\n    assertTrue(a.isMalariaEpidemic((\"11/02/\" + (thisYear)), \"27607\", \"110\"));\r\n}"},
 {"id":3182, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.-init-()", "classid":427, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest", "shortclassname":"OVMedicationsTest", "method":"OVMedicationsTest() {\r\n}"},
 {"id":3183, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.setUp()", "classid":427, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest", "shortclassname":"OVMedicationsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.ndCodes();\r\n    gen.officeVisit1();\r\n    pres = new PrescriptionBean();\r\n    MedicationBean medication = new MedicationBean();\r\n    medication.setDescription(\"Tetracycline\");\r\n    medication.setNDCode(\"009042407\");\r\n    pres.setMedication(medication);\r\n    pres.setDosage(50);\r\n    pres.setStartDateStr(\"05/19/2007\");\r\n    pres.setEndDateStr(\"05/19/2010\");\r\n    pres.setVisitID(1L);\r\n    pres.setInstructions(\"Take twice daily\");\r\n    override = new OverrideReasonBean(\"00000\");\r\n}"},
 {"id":3184, "methodname":"testAddBadPrescription()", "methodnamerefined":"testAddBadPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testAddBadPrescription", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testAddBadPrescription()", "classid":427, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest", "shortclassname":"OVMedicationsTest", "method":"public void testAddBadPrescription() throws Exception {\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    bean.setVisitID((-1));\r\n    try {\r\n        dao.add(bean);\r\n        fail(\"Expected an exception.\");\r\n    } catch (DBException e) {\r\n    }\r\n}"},
 {"id":3185, "methodname":"testAddMultipleRemoveSingle()", "methodnamerefined":"testAddMultipleRemoveSingle", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testAddMultipleRemoveSingle", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testAddMultipleRemoveSingle()", "classid":427, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest", "shortclassname":"OVMedicationsTest", "method":"public void testAddMultipleRemoveSingle() throws Exception {\r\n    assertEquals(\"no current prescriptions on office vist 1\", 0, dao.getList(1).size());\r\n    long ovMedID = dao.add(pres);\r\n    dao.add(pres);\r\n    List<PrescriptionBean> meds = dao.getList(1);\r\n    assertEquals(\"now theres 2\", 2, meds.size());\r\n    assertEquals(pres, meds.get(0));\r\n    dao.remove(ovMedID);\r\n    assertEquals(\"now theres one\", 1, dao.getList(1).size());\r\n}"},
 {"id":3186, "methodname":"testAddRemoveOneOVPrescription()", "methodnamerefined":"testAddRemoveOneOVPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testAddRemoveOneOVPrescription", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testAddRemoveOneOVPrescription()", "classid":427, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest", "shortclassname":"OVMedicationsTest", "method":"public void testAddRemoveOneOVPrescription() throws Exception {\r\n    assertEquals(\"no current prescriptions on office vist 1\", 0, dao.getList(1).size());\r\n    long ovMedID = dao.add(pres);\r\n    List<PrescriptionBean> meds = dao.getList(1);\r\n    assertEquals(\"now theres 1\", 1, meds.size());\r\n    assertEquals(pres, meds.get(0));\r\n    dao.remove(ovMedID);\r\n    assertEquals(\"now theres none\", 0, dao.getList(1).size());\r\n}"},
 {"id":3187, "methodname":"testOverridePrescription()", "methodnamerefined":"testOverridePrescription", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testOverridePrescription", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testOverridePrescription()", "classid":427, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest", "shortclassname":"OVMedicationsTest", "method":"public void testOverridePrescription() throws Exception {\r\n    long ovMedID = dao.add(pres);\r\n    assertEquals(\"no current overrides on office visit 1\", 0, overrideDAO.getList(ovMedID).size());\r\n    override.setPresID(ovMedID);\r\n    overrideDAO.add(override);\r\n    List<OverrideReasonBean> overrides = overrideDAO.getList(ovMedID);\r\n    assertEquals(\"now theres 1\", 1, overrides.size());\r\n    assertEquals(override.getORCode(), overrides.get(0).getORCode());\r\n    overrideDAO.remove(ovMedID);\r\n    assertEquals(\"now theres none\", 0, overrideDAO.getList(ovMedID).size());\r\n}"},
 {"id":3188, "methodname":"testRemoveNonExistant()", "methodnamerefined":"testRemoveNonExistant", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testRemoveNonExistant", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest.testRemoveNonExistant()", "classid":427, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVMedicationsTest", "shortclassname":"OVMedicationsTest", "method":"public void testRemoveNonExistant() throws Exception {\r\n    assertEquals(\"no current prescriptions on office vist 1\", 0, dao.getList(1).size());\r\n    dao.remove(50L);\r\n    assertEquals(\"no current prescriptions on office vist 1\", 0, dao.getList(1).size());\r\n}"},
 {"id":3189, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.-init-()", "classid":428, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest", "shortclassname":"OVProceduresTest", "method":"OVProceduresTest() {\r\n}"},
 {"id":3190, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.setUp()", "classid":428, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest", "shortclassname":"OVProceduresTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.cptCodes();\r\n    gen.officeVisit1();\r\n}"},
 {"id":3191, "methodname":"testAddBadProcedure()", "methodnamerefined":"testAddBadProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.testAddBadProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.testAddBadProcedure()", "classid":428, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest", "shortclassname":"OVProceduresTest", "method":"public void testAddBadProcedure() throws Exception {\r\n    ProcedureBean bean = new ProcedureBean();\r\n    bean.setVisitID((-1));\r\n    bean.setCPTCode(null);\r\n    try {\r\n        procDAO.add(bean);\r\n        fail(\"expected an exception\");\r\n    } catch (DBException e) {\r\n    }\r\n}"},
 {"id":3192, "methodname":"testAddRemoveOneOVProcedure()", "methodnamerefined":"testAddRemoveOneOVProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.testAddRemoveOneOVProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.testAddRemoveOneOVProcedure()", "classid":428, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest", "shortclassname":"OVProceduresTest", "method":"public void testAddRemoveOneOVProcedure() throws Exception {\r\n    assertEquals(\"no current procedures on office vist 1\", 0, procDAO.getList(1).size());\r\n    ProcedureBean bean = new ProcedureBean();\r\n    bean.setVisitID(1);\r\n    bean.setCPTCode(\"1270F\");\r\n    long ovPID = procDAO.add(bean);\r\n    List<ProcedureBean> procs = procDAO.getList(1);\r\n    assertEquals(\"now theres 1\", 1, procs.size());\r\n    assertEquals(\"test the description\", \"Injection procedure\", procs.get(0).getDescription());\r\n    procDAO.remove(ovPID);\r\n    assertEquals(\"now theres none\", 0, procDAO.getList(1).size());\r\n}"},
 {"id":3193, "methodname":"testEditBadProcedure()", "methodnamerefined":"testEditBadProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.testEditBadProcedure", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest.testEditBadProcedure()", "classid":428, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OVProceduresTest", "shortclassname":"OVProceduresTest", "method":"public void testEditBadProcedure() throws Exception {\r\n    ProcedureBean bean = new ProcedureBean();\r\n    bean.setVisitID((-1));\r\n    bean.setCPTCode(null);\r\n    try {\r\n        procDAO.edit(bean);\r\n        fail(\"expected an exception\");\r\n    } catch (DBException e) {\r\n    }\r\n}"},
 {"id":3194, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.-init-()", "classid":429, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest", "shortclassname":"OfficeVisitDAOExceptionTest", "method":"OfficeVisitDAOExceptionTest() {\r\n}"},
 {"id":3195, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.setUp()", "classid":429, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest", "shortclassname":"OfficeVisitDAOExceptionTest", "method":"// private DiagnosesDAO evilDAO = EvilDAOFactory.getEvilInstance().getDiagnosesDAO();\r\n@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3196, "methodname":"testAddException()", "methodnamerefined":"testAddException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testAddException", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testAddException()", "classid":429, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest", "shortclassname":"OfficeVisitDAOExceptionTest", "method":"public void testAddException() throws Exception {\r\n    try {\r\n        evilDAO.add(new OfficeVisitBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3197, "methodname":"testCheckOVExistsException()", "methodnamerefined":"testCheckOVExistsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testCheckOVExistsException", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testCheckOVExistsException()", "classid":429, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest", "shortclassname":"OfficeVisitDAOExceptionTest", "method":"/* public void testAddDiagToOVException() throws Exception {\ntry {\nevilDAO.addDiagnosisToOfficeVisit(0.0, 0L);\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\n/* public void testAddPresException() throws Exception {\ntry {\nevilDAO.addPrescription(new PrescriptionBean());\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\n/* public void testAddProcToOVException() throws Exception {\ntry {\nevilDAO.addProcedureToOfficeVisit(\"\", 0L, \"\");\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\npublic void testCheckOVExistsException() throws Exception {\r\n    try {\r\n        evilDAO.checkOfficeVisitExists(0L, 0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3198, "methodname":"testGetAllOVsException()", "methodnamerefined":"testGetAllOVsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testGetAllOVsException", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testGetAllOVsException()", "classid":429, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest", "shortclassname":"OfficeVisitDAOExceptionTest", "method":"public void testGetAllOVsException() throws Exception {\r\n    try {\r\n        evilDAO.getAllOfficeVisits(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3199, "methodname":"testGetOVException()", "methodnamerefined":"testGetOVException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testGetOVException", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testGetOVException()", "classid":429, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest", "shortclassname":"OfficeVisitDAOExceptionTest", "method":"/* public void testGetDiagnosesException() throws Exception {\ntry {\nevilDAO.getDiagnoses(0L);\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\npublic void testGetOVException() throws Exception {\r\n    try {\r\n        evilDAO.getOfficeVisit(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3200, "methodname":"testUpdateOVException()", "methodnamerefined":"testUpdateOVException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testUpdateOVException", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest.testUpdateOVException()", "classid":429, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitDAOExceptionTest", "shortclassname":"OfficeVisitDAOExceptionTest", "method":"/* public void testGetPrescriptionReportsException() throws Exception {\ntry {\nevilDAO.getPrescriptionReports(new ArrayList<Long>(), 0L);\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\n/* public void testGetPrescriptionsException() throws Exception {\ntry {\nevilDAO.getPrescriptions(0L);\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\n/* public void testGetProceduresException() throws Exception {\ntry {\nevilDAO.getProcedures(0L);\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\n/* public void testRemoveDiagnosisFromOVException() throws Exception {\ntry {\nevilDAO.removeDiagnosisFromOfficeVisit(0L);\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\n/* public void testRemovePrescriptionException() throws Exception {\ntry {\nevilDAO.removePrescription(0L);\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\n/* public void testRemoveProcedureFromOVException() throws Exception {\ntry {\nevilDAO.removeProcedureFromOfficeVisit(0L);\nfail(\"DBException should have been thrown\");\n} catch (DBException e) {\nassertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\n}\n}\n */\r\npublic void testUpdateOVException() throws Exception {\r\n    try {\r\n        evilDAO.update(new OfficeVisitBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3201, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest.-init-()", "classid":430, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest", "shortclassname":"OfficeVisitExistsTest", "method":"OfficeVisitExistsTest() {\r\n}"},
 {"id":3202, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest.setUp()", "classid":430, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest", "shortclassname":"OfficeVisitExistsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n}"},
 {"id":3203, "methodname":"testDoesNotExist()", "methodnamerefined":"testDoesNotExist", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest.testDoesNotExist", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest.testDoesNotExist()", "classid":430, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest", "shortclassname":"OfficeVisitExistsTest", "method":"public void testDoesNotExist() throws Exception {\r\n    assertFalse(ovDAO.checkOfficeVisitExists(500, 1));\r\n}"},
 {"id":3204, "methodname":"testExists()", "methodnamerefined":"testExists", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest.testExists", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest.testExists()", "classid":430, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitExistsTest", "shortclassname":"OfficeVisitExistsTest", "method":"public void testExists() throws Exception {\r\n    new TestDataGenerator().officeVisit1();\r\n    assertTrue(ovDAO.checkOfficeVisitExists(1, 1));\r\n    // wrong patient\r\n    assertFalse(ovDAO.checkOfficeVisitExists(1, 2));\r\n}"},
 {"id":3205, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitsFromHospitalTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitsFromHospitalTest.-init-()", "classid":431, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitsFromHospitalTest", "shortclassname":"OfficeVisitsFromHospitalTest", "method":"OfficeVisitsFromHospitalTest() {\r\n}"},
 {"id":3206, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitsFromHospitalTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitsFromHospitalTest.setUp()", "classid":431, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitsFromHospitalTest", "shortclassname":"OfficeVisitsFromHospitalTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient3();\r\n}"},
 {"id":3207, "methodname":"testGetOfficeVisitsFromHospital()", "methodnamerefined":"testGetOfficeVisitsFromHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitsFromHospitalTest.testGetOfficeVisitsFromHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitsFromHospitalTest.testGetOfficeVisitsFromHospital()", "classid":431, "classname":"edu.ncsu.csc.itrust.dao.officevisit.OfficeVisitsFromHospitalTest", "shortclassname":"OfficeVisitsFromHospitalTest", "method":"public void testGetOfficeVisitsFromHospital() throws Exception {\r\n    List<OfficeVisitBean> hospitalVisits = ovDAO.getOfficeVisitsFromHospital(\"1\");\r\n    assertEquals(8, hospitalVisits.size());\r\n    assertEquals(959, hospitalVisits.get(0).getID());\r\n    assertEquals(958, hospitalVisits.get(1).getID());\r\n    assertEquals(957, hospitalVisits.get(2).getID());\r\n    assertEquals(952, hospitalVisits.get(7).getID());\r\n    assertEquals(\"1\", hospitalVisits.get(0).getHospitalID());\r\n    assertEquals(\"1\", hospitalVisits.get(7).getHospitalID());\r\n    assertEquals(2, hospitalVisits.get(0).getPatientID());\r\n    assertEquals(9000000000L, hospitalVisits.get(0).getHcpID());\r\n}"},
 {"id":3208, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest.-init-()", "classid":432, "classname":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest", "shortclassname":"PrescriptionOverrideDAOExceptionTest", "method":"PrescriptionOverrideDAOExceptionTest() {\r\n}"},
 {"id":3209, "methodname":"testAdd()", "methodnamerefined":"testAdd", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest.testAdd", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest.testAdd()", "classid":432, "classname":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest", "shortclassname":"PrescriptionOverrideDAOExceptionTest", "method":"public void testAdd() {\r\n    try {\r\n        evilDAO.add(new OverrideReasonBean(\"12345\"));\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3210, "methodname":"testGetList()", "methodnamerefined":"testGetList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest.testGetList", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest.testGetList()", "classid":432, "classname":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest", "shortclassname":"PrescriptionOverrideDAOExceptionTest", "method":"public void testGetList() {\r\n    try {\r\n        evilDAO.getList(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3211, "methodname":"testRemove()", "methodnamerefined":"testRemove", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest.testRemove", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest.testRemove()", "classid":432, "classname":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionOverrideDAOExceptionTest", "shortclassname":"PrescriptionOverrideDAOExceptionTest", "method":"public void testRemove() {\r\n    try {\r\n        evilDAO.remove(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3212, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.-init-()", "classid":433, "classname":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest", "shortclassname":"PrescriptionsDAOExceptionTest", "method":"PrescriptionsDAOExceptionTest() {\r\n}"},
 {"id":3213, "methodname":"testAdd()", "methodnamerefined":"testAdd", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.testAdd", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.testAdd()", "classid":433, "classname":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest", "shortclassname":"PrescriptionsDAOExceptionTest", "method":"public void testAdd() {\r\n    try {\r\n        evilDAO.add(new PrescriptionBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3214, "methodname":"testEdit()", "methodnamerefined":"testEdit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.testEdit", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.testEdit()", "classid":433, "classname":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest", "shortclassname":"PrescriptionsDAOExceptionTest", "method":"public void testEdit() {\r\n    try {\r\n        evilDAO.edit(new PrescriptionBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3215, "methodname":"testGetList()", "methodnamerefined":"testGetList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.testGetList", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.testGetList()", "classid":433, "classname":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest", "shortclassname":"PrescriptionsDAOExceptionTest", "method":"public void testGetList() {\r\n    try {\r\n        evilDAO.getList(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3216, "methodname":"testRemove()", "methodnamerefined":"testRemove", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.testRemove", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest.testRemove()", "classid":433, "classname":"edu.ncsu.csc.itrust.dao.officevisit.PrescriptionsDAOExceptionTest", "shortclassname":"PrescriptionsDAOExceptionTest", "method":"public void testRemove() {\r\n    try {\r\n        evilDAO.remove(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3217, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.UpdateOfficeVisitTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.UpdateOfficeVisitTest.-init-()", "classid":434, "classname":"edu.ncsu.csc.itrust.dao.officevisit.UpdateOfficeVisitTest", "shortclassname":"UpdateOfficeVisitTest", "method":"UpdateOfficeVisitTest() {\r\n}"},
 {"id":3218, "methodname":"testUpdateNewOfficeVisit()", "methodnamerefined":"testUpdateNewOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.officevisit.UpdateOfficeVisitTest.testUpdateNewOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.dao.officevisit.UpdateOfficeVisitTest.testUpdateNewOfficeVisit()", "classid":434, "classname":"edu.ncsu.csc.itrust.dao.officevisit.UpdateOfficeVisitTest", "shortclassname":"UpdateOfficeVisitTest", "method":"public void testUpdateNewOfficeVisit() {\r\n    try {\r\n        OfficeVisitBean ov = new OfficeVisitBean();\r\n        long newOVID = ovDAO.add(ov);\r\n        ov = new OfficeVisitBean(newOVID);\r\n        ov.setNotes(\"some notes\");\r\n        ov.setVisitDateStr(\"07/07/2007\");\r\n        ov.setPatientID(65);\r\n        ov.setHcpID(5);\r\n        ov.setHospitalID(\"9191919191\");\r\n        ovDAO.update(ov);\r\n        ov = ovDAO.getOfficeVisit(newOVID);\r\n        assertEquals(\"some notes\", ov.getNotes());\r\n        assertEquals(\"07/07/2007\", new SimpleDateFormat(\"MM/dd/yyyy\").format(ov.getVisitDate()));\r\n        assertEquals(65, ov.getPatientID());\r\n        assertEquals(5, ov.getHcpID());\r\n        assertEquals(\"9191919191\", ov.getHospitalID());\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":3219, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.-init-()", "classid":435, "classname":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest", "shortclassname":"AddPatientTest", "method":"AddPatientTest() {\r\n}"},
 {"id":3220, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.setUp()", "classid":435, "classname":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest", "shortclassname":"AddPatientTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":3221, "methodname":"testAddEmptyPatient()", "methodnamerefined":"testAddEmptyPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.testAddEmptyPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.testAddEmptyPatient()", "classid":435, "classname":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest", "shortclassname":"AddPatientTest", "method":"public void testAddEmptyPatient() throws Exception {\r\n    long pid = patientDAO.addEmptyPatient();\r\n    assertEquals(\" \", patientDAO.getName(pid));\r\n}"},
 {"id":3222, "methodname":"testEmergencyContactInfo()", "methodnamerefined":"testEmergencyContactInfo", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.testEmergencyContactInfo", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.testEmergencyContactInfo()", "classid":435, "classname":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest", "shortclassname":"AddPatientTest", "method":"public void testEmergencyContactInfo() throws Exception {\r\n    long pid = patientDAO.addEmptyPatient();\r\n    PatientBean p = patientDAO.getPatient(pid);\r\n    p.setFirstName(\"Lola\");\r\n    p.setLastName(\"Schaefer\");\r\n    p.setEmail(\"l@cox.net\");\r\n    p.setCity(\"Raleigh\");\r\n    p.setState(\"NC\");\r\n    p.setZip(\"27602\");\r\n    p.setPhone(\"222-222-3333\");\r\n    p.setSecurityQuestion(\"What is the best team in the acc?\");\r\n    p.setSecurityAnswer(\"NCSU\");\r\n    p.setIcName(\"Blue Cross\");\r\n    p.setIcAddress1(\"222 Blue Rd\");\r\n    p.setIcCity(\"Raleigh\");\r\n    p.setIcState(\"NC\");\r\n    p.setIcZip(\"27607\");\r\n    p.setIcPhone(\"222-333-4444\");\r\n    p.setIcID(\"2343\");\r\n    p.setEmergencyName(\"Joy Jones\");\r\n    p.setEmergencyPhone(\"012-345-6789\");\r\n    patientDAO.editPatient(p, 9000000003L);\r\n    assertEquals(\"Joy Jones\", patientDAO.getPatient(pid).getEmergencyName());\r\n    assertEquals(\"012-345-6789\", patientDAO.getPatient(pid).getEmergencyPhone());\r\n}"},
 {"id":3223, "methodname":"testGetEmptyPatient()", "methodnamerefined":"testGetEmptyPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.testGetEmptyPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.testGetEmptyPatient()", "classid":435, "classname":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest", "shortclassname":"AddPatientTest", "method":"public void testGetEmptyPatient() throws Exception {\r\n    try {\r\n        patientDAO.getName(0L);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"User does not exist\", e.getMessage());\r\n    }\r\n}"},
 {"id":3224, "methodname":"testInsertDeath()", "methodnamerefined":"testInsertDeath", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.testInsertDeath", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest.testInsertDeath()", "classid":435, "classname":"edu.ncsu.csc.itrust.dao.patient.AddPatientTest", "shortclassname":"AddPatientTest", "method":"public void testInsertDeath() throws Exception {\r\n    gen.patient1();\r\n    PatientBean p = patientDAO.getPatient(1L);\r\n    assertEquals(\"Random\", p.getFirstName());\r\n    assertEquals(\"\", p.getCauseOfDeath());\r\n    assertEquals(\"\", p.getDateOfDeathStr());\r\n    p.setDateOfDeathStr(\"09/12/2007\");\r\n    p.setCauseOfDeath(\"79.3\");\r\n    patientDAO.editPatient(p, 9000000003L);\r\n    PatientBean p2 = patientDAO.getPatient(1L);\r\n    assertEquals(\"79.3\", p2.getCauseOfDeath());\r\n    assertEquals(\"09/12/2007\", p2.getDateOfDeathStr());\r\n}"},
 {"id":3225, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.-init-()", "classid":436, "classname":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest", "shortclassname":"DeclareHCPTest", "method":"DeclareHCPTest() {\r\n}"},
 {"id":3226, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.setUp()", "classid":436, "classname":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest", "shortclassname":"DeclareHCPTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp3();// 3 is declared, 0 is not\r\n\r\n    gen.patient2();\r\n    gen.hcp0();\r\n}"},
 {"id":3227, "methodname":"testCheckDeclared()", "methodnamerefined":"testCheckDeclared", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testCheckDeclared", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testCheckDeclared()", "classid":436, "classname":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest", "shortclassname":"DeclareHCPTest", "method":"public void testCheckDeclared() throws Exception {\r\n    assertTrue(patientDAO.checkDeclaredHCP(2L, 9000000003L));\r\n    assertFalse(patientDAO.checkDeclaredHCP(2L, 9000000000L));\r\n}"},
 {"id":3228, "methodname":"testDeclareDuplicateHCP()", "methodnamerefined":"testDeclareDuplicateHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testDeclareDuplicateHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testDeclareDuplicateHCP()", "classid":436, "classname":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest", "shortclassname":"DeclareHCPTest", "method":"public void testDeclareDuplicateHCP() throws Exception {\r\n    patientDAO.declareHCP(2L, 9000000000L);\r\n    try {\r\n        patientDAO.declareHCP(2L, 9000000000L);\r\n        fail(\"Exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"HCP 9000000000 has already been declared for patient 2\", e.getMessage());\r\n    }\r\n}"},
 {"id":3229, "methodname":"testDeclareHCP()", "methodnamerefined":"testDeclareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testDeclareHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testDeclareHCP()", "classid":436, "classname":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest", "shortclassname":"DeclareHCPTest", "method":"public void testDeclareHCP() throws Exception {\r\n    assertEquals(1, patientDAO.getDeclaredHCPs(2L).size());\r\n    patientDAO.declareHCP(2L, 9000000000L);\r\n    assertEquals(2, patientDAO.getDeclaredHCPs(2L).size());\r\n}"},
 {"id":3230, "methodname":"testGetDeclaredHCPs()", "methodnamerefined":"testGetDeclaredHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testGetDeclaredHCPs", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testGetDeclaredHCPs()", "classid":436, "classname":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest", "shortclassname":"DeclareHCPTest", "method":"public void testGetDeclaredHCPs() throws Exception {\r\n    List<PersonnelBean> hcps = patientDAO.getDeclaredHCPs(2L);\r\n    assertEquals(1, hcps.size());\r\n    assertEquals(9000000003L, hcps.get(0).getMID());\r\n    assertEquals(\"Gandalf Stormcrow\", hcps.get(0).getFullName());\r\n}"},
 {"id":3231, "methodname":"testUnDeclareHCP()", "methodnamerefined":"testUnDeclareHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testUnDeclareHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testUnDeclareHCP()", "classid":436, "classname":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest", "shortclassname":"DeclareHCPTest", "method":"public void testUnDeclareHCP() throws Exception {\r\n    assertEquals(1, patientDAO.getDeclaredHCPs(2L).size());\r\n    patientDAO.undeclareHCP(2L, 9000000003L);\r\n    assertEquals(0, patientDAO.getDeclaredHCPs(2L).size());\r\n}"},
 {"id":3232, "methodname":"testUnDeclareNotDeclaredHCP()", "methodnamerefined":"testUnDeclareNotDeclaredHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testUnDeclareNotDeclaredHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest.testUnDeclareNotDeclaredHCP()", "classid":436, "classname":"edu.ncsu.csc.itrust.dao.patient.DeclareHCPTest", "shortclassname":"DeclareHCPTest", "method":"public void testUnDeclareNotDeclaredHCP() throws Exception {\r\n    assertEquals(1, patientDAO.getDeclaredHCPs(2L).size());\r\n    boolean confirm = patientDAO.undeclareHCP(2L, 9000000000L);\r\n    assertFalse(confirm);\r\n    assertEquals(1, patientDAO.getDeclaredHCPs(2L).size());\r\n}"},
 {"id":3233, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.-init-()", "classid":437, "classname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest", "shortclassname":"EditPatientTest", "method":"EditPatientTest() {\r\n}"},
 {"id":3234, "methodname":"assertIsPatient2(edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"assertIsPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.assertIsPatient2", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.assertIsPatient2(edu.ncsu.csc.itrust.beans.PatientBean)", "classid":437, "classname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest", "shortclassname":"EditPatientTest", "method":"private void assertIsPatient2(PatientBean p) {\r\n    assertEquals(2L, p.getMID());\r\n    assertEquals(\"Andy\", p.getFirstName());\r\n    assertEquals(\"Programmer\", p.getLastName());\r\n    assertEquals(\"05/19/1984\", p.getDateOfBirthStr());\r\n    assertEquals(\"250.10\", p.getCauseOfDeath());\r\n    assertEquals(\"andy.programmer@gmail.com\", p.getEmail());\r\n    assertEquals(\"344 Bob Street\", p.getStreetAddress1());\r\n    assertEquals(\"\", p.getStreetAddress2());\r\n    assertEquals(\"Raleigh\", p.getCity());\r\n    assertEquals(\"NC\", p.getState());\r\n    assertEquals(\"27607\", p.getZip());\r\n    assertEquals(\"555-555-5555\", p.getPhone());\r\n    assertEquals(\"Mr Emergency\", p.getEmergencyName());\r\n    assertEquals(\"555-555-5551\", p.getEmergencyPhone());\r\n    assertEquals(\"IC\", p.getIcName());\r\n    assertEquals(\"Street1\", p.getIcAddress1());\r\n    assertEquals(\"Street2\", p.getIcAddress2());\r\n    assertEquals(\"City\", p.getIcCity());\r\n    assertEquals(\"PA\", p.getIcState());\r\n    assertEquals(\"19003-2715\", p.getIcZip());\r\n    assertEquals(\"555-555-5555\", p.getIcPhone());\r\n    assertEquals(\"1\", p.getIcID());\r\n    assertEquals(\"1\", p.getMotherMID());\r\n    assertEquals(\"0\", p.getFatherMID());\r\n    assertEquals(\"O-\", p.getBloodType().getName());\r\n    assertEquals(Ethnicity.Caucasian, p.getEthnicity());\r\n    assertEquals(Gender.Male, p.getGender());\r\n    assertEquals(\"This person is absolutely crazy. Do not touch them.\", p.getTopicalNotes());\r\n}"},
 {"id":3235, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.setUp()", "classid":437, "classname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest", "shortclassname":"EditPatientTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n}"},
 {"id":3236, "methodname":"testEditPatient2()", "methodnamerefined":"testEditPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testEditPatient2", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testEditPatient2()", "classid":437, "classname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest", "shortclassname":"EditPatientTest", "method":"public void testEditPatient2() throws Exception {\r\n    PatientBean p = patientDAO.getPatient(2);\r\n    p.setFirstName(\"Person1\");\r\n    p.setEmail(\"another email\");\r\n    p.setEmergencyName(\"another emergency person\");\r\n    p.setTopicalNotes(\"some topical notes\");\r\n    p.setDateOfBirthStr(\"05/20/1984\");\r\n    p.setDateOfDeactivationStr(\"05/21/1984\");\r\n    patientDAO.editPatient(p, 9000000003L);\r\n    p = patientDAO.getPatient(2);\r\n    assertEquals(\"Person1\", p.getFirstName());\r\n    assertEquals(\"Programmer\", p.getLastName());\r\n    assertEquals(\"another email\", p.getEmail());\r\n    assertEquals(\"another emergency person\", p.getEmergencyName());\r\n    assertEquals(\"some topical notes\", p.getTopicalNotes());\r\n    assertEquals(\"05/20/1984\", p.getDateOfBirthStr());\r\n    assertEquals(\"05/21/1984\", p.getDateOfDeactivationStr());\r\n    assertEquals(\"250.10\", p.getCauseOfDeath());\r\n    assertEquals(\"344 Bob Street\", p.getStreetAddress1());\r\n    assertEquals(\"\", p.getStreetAddress2());\r\n    assertEquals(\"Raleigh\", p.getCity());\r\n    assertEquals(\"NC\", p.getState());\r\n    assertEquals(\"27607\", p.getZip());\r\n    assertEquals(\"555-555-5555\", p.getPhone());\r\n    assertEquals(\"555-555-5551\", p.getEmergencyPhone());\r\n    assertEquals(\"IC\", p.getIcName());\r\n    assertEquals(\"Street1\", p.getIcAddress1());\r\n    assertEquals(\"Street2\", p.getIcAddress2());\r\n    assertEquals(\"City\", p.getIcCity());\r\n    assertEquals(\"PA\", p.getIcState());\r\n    assertEquals(\"19003-2715\", p.getIcZip());\r\n    assertEquals(\"555-555-5555\", p.getIcPhone());\r\n    assertEquals(\"1\", p.getIcID());\r\n    assertEquals(\"1\", p.getMotherMID());\r\n    assertEquals(\"0\", p.getFatherMID());\r\n    assertEquals(\"O-\", p.getBloodType().getName());\r\n    assertEquals(Ethnicity.Caucasian, p.getEthnicity());\r\n    assertEquals(Gender.Male, p.getGender());\r\n}"},
 {"id":3237, "methodname":"testGetEmpty()", "methodnamerefined":"testGetEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testGetEmpty", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testGetEmpty()", "classid":437, "classname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest", "shortclassname":"EditPatientTest", "method":"public void testGetEmpty() throws Exception {\r\n    assertNull(patientDAO.getPatient(0L));\r\n}"},
 {"id":3238, "methodname":"testGetPatient2()", "methodnamerefined":"testGetPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testGetPatient2", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testGetPatient2()", "classid":437, "classname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest", "shortclassname":"EditPatientTest", "method":"public void testGetPatient2() throws Exception {\r\n    PatientBean p = patientDAO.getPatient(2);\r\n    assertNotNull(p);\r\n    assertIsPatient2(p);\r\n}"},
 {"id":3239, "methodname":"testGetPatientHistory()", "methodnamerefined":"testGetPatientHistory", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testGetPatientHistory", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testGetPatientHistory()", "classid":437, "classname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest", "shortclassname":"EditPatientTest", "method":"public void testGetPatientHistory() throws Exception {\r\n    PatientBean p = patientDAO.getPatient(2);\r\n    p.setFirstName(\"Person1\");\r\n    p.setEmail(\"another email\");\r\n    p.setEmergencyName(\"another emergency person\");\r\n    p.setTopicalNotes(\"some topical notes\");\r\n    p.setDateOfBirthStr(\"05/20/1984\");\r\n    patientDAO.editPatient(p, 9000000003L);\r\n    List<PatientHistoryBean> pList = patientDAO.getPatientHistory(p.getMID());\r\n    assertEquals(pList.size(), 1);\r\n    assertEquals(\"Person1\", pList.get(0).getFirstName());\r\n    assertEquals(9000000003L, pList.get(0).getChangeMID());\r\n}"},
 {"id":3240, "methodname":"testHasHistory()", "methodnamerefined":"testHasHistory", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testHasHistory", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.testHasHistory()", "classid":437, "classname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest", "shortclassname":"EditPatientTest", "method":"public void testHasHistory() throws Exception {\r\n    PatientBean p = patientDAO.getPatient(2);\r\n    assertFalse(patientDAO.hasHistory(p.getMID()));\r\n    p.setFirstName(\"Person1\");\r\n    p.setEmail(\"another email\");\r\n    p.setEmergencyName(\"another emergency person\");\r\n    p.setTopicalNotes(\"some topical notes\");\r\n    p.setDateOfBirthStr(\"05/20/1984\");\r\n    patientDAO.editPatient(p, 9000000003L);\r\n    assertTrue(patientDAO.hasHistory(p.getMID()));\r\n}"},
 {"id":3241, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest.-init-()", "classid":438, "classname":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest", "shortclassname":"GetDiagnosesTest", "method":"GetDiagnosesTest() {\r\n}"},
 {"id":3242, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest.setUp()", "classid":438, "classname":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest", "shortclassname":"GetDiagnosesTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.icd9cmCodes();\r\n    gen.patient2();\r\n}"},
 {"id":3243, "methodname":"testGetPatient2()", "methodnamerefined":"testGetPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest.testGetPatient2", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest.testGetPatient2()", "classid":438, "classname":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest", "shortclassname":"GetDiagnosesTest", "method":"public void testGetPatient2() throws Exception {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(2L);\r\n    assertEquals(6, diagnoses.size());\r\n    assertEquals(\"250.10\", diagnoses.get(0).getICDCode());\r\n    assertEquals(\"Diabetes with ketoacidosis\", diagnoses.get(0).getDescription());\r\n}"},
 {"id":3244, "methodname":"testNotPatient200()", "methodnamerefined":"testNotPatient200", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest.testNotPatient200", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest.testNotPatient200()", "classid":438, "classname":"edu.ncsu.csc.itrust.dao.patient.GetDiagnosesTest", "shortclassname":"GetDiagnosesTest", "method":"public void testNotPatient200() throws Exception {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(200L);\r\n    assertEquals(0, diagnoses.size());\r\n}"},
 {"id":3245, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.-init-()", "classid":439, "classname":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"GetPrescriptionsTest() {\r\n}"},
 {"id":3246, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.setUp()", "classid":439, "classname":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.icd9cmCodes();\r\n    gen.ndCodes();\r\n    gen.patient2();\r\n}"},
 {"id":3247, "methodname":"testCurrentPrescriptions()", "methodnamerefined":"testCurrentPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.testCurrentPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.testCurrentPrescriptions()", "classid":439, "classname":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"public void testCurrentPrescriptions() throws Exception {\r\n    List<PrescriptionBean> list;\r\n    list = patientDAO.getCurrentPrescriptions(2);\r\n    assertEquals(1, list.size());\r\n}"},
 {"id":3248, "methodname":"testExpiredPrescription()", "methodnamerefined":"testExpiredPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.testExpiredPrescription", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.testExpiredPrescription()", "classid":439, "classname":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"public void testExpiredPrescription() throws Exception {\r\n    List<PrescriptionBean> list;\r\n    list = patientDAO.getExpiredPrescriptions(2);\r\n    assertEquals(2, list.size());\r\n    list = patientDAO.getExpiredPrescriptions(1);\r\n    assertEquals(0, list.size());\r\n}"},
 {"id":3249, "methodname":"testGetPatient2()", "methodnamerefined":"testGetPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.testGetPatient2", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.testGetPatient2()", "classid":439, "classname":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"public void testGetPatient2() throws Exception {\r\n    List<PrescriptionBean> list = patientDAO.getCurrentPrescriptions(2L);\r\n    PrescriptionBean first = list.get(0);\r\n    assertEquals(\"Take twice daily\", first.getInstructions());\r\n    assertEquals(\"10/11/2020\", first.getEndDateStr());\r\n}"},
 {"id":3250, "methodname":"testNotPatient200()", "methodnamerefined":"testNotPatient200", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.testNotPatient200", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest.testNotPatient200()", "classid":439, "classname":"edu.ncsu.csc.itrust.dao.patient.GetPrescriptionsTest", "shortclassname":"GetPrescriptionsTest", "method":"public void testNotPatient200() throws Exception {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(200L);\r\n    assertEquals(0, diagnoses.size());\r\n}"},
 {"id":3251, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetProceduresTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetProceduresTest.-init-()", "classid":440, "classname":"edu.ncsu.csc.itrust.dao.patient.GetProceduresTest", "shortclassname":"GetProceduresTest", "method":"GetProceduresTest() {\r\n}"},
 {"id":3252, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetProceduresTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetProceduresTest.setUp()", "classid":440, "classname":"edu.ncsu.csc.itrust.dao.patient.GetProceduresTest", "shortclassname":"GetProceduresTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.cptCodes();\r\n    gen.patient2();\r\n}"},
 {"id":3253, "methodname":"testGetProcedures()", "methodnamerefined":"testGetProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.GetProceduresTest.testGetProcedures", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.GetProceduresTest.testGetProcedures()", "classid":440, "classname":"edu.ncsu.csc.itrust.dao.patient.GetProceduresTest", "shortclassname":"GetProceduresTest", "method":"public void testGetProcedures() throws Exception {\r\n    List<ProcedureBean> list = patientDAO.getProcedures(2L);\r\n    assertEquals(1, list.size());\r\n    ProcedureBean bean = list.get(0);\r\n    assertEquals(\"1270F\", bean.getCPTCode());\r\n    assertEquals(\"Injection procedure\", bean.getDescription());\r\n}"},
 {"id":3254, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.-init-()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"PatientDAOExceptionTest() {\r\n}"},
 {"id":3255, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.setUp()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3256, "methodname":"testAddEmptyPatientException()", "methodnamerefined":"testAddEmptyPatientException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testAddEmptyPatientException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testAddEmptyPatientException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testAddEmptyPatientException() throws Exception {\r\n    try {\r\n        evilDAO.addEmptyPatient();\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3257, "methodname":"testAddRepException()", "methodnamerefined":"testAddRepException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testAddRepException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testAddRepException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testAddRepException() throws Exception {\r\n    try {\r\n        evilDAO.addRepresentative(0L, 0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3258, "methodname":"testCheckDeclaredHCPException()", "methodnamerefined":"testCheckDeclaredHCPException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testCheckDeclaredHCPException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testCheckDeclaredHCPException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testCheckDeclaredHCPException() throws Exception {\r\n    try {\r\n        evilDAO.checkDeclaredHCP(0L, 0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3259, "methodname":"testCheckPatientExistsException()", "methodnamerefined":"testCheckPatientExistsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testCheckPatientExistsException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testCheckPatientExistsException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testCheckPatientExistsException() throws Exception {\r\n    try {\r\n        evilDAO.checkPatientExists(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3260, "methodname":"testDeclareHCPException()", "methodnamerefined":"testDeclareHCPException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testDeclareHCPException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testDeclareHCPException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testDeclareHCPException() throws Exception {\r\n    try {\r\n        evilDAO.declareHCP(0L, 0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3261, "methodname":"testEditPatientException()", "methodnamerefined":"testEditPatientException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testEditPatientException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testEditPatientException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testEditPatientException() throws Exception {\r\n    try {\r\n        evilDAO.editPatient(new PatientBean(), 9000000003L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3262, "methodname":"testExpiredPrescriptionException()", "methodnamerefined":"testExpiredPrescriptionException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testExpiredPrescriptionException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testExpiredPrescriptionException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testExpiredPrescriptionException() throws Exception {\r\n    try {\r\n        evilDAO.getExpiredPrescriptions(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(\"pid cannot be 0\", e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3263, "methodname":"testExpiredPrescriptionException2()", "methodnamerefined":"testExpiredPrescriptionException2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testExpiredPrescriptionException2", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testExpiredPrescriptionException2()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testExpiredPrescriptionException2() throws Exception {\r\n    try {\r\n        evilDAO.getExpiredPrescriptions(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3264, "methodname":"testGetCurrentPrescriptions()", "methodnamerefined":"testGetCurrentPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetCurrentPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetCurrentPrescriptions()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testGetCurrentPrescriptions() throws Exception {\r\n    try {\r\n        evilDAO.getExpiredPrescriptions(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3265, "methodname":"testGetDeclaredHCPsException()", "methodnamerefined":"testGetDeclaredHCPsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetDeclaredHCPsException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetDeclaredHCPsException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testGetDeclaredHCPsException() throws Exception {\r\n    try {\r\n        evilDAO.getDeclaredHCPs(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(\"pid cannot be 0\", e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3266, "methodname":"testGetDiagnosesException()", "methodnamerefined":"testGetDiagnosesException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetDiagnosesException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetDiagnosesException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testGetDiagnosesException() throws Exception {\r\n    try {\r\n        evilDAO.getDiagnoses(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(\"pid cannot be 0\", e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3267, "methodname":"testGetNameException()", "methodnamerefined":"testGetNameException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetNameException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetNameException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testGetNameException() throws Exception {\r\n    try {\r\n        evilDAO.getName(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3268, "methodname":"testGetPatientException()", "methodnamerefined":"testGetPatientException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetPatientException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetPatientException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testGetPatientException() throws Exception {\r\n    try {\r\n        evilDAO.getPatient(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3269, "methodname":"testGetRepresentedException()", "methodnamerefined":"testGetRepresentedException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetRepresentedException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testGetRepresentedException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testGetRepresentedException() throws Exception {\r\n    try {\r\n        evilDAO.getRepresented(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3270, "methodname":"testRemoveRepresentativeException()", "methodnamerefined":"testRemoveRepresentativeException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testRemoveRepresentativeException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testRemoveRepresentativeException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testRemoveRepresentativeException() throws Exception {\r\n    try {\r\n        evilDAO.removeRepresentative(0L, 0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3271, "methodname":"testRepresentsException()", "methodnamerefined":"testRepresentsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testRepresentsException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testRepresentsException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testRepresentsException() throws Exception {\r\n    try {\r\n        evilDAO.represents(0L, 0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3272, "methodname":"testUndeclareHCPException()", "methodnamerefined":"testUndeclareHCPException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testUndeclareHCPException", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest.testUndeclareHCPException()", "classid":441, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientDAOExceptionTest", "shortclassname":"PatientDAOExceptionTest", "method":"public void testUndeclareHCPException() throws Exception {\r\n    try {\r\n        evilDAO.undeclareHCP(0L, 0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3273, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.-init-()", "classid":442, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest", "shortclassname":"PatientExistsTest", "method":"PatientExistsTest() {\r\n}"},
 {"id":3274, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.setUp()", "classid":442, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest", "shortclassname":"PatientExistsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n}"},
 {"id":3275, "methodname":"testGetAllPatients()", "methodnamerefined":"testGetAllPatients", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.testGetAllPatients", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.testGetAllPatients()", "classid":442, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest", "shortclassname":"PatientExistsTest", "method":"public void testGetAllPatients() throws Exception {\r\n    assertEquals(2, patientDAO.getAllPatients().size());\r\n}"},
 {"id":3276, "methodname":"testGetPatient2()", "methodnamerefined":"testGetPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.testGetPatient2", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.testGetPatient2()", "classid":442, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest", "shortclassname":"PatientExistsTest", "method":"public void testGetPatient2() throws Exception {\r\n    assertTrue(patientDAO.checkPatientExists(2));\r\n}"},
 {"id":3277, "methodname":"testNotPatient200()", "methodnamerefined":"testNotPatient200", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.testNotPatient200", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest.testNotPatient200()", "classid":442, "classname":"edu.ncsu.csc.itrust.dao.patient.PatientExistsTest", "shortclassname":"PatientExistsTest", "method":"public void testNotPatient200() throws Exception {\r\n    assertFalse(patientDAO.checkPatientExists(200));\r\n}"},
 {"id":3278, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.-init-()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"RepresentativeTest() {\r\n}"},
 {"id":3279, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.setUp()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n}"},
 {"id":3280, "methodname":"testAddExistingRepresentative()", "methodnamerefined":"testAddExistingRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testAddExistingRepresentative", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testAddExistingRepresentative()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"public void testAddExistingRepresentative() throws Exception {\r\n    patientDAO.addRepresentative(1L, 2L);\r\n    try {\r\n        patientDAO.addRepresentative(1L, 2L);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Patient 1 already represents patient 2\", e.getMessage());\r\n    }\r\n}"},
 {"id":3281, "methodname":"testAddRepresentative()", "methodnamerefined":"testAddRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testAddRepresentative", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testAddRepresentative()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"public void testAddRepresentative() throws Exception {\r\n    assertEquals(0, patientDAO.getRepresented(1L).size());\r\n    patientDAO.addRepresentative(1L, 2L);\r\n    assertEquals(1, patientDAO.getRepresented(1L).size());\r\n}"},
 {"id":3282, "methodname":"testGetNonExistentRepresented()", "methodnamerefined":"testGetNonExistentRepresented", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testGetNonExistentRepresented", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testGetNonExistentRepresented()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"public void testGetNonExistentRepresented() throws Exception {\r\n    assertEquals(0, patientDAO.getRepresented(500L).size());\r\n}"},
 {"id":3283, "methodname":"testGetNoneRepresented()", "methodnamerefined":"testGetNoneRepresented", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testGetNoneRepresented", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testGetNoneRepresented()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"public void testGetNoneRepresented() throws Exception {\r\n    assertEquals(0, patientDAO.getRepresented(1L).size());\r\n}"},
 {"id":3284, "methodname":"testGetRepresented()", "methodnamerefined":"testGetRepresented", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testGetRepresented", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testGetRepresented()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"public void testGetRepresented() throws Exception {\r\n    List<PatientBean> rep = patientDAO.getRepresented(2L);\r\n    assertEquals(1, rep.size());\r\n    assertEquals(1L, rep.get(0).getMID());\r\n}"},
 {"id":3285, "methodname":"testRemoveNonExistingRepresentative()", "methodnamerefined":"testRemoveNonExistingRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testRemoveNonExistingRepresentative", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testRemoveNonExistingRepresentative()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"public void testRemoveNonExistingRepresentative() throws Exception {\r\n    assertEquals(1, patientDAO.getRepresented(2L).size());\r\n    boolean confirm = patientDAO.removeRepresentative(2L, 3L);\r\n    assertEquals(1, patientDAO.getRepresented(2L).size());\r\n    assertFalse(confirm);\r\n}"},
 {"id":3286, "methodname":"testRemoveRepresentative()", "methodnamerefined":"testRemoveRepresentative", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testRemoveRepresentative", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testRemoveRepresentative()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"public void testRemoveRepresentative() throws Exception {\r\n    assertEquals(1, patientDAO.getRepresented(2L).size());\r\n    boolean confirm = patientDAO.removeRepresentative(2L, 1L);\r\n    assertEquals(0, patientDAO.getRepresented(2L).size());\r\n    assertTrue(confirm);\r\n}"},
 {"id":3287, "methodname":"testRepresentsFalse()", "methodnamerefined":"testRepresentsFalse", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testRepresentsFalse", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testRepresentsFalse()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"public void testRepresentsFalse() throws Exception {\r\n    assertFalse(patientDAO.represents(1L, 2L));\r\n}"},
 {"id":3288, "methodname":"testRepresentsTrue()", "methodnamerefined":"testRepresentsTrue", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testRepresentsTrue", "fullmethod":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest.testRepresentsTrue()", "classid":443, "classname":"edu.ncsu.csc.itrust.dao.patient.RepresentativeTest", "shortclassname":"RepresentativeTest", "method":"public void testRepresentsTrue() throws Exception {\r\n    assertTrue(patientDAO.represents(2L, 1L));\r\n}"},
 {"id":3289, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.-init-()", "classid":444, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest", "shortclassname":"PatientInstructionsDAOExceptionTest", "method":"PatientInstructionsDAOExceptionTest() {\r\n}"},
 {"id":3290, "methodname":"testCreateException()", "methodnamerefined":"testCreateException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testCreateException", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testCreateException()", "classid":444, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest", "shortclassname":"PatientInstructionsDAOExceptionTest", "method":"public void testCreateException() throws Exception {\r\n    try {\r\n        evilDAO.add(new PatientInstructionsBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3291, "methodname":"testEditException()", "methodnamerefined":"testEditException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testEditException", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testEditException()", "classid":444, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest", "shortclassname":"PatientInstructionsDAOExceptionTest", "method":"public void testEditException() throws Exception {\r\n    try {\r\n        evilDAO.edit(new PatientInstructionsBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3292, "methodname":"testGetListException()", "methodnamerefined":"testGetListException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testGetListException", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testGetListException()", "classid":444, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest", "shortclassname":"PatientInstructionsDAOExceptionTest", "method":"public void testGetListException() throws Exception {\r\n    try {\r\n        evilDAO.getList(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3293, "methodname":"testGetOfficeVisitsWithInstructions()", "methodnamerefined":"testGetOfficeVisitsWithInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testGetOfficeVisitsWithInstructions", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testGetOfficeVisitsWithInstructions()", "classid":444, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest", "shortclassname":"PatientInstructionsDAOExceptionTest", "method":"public void testGetOfficeVisitsWithInstructions() throws Exception {\r\n    try {\r\n        evilDAO.getOfficeVisitsWithInstructions(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3294, "methodname":"testRemoveException()", "methodnamerefined":"testRemoveException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testRemoveException", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest.testRemoveException()", "classid":444, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOExceptionTest", "shortclassname":"PatientInstructionsDAOExceptionTest", "method":"public void testRemoveException() throws Exception {\r\n    try {\r\n        evilDAO.remove(1);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3295, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.-init-()", "classid":445, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest", "shortclassname":"PatientInstructionsDAOTest", "method":"PatientInstructionsDAOTest() {\r\n}"},
 {"id":3296, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.setUp()", "classid":445, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest", "shortclassname":"PatientInstructionsDAOTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n}"},
 {"id":3297, "methodname":"testCreate()", "methodnamerefined":"testCreate", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testCreate", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testCreate()", "classid":445, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest", "shortclassname":"PatientInstructionsDAOTest", "method":"public void testCreate() throws Exception {\r\n    // empty database\r\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/DD HH:mm:ss\");\r\n    Date date = dateFormat.parse(\"2011/01/15 12:11:10\");\r\n    PatientInstructionsBean bean = new PatientInstructionsBean();\r\n    bean.setName(\"name\");\r\n    bean.setComment(\"comment\");\r\n    bean.setModified(date);\r\n    bean.setVisitID(1);\r\n    dao.add(bean);\r\n    List<PatientInstructionsBean> list = dao.getList(1);\r\n    assertEquals(1, list.size());\r\n    bean = list.get(0);\r\n    assertEquals(\"name\", bean.getName());\r\n    assertEquals(\"comment\", bean.getComment());\r\n    assertEquals(date.getTime(), bean.getModified().getTime());\r\n    assertEquals(1, bean.getVisitID());\r\n}"},
 {"id":3298, "methodname":"testDelete0()", "methodnamerefined":"testDelete0", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testDelete0", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testDelete0()", "classid":445, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest", "shortclassname":"PatientInstructionsDAOTest", "method":"public void testDelete0() throws Exception {\r\n    assertEquals(0, dao.getList(3).size());\r\n    dao.remove(1);\r\n    assertEquals(0, dao.getList(3).size());\r\n}"},
 {"id":3299, "methodname":"testEdit()", "methodnamerefined":"testEdit", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testEdit", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testEdit()", "classid":445, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest", "shortclassname":"PatientInstructionsDAOTest", "method":"public void testEdit() throws Exception {\r\n    // empty database\r\n    // Editing a non existent record doesnt do anything.\r\n    PatientInstructionsBean bean = new PatientInstructionsBean();\r\n    bean.setId(1);\r\n    bean.setName(\"name\");\r\n    bean.setComment(\"comment\");\r\n    bean.setModified(new Date());\r\n    bean.setVisitID(2);\r\n    dao.edit(bean);\r\n    assertEquals(0, dao.getList(2).size());// nothing created\r\n\r\n    assertEquals(0, dao.getList(1).size());\r\n    // load one patient instructions record\r\n    gen.uc44_acceptance_scenario_2();\r\n    bean = dao.getList(44100).get(0);\r\n    assertEquals(\"http://www.webmd.com/cold-and-flu/flu-guide/what-to-eat-when-you-have-the-flu\", bean.getUrl());\r\n    bean.setUrl(\"http://www.google.com/\");\r\n    dao.edit(bean);\r\n    assertEquals(1, dao.getList(44100).size());\r\n    assertEquals(\"http://www.google.com/\", dao.getList(44100).get(0).getUrl());\r\n}"},
 {"id":3300, "methodname":"testGetList()", "methodnamerefined":"testGetList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testGetList", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testGetList()", "classid":445, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest", "shortclassname":"PatientInstructionsDAOTest", "method":"public void testGetList() throws Exception {\r\n    // empty database\r\n    List<PatientInstructionsBean> list = dao.getList(1);\r\n    assertEquals(0, list.size());\r\n    // load one patient instructions record\r\n    gen.uc44_acceptance_scenario_2();\r\n    list = dao.getList(44100);\r\n    assertEquals(1, list.size());\r\n    // should still return none when there are no records with the given id\r\n    list = dao.getList(10);\r\n    assertEquals(0, list.size());\r\n}"},
 {"id":3301, "methodname":"testGetOfficeVisitsWithInstructions()", "methodnamerefined":"testGetOfficeVisitsWithInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testGetOfficeVisitsWithInstructions", "fullmethod":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest.testGetOfficeVisitsWithInstructions()", "classid":445, "classname":"edu.ncsu.csc.itrust.dao.patientinstructions.PatientInstructionsDAOTest", "shortclassname":"PatientInstructionsDAOTest", "method":"public void testGetOfficeVisitsWithInstructions() throws Exception {\r\n    // Empty database.\r\n    assertEquals(0, dao.getOfficeVisitsWithInstructions(1).size());\r\n    // Patient 5 has one office visit with instructions.\r\n    OfficeVisitBean ovbean = new OfficeVisitBean();\r\n    ovbean.setPatientID(5);\r\n    ovbean.setHospitalID(\"1\");\r\n    ovbean.setNotes(\"notes\");\r\n    ovbean.setVisitDateStr(\"1/1/2011\");\r\n    long ovid1 = ovdao.add(ovbean);\r\n    ovbean.setPatientID(6);\r\n    long ovid2 = ovdao.add(ovbean);\r\n    PatientInstructionsBean bean = new PatientInstructionsBean();\r\n    bean.setName(\"name\");\r\n    bean.setComment(\"comment\");\r\n    bean.setModified(new Date());\r\n    bean.setVisitID(ovid1);\r\n    dao.add(bean);\r\n    bean.setVisitID(ovid2);\r\n    dao.add(bean);\r\n    // Ensure it only returns the one office visit with patient\r\n    // instructions assigned to patient 5.\r\n    List<OfficeVisitBean> list = dao.getOfficeVisitsWithInstructions(5);\r\n    assertEquals(1, list.size());\r\n    assertEquals(5, list.get(0).getPatientID());\r\n    assertEquals(ovid1, list.get(0).getID());\r\n    // Patient 5 has two office visits, one with instructions.\r\n    ovbean.setPatientID(5);\r\n    long ovid3 = ovdao.add(ovbean);\r\n    list = dao.getOfficeVisitsWithInstructions(5);\r\n    assertEquals(1, list.size());\r\n    assertEquals(ovid1, list.get(0).getID());\r\n    // Patient 5 has two office visits, both with instructions\r\n    bean = new PatientInstructionsBean();\r\n    bean.setName(\"name\");\r\n    bean.setComment(\"comment\");\r\n    bean.setModified(new Date());\r\n    bean.setVisitID(ovid3);\r\n    dao.add(bean);\r\n    // Ensure it returns both offices visit with patient instructions\r\n    // assigned to patient 5.\r\n    list = dao.getOfficeVisitsWithInstructions(5);\r\n    assertEquals(2, list.size());\r\n    assertEquals(ovid1, list.get(0).getID());\r\n    assertEquals(ovid3, list.get(1).getID());\r\n    // Patient 7 has an office visit, but no patient instructions.\r\n    ovbean.setPatientID(7);\r\n    ovdao.add(ovbean);\r\n    assertEquals(0, dao.getOfficeVisitsWithInstructions(7).size());\r\n    // Check that empty list is returned with bad id even when items are in DB.\r\n    assertEquals(0, dao.getOfficeVisitsWithInstructions(123321).size());\r\n}"},
 {"id":3302, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.-init-()", "classid":446, "classname":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest", "shortclassname":"AddPersonnelTest", "method":"AddPersonnelTest() {\r\n}"},
 {"id":3303, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.setUp()", "classid":446, "classname":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest", "shortclassname":"AddPersonnelTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n}"},
 {"id":3304, "methodname":"testAddEmptyER()", "methodnamerefined":"testAddEmptyER", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.testAddEmptyER", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.testAddEmptyER()", "classid":446, "classname":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest", "shortclassname":"AddPersonnelTest", "method":"public void testAddEmptyER() throws Exception {\r\n    long mid = personnelDAO.addEmptyPersonnel(Role.ER);\r\n    assertEquals(\" \", personnelDAO.getName(mid));\r\n    assertEquals(\"er\", personnelDAO.getPersonnel(mid).getRole().getUserRolesString());\r\n}"},
 {"id":3305, "methodname":"testAddEmptyPersonnel()", "methodnamerefined":"testAddEmptyPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.testAddEmptyPersonnel", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.testAddEmptyPersonnel()", "classid":446, "classname":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest", "shortclassname":"AddPersonnelTest", "method":"public void testAddEmptyPersonnel() throws Exception {\r\n    long mid = personnelDAO.addEmptyPersonnel(Role.HCP);\r\n    assertEquals(\" \", personnelDAO.getName(mid));\r\n    assertEquals(Role.HCP, personnelDAO.getPersonnel(mid).getRole());\r\n    assertTrue((\"hcp MID is greater or equal to 9 billion, actual:\" + mid), (mid >= 9000000000L));\r\n}"},
 {"id":3306, "methodname":"testDoesNotExist()", "methodnamerefined":"testDoesNotExist", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.testDoesNotExist", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.testDoesNotExist()", "classid":446, "classname":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest", "shortclassname":"AddPersonnelTest", "method":"public void testDoesNotExist() throws Exception {\r\n    try {\r\n        personnelDAO.getName(0L);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"User does not exist\", e.getMessage());\r\n    }\r\n}"},
 {"id":3307, "methodname":"testGetNextID()", "methodnamerefined":"testGetNextID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.testGetNextID", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest.testGetNextID()", "classid":446, "classname":"edu.ncsu.csc.itrust.dao.personnel.AddPersonnelTest", "shortclassname":"AddPersonnelTest", "method":"public void testGetNextID() throws Exception {\r\n    assertEquals(1L, personnelDAO.getNextID(Role.ADMIN));\r\n    assertEquals(9000000000L, personnelDAO.getNextID(Role.ER));\r\n    assertEquals(9000000000L, personnelDAO.getNextID(Role.HCP));\r\n    assertEquals(5000000000L, personnelDAO.getNextID(Role.LT));\r\n    assertEquals(1L, personnelDAO.getNextID(Role.PATIENT));\r\n    assertEquals(7000000000L, personnelDAO.getNextID(Role.PHA));\r\n    assertEquals(1L, personnelDAO.getNextID(Role.TESTER));\r\n    assertEquals(8000000000L, personnelDAO.getNextID(Role.UAP));\r\n}"},
 {"id":3308, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.-init-()", "classid":447, "classname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest", "shortclassname":"EditPersonnelTest", "method":"EditPersonnelTest() {\r\n}"},
 {"id":3309, "methodname":"assertIsPersonnel2(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"assertIsPersonnel2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.assertIsPersonnel2", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.assertIsPersonnel2(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":447, "classname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest", "shortclassname":"EditPersonnelTest", "method":"private void assertIsPersonnel2(PersonnelBean p) {\r\n    assertEquals(8000000009L, p.getMID());\r\n    assertEquals(\"FirstUAP\", p.getFirstName());\r\n    assertEquals(\"LastUAP\", p.getLastName());\r\n    // assertEquals(\"opposite of yin\", p.getSecurityQuestion());\r\n    // assertEquals(\"yang\", p.getSecurityAnswer());\r\n    assertEquals(\"100 Ave\", p.getStreetAddress1());\r\n    assertEquals(\"\", p.getStreetAddress2());\r\n    assertEquals(\"Raleigh\", p.getCity());\r\n    assertEquals(\"NC\", p.getState());\r\n    assertEquals(\"27607\", p.getZip());\r\n    assertEquals(\"111-111-1111\", p.getPhone());\r\n}"},
 {"id":3310, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.setUp()", "classid":447, "classname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest", "shortclassname":"EditPersonnelTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.uap1();\r\n}"},
 {"id":3311, "methodname":"testEditPersonnel2()", "methodnamerefined":"testEditPersonnel2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testEditPersonnel2", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testEditPersonnel2()", "classid":447, "classname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest", "shortclassname":"EditPersonnelTest", "method":"public void testEditPersonnel2() throws Exception {\r\n    PersonnelBean p = personnelDAO.getPersonnel(8000000009L);\r\n    p.setFirstName(\"Person1\");\r\n    p.setEmail(\"blah@blah.com\");\r\n    personnelDAO.editPersonnel(p);\r\n    p = personnelDAO.getPersonnel(8000000009L);\r\n    assertEquals(\"Person1\", p.getFirstName());\r\n    assertEquals(\"LastUAP\", p.getLastName());\r\n    assertEquals(\"blah@blah.com\", p.getEmail());\r\n}"},
 {"id":3312, "methodname":"testEditPersonnelSpecialty()", "methodnamerefined":"testEditPersonnelSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testEditPersonnelSpecialty", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testEditPersonnelSpecialty()", "classid":447, "classname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest", "shortclassname":"EditPersonnelTest", "method":"public void testEditPersonnelSpecialty() throws Exception {\r\n    PersonnelBean p = personnelDAO.getPersonnel(8000000009L);\r\n    p.setSpecialty(\"chocolate\");\r\n    personnelDAO.editPersonnel(p);\r\n    assertEquals(\"chocolate\", p.getSpecialty());\r\n}"},
 {"id":3313, "methodname":"testEditPersonnelZipCode()", "methodnamerefined":"testEditPersonnelZipCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testEditPersonnelZipCode", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testEditPersonnelZipCode()", "classid":447, "classname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest", "shortclassname":"EditPersonnelTest", "method":"public void testEditPersonnelZipCode() throws Exception {\r\n    PersonnelBean p = personnelDAO.getPersonnel(8000000009L);\r\n    p.setZip(\"55555-6666\");\r\n    personnelDAO.editPersonnel(p);\r\n    assertEquals(\"55555-6666\", p.getZip());\r\n}"},
 {"id":3314, "methodname":"testGetNonExistentPersonnel()", "methodnamerefined":"testGetNonExistentPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testGetNonExistentPersonnel", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testGetNonExistentPersonnel()", "classid":447, "classname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest", "shortclassname":"EditPersonnelTest", "method":"public void testGetNonExistentPersonnel() throws Exception {\r\n    assertNull(personnelDAO.getPersonnel(0L));\r\n}"},
 {"id":3315, "methodname":"testGetPersonnel2()", "methodnamerefined":"testGetPersonnel2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testGetPersonnel2", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.testGetPersonnel2()", "classid":447, "classname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest", "shortclassname":"EditPersonnelTest", "method":"public void testGetPersonnel2() throws Exception {\r\n    PersonnelBean p = personnelDAO.getPersonnel(8000000009L);\r\n    assertNotNull(p);\r\n    assertIsPersonnel2(p);\r\n}"},
 {"id":3316, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.-init-()", "classid":448, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest", "shortclassname":"PersonnelDAOExceptionTest", "method":"PersonnelDAOExceptionTest() {\r\n}"},
 {"id":3317, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.setUp()", "classid":448, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest", "shortclassname":"PersonnelDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3318, "methodname":"testAddEmptyPersonnelException()", "methodnamerefined":"testAddEmptyPersonnelException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testAddEmptyPersonnelException", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testAddEmptyPersonnelException()", "classid":448, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest", "shortclassname":"PersonnelDAOExceptionTest", "method":"public void testAddEmptyPersonnelException() throws Exception {\r\n    try {\r\n        evilDAO.addEmptyPersonnel(Role.HCP);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3319, "methodname":"testCheckPersonnelExistsException()", "methodnamerefined":"testCheckPersonnelExistsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testCheckPersonnelExistsException", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testCheckPersonnelExistsException()", "classid":448, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest", "shortclassname":"PersonnelDAOExceptionTest", "method":"public void testCheckPersonnelExistsException() throws Exception {\r\n    try {\r\n        evilDAO.checkPersonnelExists(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3320, "methodname":"testEditPersonnelException()", "methodnamerefined":"testEditPersonnelException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testEditPersonnelException", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testEditPersonnelException()", "classid":448, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest", "shortclassname":"PersonnelDAOExceptionTest", "method":"public void testEditPersonnelException() throws Exception {\r\n    try {\r\n        evilDAO.editPersonnel(new PersonnelBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3321, "methodname":"testGetHospitalsException()", "methodnamerefined":"testGetHospitalsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testGetHospitalsException", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testGetHospitalsException()", "classid":448, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest", "shortclassname":"PersonnelDAOExceptionTest", "method":"public void testGetHospitalsException() throws Exception {\r\n    try {\r\n        evilDAO.getHospitals(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3322, "methodname":"testGetNameException()", "methodnamerefined":"testGetNameException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testGetNameException", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testGetNameException()", "classid":448, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest", "shortclassname":"PersonnelDAOExceptionTest", "method":"public void testGetNameException() throws Exception {\r\n    try {\r\n        evilDAO.getName(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3323, "methodname":"testPersonnelException()", "methodnamerefined":"testPersonnelException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testPersonnelException", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest.testPersonnelException()", "classid":448, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelDAOExceptionTest", "shortclassname":"PersonnelDAOExceptionTest", "method":"public void testPersonnelException() throws Exception {\r\n    try {\r\n        evilDAO.getPersonnel(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3324, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelExistsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelExistsTest.-init-()", "classid":449, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelExistsTest", "shortclassname":"PersonnelExistsTest", "method":"PersonnelExistsTest() {\r\n}"},
 {"id":3325, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelExistsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelExistsTest.setUp()", "classid":449, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelExistsTest", "shortclassname":"PersonnelExistsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n}"},
 {"id":3326, "methodname":"testGetPersonnel2()", "methodnamerefined":"testGetPersonnel2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.personnel.PersonnelExistsTest.testGetPersonnel2", "fullmethod":"edu.ncsu.csc.itrust.dao.personnel.PersonnelExistsTest.testGetPersonnel2()", "classid":449, "classname":"edu.ncsu.csc.itrust.dao.personnel.PersonnelExistsTest", "shortclassname":"PersonnelExistsTest", "method":"public void testGetPersonnel2() throws Exception {\r\n    gen.uap1();\r\n    assertTrue(personnelDAO.checkPersonnelExists(8000000009L));\r\n    assertFalse(personnelDAO.checkPersonnelExists(8999999999L));\r\n}"},
 {"id":3327, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.AddPHRTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.AddPHRTest.-init-()", "classid":450, "classname":"edu.ncsu.csc.itrust.dao.phr.AddPHRTest", "shortclassname":"AddPHRTest", "method":"AddPHRTest() {\r\n}"},
 {"id":3328, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.AddPHRTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.AddPHRTest.setUp()", "classid":450, "classname":"edu.ncsu.csc.itrust.dao.phr.AddPHRTest", "shortclassname":"AddPHRTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.hcp0();\r\n}"},
 {"id":3329, "methodname":"testAddSimple()", "methodnamerefined":"testAddSimple", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.AddPHRTest.testAddSimple", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.AddPHRTest.testAddSimple()", "classid":450, "classname":"edu.ncsu.csc.itrust.dao.phr.AddPHRTest", "shortclassname":"AddPHRTest", "method":"public void testAddSimple() throws Exception {\r\n    assertEquals(1, hrDAO.getAllHealthRecords(1L).size());\r\n    HealthRecord hr = new HealthRecord();\r\n    hr.setBloodPressureD(5);\r\n    hr.setBloodPressureN(6);\r\n    hr.setCholesterolHDL(52);\r\n    hr.setCholesterolLDL(55);\r\n    hr.setCholesterolTri(65);\r\n    hr.setHeight(2);\r\n    hr.setSmoker(5);\r\n    hr.setWeight(50);\r\n    hr.setPersonnelID(9000000000L);\r\n    hr.setPatientID(2);\r\n    boolean confirm = hrDAO.add(hr);\r\n    assertTrue(confirm);\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(2L);\r\n    assertEquals(3, records.size());\r\n    HealthRecord record = records.get(0);\r\n    assertEquals(5, record.getBloodPressureD());\r\n    assertEquals(6, record.getBloodPressureN());\r\n    assertEquals(52, record.getCholesterolHDL());\r\n    assertEquals(55, record.getCholesterolLDL());\r\n    assertEquals(65, record.getCholesterolTri());\r\n    assertEquals(2.0, record.getHeight());\r\n    assertTrue(record.isSmoker());\r\n    assertEquals(50.0, record.getWeight());\r\n}"},
 {"id":3330, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.-init-()", "classid":451, "classname":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest", "shortclassname":"GetPHRTest", "method":"GetPHRTest() {\r\n}"},
 {"id":3331, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.setUp()", "classid":451, "classname":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest", "shortclassname":"GetPHRTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n}"},
 {"id":3332, "methodname":"testGetPHRFor1()", "methodnamerefined":"testGetPHRFor1", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.testGetPHRFor1", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.testGetPHRFor1()", "classid":451, "classname":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest", "shortclassname":"GetPHRTest", "method":"public void testGetPHRFor1() throws Exception {\r\n    assertEquals(1, hrDAO.getAllHealthRecords(1).size());\r\n}"},
 {"id":3333, "methodname":"testGetPHRFor2()", "methodnamerefined":"testGetPHRFor2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.testGetPHRFor2", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.testGetPHRFor2()", "classid":451, "classname":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest", "shortclassname":"GetPHRTest", "method":"public void testGetPHRFor2() throws Exception {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(2L);\r\n    assertEquals(2, records.size());\r\n    assertEquals(62.0, records.get(0).getHeight());\r\n    assertEquals(210.0, records.get(0).getWeight());\r\n    assertTrue(records.get(0).isSmoker());\r\n    assertEquals(195, records.get(0).getBloodPressureN());\r\n    assertEquals(250, records.get(0).getBloodPressureD());\r\n    assertEquals(36, records.get(0).getCholesterolHDL());\r\n    assertEquals(215, records.get(0).getCholesterolLDL());\r\n    assertEquals(280, records.get(0).getCholesterolTri());\r\n    assertEquals(9000000000L, records.get(0).getPersonnelID());\r\n    assertEquals(Timestamp.valueOf(\"2007-06-07 20:34:58\"), records.get(0).getDateRecorded());\r\n    // Already checked the loader, now check that it got the right second\r\n    // record\r\n    assertEquals(60.0, records.get(1).getHeight());\r\n}"},
 {"id":3334, "methodname":"testGetPHRForNonExistent()", "methodnamerefined":"testGetPHRForNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.testGetPHRForNonExistent", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest.testGetPHRForNonExistent()", "classid":451, "classname":"edu.ncsu.csc.itrust.dao.phr.GetPHRTest", "shortclassname":"GetPHRTest", "method":"public void testGetPHRForNonExistent() throws Exception {\r\n    assertEquals(0, hrDAO.getAllHealthRecords((-1)).size());\r\n}"},
 {"id":3335, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest.-init-()", "classid":452, "classname":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest", "shortclassname":"PHRDAOExceptionTest", "method":"PHRDAOExceptionTest() {\r\n}"},
 {"id":3336, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest.setUp()", "classid":452, "classname":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest", "shortclassname":"PHRDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3337, "methodname":"testAddException()", "methodnamerefined":"testAddException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest.testAddException", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest.testAddException()", "classid":452, "classname":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest", "shortclassname":"PHRDAOExceptionTest", "method":"public void testAddException() throws Exception {\r\n    try {\r\n        evilDAO.add(new HealthRecord());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3338, "methodname":"testGetException()", "methodnamerefined":"testGetException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest.testGetException", "fullmethod":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest.testGetException()", "classid":452, "classname":"edu.ncsu.csc.itrust.dao.phr.PHRDAOExceptionTest", "shortclassname":"PHRDAOExceptionTest", "method":"public void testGetException() throws Exception {\r\n    try {\r\n        evilDAO.getAllHealthRecords(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3339, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.-init-()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"ReferralDAOExceptionTest() {\r\n}"},
 {"id":3340, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.setUp()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n}"},
 {"id":3341, "methodname":"testAddReferral()", "methodnamerefined":"testAddReferral", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testAddReferral", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testAddReferral()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testAddReferral() {\r\n    ReferralBean bean = new ReferralBean();\r\n    try {\r\n        dao.addReferral(bean);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3342, "methodname":"testEditReferral()", "methodnamerefined":"testEditReferral", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testEditReferral", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testEditReferral()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testEditReferral() {\r\n    ReferralBean bean = new ReferralBean();\r\n    try {\r\n        dao.editReferral(bean);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3343, "methodname":"testGetPatientQuery()", "methodnamerefined":"testGetPatientQuery", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetPatientQuery", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetPatientQuery()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetPatientQuery() {\r\n    try {\r\n        ReferralDAO.ReferralListQuery q = dao.getPatientQuery(1L);\r\n        q.query(\"receiverName\", SortDirection.ASCENDING);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3344, "methodname":"testGetReferral()", "methodnamerefined":"testGetReferral", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferral", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferral()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetReferral() {\r\n    try {\r\n        dao.getReferral(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3345, "methodname":"testGetReferralsForPatient()", "methodnamerefined":"testGetReferralsForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsForPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsForPatient()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetReferralsForPatient() {\r\n    try {\r\n        dao.getReferralsForPatient(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3346, "methodname":"testGetReferralsForPatientUnread()", "methodnamerefined":"testGetReferralsForPatientUnread", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsForPatientUnread", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsForPatientUnread()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetReferralsForPatientUnread() {\r\n    try {\r\n        dao.getReferralsForPatientUnread(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3347, "methodname":"testGetReferralsForReceivingHCP()", "methodnamerefined":"testGetReferralsForReceivingHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsForReceivingHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsForReceivingHCP()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetReferralsForReceivingHCP() {\r\n    try {\r\n        dao.getReferralsForReceivingHCP(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3348, "methodname":"testGetReferralsForReceivingHCPUnread()", "methodnamerefined":"testGetReferralsForReceivingHCPUnread", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsForReceivingHCPUnread", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsForReceivingHCPUnread()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetReferralsForReceivingHCPUnread() {\r\n    try {\r\n        dao.getReferralsForReceivingHCPUnread(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3349, "methodname":"testGetReferralsFromOV()", "methodnamerefined":"testGetReferralsFromOV", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsFromOV", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsFromOV()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetReferralsFromOV() {\r\n    try {\r\n        dao.getReferralsFromOV(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3350, "methodname":"testGetReferralsSentFrom()", "methodnamerefined":"testGetReferralsSentFrom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsSentFrom", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsSentFrom()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetReferralsSentFrom() {\r\n    try {\r\n        dao.getReferralsSentFrom(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3351, "methodname":"testGetReferralsSentTo()", "methodnamerefined":"testGetReferralsSentTo", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsSentTo", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetReferralsSentTo()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetReferralsSentTo() {\r\n    try {\r\n        dao.getReferralsSentTo(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3352, "methodname":"testGetSenderQuery()", "methodnamerefined":"testGetSenderQuery", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetSenderQuery", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testGetSenderQuery()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testGetSenderQuery() {\r\n    try {\r\n        ReferralDAO.ReferralListQuery q = dao.getSenderQuery(1L);\r\n        q.query(\"receiverName\", SortDirection.ASCENDING);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3353, "methodname":"testRemoveReferral()", "methodnamerefined":"testRemoveReferral", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testRemoveReferral", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest.testRemoveReferral()", "classid":453, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOExceptionTest", "shortclassname":"ReferralDAOExceptionTest", "method":"public void testRemoveReferral() {\r\n    try {\r\n        dao.removeReferral(1L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3354, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.-init-()", "classid":454, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest", "shortclassname":"ReferralDAOTest", "method":"ReferralDAOTest() {\r\n}"},
 {"id":3355, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.setUp()", "classid":454, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest", "shortclassname":"ReferralDAOTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3356, "methodname":"testGetReferralsForPatient()", "methodnamerefined":"testGetReferralsForPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.testGetReferralsForPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.testGetReferralsForPatient()", "classid":454, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest", "shortclassname":"ReferralDAOTest", "method":"public void testGetReferralsForPatient() {\r\n    ReferralBean r = new ReferralBean();\r\n    r.setId(1L);\r\n    r.setSenderID(2L);\r\n    r.setReceiverID(3L);\r\n    r.setPatientID(4L);\r\n    r.setReferralDetails(\"Five\");\r\n    r.setOvid(6L);\r\n    r.setViewedByHCP(true);\r\n    r.setViewedByPatient(true);\r\n    try {\r\n        dao.addReferral(r);\r\n        List<ReferralBean> referrals = dao.getReferralsForPatient(4L);\r\n        assertTrue(((referrals.size()) == 1));\r\n    } catch (DBException e) {\r\n        fail(\"DBException should not have been thrown\");\r\n    }\r\n}"},
 {"id":3357, "methodname":"testGetReferralsFromOV()", "methodnamerefined":"testGetReferralsFromOV", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.testGetReferralsFromOV", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.testGetReferralsFromOV()", "classid":454, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest", "shortclassname":"ReferralDAOTest", "method":"public void testGetReferralsFromOV() throws Exception {\r\n    assertEquals(4, dao.getReferralsFromOV(955).size());\r\n    assertEquals(0, dao.getReferralsFromOV(952).size());\r\n}"},
 {"id":3358, "methodname":"testGetReferralsSendFrom()", "methodnamerefined":"testGetReferralsSendFrom", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.testGetReferralsSendFrom", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest.testGetReferralsSendFrom()", "classid":454, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralDAOTest", "shortclassname":"ReferralDAOTest", "method":"public void testGetReferralsSendFrom() throws Exception {\r\n    assertEquals(8, dao.getReferralsSentFrom(9000000000L).size());\r\n    assertEquals(9, dao.getReferralsSentFrom(9000000003L).size());\r\n}"},
 {"id":3359, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.-init-()", "classid":455, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest", "shortclassname":"ReferralQueryDAOTest", "method":"ReferralQueryDAOTest() {\r\n}"},
 {"id":3360, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.setUp()", "classid":455, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest", "shortclassname":"ReferralQueryDAOTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.hcp3();\r\n    gen.hcp4();\r\n    gen.hcp5();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient5();\r\n    gen.referral_query_testdata();\r\n}"},
 {"id":3361, "methodname":"testPatientQueryReceiverSort()", "methodnamerefined":"testPatientQueryReceiverSort", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testPatientQueryReceiverSort", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testPatientQueryReceiverSort()", "classid":455, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest", "shortclassname":"ReferralQueryDAOTest", "method":"public void testPatientQueryReceiverSort() throws Exception {\r\n    ReferralDAO.ReferralListQuery query = dao.getPatientQuery(2);\r\n    List<VerboseReferralBean> list = query.query(\"receiverName\", SortDirection.ASCENDING);\r\n    assertEquals(3, list.size());\r\n    assertEquals(\"Kelly Doctor\", list.get(0).getReceiverName());\r\n    assertEquals(\"Gandalf Stormcrow\", list.get(1).getReceiverName());\r\n    assertEquals(\"Gandalf Stormcrow\", list.get(2).getReceiverName());\r\n}"},
 {"id":3362, "methodname":"testReceiverQueryReceiver()", "methodnamerefined":"testReceiverQueryReceiver", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testReceiverQueryReceiver", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testReceiverQueryReceiver()", "classid":455, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest", "shortclassname":"ReferralQueryDAOTest", "method":"public void testReceiverQueryReceiver() throws Exception {\r\n    ReferralDAO.ReferralListQuery query = dao.getReceiverQuery(9000000003L);\r\n    List<VerboseReferralBean> list = query.query(\"referralDetails\", SortDirection.ASCENDING);\r\n    assertEquals(3, list.size());\r\n    assertEquals(101, list.get(0).getOvid());\r\n    assertEquals(103, list.get(1).getOvid());\r\n    assertEquals(103, list.get(2).getOvid());\r\n}"},
 {"id":3363, "methodname":"testSenderQueryPatientSort()", "methodnamerefined":"testSenderQueryPatientSort", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testSenderQueryPatientSort", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testSenderQueryPatientSort()", "classid":455, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest", "shortclassname":"ReferralQueryDAOTest", "method":"public void testSenderQueryPatientSort() throws Exception {\r\n    ReferralDAO.ReferralListQuery query = dao.getSenderQuery(9000000000L);\r\n    List<VerboseReferralBean> list = query.query(\"patientName\", SortDirection.ASCENDING);\r\n    assertEquals(4, list.size());\r\n    assertEquals(\"Random Person\", list.get(0).getPatientName());\r\n    assertEquals(\"Andy Programmer\", list.get(1).getPatientName());\r\n    assertEquals(\"Andy Programmer\", list.get(2).getPatientName());\r\n    assertEquals(\"Baby Programmer\", list.get(3).getPatientName());\r\n}"},
 {"id":3364, "methodname":"testSenderQueryReceiverSort()", "methodnamerefined":"testSenderQueryReceiverSort", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testSenderQueryReceiverSort", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testSenderQueryReceiverSort()", "classid":455, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest", "shortclassname":"ReferralQueryDAOTest", "method":"public void testSenderQueryReceiverSort() throws Exception {\r\n    ReferralDAO.ReferralListQuery query = dao.getSenderQuery(9000000000L);\r\n    List<VerboseReferralBean> list = query.query(\"receiverName\", SortDirection.DESCENDING);\r\n    assertEquals(4, list.size());\r\n    assertEquals(\"Gandalf Stormcrow\", list.get(0).getReceiverName());\r\n    assertEquals(\"Gandalf Stormcrow\", list.get(1).getReceiverName());\r\n    assertEquals(\"Gandalf Stormcrow\", list.get(2).getReceiverName());\r\n    assertEquals(\"Antonio Medico\", list.get(3).getReceiverName());\r\n}"},
 {"id":3365, "methodname":"testSenderQueryReceiverSort2()", "methodnamerefined":"testSenderQueryReceiverSort2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testSenderQueryReceiverSort2", "fullmethod":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest.testSenderQueryReceiverSort2()", "classid":455, "classname":"edu.ncsu.csc.itrust.dao.referral.ReferralQueryDAOTest", "shortclassname":"ReferralQueryDAOTest", "method":"public void testSenderQueryReceiverSort2() throws Exception {\r\n    ReferralDAO.ReferralListQuery query = dao.getSenderQuery(9000000000L);\r\n    List<VerboseReferralBean> list = query.query(\"receiverName\", SortDirection.ASCENDING);\r\n    assertEquals(4, list.size());\r\n    assertEquals(\"Antonio Medico\", list.get(0).getReceiverName());\r\n    assertEquals(\"Gandalf Stormcrow\", list.get(1).getReceiverName());\r\n    assertEquals(\"Gandalf Stormcrow\", list.get(2).getReceiverName());\r\n    assertEquals(\"Gandalf Stormcrow\", list.get(3).getReceiverName());\r\n}"},
 {"id":3366, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.-init-()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"PatientDataTest() {\r\n}"},
 {"id":3367, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.setUp()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.hcp0();\r\n    gen.remoteMonitoring1();\r\n}"},
 {"id":3368, "methodname":"testBadStoreRetrievePatientBPOnlyDataBad()", "methodnamerefined":"testBadStoreRetrievePatientBPOnlyDataBad", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testBadStoreRetrievePatientBPOnlyDataBad", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testBadStoreRetrievePatientBPOnlyDataBad()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"public void testBadStoreRetrievePatientBPOnlyDataBad() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setSystolicBloodPressure(80);\r\n        b.setDiastolicBloodPressure(100);\r\n        EvilrmDAO.storePatientData(2, b, \"self-reported\", 2);\r\n        fail();\r\n    } catch (DBException e) {\r\n        assertSame(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3369, "methodname":"testBadStoreRetrievePatientGlucoseOnlyDataBad()", "methodnamerefined":"testBadStoreRetrievePatientGlucoseOnlyDataBad", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testBadStoreRetrievePatientGlucoseOnlyDataBad", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testBadStoreRetrievePatientGlucoseOnlyDataBad()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"public void testBadStoreRetrievePatientGlucoseOnlyDataBad() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setGlucoseLevel(80);\r\n        EvilrmDAO.storePatientData(2, b, \"self-reported\", 2);\r\n        fail();\r\n    } catch (DBException e) {\r\n        assertSame(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3370, "methodname":"testBadStoreRetrievePatientNormalDataBad()", "methodnamerefined":"testBadStoreRetrievePatientNormalDataBad", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testBadStoreRetrievePatientNormalDataBad", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testBadStoreRetrievePatientNormalDataBad()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"public void testBadStoreRetrievePatientNormalDataBad() throws Exception {\r\n    try {\r\n        RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n        b.setSystolicBloodPressure(100);\r\n        b.setDiastolicBloodPressure(70);\r\n        b.setGlucoseLevel(80);\r\n        EvilrmDAO.storePatientData(2, b, \"self-reported\", 2);\r\n        fail();\r\n    } catch (DBException e) {\r\n        assertSame(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3371, "methodname":"testGetMonitoringHCPs()", "methodnamerefined":"testGetMonitoringHCPs", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testGetMonitoringHCPs", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testGetMonitoringHCPs()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"public void testGetMonitoringHCPs() throws Exception {\r\n    gen.remoteMonitoring5();\r\n    assertTrue(((rmDAO.getMonitoringHCPs(1).size()) == 1));\r\n}"},
 {"id":3372, "methodname":"testGetTelemedicineBean()", "methodnamerefined":"testGetTelemedicineBean", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testGetTelemedicineBean", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testGetTelemedicineBean()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"public void testGetTelemedicineBean() throws Exception {\r\n    try {\r\n        List<TelemedicineBean> tBeans = rmDAO.getTelemedicineBean(2L);\r\n        assertEquals(1, tBeans.size());\r\n    } catch (iTrustException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":3373, "methodname":"testRemovePatientFromListBad()", "methodnamerefined":"testRemovePatientFromListBad", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testRemovePatientFromListBad", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testRemovePatientFromListBad()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"public void testRemovePatientFromListBad() throws Exception {\r\n    try {\r\n        EvilrmDAO.removePatientFromList(1, 2);\r\n        fail();\r\n    } catch (DBException e) {\r\n        assertSame(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3374, "methodname":"testStoreRetrievePatientNormalData()", "methodnamerefined":"testStoreRetrievePatientNormalData", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testStoreRetrievePatientNormalData", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testStoreRetrievePatientNormalData()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"public void testStoreRetrievePatientNormalData() throws Exception {\r\n    RemoteMonitoringDataBean b = new RemoteMonitoringDataBean();\r\n    b.setSystolicBloodPressure(100);\r\n    b.setDiastolicBloodPressure(70);\r\n    b.setGlucoseLevel(80);\r\n    rmDAO.storePatientData(2, b, \"self-reported\", 2);\r\n    List<RemoteMonitoringDataBean> d = rmDAO.getPatientsData(9000000000L);\r\n    assertEquals(2, d.get(0).getPatientMID());\r\n    assertEquals(100, d.get(0).getSystolicBloodPressure());\r\n    assertEquals(70, d.get(0).getDiastolicBloodPressure());\r\n    assertEquals(80, d.get(0).getGlucoseLevel());\r\n}"},
 {"id":3375, "methodname":"testValidatePR()", "methodnamerefined":"testValidatePR", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testValidatePR", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testValidatePR()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"public void testValidatePR() throws Exception {\r\n    try {\r\n        rmDAO.validatePR(2, 1);\r\n        assert true;\r\n    } catch (iTrustException e) {\r\n        fail();\r\n    }\r\n}"},
 {"id":3376, "methodname":"testValidatePRError()", "methodnamerefined":"testValidatePRError", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testValidatePRError", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest.testValidatePRError()", "classid":456, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientDataTest", "shortclassname":"PatientDataTest", "method":"public void testValidatePRError() throws Exception {\r\n    try {\r\n        rmDAO.validatePR(1, 2);\r\n        fail();\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Representer is not valid for patient 2\", e.getMessage());\r\n    }\r\n}"},
 {"id":3377, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientListTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientListTest.-init-()", "classid":457, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientListTest", "shortclassname":"PatientListTest", "method":"PatientListTest() {\r\n}"},
 {"id":3378, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientListTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientListTest.setUp()", "classid":457, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientListTest", "shortclassname":"PatientListTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.hcp0();\r\n}"},
 {"id":3379, "methodname":"testAddRemoveFromList()", "methodnamerefined":"testAddRemoveFromList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientListTest.testAddRemoveFromList", "fullmethod":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientListTest.testAddRemoveFromList()", "classid":457, "classname":"edu.ncsu.csc.itrust.dao.remotemonitoring.PatientListTest", "shortclassname":"PatientListTest", "method":"public void testAddRemoveFromList() throws Exception {\r\n    TelemedicineBean tBean = new TelemedicineBean();\r\n    assertTrue(rmDAO.addPatientToList(2L, 9000000000L, tBean));\r\n    assertTrue(rmDAO.removePatientFromList(2L, 9000000000L));\r\n}"},
 {"id":3380, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.-init-()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"ReportRequestDAOTest() {\r\n}"},
 {"id":3381, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.setUp()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.reportRequests();\r\n}"},
 {"id":3382, "methodname":"testAddThenRetrieveReport()", "methodnamerefined":"testAddThenRetrieveReport", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testAddThenRetrieveReport", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testAddThenRetrieveReport()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testAddThenRetrieveReport() throws Exception {\r\n    long id = dao.addReportRequest(9000000000L, 2, new SimpleDateFormat(ReportRequestBean.dateFormat).parse(\"06/06/2008 13:00\"));\r\n    ReportRequestBean b2 = dao.getReportRequest(id);\r\n    assertEquals(9000000000L, b2.getRequesterMID());\r\n    assertEquals(2, b2.getPatientMID());\r\n    assertEquals(\"06/06/2008 13:00\", b2.getRequestedDateString());\r\n    assertEquals(ReportRequestBean.Requested, b2.getStatus());\r\n}"},
 {"id":3383, "methodname":"testAddThenSetViewed()", "methodnamerefined":"testAddThenSetViewed", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testAddThenSetViewed", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testAddThenSetViewed()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testAddThenSetViewed() throws Exception {\r\n    long id = dao.addReportRequest(9000000000L, 2, new SimpleDateFormat(ReportRequestBean.dateFormat).parse(\"06/06/2008 13:00\"));\r\n    dao.setViewed(id, new SimpleDateFormat(ReportRequestBean.dateFormat).parse(\"08/08/2008 15:00\"));\r\n    ReportRequestBean b2 = dao.getReportRequest(id);\r\n    assertEquals(\"08/08/2008 15:00\", b2.getViewedDateString());\r\n    assertEquals(ReportRequestBean.Viewed, b2.getStatus());\r\n}"},
 {"id":3384, "methodname":"testGetReportsCheckListPatient()", "methodnamerefined":"testGetReportsCheckListPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetReportsCheckListPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetReportsCheckListPatient()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testGetReportsCheckListPatient() throws Exception {\r\n    List<ReportRequestBean> list = dao.getAllReportRequestsForPatient(2L);\r\n    assertEquals(4, list.size());\r\n    assertEquals(ReportRequestBean.Requested, list.get(0).getStatus());\r\n}"},
 {"id":3385, "methodname":"testGetReportsCheckListRequester()", "methodnamerefined":"testGetReportsCheckListRequester", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetReportsCheckListRequester", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetReportsCheckListRequester()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testGetReportsCheckListRequester() throws Exception {\r\n    List<ReportRequestBean> list = dao.getAllReportRequestsForRequester(9000000000L);\r\n    assertEquals(6, list.size());\r\n    assertEquals(ReportRequestBean.Requested, list.get(0).getStatus());\r\n}"},
 {"id":3386, "methodname":"testGetReportsNullReportID()", "methodnamerefined":"testGetReportsNullReportID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetReportsNullReportID", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetReportsNullReportID()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testGetReportsNullReportID() throws Exception {\r\n    try {\r\n        dao.getReportRequest(0);\r\n        fail(\"Should have thrown an exception\");\r\n    } catch (DBException ex) {\r\n        assertEquals(\"ID cannot be null\", ex.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3387, "methodname":"testGetReportsUnknownRequeter()", "methodnamerefined":"testGetReportsUnknownRequeter", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetReportsUnknownRequeter", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetReportsUnknownRequeter()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testGetReportsUnknownRequeter() throws Exception {\r\n    try {\r\n        dao.getAllReportRequestsForRequester(0);\r\n        fail(\"should have thrown an exception\");\r\n    } catch (DBException ex) {\r\n        assertEquals(\"RequesterMID cannot be null\", ex.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3388, "methodname":"testGetSpecificReport3CheckDetails()", "methodnamerefined":"testGetSpecificReport3CheckDetails", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetSpecificReport3CheckDetails", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetSpecificReport3CheckDetails()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testGetSpecificReport3CheckDetails() throws Exception {\r\n    ReportRequestBean b = dao.getReportRequest(3);\r\n    assertEquals(3, b.getID());\r\n    assertEquals(9000000000L, b.getRequesterMID());\r\n    assertEquals(2, b.getPatientMID());\r\n    assertEquals(\"01/03/2008 12:00\", b.getRequestedDateString());\r\n}"},
 {"id":3389, "methodname":"testGetSpecificReport4CheckDetails()", "methodnamerefined":"testGetSpecificReport4CheckDetails", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetSpecificReport4CheckDetails", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testGetSpecificReport4CheckDetails()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testGetSpecificReport4CheckDetails() throws Exception {\r\n    ReportRequestBean b = dao.getReportRequest(4);\r\n    assertEquals(4, b.getID());\r\n    assertEquals(9000000000L, b.getRequesterMID());\r\n    assertEquals(2, b.getPatientMID());\r\n    assertEquals(\"01/04/2008 12:00\", b.getRequestedDateString());\r\n    assertEquals(\"03/04/2008 12:00\", b.getViewedDateString());\r\n    assertEquals(ReportRequestBean.Viewed, b.getStatus());\r\n}"},
 {"id":3390, "methodname":"testInsertReportFailureNullMIDs()", "methodnamerefined":"testInsertReportFailureNullMIDs", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testInsertReportFailureNullMIDs", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testInsertReportFailureNullMIDs()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testInsertReportFailureNullMIDs() throws Exception {\r\n    try {\r\n        dao.addReportRequest(0, 0, null);\r\n        fail(\"Should have throw exception\");\r\n    } catch (DBException ex) {\r\n        assertEquals(\"RequesterMID cannot be null\", ex.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3391, "methodname":"testSetViewedFailure()", "methodnamerefined":"testSetViewedFailure", "methodabbreviation":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testSetViewedFailure", "fullmethod":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest.testSetViewedFailure()", "classid":458, "classname":"edu.ncsu.csc.itrust.dao.reportrequest.ReportRequestDAOTest", "shortclassname":"ReportRequestDAOTest", "method":"public void testSetViewedFailure() throws Exception {\r\n    try {\r\n        dao.setViewed(0, null);\r\n        fail(\"Should have throw exception\");\r\n    } catch (DBException ex) {\r\n        assertEquals(\"ID cannot be null\", ex.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3392, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.-init-()", "classid":459, "classname":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest", "shortclassname":"RiskDAOExceptionTest", "method":"RiskDAOExceptionTest() {\r\n}"},
 {"id":3393, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.setUp()", "classid":459, "classname":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest", "shortclassname":"RiskDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3394, "methodname":"testChildhoodInfectionException()", "methodnamerefined":"testChildhoodInfectionException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.testChildhoodInfectionException", "fullmethod":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.testChildhoodInfectionException()", "classid":459, "classname":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest", "shortclassname":"RiskDAOExceptionTest", "method":"public void testChildhoodInfectionException() throws Exception {\r\n    try {\r\n        evilDAO.hadChildhoodInfection(0L, 0.0);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3395, "methodname":"testHasSmokedException()", "methodnamerefined":"testHasSmokedException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.testHasSmokedException", "fullmethod":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.testHasSmokedException()", "classid":459, "classname":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest", "shortclassname":"RiskDAOExceptionTest", "method":"public void testHasSmokedException() throws Exception {\r\n    try {\r\n        evilDAO.hasSmoked(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3396, "methodname":"testPriorDiagnosesException()", "methodnamerefined":"testPriorDiagnosesException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.testPriorDiagnosesException", "fullmethod":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest.testPriorDiagnosesException()", "classid":459, "classname":"edu.ncsu.csc.itrust.dao.risk.RiskDAOExceptionTest", "shortclassname":"RiskDAOExceptionTest", "method":"public void testPriorDiagnosesException() throws Exception {\r\n    try {\r\n        evilDAO.hadPriorDiagnoses(0L, 0.0, 0.0);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3397, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.-init-()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"CPTCodeTest() {\r\n}"},
 {"id":3398, "methodname":"clearCPTCodes()", "methodnamerefined":"clearCPTCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.clearCPTCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.clearCPTCodes()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"private void clearCPTCodes() throws SQLException {\r\n    new DBBuilder().executeSQL(Arrays.asList(\"DELETE FROM cptcodes;\"));\r\n}"},
 {"id":3399, "methodname":"genericAdd(java.lang.String,java.lang.String)", "methodnamerefined":"genericAdd", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.genericAdd", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.genericAdd(java.lang.String,java.lang.String)", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"private ProcedureBean genericAdd(String code, String desc) throws DBException, iTrustException {\r\n    ProcedureBean proc = new ProcedureBean(code, desc);\r\n    assertTrue(cptDAO.addCPTCode(proc));\r\n    assertEquals(desc, cptDAO.getCPTCode(code).getDescription());\r\n    return proc;\r\n}"},
 {"id":3400, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.setUp()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.cptCodes();\r\n}"},
 {"id":3401, "methodname":"testAddCPTCode()", "methodnamerefined":"testAddCPTCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testAddCPTCode", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testAddCPTCode()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"public void testAddCPTCode() throws DBException, iTrustException {\r\n    final String code = \"9999F\";\r\n    final String desc = \"testAddCPTCode description\";\r\n    genericAdd(code, desc);\r\n    List<ProcedureBean> allCodes = cptDAO.getAllCPTCodes();\r\n    assertEquals(code, allCodes.get(((allCodes.size()) - 1)).getCPTCode());\r\n    assertEquals(desc, allCodes.get(((allCodes.size()) - 1)).getDescription());\r\n}"},
 {"id":3402, "methodname":"testAddDupe()", "methodnamerefined":"testAddDupe", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testAddDupe", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testAddDupe()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"public void testAddDupe() throws DBException, iTrustException, SQLException {\r\n    final String code = \"0000A\";\r\n    final String descrip0 = \"testAddDupe description\";\r\n    ProcedureBean proc = genericAdd(code, descrip0);\r\n    try {\r\n        proc.setDescription(\"\");\r\n        cptDAO.addCPTCode(proc);\r\n        fail(\"CPTCodeTest.testAddDupe failed to catch dupe\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Error: Code already exists.\", e.getMessage());\r\n        proc = cptDAO.getCPTCode(code);\r\n        assertEquals(descrip0, proc.getDescription());\r\n    }\r\n}"},
 {"id":3403, "methodname":"testGetAllCPT()", "methodnamerefined":"testGetAllCPT", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testGetAllCPT", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testGetAllCPT()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"// order by code asc but field isnt numerical, so codes will NOT be\r\n// in NUMERICAL ascending order...\r\n// (unless codes are switched to fixed width)\r\npublic void testGetAllCPT() throws Exception {\r\n    List<ProcedureBean> codes = cptDAO.getAllCPTCodes();\r\n    assertEquals(17, codes.size());\r\n    assertEquals(\"Injection procedure\", codes.get(0).getDescription());\r\n    assertEquals(\"87\", codes.get(1).getCPTCode());\r\n}"},
 {"id":3404, "methodname":"testGetAllFromEmptyTable()", "methodnamerefined":"testGetAllFromEmptyTable", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testGetAllFromEmptyTable", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testGetAllFromEmptyTable()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"public void testGetAllFromEmptyTable() throws Exception {\r\n    clearCPTCodes();\r\n    assertEquals(0, cptDAO.getAllCPTCodes().size());\r\n}"},
 {"id":3405, "methodname":"testGetCPTCode()", "methodnamerefined":"testGetCPTCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testGetCPTCode", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testGetCPTCode()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"public void testGetCPTCode() throws DBException {\r\n    ProcedureBean proc = cptDAO.getCPTCode(\"87\");\r\n    assertEquals(\"87\", proc.getCPTCode());\r\n    assertEquals(\"Diagnostic Radiology\", proc.getDescription());\r\n}"},
 {"id":3406, "methodname":"testGetCPTCodeFromEmptyTable()", "methodnamerefined":"testGetCPTCodeFromEmptyTable", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testGetCPTCodeFromEmptyTable", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testGetCPTCodeFromEmptyTable()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"public void testGetCPTCodeFromEmptyTable() throws Exception {\r\n    clearCPTCodes();\r\n    assertNull(cptDAO.getCPTCode(\"87\"));\r\n}"},
 {"id":3407, "methodname":"testUpdateDescription()", "methodnamerefined":"testUpdateDescription", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testUpdateDescription", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testUpdateDescription()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"public void testUpdateDescription() throws DBException, iTrustException {\r\n    final String code = \"7777D\";\r\n    final String desc = \"short description code\";\r\n    ProcedureBean proc = genericAdd(code, \"\");\r\n    proc.setDescription(desc);\r\n    assertEquals(1, cptDAO.updateCode(proc));\r\n    proc = cptDAO.getCPTCode(code);\r\n    assertEquals(\"short description code\", proc.getDescription());\r\n}"},
 {"id":3408, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testUpdateNonExistent()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"public void testUpdateNonExistent() throws DBException, SQLException {\r\n    final String code = \"0000F\";\r\n    ProcedureBean proc = new ProcedureBean(code, \"\");\r\n    assertEquals(0, cptDAO.updateCode(proc));\r\n    assertEquals(17, cptDAO.getAllCPTCodes().size());\r\n}"},
 {"id":3409, "methodname":"testgetImmunizationCPTCodes()", "methodnamerefined":"testgetImmunizationCPTCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testgetImmunizationCPTCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testgetImmunizationCPTCodes()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"public void testgetImmunizationCPTCodes() throws DBException {\r\n    List<ProcedureBean> pBeans = cptDAO.getImmunizationCPTCodes();\r\n    assertEquals(15, pBeans.size());\r\n}"},
 {"id":3410, "methodname":"testgetImmunizationCPTCodes2()", "methodnamerefined":"testgetImmunizationCPTCodes2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testgetImmunizationCPTCodes2", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest.testgetImmunizationCPTCodes2()", "classid":460, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTCodeTest", "shortclassname":"CPTCodeTest", "method":"public void testgetImmunizationCPTCodes2() {\r\n    try {\r\n        evilCptDAO.getImmunizationCPTCodes();\r\n        fail(\"Should have thrown DBException\");\r\n    } catch (DBException e) {\r\n        // success\r\n    }\r\n}"},
 {"id":3411, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest.-init-()", "classid":461, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest", "shortclassname":"CPTDAOExceptionTest", "method":"CPTDAOExceptionTest() {\r\n}"},
 {"id":3412, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest.setUp()", "classid":461, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest", "shortclassname":"CPTDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3413, "methodname":"testAddCodeException()", "methodnamerefined":"testAddCodeException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest.testAddCodeException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest.testAddCodeException()", "classid":461, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest", "shortclassname":"CPTDAOExceptionTest", "method":"public void testAddCodeException() throws Exception {\r\n    try {\r\n        evilDAO.addCPTCode(new ProcedureBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3414, "methodname":"testUpdateCodeException()", "methodnamerefined":"testUpdateCodeException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest.testUpdateCodeException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest.testUpdateCodeException()", "classid":461, "classname":"edu.ncsu.csc.itrust.dao.standards.CPTDAOExceptionTest", "shortclassname":"CPTDAOExceptionTest", "method":"public void testUpdateCodeException() throws Exception {\r\n    try {\r\n        evilDAO.updateCode(new ProcedureBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3415, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.ICDCodeTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.ICDCodeTest.-init-()", "classid":462, "classname":"edu.ncsu.csc.itrust.dao.standards.ICDCodeTest", "shortclassname":"ICDCodeTest", "method":"ICDCodeTest() {\r\n}"},
 {"id":3416, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.ICDCodeTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.ICDCodeTest.setUp()", "classid":462, "classname":"edu.ncsu.csc.itrust.dao.standards.ICDCodeTest", "shortclassname":"ICDCodeTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.icd9cmCodes();\r\n}"},
 {"id":3417, "methodname":"testGetAllICD()", "methodnamerefined":"testGetAllICD", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.ICDCodeTest.testGetAllICD", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.ICDCodeTest.testGetAllICD()", "classid":462, "classname":"edu.ncsu.csc.itrust.dao.standards.ICDCodeTest", "shortclassname":"ICDCodeTest", "method":"public void testGetAllICD() throws Exception {\r\n    List<DiagnosisBean> codes = icdDAO.getAllICDCodes();\r\n    assertEquals(13, codes.size());\r\n    assertEquals(\"Tuberculosis of the lung\", codes.get(0).getDescription());\r\n    assertEquals(\"15.00\", codes.get(1).getICDCode());\r\n}"},
 {"id":3418, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.-init-()", "classid":463, "classname":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest", "shortclassname":"ICDDAOExceptionTest", "method":"ICDDAOExceptionTest() {\r\n}"},
 {"id":3419, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.setUp()", "classid":463, "classname":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest", "shortclassname":"ICDDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3420, "methodname":"testAddICDCodeException()", "methodnamerefined":"testAddICDCodeException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.testAddICDCodeException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.testAddICDCodeException()", "classid":463, "classname":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest", "shortclassname":"ICDDAOExceptionTest", "method":"public void testAddICDCodeException() throws Exception {\r\n    try {\r\n        evilDAO.addICDCode(new DiagnosisBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3421, "methodname":"testGetAllICDCodesException()", "methodnamerefined":"testGetAllICDCodesException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.testGetAllICDCodesException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.testGetAllICDCodesException()", "classid":463, "classname":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest", "shortclassname":"ICDDAOExceptionTest", "method":"public void testGetAllICDCodesException() throws Exception {\r\n    try {\r\n        evilDAO.getAllICDCodes();\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3422, "methodname":"testGetICDException()", "methodnamerefined":"testGetICDException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.testGetICDException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.testGetICDException()", "classid":463, "classname":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest", "shortclassname":"ICDDAOExceptionTest", "method":"public void testGetICDException() throws Exception {\r\n    try {\r\n        evilDAO.getICDCode(\"0.0\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3423, "methodname":"testUpdateCodeException()", "methodnamerefined":"testUpdateCodeException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.testUpdateCodeException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest.testUpdateCodeException()", "classid":463, "classname":"edu.ncsu.csc.itrust.dao.standards.ICDDAOExceptionTest", "shortclassname":"ICDDAOExceptionTest", "method":"public void testUpdateCodeException() throws Exception {\r\n    try {\r\n        evilDAO.updateCode(new DiagnosisBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3424, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.-init-()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"NDCodeTest() {\r\n}"},
 {"id":3425, "methodname":"clearNDCodes()", "methodnamerefined":"clearNDCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.clearNDCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.clearNDCodes()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"private void clearNDCodes() throws SQLException {\r\n    new DBBuilder().executeSQL(Arrays.asList(\"DELETE FROM ndcodes;\"));\r\n}"},
 {"id":3426, "methodname":"genericAdd(java.lang.String,java.lang.String)", "methodnamerefined":"genericAdd", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.genericAdd", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.genericAdd(java.lang.String,java.lang.String)", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"private MedicationBean genericAdd(String code, String desc) throws DBException, iTrustException {\r\n    MedicationBean proc = new MedicationBean(code, desc);\r\n    assertTrue(ndDAO.addNDCode(proc));\r\n    assertEquals(desc, ndDAO.getNDCode(code).getDescription());\r\n    return proc;\r\n}"},
 {"id":3427, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.setUp()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.ndCodes();\r\n}"},
 {"id":3428, "methodname":"testAddDupe()", "methodnamerefined":"testAddDupe", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testAddDupe", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testAddDupe()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"public void testAddDupe() throws DBException, iTrustException, SQLException {\r\n    clearNDCodes();\r\n    final String code = \"000000000\";\r\n    final String descrip0 = \"testAddDupe description\";\r\n    MedicationBean proc = genericAdd(code, descrip0);\r\n    try {\r\n        proc.setDescription(\"\");\r\n        ndDAO.addNDCode(proc);\r\n        fail(\"NDCodeTest.testAddDupe failed to catch dupe\");\r\n    } catch (iTrustException e) {\r\n        assertEquals(\"Error: Code already exists.\", e.getMessage());\r\n        proc = ndDAO.getNDCode(code);\r\n        assertEquals(descrip0, proc.getDescription());\r\n    }\r\n}"},
 {"id":3429, "methodname":"testAddNDCode()", "methodnamerefined":"testAddNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testAddNDCode", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testAddNDCode()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"public void testAddNDCode() throws DBException, iTrustException {\r\n    final String code = \"999999999\";\r\n    final String desc = \"testAddNDCode description\";\r\n    genericAdd(code, desc);\r\n    List<MedicationBean> allCodes = ndDAO.getAllNDCodes();\r\n    assertEquals(code, allCodes.get(((allCodes.size()) - 1)).getNDCode());\r\n    assertEquals(desc, allCodes.get(((allCodes.size()) - 1)).getDescription());\r\n}"},
 {"id":3430, "methodname":"testGetAllFromEmptyTable()", "methodnamerefined":"testGetAllFromEmptyTable", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testGetAllFromEmptyTable", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testGetAllFromEmptyTable()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"public void testGetAllFromEmptyTable() throws DBException, SQLException {\r\n    clearNDCodes();\r\n    assertEquals(0, ndDAO.getAllNDCodes().size());\r\n}"},
 {"id":3431, "methodname":"testGetAllNDCodes()", "methodnamerefined":"testGetAllNDCodes", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testGetAllNDCodes", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testGetAllNDCodes()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"// order by code asc but field isnt numerical, so codes will NOT be\r\n// in NUMERICAL ascending order...\r\n// (unless codes are switched to fixed width)\r\npublic void testGetAllNDCodes() throws Exception {\r\n    List<MedicationBean> codes = ndDAO.getAllNDCodes();\r\n    assertEquals(5, codes.size());\r\n    assertEquals(\"00060431\", codes.get(0).getNDCode());\r\n    assertEquals(\"Tetracycline\", codes.get(1).getDescription());\r\n}"},
 {"id":3432, "methodname":"testGetNDCode()", "methodnamerefined":"testGetNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testGetNDCode", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testGetNDCode()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"public void testGetNDCode() throws DBException {\r\n    MedicationBean proc = ndDAO.getNDCode(\"081096\");\r\n    assertEquals(\"081096\", proc.getNDCode());\r\n    assertEquals(\"Aspirin\", proc.getDescription());\r\n}"},
 {"id":3433, "methodname":"testGetNDCodeFromEmptyTable()", "methodnamerefined":"testGetNDCodeFromEmptyTable", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testGetNDCodeFromEmptyTable", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testGetNDCodeFromEmptyTable()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"public void testGetNDCodeFromEmptyTable() throws DBException, SQLException {\r\n    clearNDCodes();\r\n    assertEquals(null, ndDAO.getNDCode(\"009042407\"));\r\n}"},
 {"id":3434, "methodname":"testUpdateDescription()", "methodnamerefined":"testUpdateDescription", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testUpdateDescription", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testUpdateDescription()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"public void testUpdateDescription() throws DBException, iTrustException {\r\n    final String code = \"777777777\";\r\n    final String desc = \"testUpdateDescription NEW description\";\r\n    MedicationBean proc = genericAdd(code, \"\");\r\n    proc.setDescription(desc);\r\n    assertEquals(1, ndDAO.updateCode(proc));\r\n    proc = ndDAO.getNDCode(code);\r\n    assertEquals(desc, proc.getDescription());\r\n}"},
 {"id":3435, "methodname":"testUpdateNonExistent()", "methodnamerefined":"testUpdateNonExistent", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testUpdateNonExistent", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest.testUpdateNonExistent()", "classid":464, "classname":"edu.ncsu.csc.itrust.dao.standards.NDCodeTest", "shortclassname":"NDCodeTest", "method":"public void testUpdateNonExistent() throws DBException, SQLException {\r\n    clearNDCodes();\r\n    final String code = \"0000F\";\r\n    MedicationBean proc = new MedicationBean(code, \"\");\r\n    assertEquals(0, ndDAO.updateCode(proc));\r\n    assertEquals(0, ndDAO.getAllNDCodes().size());\r\n}"},
 {"id":3436, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.-init-()", "classid":465, "classname":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest", "shortclassname":"NDDAOExceptionTest", "method":"NDDAOExceptionTest() {\r\n}"},
 {"id":3437, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.setUp()", "classid":465, "classname":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest", "shortclassname":"NDDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3438, "methodname":"testAddCodeException()", "methodnamerefined":"testAddCodeException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.testAddCodeException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.testAddCodeException()", "classid":465, "classname":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest", "shortclassname":"NDDAOExceptionTest", "method":"public void testAddCodeException() throws Exception {\r\n    try {\r\n        evilDAO.addNDCode(new MedicationBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3439, "methodname":"testGetAllCodesException()", "methodnamerefined":"testGetAllCodesException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.testGetAllCodesException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.testGetAllCodesException()", "classid":465, "classname":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest", "shortclassname":"NDDAOExceptionTest", "method":"public void testGetAllCodesException() throws Exception {\r\n    try {\r\n        evilDAO.getAllNDCodes();\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3440, "methodname":"testGetException()", "methodnamerefined":"testGetException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.testGetException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.testGetException()", "classid":465, "classname":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest", "shortclassname":"NDDAOExceptionTest", "method":"public void testGetException() throws Exception {\r\n    try {\r\n        evilDAO.getNDCode(\"\");\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3441, "methodname":"testUpdateCodeException()", "methodnamerefined":"testUpdateCodeException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.testUpdateCodeException", "fullmethod":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest.testUpdateCodeException()", "classid":465, "classname":"edu.ncsu.csc.itrust.dao.standards.NDDAOExceptionTest", "shortclassname":"NDDAOExceptionTest", "method":"public void testUpdateCodeException() throws Exception {\r\n    try {\r\n        evilDAO.updateCode(new MedicationBean());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3442, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.-init-()", "classid":466, "classname":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest", "shortclassname":"AddSurveyTest", "method":"AddSurveyTest() {\r\n}"},
 {"id":3443, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.setUp()", "classid":466, "classname":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest", "shortclassname":"AddSurveyTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.surveyResults();\r\n}"},
 {"id":3444, "methodname":"testAddSurveyData()", "methodnamerefined":"testAddSurveyData", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.testAddSurveyData", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.testAddSurveyData()", "classid":466, "classname":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest", "shortclassname":"AddSurveyTest", "method":"public void testAddSurveyData() throws Exception {\r\n    SurveyBean surveyBean = new SurveyBean();\r\n    surveyBean.setSurveyDate(new Date());\r\n    surveyBean.setExamRoomMinutes(30);\r\n    surveyBean.setTreatmentSatisfaction(1);\r\n    surveyBean.setVisitSatisfaction(2);\r\n    SurveyAction surveyAction = new SurveyAction(TestDAOFactory.getTestInstance(), 2L);\r\n    surveyAction.addSurvey(surveyBean, 903);\r\n    SurveyBean newBean = surveyDAO.getSurveyData(903);\r\n    String dateStr = new SimpleDateFormat(SurveyBean.dateFormat).format(new Date());\r\n    assertEquals(dateStr, newBean.getSurveyDateString());\r\n    assertEquals(903, newBean.getVisitID());\r\n    assertEquals(30, newBean.getExamRoomMinutes());\r\n    assertEquals(1, newBean.getTreatmentSatisfaction());\r\n    assertEquals(2, newBean.getVisitSatisfaction());\r\n}"},
 {"id":3445, "methodname":"testAddSurveyData2()", "methodnamerefined":"testAddSurveyData2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.testAddSurveyData2", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.testAddSurveyData2()", "classid":466, "classname":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest", "shortclassname":"AddSurveyTest", "method":"public void testAddSurveyData2() throws Exception {\r\n    SurveyBean surveyBean = new SurveyBean();\r\n    // all this data would generally be set in the JSP\r\n    String date = \"05/02/2008 13:30\";\r\n    surveyBean.setSurveyDateString(date);\r\n    surveyBean.setExamRoomMinutes(33);\r\n    surveyBean.setTreatmentSatisfaction(5);\r\n    surveyBean.setVisitSatisfaction(4);\r\n    SurveyAction surveyAction = new SurveyAction(TestDAOFactory.getTestInstance(), 2L);\r\n    surveyAction.addSurvey(surveyBean, 905);\r\n    SurveyBean newBean = surveyDAO.getSurveyData(905);\r\n    String dateStr = new SimpleDateFormat(SurveyBean.dateFormat).format(new Date());\r\n    assertEquals(dateStr, newBean.getSurveyDateString());\r\n    assertEquals(905, newBean.getVisitID());\r\n    assertEquals(33, newBean.getExamRoomMinutes());\r\n    assertEquals(5, newBean.getTreatmentSatisfaction());\r\n    assertEquals(4, newBean.getVisitSatisfaction());\r\n}"},
 {"id":3446, "methodname":"testAddSurveyData3()", "methodnamerefined":"testAddSurveyData3", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.testAddSurveyData3", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.testAddSurveyData3()", "classid":466, "classname":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest", "shortclassname":"AddSurveyTest", "method":"public void testAddSurveyData3() throws Exception {\r\n    SurveyBean surveyBean = new SurveyBean();\r\n    // all this data would generally be set in the JSP\r\n    String date = \"05/03/2008 17:30\";\r\n    surveyBean.setSurveyDate(new SimpleDateFormat(SurveyBean.dateFormat).parse(date));\r\n    surveyBean.setExamRoomMinutes(2);\r\n    surveyBean.setTreatmentSatisfaction(2);\r\n    surveyBean.setVisitSatisfaction(1);\r\n    SurveyAction surveyAction = new SurveyAction(TestDAOFactory.getTestInstance(), 2L);\r\n    surveyAction.addSurvey(surveyBean, 910);\r\n    SurveyBean newBean = surveyDAO.getSurveyData(910);\r\n    String dateStr = new SimpleDateFormat(SurveyBean.dateFormat).format(new Date());\r\n    assertEquals(dateStr, newBean.getSurveyDateString());\r\n    assertEquals(910, newBean.getVisitID());\r\n    assertEquals(2, newBean.getExamRoomMinutes());\r\n    assertEquals(2, newBean.getTreatmentSatisfaction());\r\n    assertEquals(1, newBean.getVisitSatisfaction());\r\n}"},
 {"id":3447, "methodname":"testIsSurveyCompleted()", "methodnamerefined":"testIsSurveyCompleted", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.testIsSurveyCompleted", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest.testIsSurveyCompleted()", "classid":466, "classname":"edu.ncsu.csc.itrust.dao.survey.AddSurveyTest", "shortclassname":"AddSurveyTest", "method":"public void testIsSurveyCompleted() throws Exception {\r\n    assertEquals(false, surveyDAO.isSurveyCompleted(951L));\r\n    assertEquals(true, surveyDAO.isSurveyCompleted(952L));\r\n}"},
 {"id":3448, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.-init-()", "classid":467, "classname":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest", "shortclassname":"SurveyExceptionTest", "method":"SurveyExceptionTest() {\r\n}"},
 {"id":3449, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.setUp()", "classid":467, "classname":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest", "shortclassname":"SurveyExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3450, "methodname":"testAddSurveyDataException()", "methodnamerefined":"testAddSurveyDataException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.testAddSurveyDataException", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.testAddSurveyDataException()", "classid":467, "classname":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest", "shortclassname":"SurveyExceptionTest", "method":"public void testAddSurveyDataException() throws Exception {\r\n    try {\r\n        surveyDAO.addCompletedSurvey(null, Calendar.getInstance().getTime());\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException ex) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, ex.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3451, "methodname":"testGetSurveyDataException()", "methodnamerefined":"testGetSurveyDataException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.testGetSurveyDataException", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.testGetSurveyDataException()", "classid":467, "classname":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest", "shortclassname":"SurveyExceptionTest", "method":"public void testGetSurveyDataException() throws Exception {\r\n    try {\r\n        surveyDAO.getSurveyData(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException ex) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, ex.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3452, "methodname":"testIsCompleted()", "methodnamerefined":"testIsCompleted", "methodabbreviation":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.testIsCompleted", "fullmethod":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest.testIsCompleted()", "classid":467, "classname":"edu.ncsu.csc.itrust.dao.survey.SurveyExceptionTest", "shortclassname":"SurveyExceptionTest", "method":"public void testIsCompleted() throws Exception {\r\n    try {\r\n        surveyDAO.isSurveyCompleted(0L);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException ex) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, ex.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3453, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.-init-()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"SurveyResultsTest() {\r\n}"},
 {"id":3454, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.setUp()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.surveyResults();\r\n}"},
 {"id":3455, "methodname":"testSurveyResults1()", "methodnamerefined":"testSurveyResults1", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResults1", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResults1()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"public void testSurveyResults1() throws Exception {\r\n    List<SurveyResultBean> list = surveyResultDAO.getSurveyResultsForZip(\"27613\", SurveyResultBean.ANY_SPECIALTY);\r\n    assertEquals(2, list.size());\r\n    SurveyResultBean bean = list.get(0);\r\n    assertEquals(9100000000L, bean.getHCPMID());\r\n    assertEquals(\"Good\", bean.getHCPFirstName());\r\n    assertEquals(\"Doctor\", bean.getHCPLastName());\r\n    assertEquals(\"Street 1\", bean.getHCPaddress1());\r\n    assertEquals(\"Street 2\", bean.getHCPaddress2());\r\n    assertEquals(\"Raleigh\", bean.getHCPcity());\r\n    assertEquals(\"NC\", bean.getHCPstate());\r\n    assertEquals(\"27613\", bean.getHCPzip());\r\n    assertEquals(SurveyResultBean.ANY_SPECIALTY, bean.getHCPspecialty());\r\n    assertEquals(\"na\", bean.getHCPhospital());\r\n    assertEquals(10.0F, bean.getAvgWaitingRoomMinutes());\r\n    assertEquals(10.0F, bean.getAvgExamRoomMinutes());\r\n    assertEquals(4.6667F, bean.getAvgVisitSatisfaction());\r\n    assertEquals(5.0F, bean.getAvgTreatmentSatisfaction());\r\n    assertEquals(50.0F, bean.getPercentSatisfactionResults());\r\n    bean = list.get(1);\r\n    assertEquals(9100000001L, bean.getHCPMID());\r\n    assertEquals(\"Bad\", bean.getHCPFirstName());\r\n    assertEquals(\"Doctor\", bean.getHCPLastName());\r\n    assertEquals(\"Avenue 1\", bean.getHCPaddress1());\r\n    assertEquals(\"Avenue 2\", bean.getHCPaddress2());\r\n    assertEquals(\"Raleigh\", bean.getHCPcity());\r\n    assertEquals(\"NC\", bean.getHCPstate());\r\n    assertEquals(\"27613\", bean.getHCPzip());\r\n    assertEquals(SurveyResultBean.HEART_SPECIALTY, bean.getHCPspecialty());\r\n    assertEquals(\"na\", bean.getHCPhospital());\r\n    assertEquals(20.0F, bean.getAvgWaitingRoomMinutes());\r\n    assertEquals(30.0F, bean.getAvgExamRoomMinutes());\r\n    assertEquals(1.0F, bean.getAvgVisitSatisfaction());\r\n    assertEquals(2.0F, bean.getAvgTreatmentSatisfaction());\r\n    assertEquals(75.0F, bean.getPercentSatisfactionResults());\r\n}"},
 {"id":3456, "methodname":"testSurveyResultsBadHospitalID()", "methodnamerefined":"testSurveyResultsBadHospitalID", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsBadHospitalID", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsBadHospitalID()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"public void testSurveyResultsBadHospitalID() throws Exception {\r\n    List<SurveyResultBean> list = surveyResultDAO.getSurveyResultsForHospital(\"badhospid\", SurveyResultBean.ANY_SPECIALTY);\r\n    assertEquals(0, list.size());\r\n}"},
 {"id":3457, "methodname":"testSurveyResultsHeartSpecialty()", "methodnamerefined":"testSurveyResultsHeartSpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsHeartSpecialty", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsHeartSpecialty()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"public void testSurveyResultsHeartSpecialty() throws Exception {\r\n    List<SurveyResultBean> list = surveyResultDAO.getSurveyResultsForZip(\"27613\", SurveyResultBean.HEART_SPECIALTY);\r\n    SurveyResultBean bean = list.get(0);\r\n    assertEquals(1, list.size());\r\n    assertEquals(9100000001L, bean.getHCPMID());\r\n    assertEquals(\"Bad\", bean.getHCPFirstName());\r\n    assertEquals(\"Doctor\", bean.getHCPLastName());\r\n    assertEquals(\"Avenue 1\", bean.getHCPaddress1());\r\n    assertEquals(\"Avenue 2\", bean.getHCPaddress2());\r\n    assertEquals(\"Raleigh\", bean.getHCPcity());\r\n    assertEquals(\"NC\", bean.getHCPstate());\r\n    assertEquals(\"27613\", bean.getHCPzip());\r\n    assertEquals(SurveyResultBean.HEART_SPECIALTY, bean.getHCPspecialty());\r\n    assertEquals(\"na\", bean.getHCPhospital());\r\n    assertEquals(20.0F, bean.getAvgWaitingRoomMinutes());\r\n    assertEquals(30.0F, bean.getAvgExamRoomMinutes());\r\n    assertEquals(1.0F, bean.getAvgVisitSatisfaction());\r\n    assertEquals(2.0F, bean.getAvgTreatmentSatisfaction());\r\n    assertEquals(75.0F, bean.getPercentSatisfactionResults());\r\n}"},
 {"id":3458, "methodname":"testSurveyResultsHeartSpecialtyAndHospital()", "methodnamerefined":"testSurveyResultsHeartSpecialtyAndHospital", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsHeartSpecialtyAndHospital", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsHeartSpecialtyAndHospital()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"public void testSurveyResultsHeartSpecialtyAndHospital() throws Exception {\r\n    List<SurveyResultBean> list = surveyResultDAO.getSurveyResultsForHospital(\"8181818181\", SurveyResultBean.HEART_SPECIALTY);\r\n    assertEquals(1, list.size());\r\n    SurveyResultBean bean = list.get(0);\r\n    assertEquals(9100000001L, bean.getHCPMID());\r\n    assertEquals(\"Bad\", bean.getHCPFirstName());\r\n    assertEquals(\"Doctor\", bean.getHCPLastName());\r\n    assertEquals(75.0F, bean.getPercentSatisfactionResults());\r\n}"},
 {"id":3459, "methodname":"testSurveyResultsHospitalAnySpecialty()", "methodnamerefined":"testSurveyResultsHospitalAnySpecialty", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsHospitalAnySpecialty", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsHospitalAnySpecialty()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"public void testSurveyResultsHospitalAnySpecialty() throws Exception {\r\n    List<SurveyResultBean> list = surveyResultDAO.getSurveyResultsForHospital(\"8181818181\", SurveyResultBean.ANY_SPECIALTY);\r\n    assertEquals(3, list.size());\r\n    SurveyResultBean bean = list.get(1);\r\n    assertEquals(9100000000L, bean.getHCPMID());\r\n    assertEquals(\"Good\", bean.getHCPFirstName());\r\n    assertEquals(\"Doctor\", bean.getHCPLastName());\r\n    assertEquals(\"Street 1\", bean.getHCPaddress1());\r\n    assertEquals(\"Street 2\", bean.getHCPaddress2());\r\n    assertEquals(\"Raleigh\", bean.getHCPcity());\r\n    assertEquals(\"NC\", bean.getHCPstate());\r\n    assertEquals(\"27613\", bean.getHCPzip());\r\n    assertEquals(SurveyResultBean.ANY_SPECIALTY, bean.getHCPspecialty());\r\n    assertEquals(\"8181818181\", bean.getHCPhospital());\r\n    assertEquals(10.0F, bean.getAvgWaitingRoomMinutes());\r\n    assertEquals(10.0F, bean.getAvgExamRoomMinutes());\r\n    assertEquals(4.6667F, bean.getAvgVisitSatisfaction());\r\n    assertEquals(5.0F, bean.getAvgTreatmentSatisfaction());\r\n    assertEquals(50.0F, bean.getPercentSatisfactionResults());\r\n    bean = list.get(2);\r\n    assertEquals(9100000001L, bean.getHCPMID());\r\n    assertEquals(\"Bad\", bean.getHCPFirstName());\r\n    assertEquals(\"Doctor\", bean.getHCPLastName());\r\n    assertEquals(\"Avenue 1\", bean.getHCPaddress1());\r\n    assertEquals(\"Avenue 2\", bean.getHCPaddress2());\r\n    assertEquals(\"Raleigh\", bean.getHCPcity());\r\n    assertEquals(\"NC\", bean.getHCPstate());\r\n    assertEquals(\"27613\", bean.getHCPzip());\r\n    assertEquals(SurveyResultBean.HEART_SPECIALTY, bean.getHCPspecialty());\r\n    assertEquals(\"8181818181\", bean.getHCPhospital());\r\n    assertEquals(20.0F, bean.getAvgWaitingRoomMinutes());\r\n    assertEquals(30.0F, bean.getAvgExamRoomMinutes());\r\n    assertEquals(1.0F, bean.getAvgVisitSatisfaction());\r\n    assertEquals(2.0F, bean.getAvgTreatmentSatisfaction());\r\n    assertEquals(75.0F, bean.getPercentSatisfactionResults());\r\n}"},
 {"id":3460, "methodname":"testSurveyResultsHospitalAnySpecialty2()", "methodnamerefined":"testSurveyResultsHospitalAnySpecialty2", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsHospitalAnySpecialty2", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsHospitalAnySpecialty2()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"public void testSurveyResultsHospitalAnySpecialty2() throws Exception {\r\n    List<SurveyResultBean> list = surveyResultDAO.getSurveyResultsForHospital(\"9191919191\", SurveyResultBean.ANY_SPECIALTY);\r\n    assertEquals(2, list.size());\r\n    SurveyResultBean bean = list.get(1);\r\n    assertEquals(9100000000L, bean.getHCPMID());\r\n    assertEquals(\"Good\", bean.getHCPFirstName());\r\n    assertEquals(\"Doctor\", bean.getHCPLastName());\r\n    assertEquals(50.0F, bean.getPercentSatisfactionResults());\r\n}"},
 {"id":3461, "methodname":"testSurveyResultsNoZip()", "methodnamerefined":"testSurveyResultsNoZip", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsNoZip", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsNoZip()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"public void testSurveyResultsNoZip() throws Exception {\r\n    List<SurveyResultBean> list = surveyResultDAO.getSurveyResultsForZip(\"99999\", SurveyResultBean.ANY_SPECIALTY);\r\n    assertEquals(0, list.size());\r\n}"},
 {"id":3462, "methodname":"testSurveyResultsNothing()", "methodnamerefined":"testSurveyResultsNothing", "methodabbreviation":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsNothing", "fullmethod":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest.testSurveyResultsNothing()", "classid":468, "classname":"edu.ncsu.csc.itrust.dao.surveyresults.SurveyResultsTest", "shortclassname":"SurveyResultsTest", "method":"public void testSurveyResultsNothing() throws Exception {\r\n    List<SurveyResultBean> list = surveyResultDAO.getSurveyResultsForHospital(\"9191919191\", SurveyResultBean.HEART_SPECIALTY);\r\n    assertEquals(0, list.size());\r\n}"},
 {"id":3463, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest.-init-()", "classid":469, "classname":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest", "shortclassname":"AccessRecordTest", "method":"AccessRecordTest() {\r\n}"},
 {"id":3464, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest.setUp()", "classid":469, "classname":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest", "shortclassname":"AccessRecordTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.transactionLog();\r\n}"},
 {"id":3465, "methodname":"testGetAllAccesses()", "methodnamerefined":"testGetAllAccesses", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest.testGetAllAccesses", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest.testGetAllAccesses()", "classid":469, "classname":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest", "shortclassname":"AccessRecordTest", "method":"// note - testing the actual loader is done elsewhere. Just check that were getting the right\r\n// ones here\r\npublic void testGetAllAccesses() throws Exception {\r\n    List<TransactionBean> transactions = tranDAO.getAllRecordAccesses(2L, (-1), false);\r\n    assertEquals(5, transactions.size());\r\n    for (int i = 0; i < 5; i++) {\r\n        assertEquals(9000000000L, transactions.get(i).getLoggedInMID());\r\n        assertEquals(2L, transactions.get(i).getSecondaryMID());\r\n    }\r\n}"},
 {"id":3466, "methodname":"testGetSomeAccesses()", "methodnamerefined":"testGetSomeAccesses", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest.testGetSomeAccesses", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest.testGetSomeAccesses()", "classid":469, "classname":"edu.ncsu.csc.itrust.dao.transaction.AccessRecordTest", "shortclassname":"AccessRecordTest", "method":"public void testGetSomeAccesses() throws Exception {\r\n    List<TransactionBean> transactions = tranDAO.getRecordAccesses(2L, (-1), new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"06/23/2007\"), new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"06/24/2007\"), false);\r\n    assertEquals(3, transactions.size());\r\n    transactions = tranDAO.getRecordAccesses(1L, (-1), new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"06/23/2007\"), new SimpleDateFormat(\"MM/dd/yyyy\").parse(\"06/24/2007\"), false);\r\n    assertEquals(0, transactions.size());\r\n}"},
 {"id":3467, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.-init-()", "classid":470, "classname":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest", "shortclassname":"LogTransactionTest", "method":"LogTransactionTest() {\r\n}"},
 {"id":3468, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.setUp()", "classid":470, "classname":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest", "shortclassname":"LogTransactionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.transactionLog();\r\n}"},
 {"id":3469, "methodname":"testGetAllTransactions()", "methodnamerefined":"testGetAllTransactions", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testGetAllTransactions", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testGetAllTransactions()", "classid":470, "classname":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest", "shortclassname":"LogTransactionTest", "method":"public void testGetAllTransactions() throws Exception {\r\n    List<TransactionBean> list = tranDAO.getAllTransactions();\r\n    assertEquals(8, list.size());\r\n    // that last one inserted should be last because it was backdated\r\n    assertEquals(1L, list.get(3).getLoggedInMID());\r\n    assertEquals(TransactionType.DEMOGRAPHICS_EDIT, list.get(3).getTransactionType());\r\n}"},
 {"id":3470, "methodname":"testLogFull()", "methodnamerefined":"testLogFull", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testLogFull", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testLogFull()", "classid":470, "classname":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest", "shortclassname":"LogTransactionTest", "method":"/* public void testLogSimple() throws Exception {\ntranDAO.logTransaction(TransactionType.PATIENT_REMINDERS, 9000000000L);\nList<TransactionBean> list = tranDAO.getAllTransactions();\nassertEquals(9, list.size());\nassertEquals(9000000000L, list.get(0).getLoggedInMID());\nassertEquals(0L, list.get(0).getSecondaryMID());\nassertEquals(\"\", list.get(0).getAddedInfo());\nassertEquals(TransactionType.PATIENT_REMINDERS, list.get(0).getTransactionType());\n}\n */\r\npublic void testLogFull() throws Exception {\r\n    tranDAO.logTransaction(TransactionType.OFFICE_VISIT_EDIT, 9000000000L, 1L, \"added information\");\r\n    List<TransactionBean> list = tranDAO.getAllTransactions();\r\n    assertEquals(9, list.size());\r\n    assertEquals(9000000000L, list.get(0).getLoggedInMID());\r\n    assertEquals(1L, list.get(0).getSecondaryMID());\r\n    assertEquals(\"added information\", list.get(0).getAddedInfo());\r\n    assertEquals(TransactionType.OFFICE_VISIT_EDIT, list.get(0).getTransactionType());\r\n}"},
 {"id":3471, "methodname":"testSecondaryMIDHCP()", "methodnamerefined":"testSecondaryMIDHCP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testSecondaryMIDHCP", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testSecondaryMIDHCP()", "classid":470, "classname":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest", "shortclassname":"LogTransactionTest", "method":"/**\r\n * Tests to see if the right MID number shows up in the secondaryMID column in the transactionLog.\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testSecondaryMIDHCP() throws Exception {\r\n    tranDAO.logTransaction(TransactionType.PATIENT_CREATE, 9000000000L, 98L, \"added information\");\r\n    List<TransactionBean> list = tranDAO.getAllTransactions();\r\n    assertEquals(9000000000L, list.get(0).getLoggedInMID());\r\n    assertEquals(98L, list.get(0).getSecondaryMID());\r\n}"},
 {"id":3472, "methodname":"testSecondaryMIDPatient()", "methodnamerefined":"testSecondaryMIDPatient", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testSecondaryMIDPatient", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testSecondaryMIDPatient()", "classid":470, "classname":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest", "shortclassname":"LogTransactionTest", "method":"public void testSecondaryMIDPatient() throws Exception {\r\n    tranDAO.logTransaction(TransactionType.PATIENT_CREATE, 1L, 98L, \"added information\");\r\n    List<TransactionBean> list = tranDAO.getAllTransactions();\r\n    assertEquals(1L, list.get(0).getLoggedInMID());\r\n    assertEquals(98L, list.get(0).getSecondaryMID());\r\n}"},
 {"id":3473, "methodname":"testSecondaryMIDUAP()", "methodnamerefined":"testSecondaryMIDUAP", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testSecondaryMIDUAP", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest.testSecondaryMIDUAP()", "classid":470, "classname":"edu.ncsu.csc.itrust.dao.transaction.LogTransactionTest", "shortclassname":"LogTransactionTest", "method":"public void testSecondaryMIDUAP() throws Exception {\r\n    tranDAO.logTransaction(TransactionType.PATIENT_CREATE, 9000000001L, 98L, \"added information\");\r\n    List<TransactionBean> list = tranDAO.getAllTransactions();\r\n    assertEquals(9000000001L, list.get(0).getLoggedInMID());\r\n    assertEquals(98L, list.get(0).getSecondaryMID());\r\n}"},
 {"id":3474, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest.-init-()", "classid":471, "classname":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest", "shortclassname":"OperationalProfileTest", "method":"OperationalProfileTest() {\r\n}"},
 {"id":3475, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest.setUp()", "classid":471, "classname":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest", "shortclassname":"OperationalProfileTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.operationalProfile();\r\n    gen.tester();\r\n}"},
 {"id":3476, "methodname":"testGetOperationalProfile()", "methodnamerefined":"testGetOperationalProfile", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest.testGetOperationalProfile", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest.testGetOperationalProfile()", "classid":471, "classname":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest", "shortclassname":"OperationalProfileTest", "method":"public void testGetOperationalProfile() throws Exception {\r\n    OperationalProfile op = transDAO.getOperationalProfile();\r\n    Integer[] totalCounts = new Integer[43000];\r\n    Integer[] patientCounts = new Integer[43000];\r\n    Integer[] personnelCounts = new Integer[43000];\r\n    for (int i = 0; i < 43000; i++) {\r\n        totalCounts[i] = 0;\r\n        patientCounts[i] = 0;\r\n        personnelCounts[i] = 0;\r\n    }\r\n    totalCounts[1] = 1;\r\n    personnelCounts[1] = 1;\r\n    assertEquals(1, op.getNumTotalTransactions());\r\n    assertEquals(0, op.getNumPatientTransactions());\r\n    assertEquals(1, op.getNumPersonnelTransactions());\r\n    for (TransactionType type : TransactionType.values()) {\r\n        assertEquals(((((\"for type \" + (type.getDescription())) + \"(\") + (type.getCode())) + \")\"), totalCounts[type.getCode()], op.getTotalCount().get(type));\r\n    }\r\n    for (TransactionType type : TransactionType.values()) {\r\n        assertEquals(((((\"for type \" + (type.getDescription())) + \"(\") + (type.getCode())) + \")\"), patientCounts[type.getCode()], op.getPatientCount().get(type));\r\n    }\r\n    for (TransactionType type : TransactionType.values()) {\r\n        assertEquals(((((\"for type \" + (type.getDescription())) + \"(\") + (type.getCode())) + \")\"), personnelCounts[type.getCode()], op.getPersonnelCount().get(type));\r\n    }\r\n}"},
 {"id":3477, "methodname":"testOperationProfileException()", "methodnamerefined":"testOperationProfileException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest.testOperationProfileException", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest.testOperationProfileException()", "classid":471, "classname":"edu.ncsu.csc.itrust.dao.transaction.OperationalProfileTest", "shortclassname":"OperationalProfileTest", "method":"public void testOperationProfileException() throws Exception {\r\n    TransactionDAO evilTranDAO = EvilDAOFactory.getEvilInstance().getTransactionDAO();\r\n    try {\r\n        evilTranDAO.getAllTransactions();\r\n        fail(\"exception should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3478, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.-init-()", "classid":472, "classname":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest", "shortclassname":"TransactionDAOExceptionTest", "method":"TransactionDAOExceptionTest() {\r\n}"},
 {"id":3479, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.setUp()", "classid":472, "classname":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest", "shortclassname":"TransactionDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3480, "methodname":"testAllTransactionsException()", "methodnamerefined":"testAllTransactionsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.testAllTransactionsException", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.testAllTransactionsException()", "classid":472, "classname":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest", "shortclassname":"TransactionDAOExceptionTest", "method":"public void testAllTransactionsException() throws Exception {\r\n    try {\r\n        evilDAO.getAllTransactions();\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3481, "methodname":"testGetAllAccessException()", "methodnamerefined":"testGetAllAccessException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.testGetAllAccessException", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.testGetAllAccessException()", "classid":472, "classname":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest", "shortclassname":"TransactionDAOExceptionTest", "method":"public void testGetAllAccessException() throws Exception {\r\n    try {\r\n        evilDAO.getAllRecordAccesses(0L, (-1), false);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3482, "methodname":"testRecordAccessesException()", "methodnamerefined":"testRecordAccessesException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.testRecordAccessesException", "fullmethod":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest.testRecordAccessesException()", "classid":472, "classname":"edu.ncsu.csc.itrust.dao.transaction.TransactionDAOExceptionTest", "shortclassname":"TransactionDAOExceptionTest", "method":"public void testRecordAccessesException() throws Exception {\r\n    try {\r\n        evilDAO.getRecordAccesses(0L, (-1), new Date(), new Date(), false);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3483, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.-init-()", "classid":473, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"GetVisitRemindersTest() {\r\n}"},
 {"id":3484, "methodname":"getCurrentMonth()", "methodnamerefined":"getCurrentMonth", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.getCurrentMonth", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.getCurrentMonth()", "classid":473, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"private int getCurrentMonth() {\r\n    Calendar cal = new GregorianCalendar();\r\n    return cal.get(Calendar.MONTH);\r\n}"},
 {"id":3485, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.setUp()", "classid":473, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":3486, "methodname":"testGetDiagnosedVisitNeeders()", "methodnamerefined":"testGetDiagnosedVisitNeeders", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetDiagnosedVisitNeeders", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetDiagnosedVisitNeeders()", "classid":473, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"public void testGetDiagnosedVisitNeeders() throws DBException, FileNotFoundException, IOException, SQLException {\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient3();\r\n    List<VisitReminderReturnForm> visRems = visRemDAO.getDiagnosedVisitNeeders(LHCP);\r\n    // assertEquals(2, visRems.size());\r\n    VisitReminderReturnForm reminder = visRems.get(0);\r\n    /**\r\n     * assertEquals(reminder.getLastName(), \"Needs\");\r\n     * assertEquals(reminder.getPatientID(), 3);\r\n     * assertEquals(reminder.getVisitFlags()[0].getType(), VisitFlag.DIAGNOSED);\r\n     * assertEquals(reminder.getVisitFlags()[0].getValue(), \"459.99\");\r\n     * reminder = visRems.get(1);*\r\n     */\r\n    assertEquals(reminder.getLastName(), \"Person\");\r\n    assertEquals(reminder.getPatientID(), 1);\r\n    assertEquals(reminder.getVisitFlags()[0].getType(), VisitFlag.DIAGNOSED);\r\n    assertEquals(reminder.getVisitFlags()[0].getValue(), \"250.00\");\r\n}"},
 {"id":3487, "methodname":"testGetDiagnosedVisitNeedersEmpty()", "methodnamerefined":"testGetDiagnosedVisitNeedersEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetDiagnosedVisitNeedersEmpty", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetDiagnosedVisitNeedersEmpty()", "classid":473, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"public void testGetDiagnosedVisitNeedersEmpty() throws DBException, FileNotFoundException, IOException, SQLException {\r\n    List<VisitReminderReturnForm> visRems = visRemDAO.getDiagnosedVisitNeeders(LHCP);\r\n    assertEquals(0, visRems.size());\r\n}"},
 {"id":3488, "methodname":"testGetFluShotDelinquents()", "methodnamerefined":"testGetFluShotDelinquents", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetFluShotDelinquents", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetFluShotDelinquents()", "classid":473, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"public void testGetFluShotDelinquents() throws DBException, FileNotFoundException, IOException, SQLException {\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient3();\r\n    List<VisitReminderReturnForm> visRems = visRemDAO.getFluShotDelinquents(LHCP);\r\n    assertEquals(2, visRems.size());\r\n    VisitReminderReturnForm reminder = visRems.get(0);\r\n    assertEquals(reminder.getLastName(), \"Needs\");\r\n    assertEquals(reminder.getPatientID(), 3);\r\n    /* We need to account for \"today\" changing. Note that tests should NOT normally have if-statements in\n    them.\n     */\r\n    // if we are in [Sep,Dec]\r\n    if (((getCurrentMonth()) >= 8) && ((getCurrentMonth()) <= 11))\r\n        assertEquals(VisitFlag.MISSING_MEDICATION, reminder.getVisitFlags()[0].getType());\r\n    else// otherwise we are in [Jan,Aug]\r\n\r\n        assertEquals(VisitFlag.MISSED_MEDICATION, reminder.getVisitFlags()[0].getType());\r\n\r\n    assertEquals(reminder.getVisitFlags()[0].getValue(), \"Flu Shot\");\r\n    reminder = visRems.get(1);\r\n    assertEquals(reminder.getLastName(), \"Person\");\r\n    assertEquals(reminder.getPatientID(), 1);\r\n    // if we are in [Sep,Dec]\r\n    if (((getCurrentMonth()) >= 8) && ((getCurrentMonth()) <= 11))\r\n        assertEquals(reminder.getVisitFlags()[0].getType(), VisitFlag.MISSING_MEDICATION);\r\n    else// otherwise we are in [Jan,Aug]\r\n\r\n        assertEquals(reminder.getVisitFlags()[0].getType(), VisitFlag.MISSED_MEDICATION);\r\n\r\n    assertEquals(reminder.getVisitFlags()[0].getValue(), \"Flu Shot\");\r\n}"},
 {"id":3489, "methodname":"testGetFluShotDelinquentsEmpty()", "methodnamerefined":"testGetFluShotDelinquentsEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetFluShotDelinquentsEmpty", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetFluShotDelinquentsEmpty()", "classid":473, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"public void testGetFluShotDelinquentsEmpty() throws DBException, FileNotFoundException, IOException, SQLException {\r\n    List<VisitReminderReturnForm> visRems = visRemDAO.getFluShotDelinquents(LHCP);\r\n    assertEquals(0, visRems.size());\r\n}"},
 {"id":3490, "methodname":"testGetFluShotDelinquentsEmptyList()", "methodnamerefined":"testGetFluShotDelinquentsEmptyList", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetFluShotDelinquentsEmptyList", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest.testGetFluShotDelinquentsEmptyList()", "classid":473, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"public void testGetFluShotDelinquentsEmptyList() throws Exception {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    ResultSet rs = null;\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient3();\r\n    boolean thisYear = DateUtil.currentlyInMonthRange(9, 12);\r\n    Date september = new Date(0L);\r\n    Date december = new Date(0L);\r\n    DateUtil.setSQLMonthRange(september, 8, (thisYear ? 0 : 1), december, 11, (thisYear ? 0 : 1));\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"SELECT DISTINCT \" + ((((((((((((\"? as hid, ov.patientid, p.lastname, p.firstname, \" + \"p.phone \") + \"FROM officevisits ov, patients p \") + \"WHERE ov.patientid=p.mid \") + \"AND p.dateofdeath IS NULL \") + \"AND p.dateofbirth < DATE_SUB(CURDATE(), INTERVAL 50 YEAR) \") + \"AND patientid NOT IN \") + \"(SELECT patientid FROM officevisits ov, ovmedication om \") + \"WHERE ov.id=om.visitid \") + \"AND NDCode IN (90656, 90658, 90660) \") + \"AND ((StartDate BETWEEN ? AND ?) \") + \"OR (EndDate BETWEEN ? AND ?))) \") + \"ORDER BY lastname, firstname, ov.patientid\")));\r\n        ps.setLong(1, this.LHCP);\r\n        ps.setDate(2, september);\r\n        ps.setDate(3, december);\r\n        ps.setDate(4, september);\r\n        ps.setDate(5, december);\r\n        rs = ps.executeQuery();\r\n        VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();\r\n        List<VisitReminderReturnForm> patients = loader.loadList(rs);\r\n        assertEquals(2, patients.size());\r\n        VisitReminderReturnForm patient1 = patients.get(0);\r\n        assertEquals(9000000003L, patient1.getHcpID());\r\n        assertEquals(3L, patient1.getPatientID());\r\n        assertEquals(\"Care\", patient1.getFirstName());\r\n        assertEquals(\"919-971-0000\", patient1.getPhoneNumber());\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":3491, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.VisitReminderReturnFormTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.VisitReminderReturnFormTest.-init-()", "classid":474, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.VisitReminderReturnFormTest", "shortclassname":"VisitReminderReturnFormTest", "method":"VisitReminderReturnFormTest() {\r\n}"},
 {"id":3492, "methodname":"testOtherFields()", "methodnamerefined":"testOtherFields", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.VisitReminderReturnFormTest.testOtherFields", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.VisitReminderReturnFormTest.testOtherFields()", "classid":474, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.VisitReminderReturnFormTest", "shortclassname":"VisitReminderReturnFormTest", "method":"public void testOtherFields() {\r\n    VisitReminderReturnForm vrrf = new VisitReminderReturnForm(90L, 2L, \"JONES\", \"BOB\", \"111-222-3333\");\r\n    vrrf.setFirstName(\"actually, its bob\");\r\n    assertEquals(\"actually, its bob\", vrrf.getFirstName());\r\n    vrrf.setHcpID(2L);\r\n    assertEquals(2L, vrrf.getHcpID());\r\n    vrrf.setPatientID(1L);\r\n    assertEquals(1L, vrrf.getPatientID());\r\n}"},
 {"id":3493, "methodname":"testSetVisitFlags()", "methodnamerefined":"testSetVisitFlags", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.VisitReminderReturnFormTest.testSetVisitFlags", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.VisitReminderReturnFormTest.testSetVisitFlags()", "classid":474, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.VisitReminderReturnFormTest", "shortclassname":"VisitReminderReturnFormTest", "method":"public void testSetVisitFlags() {\r\n    VisitReminderReturnForm vrrf = new VisitReminderReturnForm(90L, 2L, \"JONES\", \"BOB\", \"111-222-3333\");\r\n    VisitFlag[] array = new VisitFlag[]{ new VisitFlag(\"this is the type\") };\r\n    vrrf.setVisitFlags(array);\r\n    assertEquals(\"this is the type\", vrrf.getVisitFlags()[0].getType());\r\n}"},
 {"id":3494, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest.-init-()", "classid":475, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest", "shortclassname":"VisitRemindersDAOExceptionTest", "method":"VisitRemindersDAOExceptionTest() {\r\n}"},
 {"id":3495, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest.setUp()", "classid":475, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest", "shortclassname":"VisitRemindersDAOExceptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n}"},
 {"id":3496, "methodname":"testGetDiagnosedVisitNeedersException()", "methodnamerefined":"testGetDiagnosedVisitNeedersException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest.testGetDiagnosedVisitNeedersException", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest.testGetDiagnosedVisitNeedersException()", "classid":475, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest", "shortclassname":"VisitRemindersDAOExceptionTest", "method":"public void testGetDiagnosedVisitNeedersException() throws Exception {\r\n    try {\r\n        evilDAO.getDiagnosedVisitNeeders(0);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3497, "methodname":"testGetFluShotDelinquentsException()", "methodnamerefined":"testGetFluShotDelinquentsException", "methodabbreviation":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest.testGetFluShotDelinquentsException", "fullmethod":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest.testGetFluShotDelinquentsException()", "classid":475, "classname":"edu.ncsu.csc.itrust.dao.visitreminders.VisitRemindersDAOExceptionTest", "shortclassname":"VisitRemindersDAOExceptionTest", "method":"public void testGetFluShotDelinquentsException() throws Exception {\r\n    try {\r\n        evilDAO.getFluShotDelinquents(0);\r\n        fail(\"DBException should have been thrown\");\r\n    } catch (DBException e) {\r\n        assertEquals(EvilDAOFactory.MESSAGE, e.getSQLException().getMessage());\r\n    }\r\n}"},
 {"id":3498, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.-init-", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.-init-()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public TestDataGenerator() {\r\n    this.factory = TestDAOFactory.getTestInstance();\r\n}"},
 {"id":3499, "methodname":"-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.-init-", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public TestDataGenerator(String projectHome, DAOFactory factory) {\r\n    this.DIR = projectHome + \"/sql/data\";\r\n    this.factory = factory;\r\n}"},
 {"id":3500, "methodname":"ORCodes()", "methodnamerefined":"ORCodes", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ORCodes", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ORCodes()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ORCodes() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ORCodes.sql\"));\r\n}"},
 {"id":3501, "methodname":"UC32Acceptance()", "methodnamerefined":"UC32Acceptance", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.UC32Acceptance", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.UC32Acceptance()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void UC32Acceptance() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/UC32Acceptance.sql\"));\r\n}"},
 {"id":3502, "methodname":"additionalOfficeVisits()", "methodnamerefined":"additionalOfficeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.additionalOfficeVisits", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.additionalOfficeVisits()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void additionalOfficeVisits() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ovAdditional.sql\"));\r\n}"},
 {"id":3503, "methodname":"admin1()", "methodnamerefined":"admin1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.admin1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.admin1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void admin1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/admin1.sql\"));\r\n}"},
 {"id":3504, "methodname":"admin2()", "methodnamerefined":"admin2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.admin2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.admin2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void admin2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/admin2.sql\"));\r\n}"},
 {"id":3505, "methodname":"admin3()", "methodnamerefined":"admin3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.admin3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.admin3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void admin3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/admin3.sql\"));\r\n}"},
 {"id":3506, "methodname":"adverseEvent1()", "methodnamerefined":"adverseEvent1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEvent1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEvent1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void adverseEvent1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/adverseEvent1.sql\"));\r\n}"},
 {"id":3507, "methodname":"adverseEvent2()", "methodnamerefined":"adverseEvent2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEvent2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEvent2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void adverseEvent2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/adverseEvent2.sql\"));\r\n}"},
 {"id":3508, "methodname":"adverseEvent3()", "methodnamerefined":"adverseEvent3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEvent3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEvent3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void adverseEvent3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/adverseEvent3.sql\"));\r\n}"},
 {"id":3509, "methodname":"adverseEventPres()", "methodnamerefined":"adverseEventPres", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEventPres", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEventPres()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void adverseEventPres() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/AdverseEventPres.sql\"));\r\n}"},
 {"id":3510, "methodname":"adverseEventPresentation()", "methodnamerefined":"adverseEventPresentation", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEventPresentation", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.adverseEventPresentation()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void adverseEventPresentation() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/adverseEventPresentation.sql\"));\r\n}"},
 {"id":3511, "methodname":"aliveRecurringPatients()", "methodnamerefined":"aliveRecurringPatients", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.aliveRecurringPatients", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.aliveRecurringPatients()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void aliveRecurringPatients() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/aliveRecurringPatients.sql\"));\r\n}"},
 {"id":3512, "methodname":"appointment()", "methodnamerefined":"appointment", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.appointment", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.appointment()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void appointment() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/appointment.sql\"));\r\n}"},
 {"id":3513, "methodname":"appointmentCase3()", "methodnamerefined":"appointmentCase3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.appointmentCase3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.appointmentCase3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void appointmentCase3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/appointmentCase3.sql\"));\r\n}"},
 {"id":3514, "methodname":"appointmentType()", "methodnamerefined":"appointmentType", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.appointmentType", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.appointmentType()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void appointmentType() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/appointmentType.sql\"));\r\n}"},
 {"id":3515, "methodname":"apptRequestConflicts()", "methodnamerefined":"apptRequestConflicts", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.apptRequestConflicts", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.apptRequestConflicts()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void apptRequestConflicts() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/apptRequestConflicts.sql\"));\r\n}"},
 {"id":3516, "methodname":"clearAllTables()", "methodnamerefined":"clearAllTables", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearAllTables", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearAllTables()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void clearAllTables() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/deleteFromAllTables.sql\"));\r\n}"},
 {"id":3517, "methodname":"clearFakeEmail()", "methodnamerefined":"clearFakeEmail", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearFakeEmail", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearFakeEmail()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void clearFakeEmail() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/clearFakeemail.sql\"));\r\n}"},
 {"id":3518, "methodname":"clearHospitalAssignments()", "methodnamerefined":"clearHospitalAssignments", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearHospitalAssignments", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearHospitalAssignments()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void clearHospitalAssignments() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hospitalAssignmentsReset.sql\"));\r\n}"},
 {"id":3519, "methodname":"clearLoginFailures()", "methodnamerefined":"clearLoginFailures", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearLoginFailures", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearLoginFailures()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void clearLoginFailures() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/loginFailures.sql\"));\r\n}"},
 {"id":3520, "methodname":"clearMessages()", "methodnamerefined":"clearMessages", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearMessages", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearMessages()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void clearMessages() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/clearMessages.sql\"));\r\n}"},
 {"id":3521, "methodname":"clearProfilePhotos()", "methodnamerefined":"clearProfilePhotos", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearProfilePhotos", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearProfilePhotos()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void clearProfilePhotos() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/clearphotos.sql\"));\r\n}"},
 {"id":3522, "methodname":"clearTransactionLog()", "methodnamerefined":"clearTransactionLog", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearTransactionLog", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.clearTransactionLog()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void clearTransactionLog() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/clearTransactionLog.sql\"));\r\n}"},
 {"id":3523, "methodname":"cptCodes()", "methodnamerefined":"cptCodes", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.cptCodes", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.cptCodes()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void cptCodes() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/cptCodes.sql\"));\r\n}"},
 {"id":3524, "methodname":"deadRecurringPatients()", "methodnamerefined":"deadRecurringPatients", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.deadRecurringPatients", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.deadRecurringPatients()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void deadRecurringPatients() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/deadRecurringPatients.sql\"));\r\n}"},
 {"id":3525, "methodname":"diagnosedPatient_OldAndNewVisit()", "methodnamerefined":"diagnosedPatient_OldAndNewVisit", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.diagnosedPatient_OldAndNewVisit", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.diagnosedPatient_OldAndNewVisit()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void diagnosedPatient_OldAndNewVisit() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/diagnosedPatient_OldAndNewVisit.sql\"));\r\n}"},
 {"id":3526, "methodname":"drugInteractions()", "methodnamerefined":"drugInteractions", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.drugInteractions", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.drugInteractions()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void drugInteractions() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/drugInteractions.sql\"));\r\n}"},
 {"id":3527, "methodname":"drugInteractions2()", "methodnamerefined":"drugInteractions2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.drugInteractions2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.drugInteractions2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void drugInteractions2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/drugInteractions2.sql\"));\r\n}"},
 {"id":3528, "methodname":"drugInteractions3()", "methodnamerefined":"drugInteractions3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.drugInteractions3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.drugInteractions3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void drugInteractions3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/drugInteractions3.sql\"));\r\n}"},
 {"id":3529, "methodname":"drugInteractions4()", "methodnamerefined":"drugInteractions4", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.drugInteractions4", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.drugInteractions4()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void drugInteractions4() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/drugInteractions4.sql\"));\r\n}"},
 {"id":3530, "methodname":"er4()", "methodnamerefined":"er4", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.er4", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.er4()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void er4() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/er6.sql\"));\r\n}"},
 {"id":3531, "methodname":"expertHospitals()", "methodnamerefined":"expertHospitals", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.expertHospitals", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.expertHospitals()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void expertHospitals() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/expertHospitals.sql\"));\r\n}"},
 {"id":3532, "methodname":"fakeEmail()", "methodnamerefined":"fakeEmail", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.fakeEmail", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.fakeEmail()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void fakeEmail() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/fakeemail.sql\"));\r\n}"},
 {"id":3533, "methodname":"family()", "methodnamerefined":"family", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.family", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.family()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void family() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/family.sql\"));\r\n}"},
 {"id":3534, "methodname":"foreignKeyTest()", "methodnamerefined":"foreignKeyTest", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.foreignKeyTest", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.foreignKeyTest()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void foreignKeyTest() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/foreignKeyTest.sql\"));\r\n}"},
 {"id":3535, "methodname":"hcp0()", "methodnamerefined":"hcp0", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp0", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp0()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void hcp0() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp0.sql\"));\r\n}"},
 {"id":3536, "methodname":"hcp1()", "methodnamerefined":"hcp1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void hcp1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp1.sql\"));\r\n}"},
 {"id":3537, "methodname":"hcp2()", "methodnamerefined":"hcp2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void hcp2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp2.sql\"));\r\n}"},
 {"id":3538, "methodname":"hcp3()", "methodnamerefined":"hcp3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void hcp3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp3.sql\"));\r\n}"},
 {"id":3539, "methodname":"hcp4()", "methodnamerefined":"hcp4", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp4", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp4()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void hcp4() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp4.sql\"));\r\n}"},
 {"id":3540, "methodname":"hcp5()", "methodnamerefined":"hcp5", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp5", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp5()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void hcp5() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp5.sql\"));\r\n}"},
 {"id":3541, "methodname":"hcp7()", "methodnamerefined":"hcp7", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp7", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp7()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void hcp7() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp7.sql\"));\r\n}"},
 {"id":3542, "methodname":"hcp8()", "methodnamerefined":"hcp8", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp8", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp8()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/**\r\n * Adds HCP Curious George for testing purposes.\r\n *\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void hcp8() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp8.sql\"));\r\n}"},
 {"id":3543, "methodname":"hcp9()", "methodnamerefined":"hcp9", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp9", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp9()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/**\r\n * Adds HCP John Zoidberg for testing purposes.\r\n *\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void hcp9() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp9.sql\"));\r\n}// NEW\r\n"},
 {"id":3544, "methodname":"hcp_diagnosis_data()", "methodnamerefined":"hcp_diagnosis_data", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp_diagnosis_data", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hcp_diagnosis_data()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void hcp_diagnosis_data() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hcp_diagnosis_data.sql\"));\r\n}"},
 {"id":3545, "methodname":"healthData()", "methodnamerefined":"healthData", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.healthData", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.healthData()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void healthData() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/healthdata.sql\"));\r\n}"},
 {"id":3546, "methodname":"hospitals()", "methodnamerefined":"hospitals", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hospitals", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.hospitals()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void hospitals() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/hospitals0.sql\"));\r\n}"},
 {"id":3547, "methodname":"icd9cmCodes()", "methodnamerefined":"icd9cmCodes", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.icd9cmCodes", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.icd9cmCodes()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void icd9cmCodes() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/icd9cmCodes.sql\"));\r\n}"},
 {"id":3548, "methodname":"immunization_data()", "methodnamerefined":"immunization_data", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.immunization_data", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.immunization_data()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void immunization_data() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/immunization.sql\"));\r\n}"},
 {"id":3549, "methodname":"influenza_epidemic()", "methodnamerefined":"influenza_epidemic", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.influenza_epidemic", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.influenza_epidemic()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void influenza_epidemic() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/influenzaEpidemic.sql\"));\r\n}"},
 {"id":3550, "methodname":"insertwards()", "methodnamerefined":"insertwards", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.insertwards", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.insertwards()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void insertwards() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/wardmanagementdata.sql\"));\r\n}"},
 {"id":3551, "methodname":"labProcedures()", "methodnamerefined":"labProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.labProcedures", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.labProcedures()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void labProcedures() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/labprocedures.sql\"));\r\n}"},
 {"id":3552, "methodname":"labProcedures2()", "methodnamerefined":"labProcedures2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.labProcedures2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.labProcedures2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void labProcedures2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/labprocedures2.sql\"));\r\n}"},
 {"id":3553, "methodname":"loincs()", "methodnamerefined":"loincs", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.loincs", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.loincs()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void loincs() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/loincs.sql\"));\r\n}"},
 {"id":3554, "methodname":"ltData0()", "methodnamerefined":"ltData0", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ltData0", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ltData0()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ltData0() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/lt0.sql\"));\r\n}"},
 {"id":3555, "methodname":"ltData1()", "methodnamerefined":"ltData1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ltData1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ltData1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ltData1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/lt1.sql\"));\r\n}"},
 {"id":3556, "methodname":"ltData2()", "methodnamerefined":"ltData2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ltData2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ltData2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ltData2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/lt2.sql\"));\r\n}"},
 {"id":3557, "methodname":"main(java.lang.String[])", "methodnamerefined":"main", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.main", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.main(java.lang.String[])", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public static void main(String[] args) throws IOException, SQLException {\r\n    TestDataGenerator gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3558, "methodname":"malaria_epidemic()", "methodnamerefined":"malaria_epidemic", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.malaria_epidemic", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.malaria_epidemic()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void malaria_epidemic() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/malariaEpidemic.sql\"));\r\n}"},
 {"id":3559, "methodname":"messages()", "methodnamerefined":"messages", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.messages", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.messages()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void messages() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/message.sql\"));\r\n}"},
 {"id":3560, "methodname":"messages6()", "methodnamerefined":"messages6", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.messages6", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.messages6()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void messages6() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/messageCase6.sql\"));\r\n}"},
 {"id":3561, "methodname":"messagingCcs()", "methodnamerefined":"messagingCcs", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.messagingCcs", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.messagingCcs()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/**\r\n * Adds additional DLHCPs to certain patients.\r\n *\r\n * MID  DLHCPs\r\n * ---  ------\r\n * 1    9000000000,\r\n *      9000000003\r\n *\r\n * @throws SQLException\r\n * \t\t\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void messagingCcs() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/messagingCcs.sql\"));\r\n}"},
 {"id":3562, "methodname":"ndCodes()", "methodnamerefined":"ndCodes", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ndCodes() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ndCodes.sql\"));\r\n}"},
 {"id":3563, "methodname":"ndCodes1()", "methodnamerefined":"ndCodes1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ndCodes1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ndCodes1.sql\"));\r\n}"},
 {"id":3564, "methodname":"ndCodes100()", "methodnamerefined":"ndCodes100", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes100", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes100()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/**\r\n * Adds drugs Midichlominene and Midichlomaxene for UC10 and UC37 testing purposes.\r\n *\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void ndCodes100() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ndcodes100.sql\"));\r\n}// NEW\r\n"},
 {"id":3565, "methodname":"ndCodes2()", "methodnamerefined":"ndCodes2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ndCodes2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ndCodes2.sql\"));\r\n}"},
 {"id":3566, "methodname":"ndCodes3()", "methodnamerefined":"ndCodes3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ndCodes3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ndCodes3.sql\"));\r\n}"},
 {"id":3567, "methodname":"ndCodes4()", "methodnamerefined":"ndCodes4", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes4", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ndCodes4()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ndCodes4() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ndCodes4.sql\"));\r\n}"},
 {"id":3568, "methodname":"officeVisit0Multiple()", "methodnamerefined":"officeVisit0Multiple", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit0Multiple", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit0Multiple()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisit0Multiple() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ov0Multiple.sql\"));\r\n}"},
 {"id":3569, "methodname":"officeVisit1()", "methodnamerefined":"officeVisit1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisit1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ov1.sql\"));\r\n}"},
 {"id":3570, "methodname":"officeVisit2()", "methodnamerefined":"officeVisit2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisit2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ov2.sql\"));\r\n}"},
 {"id":3571, "methodname":"officeVisit3()", "methodnamerefined":"officeVisit3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisit3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ov3.sql\"));\r\n}"},
 {"id":3572, "methodname":"officeVisit4()", "methodnamerefined":"officeVisit4", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit4", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit4()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisit4() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ov4.sql\"));\r\n}"},
 {"id":3573, "methodname":"officeVisit5()", "methodnamerefined":"officeVisit5", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit5", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit5()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisit5() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ov5.sql\"));\r\n}"},
 {"id":3574, "methodname":"officeVisit6()", "methodnamerefined":"officeVisit6", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit6", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit6()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisit6() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ov6.sql\"));\r\n}"},
 {"id":3575, "methodname":"officeVisit7()", "methodnamerefined":"officeVisit7", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit7", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit7()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisit7() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ov7.sql\"));\r\n}"},
 {"id":3576, "methodname":"officeVisit8()", "methodnamerefined":"officeVisit8", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit8", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisit8()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisit8() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ov8.sql\"));\r\n}"},
 {"id":3577, "methodname":"officeVisits()", "methodnamerefined":"officeVisits", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisits", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.officeVisits()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void officeVisits() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/officeVisits.sql\"));\r\n}"},
 {"id":3578, "methodname":"operationalProfile()", "methodnamerefined":"operationalProfile", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.operationalProfile", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.operationalProfile()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void operationalProfile() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/operationalProfile.sql\"));\r\n}"},
 {"id":3579, "methodname":"ovImmune()", "methodnamerefined":"ovImmune", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ovImmune", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ovImmune()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ovImmune() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ovImmune.sql\"));\r\n}"},
 {"id":3580, "methodname":"ovMed()", "methodnamerefined":"ovMed", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ovMed", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ovMed()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ovMed() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ovMed.sql\"));\r\n}"},
 {"id":3581, "methodname":"ovReactionOverride()", "methodnamerefined":"ovReactionOverride", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ovReactionOverride", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.ovReactionOverride()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void ovReactionOverride() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/ovReactionOverrides.sql\"));\r\n}"},
 {"id":3582, "methodname":"patient1()", "methodnamerefined":"patient1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient1.sql\"));\r\n}"},
 {"id":3583, "methodname":"patient10()", "methodnamerefined":"patient10", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient10", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient10()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient10() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient10.sql\"));\r\n}"},
 {"id":3584, "methodname":"patient100()", "methodnamerefined":"patient100", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient100", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient100()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/**\r\n * Adds patient Anakin Skywalker for UC10 and UC37 testing purposes.\r\n *\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void patient100() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient100.sql\"));\r\n}// NEW\r\n"},
 {"id":3585, "methodname":"patient11()", "methodnamerefined":"patient11", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient11", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient11()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient11() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient11.sql\"));\r\n}"},
 {"id":3586, "methodname":"patient12()", "methodnamerefined":"patient12", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient12", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient12()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient12() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient12.sql\"));\r\n}"},
 {"id":3587, "methodname":"patient13()", "methodnamerefined":"patient13", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient13", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient13()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient13() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient13.sql\"));\r\n}"},
 {"id":3588, "methodname":"patient14()", "methodnamerefined":"patient14", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient14", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient14()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient14() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient14.sql\"));\r\n}"},
 {"id":3589, "methodname":"patient15()", "methodnamerefined":"patient15", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient15", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient15()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient15() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient15.sql\"));\r\n}"},
 {"id":3590, "methodname":"patient2()", "methodnamerefined":"patient2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient2.sql\"));\r\n}"},
 {"id":3591, "methodname":"patient20()", "methodnamerefined":"patient20", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient20", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient20()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient20() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient20.sql\"));\r\n}"},
 {"id":3592, "methodname":"patient21()", "methodnamerefined":"patient21", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient21", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient21()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient21() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient21.sql\"));\r\n}"},
 {"id":3593, "methodname":"patient22()", "methodnamerefined":"patient22", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient22", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient22()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient22() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient22.sql\"));\r\n}"},
 {"id":3594, "methodname":"patient23()", "methodnamerefined":"patient23", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient23", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient23()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/**\r\n * Adds patient Dare Devil for testing purposes.\r\n *\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void patient23() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient23.sql\"));\r\n}"},
 {"id":3595, "methodname":"patient24()", "methodnamerefined":"patient24", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient24", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient24()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/**\r\n * Adds patient Devils Advocate for testing purposes.\r\n *\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void patient24() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient24.sql\"));\r\n}"},
 {"id":3596, "methodname":"patient25()", "methodnamerefined":"patient25", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient25", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient25()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/**\r\n * Adds patient Trend Setter for testing purposes.\r\n *\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void patient25() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient25.sql\"));\r\n}"},
 {"id":3597, "methodname":"patient26()", "methodnamerefined":"patient26", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient26", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient26()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/**\r\n * Adds patient Philip Fry for testing purposes.\r\n *\r\n * @throws FileNotFoundException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n * @throws IOException\r\n * \t\t\r\n */\r\npublic void patient26() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient26.sql\"));\r\n}// NEW\r\n"},
 {"id":3598, "methodname":"patient3()", "methodnamerefined":"patient3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient3.sql\"));\r\n}"},
 {"id":3599, "methodname":"patient4()", "methodnamerefined":"patient4", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient4", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient4()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient4() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient4.sql\"));\r\n}"},
 {"id":3600, "methodname":"patient42()", "methodnamerefined":"patient42", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient42", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient42()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient42() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient42.sql\"));\r\n}"},
 {"id":3601, "methodname":"patient5()", "methodnamerefined":"patient5", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient5", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient5()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient5() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient5.sql\"));\r\n}"},
 {"id":3602, "methodname":"patient6()", "methodnamerefined":"patient6", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient6", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient6()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient6() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient6.sql\"));\r\n}"},
 {"id":3603, "methodname":"patient7()", "methodnamerefined":"patient7", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient7", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient7()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient7() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient7.sql\"));\r\n}"},
 {"id":3604, "methodname":"patient8()", "methodnamerefined":"patient8", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient8", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient8()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient8() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient8.sql\"));\r\n}"},
 {"id":3605, "methodname":"patient9()", "methodnamerefined":"patient9", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient9", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient9()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient9() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient9.sql\"));\r\n}"},
 {"id":3606, "methodname":"patientDeactivate()", "methodnamerefined":"patientDeactivate", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patientDeactivate", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patientDeactivate()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patientDeactivate() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patientDeactivate.sql\"));\r\n}"},
 {"id":3607, "methodname":"patientLabProcedures()", "methodnamerefined":"patientLabProcedures", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patientLabProcedures", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patientLabProcedures()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patientLabProcedures() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patientLabProc.sql\"));\r\n}"},
 {"id":3608, "methodname":"patient_hcp_vists()", "methodnamerefined":"patient_hcp_vists", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient_hcp_vists", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.patient_hcp_vists()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void patient_hcp_vists() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/patient_hcp_visits.sql\"));\r\n}"},
 {"id":3609, "methodname":"pendingAppointmentAlert()", "methodnamerefined":"pendingAppointmentAlert", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.pendingAppointmentAlert", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.pendingAppointmentAlert()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void pendingAppointmentAlert() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/pendingAppointmentAlert.sql\"));\r\n}"},
 {"id":3610, "methodname":"pendingAppointmentConflict()", "methodnamerefined":"pendingAppointmentConflict", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.pendingAppointmentConflict", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.pendingAppointmentConflict()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void pendingAppointmentConflict() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/pendingAppointmentConflict.sql\"));\r\n}"},
 {"id":3611, "methodname":"pha0()", "methodnamerefined":"pha0", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.pha0", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.pha0()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void pha0() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/pha0.sql\"));\r\n}"},
 {"id":3612, "methodname":"pha1()", "methodnamerefined":"pha1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.pha1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.pha1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void pha1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/pha1.sql\"));\r\n}"},
 {"id":3613, "methodname":"referral_query_testdata()", "methodnamerefined":"referral_query_testdata", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.referral_query_testdata", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.referral_query_testdata()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void referral_query_testdata() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/referral_query_testdata.sql\"));\r\n}"},
 {"id":3614, "methodname":"referral_sort_testdata()", "methodnamerefined":"referral_sort_testdata", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.referral_sort_testdata", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.referral_sort_testdata()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void referral_sort_testdata() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/referral_sort_testdata.sql\"));\r\n}"},
 {"id":3615, "methodname":"referrals()", "methodnamerefined":"referrals", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.referrals", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.referrals()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void referrals() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/referrals.sql\"));\r\n}"},
 {"id":3616, "methodname":"remoteMonitoring1()", "methodnamerefined":"remoteMonitoring1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoring1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoring1.sql\"));\r\n}"},
 {"id":3617, "methodname":"remoteMonitoring2()", "methodnamerefined":"remoteMonitoring2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoring2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoring2.sql\"));\r\n}"},
 {"id":3618, "methodname":"remoteMonitoring3()", "methodnamerefined":"remoteMonitoring3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoring3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoring3.sql\"));\r\n}"},
 {"id":3619, "methodname":"remoteMonitoring4()", "methodnamerefined":"remoteMonitoring4", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring4", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring4()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoring4() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoring4.sql\"));\r\n}"},
 {"id":3620, "methodname":"remoteMonitoring5()", "methodnamerefined":"remoteMonitoring5", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring5", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring5()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoring5() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoring5.sql\"));\r\n}"},
 {"id":3621, "methodname":"remoteMonitoring6()", "methodnamerefined":"remoteMonitoring6", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring6", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring6()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoring6() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoring6.sql\"));\r\n}"},
 {"id":3622, "methodname":"remoteMonitoring7()", "methodnamerefined":"remoteMonitoring7", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring7", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring7()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoring7() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoring7.sql\"));\r\n}"},
 {"id":3623, "methodname":"remoteMonitoring8()", "methodnamerefined":"remoteMonitoring8", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring8", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoring8()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoring8() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoring8.sql\"));\r\n}"},
 {"id":3624, "methodname":"remoteMonitoringAdditional()", "methodnamerefined":"remoteMonitoringAdditional", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoringAdditional", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoringAdditional()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoringAdditional() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoringAdditional.sql\"));\r\n}"},
 {"id":3625, "methodname":"remoteMonitoringPresentation()", "methodnamerefined":"remoteMonitoringPresentation", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoringPresentation", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoringPresentation()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoringPresentation() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoringPresentation.sql\"));\r\n}"},
 {"id":3626, "methodname":"remoteMonitoringUAP()", "methodnamerefined":"remoteMonitoringUAP", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoringUAP", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.remoteMonitoringUAP()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void remoteMonitoringUAP() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/remoteMonitoringUAP.sql\"));\r\n}"},
 {"id":3627, "methodname":"reportRequests()", "methodnamerefined":"reportRequests", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.reportRequests", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.reportRequests()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void reportRequests() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/reportRequests.sql\"));\r\n}"},
 {"id":3628, "methodname":"standardData()", "methodnamerefined":"standardData", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.standardData", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.standardData()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void standardData() throws FileNotFoundException, IOException, SQLException {\r\n    cptCodes();\r\n    icd9cmCodes();\r\n    ndCodes();\r\n    ndCodes1();\r\n    ndCodes2();\r\n    ndCodes3();\r\n    ndCodes4();\r\n    ndCodes100();// NEW\r\n\r\n    drugInteractions4();\r\n    ORCodes();\r\n    hospitals();\r\n    hcp0();\r\n    ltData0();\r\n    ltData1();\r\n    ltData2();\r\n    hcp3();\r\n    hcp7();\r\n    er4();\r\n    pha1();\r\n    patient1();\r\n    patient2();\r\n    patient3();\r\n    patient4();\r\n    patient5();\r\n    patient6();\r\n    patient7();\r\n    patient8();\r\n    patient9();\r\n    patient10();\r\n    patient20();\r\n    patient21();\r\n    patient22();\r\n    patient25();\r\n    patient26();// NEW\r\n\r\n    patient42();\r\n    patient100();// NEW\r\n\r\n    admin1();\r\n    admin2();\r\n    admin3();\r\n    uap1();\r\n    officeVisit1();\r\n    referrals();\r\n    messages();\r\n    tester();\r\n    fakeEmail();\r\n    reportRequests();\r\n    loincs();\r\n    labProcedures();\r\n    appointmentType();\r\n    appointment();\r\n    transactionLog();\r\n    transactionLog2();\r\n    transactionLog3();\r\n    transactionLog4();\r\n    adverseEventPres();\r\n    hcp8();\r\n    hcp9();// NEW\r\n\r\n    expertHospitals();\r\n    viewAccessLogTestData();\r\n    insertwards();\r\n    System.out.println(\"Operation completed.\");\r\n}"},
 {"id":3629, "methodname":"surveyResults()", "methodnamerefined":"surveyResults", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.surveyResults", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.surveyResults()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void surveyResults() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/surveyResults.sql\"));\r\n}"},
 {"id":3630, "methodname":"tester()", "methodnamerefined":"tester", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.tester", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.tester()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void tester() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/tester.sql\"));\r\n}"},
 {"id":3631, "methodname":"timeout()", "methodnamerefined":"timeout", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.timeout", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.timeout()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void timeout() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/timeout.sql\"));\r\n}"},
 {"id":3632, "methodname":"transactionLog()", "methodnamerefined":"transactionLog", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void transactionLog() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/transactionLog.sql\"));\r\n}"},
 {"id":3633, "methodname":"transactionLog2()", "methodnamerefined":"transactionLog2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void transactionLog2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/transactionLog2.sql\"));\r\n}"},
 {"id":3634, "methodname":"transactionLog3()", "methodnamerefined":"transactionLog3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void transactionLog3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/transactionLog3.sql\"));\r\n}"},
 {"id":3635, "methodname":"transactionLog4()", "methodnamerefined":"transactionLog4", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog4", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog4()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void transactionLog4() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/transactionLog4.sql\"));\r\n}"},
 {"id":3636, "methodname":"transactionLog5()", "methodnamerefined":"transactionLog5", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog5", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog5()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void transactionLog5() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/transactionLog5.sql\"));\r\n}"},
 {"id":3637, "methodname":"transactionLog6()", "methodnamerefined":"transactionLog6", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog6", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.transactionLog6()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void transactionLog6() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/transactionLog6.sql\"));\r\n}"},
 {"id":3638, "methodname":"uap1()", "methodnamerefined":"uap1", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uap1", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uap1()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void uap1() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/uap1.sql\"));\r\n}"},
 {"id":3639, "methodname":"uc22()", "methodnamerefined":"uc22", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc22", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc22()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void uc22() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/UC22.sql\"));\r\n}"},
 {"id":3640, "methodname":"uc44_acceptance_scenario_2()", "methodnamerefined":"uc44_acceptance_scenario_2", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc44_acceptance_scenario_2", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc44_acceptance_scenario_2()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void uc44_acceptance_scenario_2() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/uc44_acceptance_scenario_2.sql\"));\r\n}"},
 {"id":3641, "methodname":"uc44_acceptance_scenario_3()", "methodnamerefined":"uc44_acceptance_scenario_3", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc44_acceptance_scenario_3", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc44_acceptance_scenario_3()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void uc44_acceptance_scenario_3() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/uc44_acceptance_scenario_3.sql\"));\r\n}"},
 {"id":3642, "methodname":"uc44_acceptance_scenario_5()", "methodnamerefined":"uc44_acceptance_scenario_5", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc44_acceptance_scenario_5", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc44_acceptance_scenario_5()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void uc44_acceptance_scenario_5() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/uc44_acceptance_scenario_5.sql\"));\r\n}"},
 {"id":3643, "methodname":"uc47SetUp()", "methodnamerefined":"uc47SetUp", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc47SetUp", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc47SetUp()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void uc47SetUp() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/uc47SetUp.sql\"));\r\n}"},
 {"id":3644, "methodname":"uc47TearDown()", "methodnamerefined":"uc47TearDown", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc47TearDown", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.uc47TearDown()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"public void uc47TearDown() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/uc47TearDown.sql\"));\r\n}"},
 {"id":3645, "methodname":"viewAccessLogTestData()", "methodnamerefined":"viewAccessLogTestData", "methodabbreviation":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.viewAccessLogTestData", "fullmethod":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.viewAccessLogTestData()", "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "shortclassname":"TestDataGenerator", "method":"/* public void uc10() throws FileNotFoundException, SQLException, IOException {\nnew DBBuilder(factory).executeSQLFile(DIR + \"/uc10.sql\");\n} //NEW\n */\r\npublic void viewAccessLogTestData() throws FileNotFoundException, IOException, SQLException {\r\n    new DBBuilder(factory).executeSQLFile(((DIR) + \"/referral_sort_testdata.sql\"));\r\n    // create patients Dare Devil and Devils Advocate\r\n    // Devils Advocate is Dare Devils Personal Representative\r\n    patient23();\r\n    patient24();\r\n}"},
 {"id":3646, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.db.DBBuilderTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.db.DBBuilderTest.-init-()", "classid":477, "classname":"edu.ncsu.csc.itrust.db.DBBuilderTest", "shortclassname":"DBBuilderTest", "method":"DBBuilderTest() {\r\n}"},
 {"id":3647, "methodname":"testRebuildNoException()", "methodnamerefined":"testRebuildNoException", "methodabbreviation":"edu.ncsu.csc.itrust.db.DBBuilderTest.testRebuildNoException", "fullmethod":"edu.ncsu.csc.itrust.db.DBBuilderTest.testRebuildNoException()", "classid":477, "classname":"edu.ncsu.csc.itrust.db.DBBuilderTest", "shortclassname":"DBBuilderTest", "method":"// Make sure that the actual database can be rebuilt\r\n// This is run twice so that we check the \"drop tables\" script\r\npublic void testRebuildNoException() throws Exception {\r\n    DBBuilder.rebuildAll();\r\n    DBBuilder.rebuildAll();\r\n}"},
 {"id":3648, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.db.DBUtilTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.db.DBUtilTest.-init-()", "classid":478, "classname":"edu.ncsu.csc.itrust.db.DBUtilTest", "shortclassname":"DBUtilTest", "method":"DBUtilTest() {\r\n}"},
 {"id":3649, "methodname":"testCloseConnection()", "methodnamerefined":"testCloseConnection", "methodabbreviation":"edu.ncsu.csc.itrust.db.DBUtilTest.testCloseConnection", "fullmethod":"edu.ncsu.csc.itrust.db.DBUtilTest.testCloseConnection()", "classid":478, "classname":"edu.ncsu.csc.itrust.db.DBUtilTest", "shortclassname":"DBUtilTest", "method":"public void testCloseConnection() throws Exception {\r\n    DAOFactory df = TestDAOFactory.getTestInstance();\r\n    Connection c = df.getConnection();\r\n    DBUtil.closeConnection(c, null);\r\n}"},
 {"id":3650, "methodname":"testNoFailCloseConnection()", "methodnamerefined":"testNoFailCloseConnection", "methodabbreviation":"edu.ncsu.csc.itrust.db.DBUtilTest.testNoFailCloseConnection", "fullmethod":"edu.ncsu.csc.itrust.db.DBUtilTest.testNoFailCloseConnection()", "classid":478, "classname":"edu.ncsu.csc.itrust.db.DBUtilTest", "shortclassname":"DBUtilTest", "method":"public void testNoFailCloseConnection() throws Exception {\r\n    DAOFactory df = TestDAOFactory.getTestInstance();\r\n    Connection c = df.getConnection();\r\n    c.close();\r\n    DBUtil.closeConnection(c, null);\r\n}"},
 {"id":3651, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.BloodType.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.BloodType.-init-(java.lang.String)", "classid":479, "classname":"edu.ncsu.csc.itrust.enums.BloodType", "shortclassname":"BloodType", "method":"private BloodType(String name) {\r\n    this.name = name;\r\n}"},
 {"id":3652, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.enums.BloodType.getName", "fullmethod":"edu.ncsu.csc.itrust.enums.BloodType.getName()", "classid":479, "classname":"edu.ncsu.csc.itrust.enums.BloodType", "shortclassname":"BloodType", "method":"public String getName() {\r\n    return name;\r\n}"},
 {"id":3653, "methodname":"parse(java.lang.String)", "methodnamerefined":"parse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.BloodType.parse", "fullmethod":"edu.ncsu.csc.itrust.enums.BloodType.parse(java.lang.String)", "classid":479, "classname":"edu.ncsu.csc.itrust.enums.BloodType", "shortclassname":"BloodType", "method":"public static BloodType parse(String bloodTypeStr) {\r\n    for (BloodType type : BloodType.values()) {\r\n        if (type.getName().equals(bloodTypeStr)) {\r\n            return type;\r\n        }\r\n    }\r\n    return BloodType.NS;\r\n}"},
 {"id":3654, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.enums.BloodType.toString", "fullmethod":"edu.ncsu.csc.itrust.enums.BloodType.toString()", "classid":479, "classname":"edu.ncsu.csc.itrust.enums.BloodType", "shortclassname":"BloodType", "method":"@Override\r\npublic String toString() {\r\n    return getName();\r\n}"},
 {"id":3655, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.BloodTypeTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.BloodTypeTest.-init-()", "classid":480, "classname":"edu.ncsu.csc.itrust.enums.BloodTypeTest", "shortclassname":"BloodTypeTest", "method":"BloodTypeTest() {\r\n}"},
 {"id":3656, "methodname":"testParse()", "methodnamerefined":"testParse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.BloodTypeTest.testParse", "fullmethod":"edu.ncsu.csc.itrust.enums.BloodTypeTest.testParse()", "classid":480, "classname":"edu.ncsu.csc.itrust.enums.BloodTypeTest", "shortclassname":"BloodTypeTest", "method":"public void testParse() throws Exception {\r\n    assertEquals(BloodType.ABNeg, BloodType.parse(\"AB-\"));\r\n    assertEquals(BloodType.ONeg, BloodType.parse(\"O-\"));\r\n    assertEquals(BloodType.NS, BloodType.parse(\"N/S\"));\r\n    assertEquals(BloodType.NS, BloodType.parse(\"non-existent ethnicity\"));\r\n}"},
 {"id":3657, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Ethnicity.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.Ethnicity.-init-(java.lang.String)", "classid":481, "classname":"edu.ncsu.csc.itrust.enums.Ethnicity", "shortclassname":"Ethnicity", "method":"private Ethnicity(String name) {\r\n    this.name = name;\r\n}"},
 {"id":3658, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Ethnicity.getName", "fullmethod":"edu.ncsu.csc.itrust.enums.Ethnicity.getName()", "classid":481, "classname":"edu.ncsu.csc.itrust.enums.Ethnicity", "shortclassname":"Ethnicity", "method":"public String getName() {\r\n    return name;\r\n}"},
 {"id":3659, "methodname":"parse(java.lang.String)", "methodnamerefined":"parse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Ethnicity.parse", "fullmethod":"edu.ncsu.csc.itrust.enums.Ethnicity.parse(java.lang.String)", "classid":481, "classname":"edu.ncsu.csc.itrust.enums.Ethnicity", "shortclassname":"Ethnicity", "method":"public static Ethnicity parse(String input) {\r\n    for (Ethnicity ethnicity : Ethnicity.values()) {\r\n        if (ethnicity.name.equals(input))\r\n            return ethnicity;\r\n\r\n    }\r\n    return Ethnicity.NotSpecified;\r\n}"},
 {"id":3660, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Ethnicity.toString", "fullmethod":"edu.ncsu.csc.itrust.enums.Ethnicity.toString()", "classid":481, "classname":"edu.ncsu.csc.itrust.enums.Ethnicity", "shortclassname":"Ethnicity", "method":"@Override\r\npublic String toString() {\r\n    return getName();\r\n}"},
 {"id":3661, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.EthnicityTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.EthnicityTest.-init-()", "classid":482, "classname":"edu.ncsu.csc.itrust.enums.EthnicityTest", "shortclassname":"EthnicityTest", "method":"EthnicityTest() {\r\n}"},
 {"id":3662, "methodname":"testParse()", "methodnamerefined":"testParse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.EthnicityTest.testParse", "fullmethod":"edu.ncsu.csc.itrust.enums.EthnicityTest.testParse()", "classid":482, "classname":"edu.ncsu.csc.itrust.enums.EthnicityTest", "shortclassname":"EthnicityTest", "method":"public void testParse() throws Exception {\r\n    assertEquals(Ethnicity.Caucasian, Ethnicity.parse(\"Caucasian\"));\r\n    assertEquals(Ethnicity.AfricanAmerican, Ethnicity.parse(\"African American\"));\r\n    assertEquals(Ethnicity.NotSpecified, Ethnicity.parse(\"Not Specified\"));\r\n    assertEquals(Ethnicity.NotSpecified, Ethnicity.parse(\"non-existent ethnicity\"));\r\n}"},
 {"id":3663, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Gender.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.Gender.-init-(java.lang.String)", "classid":483, "classname":"edu.ncsu.csc.itrust.enums.Gender", "shortclassname":"Gender", "method":"private Gender(String name) {\r\n    this.name = name;\r\n}"},
 {"id":3664, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Gender.getName", "fullmethod":"edu.ncsu.csc.itrust.enums.Gender.getName()", "classid":483, "classname":"edu.ncsu.csc.itrust.enums.Gender", "shortclassname":"Gender", "method":"public String getName() {\r\n    return name;\r\n}"},
 {"id":3665, "methodname":"parse(java.lang.String)", "methodnamerefined":"parse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Gender.parse", "fullmethod":"edu.ncsu.csc.itrust.enums.Gender.parse(java.lang.String)", "classid":483, "classname":"edu.ncsu.csc.itrust.enums.Gender", "shortclassname":"Gender", "method":"public static Gender parse(String input) {\r\n    for (Gender gender : Gender.values()) {\r\n        if (gender.name.equals(input))\r\n            return gender;\r\n\r\n    }\r\n    return Gender.NotSpecified;\r\n}"},
 {"id":3666, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Gender.toString", "fullmethod":"edu.ncsu.csc.itrust.enums.Gender.toString()", "classid":483, "classname":"edu.ncsu.csc.itrust.enums.Gender", "shortclassname":"Gender", "method":"@Override\r\npublic String toString() {\r\n    return getName();\r\n}"},
 {"id":3667, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.PrescriptionAlertTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.PrescriptionAlertTest.-init-()", "classid":484, "classname":"edu.ncsu.csc.itrust.enums.PrescriptionAlertTest", "shortclassname":"PrescriptionAlertTest", "method":"PrescriptionAlertTest() {\r\n}"},
 {"id":3668, "methodname":"testGettersSetters()", "methodnamerefined":"testGettersSetters", "methodabbreviation":"edu.ncsu.csc.itrust.enums.PrescriptionAlertTest.testGettersSetters", "fullmethod":"edu.ncsu.csc.itrust.enums.PrescriptionAlertTest.testGettersSetters()", "classid":484, "classname":"edu.ncsu.csc.itrust.enums.PrescriptionAlertTest", "shortclassname":"PrescriptionAlertTest", "method":"public void testGettersSetters() {\r\n    PrescriptionAlerts p = PrescriptionAlerts.Prioglitazone;\r\n    assertEquals(\"Prioglitazone\", p.getName());\r\n    assertEquals(\"647641512\", p.getNDCode());\r\n}"},
 {"id":3669, "methodname":"-init-(java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts.-init-(java.lang.String,java.lang.String)", "classid":485, "classname":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts", "shortclassname":"PrescriptionAlerts", "method":"private PrescriptionAlerts(String rName, String rNDCode) {\r\n    this.name = rName;\r\n    this.NDCode = rNDCode;\r\n}"},
 {"id":3670, "methodname":"getNDCode()", "methodnamerefined":"getNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts.getNDCode", "fullmethod":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts.getNDCode()", "classid":485, "classname":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts", "shortclassname":"PrescriptionAlerts", "method":"public String getNDCode() {\r\n    return this.NDCode;\r\n}"},
 {"id":3671, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts.getName", "fullmethod":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts.getName()", "classid":485, "classname":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts", "shortclassname":"PrescriptionAlerts", "method":"public String getName() {\r\n    return name;\r\n}"},
 {"id":3672, "methodname":"isAlert(java.lang.String)", "methodnamerefined":"isAlert", "methodabbreviation":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts.isAlert", "fullmethod":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts.isAlert(java.lang.String)", "classid":485, "classname":"edu.ncsu.csc.itrust.enums.PrescriptionAlerts", "shortclassname":"PrescriptionAlerts", "method":"public static boolean isAlert(String code) {\r\n    for (PrescriptionAlerts thisone : PrescriptionAlerts.values()) {\r\n        if (thisone.getNDCode().equals(code))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":3673, "methodname":"-init-(java.lang.String,java.lang.String,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Role.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.Role.-init-(java.lang.String,java.lang.String,long)", "classid":486, "classname":"edu.ncsu.csc.itrust.enums.Role", "shortclassname":"Role", "method":"Role(String userRolesString, String dbTable, long midFirstDigit) {\r\n    this.userRolesString = userRolesString;\r\n    this.dbTable = dbTable;\r\n    this.midFirstDigit = midFirstDigit;\r\n}"},
 {"id":3674, "methodname":"getDBTable()", "methodnamerefined":"getDBTable", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Role.getDBTable", "fullmethod":"edu.ncsu.csc.itrust.enums.Role.getDBTable()", "classid":486, "classname":"edu.ncsu.csc.itrust.enums.Role", "shortclassname":"Role", "method":"public String getDBTable() {\r\n    return dbTable;\r\n}"},
 {"id":3675, "methodname":"getMidFirstDigit()", "methodnamerefined":"getMidFirstDigit", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Role.getMidFirstDigit", "fullmethod":"edu.ncsu.csc.itrust.enums.Role.getMidFirstDigit()", "classid":486, "classname":"edu.ncsu.csc.itrust.enums.Role", "shortclassname":"Role", "method":"public long getMidFirstDigit() {\r\n    return midFirstDigit;\r\n}"},
 {"id":3676, "methodname":"getUserRolesString()", "methodnamerefined":"getUserRolesString", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Role.getUserRolesString", "fullmethod":"edu.ncsu.csc.itrust.enums.Role.getUserRolesString()", "classid":486, "classname":"edu.ncsu.csc.itrust.enums.Role", "shortclassname":"Role", "method":"public String getUserRolesString() {\r\n    return userRolesString;\r\n}"},
 {"id":3677, "methodname":"parse(java.lang.String)", "methodnamerefined":"parse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.Role.parse", "fullmethod":"edu.ncsu.csc.itrust.enums.Role.parse(java.lang.String)", "classid":486, "classname":"edu.ncsu.csc.itrust.enums.Role", "shortclassname":"Role", "method":"public static Role parse(String str) {\r\n    for (Role role : Role.values()) {\r\n        if (role.userRolesString.toLowerCase().equals(str.toLowerCase()))\r\n            return role;\r\n\r\n    }\r\n    throw new IllegalArgumentException(((\"Role \" + str) + \" does not exist\"));\r\n}"},
 {"id":3678, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.SortDirection.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.SortDirection.-init-(java.lang.String)", "classid":487, "classname":"edu.ncsu.csc.itrust.enums.SortDirection", "shortclassname":"SortDirection", "method":"SortDirection(String dirString) {\r\n    this.dirString = dirString;\r\n}"},
 {"id":3679, "methodname":"parse(java.lang.String)", "methodnamerefined":"parse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.SortDirection.parse", "fullmethod":"edu.ncsu.csc.itrust.enums.SortDirection.parse(java.lang.String)", "classid":487, "classname":"edu.ncsu.csc.itrust.enums.SortDirection", "shortclassname":"SortDirection", "method":"public static SortDirection parse(String str) {\r\n    for (SortDirection sort : SortDirection.values()) {\r\n        if (sort.dirString.toLowerCase().equals(str.toLowerCase()))\r\n            return sort;\r\n\r\n    }\r\n    if (str.toLowerCase().equals(\"ascending\")) {\r\n        return SortDirection.ASCENDING;\r\n    }\r\n    if (str.toLowerCase().equals(\"descending\")) {\r\n        return SortDirection.DESCENDING;\r\n    }\r\n    throw new IllegalArgumentException(((\"SortDirection \" + str) + \" does not exist\"));\r\n}"},
 {"id":3680, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.enums.SortDirection.toString", "fullmethod":"edu.ncsu.csc.itrust.enums.SortDirection.toString()", "classid":487, "classname":"edu.ncsu.csc.itrust.enums.SortDirection", "shortclassname":"SortDirection", "method":"public String toString() {\r\n    return dirString;\r\n}"},
 {"id":3681, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.State.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.State.-init-(java.lang.String)", "classid":488, "classname":"edu.ncsu.csc.itrust.enums.State", "shortclassname":"State", "method":"private State(String name) {\r\n    this.name = name;\r\n}"},
 {"id":3682, "methodname":"getAbbrev()", "methodnamerefined":"getAbbrev", "methodabbreviation":"edu.ncsu.csc.itrust.enums.State.getAbbrev", "fullmethod":"edu.ncsu.csc.itrust.enums.State.getAbbrev()", "classid":488, "classname":"edu.ncsu.csc.itrust.enums.State", "shortclassname":"State", "method":"public String getAbbrev() {\r\n    return toString();\r\n}"},
 {"id":3683, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.enums.State.getName", "fullmethod":"edu.ncsu.csc.itrust.enums.State.getName()", "classid":488, "classname":"edu.ncsu.csc.itrust.enums.State", "shortclassname":"State", "method":"public String getName() {\r\n    return name;\r\n}"},
 {"id":3684, "methodname":"parse(java.lang.String)", "methodnamerefined":"parse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.State.parse", "fullmethod":"edu.ncsu.csc.itrust.enums.State.parse(java.lang.String)", "classid":488, "classname":"edu.ncsu.csc.itrust.enums.State", "shortclassname":"State", "method":"public static State parse(String state) {\r\n    State[] values = State.values();\r\n    for (State myState : values) {\r\n        if ((myState.getName().equals(state)) || (myState.getAbbrev().equals(state)))\r\n            return myState;\r\n\r\n    }\r\n    return State.NC;\r\n}"},
 {"id":3685, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.enums.State.toString", "fullmethod":"edu.ncsu.csc.itrust.enums.State.toString()", "classid":488, "classname":"edu.ncsu.csc.itrust.enums.State", "shortclassname":"State", "method":"// Just to show that this is intentional\r\n@Override\r\npublic String toString() {\r\n    return super.toString();\r\n}"},
 {"id":3686, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.StateTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.StateTest.-init-()", "classid":489, "classname":"edu.ncsu.csc.itrust.enums.StateTest", "shortclassname":"StateTest", "method":"StateTest() {\r\n}"},
 {"id":3687, "methodname":"testParse()", "methodnamerefined":"testParse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.StateTest.testParse", "fullmethod":"edu.ncsu.csc.itrust.enums.StateTest.testParse()", "classid":489, "classname":"edu.ncsu.csc.itrust.enums.StateTest", "shortclassname":"StateTest", "method":"public void testParse() throws Exception {\r\n    assertEquals(State.NC, State.parse(\"NC\"));\r\n    assertEquals(State.PA, State.parse(\"Pennsylvania\"));\r\n    assertEquals(State.NC, State.parse(\"NOT A STATE!\"));\r\n}"},
 {"id":3688, "methodname":"-init-(int,java.lang.String,java.lang.String,boolean)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.TransactionType.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.TransactionType.-init-(int,java.lang.String,java.lang.String,boolean)", "classid":490, "classname":"edu.ncsu.csc.itrust.enums.TransactionType", "shortclassname":"TransactionType", "method":"private TransactionType(int code, String description, String actionPhrase, boolean patientViewable) {\r\n    this.code = code;\r\n    this.description = description;\r\n    this.actionPhrase = actionPhrase;\r\n    this.patientView = patientViewable;\r\n}"},
 {"id":3689, "methodname":"getActionPhrase()", "methodnamerefined":"getActionPhrase", "methodabbreviation":"edu.ncsu.csc.itrust.enums.TransactionType.getActionPhrase", "fullmethod":"edu.ncsu.csc.itrust.enums.TransactionType.getActionPhrase()", "classid":490, "classname":"edu.ncsu.csc.itrust.enums.TransactionType", "shortclassname":"TransactionType", "method":"public String getActionPhrase() {\r\n    return actionPhrase;\r\n}"},
 {"id":3690, "methodname":"getCode()", "methodnamerefined":"getCode", "methodabbreviation":"edu.ncsu.csc.itrust.enums.TransactionType.getCode", "fullmethod":"edu.ncsu.csc.itrust.enums.TransactionType.getCode()", "classid":490, "classname":"edu.ncsu.csc.itrust.enums.TransactionType", "shortclassname":"TransactionType", "method":"public int getCode() {\r\n    return code;\r\n}"},
 {"id":3691, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.enums.TransactionType.getDescription", "fullmethod":"edu.ncsu.csc.itrust.enums.TransactionType.getDescription()", "classid":490, "classname":"edu.ncsu.csc.itrust.enums.TransactionType", "shortclassname":"TransactionType", "method":"public String getDescription() {\r\n    return description;\r\n}"},
 {"id":3692, "methodname":"isPatientViewable()", "methodnamerefined":"isPatientViewable", "methodabbreviation":"edu.ncsu.csc.itrust.enums.TransactionType.isPatientViewable", "fullmethod":"edu.ncsu.csc.itrust.enums.TransactionType.isPatientViewable()", "classid":490, "classname":"edu.ncsu.csc.itrust.enums.TransactionType", "shortclassname":"TransactionType", "method":"public boolean isPatientViewable() {\r\n    return patientView;\r\n}"},
 {"id":3693, "methodname":"parse(int)", "methodnamerefined":"parse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.TransactionType.parse", "fullmethod":"edu.ncsu.csc.itrust.enums.TransactionType.parse(int)", "classid":490, "classname":"edu.ncsu.csc.itrust.enums.TransactionType", "shortclassname":"TransactionType", "method":"public static TransactionType parse(int code) {\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if ((type.code) == code)\r\n            return type;\r\n\r\n    }\r\n    throw new IllegalArgumentException((\"No transaction type exists for code \" + code));\r\n}"},
 {"id":3694, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.enums.TransactionTypeTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.enums.TransactionTypeTest.-init-()", "classid":491, "classname":"edu.ncsu.csc.itrust.enums.TransactionTypeTest", "shortclassname":"TransactionTypeTest", "method":"TransactionTypeTest() {\r\n}"},
 {"id":3695, "methodname":"testBadParse()", "methodnamerefined":"testBadParse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.TransactionTypeTest.testBadParse", "fullmethod":"edu.ncsu.csc.itrust.enums.TransactionTypeTest.testBadParse()", "classid":491, "classname":"edu.ncsu.csc.itrust.enums.TransactionTypeTest", "shortclassname":"TransactionTypeTest", "method":"public void testBadParse() throws Exception {\r\n    try {\r\n        TransactionType.parse(37);\r\n        TransactionType.parse(99);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(\"No transaction type exists for code 37\", e.getMessage());\r\n    }\r\n}"},
 {"id":3696, "methodname":"testParse()", "methodnamerefined":"testParse", "methodabbreviation":"edu.ncsu.csc.itrust.enums.TransactionTypeTest.testParse", "fullmethod":"edu.ncsu.csc.itrust.enums.TransactionTypeTest.testParse()", "classid":491, "classname":"edu.ncsu.csc.itrust.enums.TransactionTypeTest", "shortclassname":"TransactionTypeTest", "method":"public void testParse() throws Exception {\r\n    for (TransactionType type : TransactionType.values()) {\r\n        assertEquals(type, TransactionType.parse(type.getCode()));\r\n    }\r\n}"},
 {"id":3697, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.AddPatientFileException.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.AddPatientFileException.-init-(java.lang.String)", "classid":492, "classname":"edu.ncsu.csc.itrust.exception.AddPatientFileException", "shortclassname":"AddPatientFileException", "method":"/**\r\n * Constructor initializing the error message string\r\n *\r\n * @param string\r\n * \t\tThe error message string\r\n */\r\npublic AddPatientFileException(String string) {\r\n    message = string;\r\n}"},
 {"id":3698, "methodname":"getMessage()", "methodnamerefined":"getMessage", "methodabbreviation":"edu.ncsu.csc.itrust.exception.AddPatientFileException.getMessage", "fullmethod":"edu.ncsu.csc.itrust.exception.AddPatientFileException.getMessage()", "classid":492, "classname":"edu.ncsu.csc.itrust.exception.AddPatientFileException", "shortclassname":"AddPatientFileException", "method":"/**\r\n * Returns the exceptions error message\r\n *\r\n * @return The error message from the exception\r\n */\r\npublic String getMessage() {\r\n    return message;\r\n}"},
 {"id":3699, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.AddPatientFileExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.AddPatientFileExceptionTest.-init-()", "classid":493, "classname":"edu.ncsu.csc.itrust.exception.AddPatientFileExceptionTest", "shortclassname":"AddPatientFileExceptionTest", "method":"AddPatientFileExceptionTest() {\r\n}"},
 {"id":3700, "methodname":"testMessage()", "methodnamerefined":"testMessage", "methodabbreviation":"edu.ncsu.csc.itrust.exception.AddPatientFileExceptionTest.testMessage", "fullmethod":"edu.ncsu.csc.itrust.exception.AddPatientFileExceptionTest.testMessage()", "classid":493, "classname":"edu.ncsu.csc.itrust.exception.AddPatientFileExceptionTest", "shortclassname":"AddPatientFileExceptionTest", "method":"public void testMessage() throws Exception {\r\n    try {\r\n        throw new AddPatientFileException(\"Test\");\r\n    } catch (AddPatientFileException e) {\r\n        assertTrue(e.getMessage().equals(\"Test\"));\r\n    }\r\n}"},
 {"id":3701, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.CSVFormatException.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.CSVFormatException.-init-(java.lang.String)", "classid":494, "classname":"edu.ncsu.csc.itrust.exception.CSVFormatException", "shortclassname":"CSVFormatException", "method":"/**\r\n * Constructor initializing the error message string\r\n *\r\n * @param string\r\n * \t\tThe error message string\r\n */\r\npublic CSVFormatException(String string) {\r\n    message = string;\r\n}"},
 {"id":3702, "methodname":"getMessage()", "methodnamerefined":"getMessage", "methodabbreviation":"edu.ncsu.csc.itrust.exception.CSVFormatException.getMessage", "fullmethod":"edu.ncsu.csc.itrust.exception.CSVFormatException.getMessage()", "classid":494, "classname":"edu.ncsu.csc.itrust.exception.CSVFormatException", "shortclassname":"CSVFormatException", "method":"/**\r\n * Returns the exceptions error message\r\n *\r\n * @return The error message from the exception\r\n */\r\npublic String getMessage() {\r\n    return message;\r\n}"},
 {"id":3703, "methodname":"-init-(java.sql.SQLException)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.DBException.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.DBException.-init-(java.sql.SQLException)", "classid":495, "classname":"edu.ncsu.csc.itrust.exception.DBException", "shortclassname":"DBException", "method":"public DBException(SQLException e) {\r\n    super(\"A database exception has occurred. Please see the log in the console for stacktrace\");\r\n    this.sqlException = e;\r\n}"},
 {"id":3704, "methodname":"getExtendedMessage()", "methodnamerefined":"getExtendedMessage", "methodabbreviation":"edu.ncsu.csc.itrust.exception.DBException.getExtendedMessage", "fullmethod":"edu.ncsu.csc.itrust.exception.DBException.getExtendedMessage()", "classid":495, "classname":"edu.ncsu.csc.itrust.exception.DBException", "shortclassname":"DBException", "method":"@Override\r\npublic String getExtendedMessage() {\r\n    if ((sqlException) != null)\r\n        return sqlException.getMessage();\r\n    else\r\n        return super.getExtendedMessage();\r\n\r\n}"},
 {"id":3705, "methodname":"getSQLException()", "methodnamerefined":"getSQLException", "methodabbreviation":"edu.ncsu.csc.itrust.exception.DBException.getSQLException", "fullmethod":"edu.ncsu.csc.itrust.exception.DBException.getSQLException()", "classid":495, "classname":"edu.ncsu.csc.itrust.exception.DBException", "shortclassname":"DBException", "method":"/**\r\n *\r\n *\r\n * @return The SQL Exception that was responsible for this error.\r\n */\r\npublic SQLException getSQLException() {\r\n    return sqlException;\r\n}"},
 {"id":3706, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.ErrorList.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.ErrorList.-init-()", "classid":496, "classname":"edu.ncsu.csc.itrust.exception.ErrorList", "shortclassname":"ErrorList", "method":"public ErrorList() {\r\n    errorList = new ArrayList<String>();\r\n}"},
 {"id":3707, "methodname":"addIfNotNull(java.lang.String)", "methodnamerefined":"addIfNotNull", "methodabbreviation":"edu.ncsu.csc.itrust.exception.ErrorList.addIfNotNull", "fullmethod":"edu.ncsu.csc.itrust.exception.ErrorList.addIfNotNull(java.lang.String)", "classid":496, "classname":"edu.ncsu.csc.itrust.exception.ErrorList", "shortclassname":"ErrorList", "method":"/**\r\n * Adds a message to the list if its not a Java null or empty string.\r\n *\r\n * @param errorMessage\r\n * \t\t\r\n */\r\npublic void addIfNotNull(String errorMessage) {\r\n    if ((errorMessage != null) && (!(\"\".equals(errorMessage))))\r\n        errorList.add(errorMessage);\r\n\r\n}"},
 {"id":3708, "methodname":"getMessageList()", "methodnamerefined":"getMessageList", "methodabbreviation":"edu.ncsu.csc.itrust.exception.ErrorList.getMessageList", "fullmethod":"edu.ncsu.csc.itrust.exception.ErrorList.getMessageList()", "classid":496, "classname":"edu.ncsu.csc.itrust.exception.ErrorList", "shortclassname":"ErrorList", "method":"/**\r\n * Returns the list of error messages\r\n *\r\n * @return \r\n */\r\npublic List<String> getMessageList() {\r\n    return errorList;\r\n}"},
 {"id":3709, "methodname":"hasErrors()", "methodnamerefined":"hasErrors", "methodabbreviation":"edu.ncsu.csc.itrust.exception.ErrorList.hasErrors", "fullmethod":"edu.ncsu.csc.itrust.exception.ErrorList.hasErrors()", "classid":496, "classname":"edu.ncsu.csc.itrust.exception.ErrorList", "shortclassname":"ErrorList", "method":"/**\r\n * Returns true if the list has any errors\r\n *\r\n * @return \r\n */\r\npublic boolean hasErrors() {\r\n    return (errorList.size()) != 0;\r\n}"},
 {"id":3710, "methodname":"iterator()", "methodnamerefined":"iterator", "methodabbreviation":"edu.ncsu.csc.itrust.exception.ErrorList.iterator", "fullmethod":"edu.ncsu.csc.itrust.exception.ErrorList.iterator()", "classid":496, "classname":"edu.ncsu.csc.itrust.exception.ErrorList", "shortclassname":"ErrorList", "method":"public Iterator<String> iterator() {\r\n    return errorList.iterator();\r\n}"},
 {"id":3711, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.exception.ErrorList.toString", "fullmethod":"edu.ncsu.csc.itrust.exception.ErrorList.toString()", "classid":496, "classname":"edu.ncsu.csc.itrust.exception.ErrorList", "shortclassname":"ErrorList", "method":"@Override\r\npublic String toString() {\r\n    return errorList.toString();\r\n}"},
 {"id":3712, "methodname":"-init-(java.lang.String[])", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.FormValidationException.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.FormValidationException.-init-(java.lang.String[])", "classid":497, "classname":"edu.ncsu.csc.itrust.exception.FormValidationException", "shortclassname":"FormValidationException", "method":"/**\r\n * Constructor with error messages passed as a list of parameters to the method.\r\n *\r\n * @param errorMessages\r\n * \t\tThe list of error messages to be returned in the special form validation box.\r\n */\r\npublic FormValidationException(String... errorMessages) {\r\n    errorList = new ErrorList();\r\n    for (String msg : errorMessages) {\r\n        errorList.addIfNotNull(msg);\r\n    }\r\n}"},
 {"id":3713, "methodname":"-init-(edu.ncsu.csc.itrust.exception.ErrorList)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.FormValidationException.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.FormValidationException.-init-(edu.ncsu.csc.itrust.exception.ErrorList)", "classid":497, "classname":"edu.ncsu.csc.itrust.exception.FormValidationException", "shortclassname":"FormValidationException", "method":"/**\r\n * Constructor with error messages as a special ErrorList data type.\r\n *\r\n * @param errorList\r\n * \t\tAn ErrorList object which contains the list of error messages.\r\n */\r\npublic FormValidationException(ErrorList errorList) {\r\n    this.errorList = errorList;\r\n}"},
 {"id":3714, "methodname":"getErrorList()", "methodnamerefined":"getErrorList", "methodabbreviation":"edu.ncsu.csc.itrust.exception.FormValidationException.getErrorList", "fullmethod":"edu.ncsu.csc.itrust.exception.FormValidationException.getErrorList()", "classid":497, "classname":"edu.ncsu.csc.itrust.exception.FormValidationException", "shortclassname":"FormValidationException", "method":"/**\r\n * Returns the error list as a java.util.List of Strings.\r\n *\r\n * @return The error list\r\n */\r\npublic List<String> getErrorList() {\r\n    return errorList.getMessageList();\r\n}"},
 {"id":3715, "methodname":"getMessage()", "methodnamerefined":"getMessage", "methodabbreviation":"edu.ncsu.csc.itrust.exception.FormValidationException.getMessage", "fullmethod":"edu.ncsu.csc.itrust.exception.FormValidationException.getMessage()", "classid":497, "classname":"edu.ncsu.csc.itrust.exception.FormValidationException", "shortclassname":"FormValidationException", "method":"/**\r\n * The error message will be displayed at the top of the iTrust page as in other iTrust Exceptions.\r\n */\r\n@Override\r\npublic String getMessage() {\r\n    return \"This form has not been validated correctly. The following field are not properly filled in: \" + (errorList.toString());\r\n}"},
 {"id":3716, "methodname":"printHTML(javax.servlet.jsp.JspWriter)", "methodnamerefined":"printHTML", "methodabbreviation":"edu.ncsu.csc.itrust.exception.FormValidationException.printHTML", "fullmethod":"edu.ncsu.csc.itrust.exception.FormValidationException.printHTML(javax.servlet.jsp.JspWriter)", "classid":497, "classname":"edu.ncsu.csc.itrust.exception.FormValidationException", "shortclassname":"FormValidationException", "method":"/**\r\n * The special formatting for error messages is then kept in one place.\r\n *\r\n * @param out\r\n * \t\tThe output writer (in this case a JSPWriter) where the formatted list will go.\r\n * @throws IOException\r\n * \t\tIf the writer is incorrect.\r\n */\r\npublic void printHTML(JspWriter out) throws IOException {\r\n    out.print(\"<h2>Information not valid</h2><div class=\"errorList\">\");\r\n    for (String errorMessage : errorList) {\r\n        out.print(((StringEscapeUtils.escapeHtml(errorMessage)) + \"<br />\"));\r\n    }\r\n    out.print(\"</div>\");\r\n}"},
 {"id":3717, "methodname":"printHTMLasString()", "methodnamerefined":"printHTMLasString", "methodabbreviation":"edu.ncsu.csc.itrust.exception.FormValidationException.printHTMLasString", "fullmethod":"edu.ncsu.csc.itrust.exception.FormValidationException.printHTMLasString()", "classid":497, "classname":"edu.ncsu.csc.itrust.exception.FormValidationException", "shortclassname":"FormValidationException", "method":"/**\r\n * Like printHTML, except a string is returned.\r\n */\r\npublic String printHTMLasString() {\r\n    String r = \"<h2>Information not valid</h2><div class=\"errorList\">\";\r\n    for (String errorMessage : errorList) {\r\n        r += (StringEscapeUtils.escapeHtml(errorMessage)) + \"<br />\";\r\n    }\r\n    r += \"</div>\";\r\n    return r;\r\n}"},
 {"id":3718, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.FormValidationExceptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.FormValidationExceptionTest.-init-()", "classid":498, "classname":"edu.ncsu.csc.itrust.exception.FormValidationExceptionTest", "shortclassname":"FormValidationExceptionTest", "method":"FormValidationExceptionTest() {\r\n}"},
 {"id":3719, "methodname":"testMessage()", "methodnamerefined":"testMessage", "methodabbreviation":"edu.ncsu.csc.itrust.exception.FormValidationExceptionTest.testMessage", "fullmethod":"edu.ncsu.csc.itrust.exception.FormValidationExceptionTest.testMessage()", "classid":498, "classname":"edu.ncsu.csc.itrust.exception.FormValidationExceptionTest", "shortclassname":"FormValidationExceptionTest", "method":"public void testMessage() throws Exception {\r\n    ErrorList el = new ErrorList();\r\n    el.addIfNotNull(\"a\");\r\n    FormValidationException e = new FormValidationException(el);\r\n    assertEquals((\"This form has not been validated correctly. \" + \"The following field are not properly filled in: [a]\"), e.getMessage());\r\n    MockJSPWriter writer = new MockJSPWriter();\r\n    e.printHTML(writer);\r\n    assertEquals(\"<h2>Information not valid</h2><div class=\"errorList\">a<br /></div>\", writer.input);\r\n    assertEquals(\"<h2>Information not valid</h2><div class=\"errorList\">a<br /></div>\", e.printHTMLasString());\r\n}"},
 {"id":3720, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.MockJSPWriter.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.MockJSPWriter.-init-()", "classid":499, "classname":"edu.ncsu.csc.itrust.exception.MockJSPWriter", "shortclassname":"MockJSPWriter", "method":"MockJSPWriter() {\r\n}"},
 {"id":3721, "methodname":"print(java.lang.String)", "methodnamerefined":"print", "methodabbreviation":"edu.ncsu.csc.itrust.exception.MockJSPWriter.print", "fullmethod":"edu.ncsu.csc.itrust.exception.MockJSPWriter.print(java.lang.String)", "classid":499, "classname":"edu.ncsu.csc.itrust.exception.MockJSPWriter", "shortclassname":"MockJSPWriter", "method":"@Override\r\npublic void print(String arg0) throws IOException {\r\n    this.input += arg0;\r\n}"},
 {"id":3722, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.NoHealthRecordsException.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.NoHealthRecordsException.-init-()", "classid":500, "classname":"edu.ncsu.csc.itrust.exception.NoHealthRecordsException", "shortclassname":"NoHealthRecordsException", "method":"/**\r\n * The default constructor, which just passes a pre-specified message to an iTrustException.\r\n */\r\npublic NoHealthRecordsException() {\r\n    super(NoHealthRecordsException.MESSAGE);\r\n}"},
 {"id":3723, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.PrescriptionFieldException.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.PrescriptionFieldException.-init-(java.lang.String)", "classid":501, "classname":"edu.ncsu.csc.itrust.exception.PrescriptionFieldException", "shortclassname":"PrescriptionFieldException", "method":"public PrescriptionFieldException(String message) {\r\n    super(message);\r\n}"},
 {"id":3724, "methodname":"-init-(java.util.List)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.PrescriptionWarningException.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.PrescriptionWarningException.-init-(java.util.List)", "classid":502, "classname":"edu.ncsu.csc.itrust.exception.PrescriptionWarningException", "shortclassname":"PrescriptionWarningException", "method":"/**\r\n * Warning if providing wrong prescription\r\n *\r\n * @param warnings\r\n * \t\t\r\n */\r\npublic PrescriptionWarningException(List<String> warnings) {\r\n    super(\"\");\r\n    this.warnings = warnings;\r\n}"},
 {"id":3725, "methodname":"getDisplayMessage()", "methodnamerefined":"getDisplayMessage", "methodabbreviation":"edu.ncsu.csc.itrust.exception.PrescriptionWarningException.getDisplayMessage", "fullmethod":"edu.ncsu.csc.itrust.exception.PrescriptionWarningException.getDisplayMessage()", "classid":502, "classname":"edu.ncsu.csc.itrust.exception.PrescriptionWarningException", "shortclassname":"PrescriptionWarningException", "method":"/**\r\n * Display warning message\r\n *\r\n * @return r\r\n */\r\npublic String getDisplayMessage() {\r\n    StringBuffer buf = new StringBuffer();\r\n    for (String warning : warnings) {\r\n        buf.append((warning + \"\n\"));\r\n    }\r\n    return buf.toString();\r\n}"},
 {"id":3726, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.exception.iTrustException.-init-", "fullmethod":"edu.ncsu.csc.itrust.exception.iTrustException.-init-(java.lang.String)", "classid":503, "classname":"edu.ncsu.csc.itrust.exception.iTrustException", "shortclassname":"iTrustException", "method":"/**\r\n * The typical constructor.\r\n *\r\n * @param message\r\n * \t\tA message to be displayed to the screen.\r\n */\r\npublic iTrustException(String message) {\r\n    this.message = message;\r\n}"},
 {"id":3727, "methodname":"getExtendedMessage()", "methodnamerefined":"getExtendedMessage", "methodabbreviation":"edu.ncsu.csc.itrust.exception.iTrustException.getExtendedMessage", "fullmethod":"edu.ncsu.csc.itrust.exception.iTrustException.getExtendedMessage()", "classid":503, "classname":"edu.ncsu.csc.itrust.exception.iTrustException", "shortclassname":"iTrustException", "method":"/**\r\n * For exceptions which show a lot of technical detail, usually delegated to a subclass\r\n *\r\n * @return \r\n */\r\npublic String getExtendedMessage() {\r\n    return \"No extended information.\";\r\n}"},
 {"id":3728, "methodname":"getMessage()", "methodnamerefined":"getMessage", "methodabbreviation":"edu.ncsu.csc.itrust.exception.iTrustException.getMessage", "fullmethod":"edu.ncsu.csc.itrust.exception.iTrustException.getMessage()", "classid":503, "classname":"edu.ncsu.csc.itrust.exception.iTrustException", "shortclassname":"iTrustException", "method":"/**\r\n * For messages which are displayed to the user. Usually, this is a very general message for security\r\n * reasons.\r\n */\r\n@Override\r\npublic String getMessage() {\r\n    if ((message) == null)\r\n        return \"An error has occurred. Please see log for details.\";\r\n\r\n    return message;\r\n}"},
 {"id":3729, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ActivityFeedTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ActivityFeedTest.-init-()", "classid":504, "classname":"edu.ncsu.csc.itrust.http.ActivityFeedTest", "shortclassname":"ActivityFeedTest", "method":"ActivityFeedTest() {\r\n}"},
 {"id":3730, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ActivityFeedTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ActivityFeedTest.setUp()", "classid":504, "classname":"edu.ncsu.csc.itrust.http.ActivityFeedTest", "shortclassname":"ActivityFeedTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3731, "methodname":"testDLHCPActivityHiddenInFeed1()", "methodnamerefined":"testDLHCPActivityHiddenInFeed1", "methodabbreviation":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testDLHCPActivityHiddenInFeed1", "fullmethod":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testDLHCPActivityHiddenInFeed1()", "classid":504, "classname":"edu.ncsu.csc.itrust.http.ActivityFeedTest", "shortclassname":"ActivityFeedTest", "method":"public void testDLHCPActivityHiddenInFeed1() throws Exception {\r\n    WebConversation wc = login(\"9000000008\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"21\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Patient\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Basic Health History\").click();\r\n    assertEquals(\"iTrust - Edit Basic Health Record\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    assertEquals(\"iTrust - Login\", wr.getTitle());\r\n    wc = login(\"9000000000\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"21\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    wr.getForms()[0].getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.getButtonWithID(\"update\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    assertEquals(\"iTrust - Login\", wr.getTitle());\r\n    wc = login(\"21\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Kelly Doctor</a> created an office visit\"));\r\n    assertTrue(wr.getText().contains(\"Curious George</a> viewed your basic health information\"));\r\n    assertTrue(wr.getText().contains(\"Curious George</a> viewed your demographics\"));\r\n    wr = wr.getLinkWith(\"My Providers\").click();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    wr.getTableWithID(\"hcp_table\");\r\n    WebForm hcpForm = wr.getFormWithID(\"mainForm\");\r\n    hcpForm.setCheckbox(\"doctor\", \"Gandalf Stormcrow\", false);\r\n    wr = wr.getForms()[0].submit();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    wr.getTableWithID(\"hcp_table\");\r\n    hcpForm = wr.getFormWithID(\"mainForm\");\r\n    hcpForm.setCheckbox(\"doctor\", \"Kelly Doctor\", true);\r\n    wr = wr.getForms()[0].submit();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    wr.getText();\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    assertEquals(\"iTrust - Login\", wr.getTitle());\r\n    wc = login(\"21\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    assertFalse(wr.getText().contains(\"NumberFormatException\"));\r\n    assertFalse(wr.getText().contains(\"Kelly Doctor</a> created an office visit\"));// this works when doing manually but not in testing\r\n\r\n    assertTrue(wr.getText().contains(\"Curious George</a> viewed your basic health information\"));\r\n    assertTrue(wr.getText().contains(\"Curious George</a> viewed your demographics\"));\r\n}"},
 {"id":3732, "methodname":"testDLHCPActivityHiddenInFeed2()", "methodnamerefined":"testDLHCPActivityHiddenInFeed2", "methodabbreviation":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testDLHCPActivityHiddenInFeed2", "fullmethod":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testDLHCPActivityHiddenInFeed2()", "classid":504, "classname":"edu.ncsu.csc.itrust.http.ActivityFeedTest", "shortclassname":"ActivityFeedTest", "method":"public void testDLHCPActivityHiddenInFeed2() throws Exception {\r\n    WebConversation wc = login(\"23\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    assertFalse(wr.getText().contains(\"Beaker Beaker</a> viewed your demographics\"));\r\n    assertTrue(wr.getText().contains(\"Beaker Beaker</a> edited your demographics\"));\r\n    assertFalse(wr.getText().contains(\"Beaker Beaker</a> added you to the telemedicine monitoring list\"));\r\n}"},
 {"id":3733, "methodname":"testOlderActivities()", "methodnamerefined":"testOlderActivities", "methodabbreviation":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testOlderActivities", "fullmethod":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testOlderActivities()", "classid":504, "classname":"edu.ncsu.csc.itrust.http.ActivityFeedTest", "shortclassname":"ActivityFeedTest", "method":"public void testOlderActivities() throws Exception {\r\n    gen.transactionLog6();\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    int entries = 0;\r\n    String s = wr.getText();\r\n    int start = s.indexOf(\"Activity Feed</h2>\");\r\n    int end = s.indexOf(\"<a href=\"home.jsp?date=\");\r\n    s = s.substring(start, end);\r\n    // Check for 20 items\r\n    entries = 0;\r\n    while (s.contains(\"<li\")) {\r\n        entries++;\r\n        s = s.substring(((s.indexOf(\"<li\")) + 1));\r\n    } \r\n    assertEquals(entries, 20);\r\n    wr = wr.getLinkWith(\"Older Activities\").click();\r\n    s = wr.getText();\r\n    s = s.substring(s.indexOf(\"<h2\"), s.indexOf(\"</h2\"));\r\n    // Check for 40 items\r\n    entries = 40;\r\n    while (s.contains(\"<div\")) {\r\n        entries++;\r\n        s = s.substring(((s.indexOf(\"<div\")) + 1));\r\n    } \r\n    assertEquals(entries, 40);\r\n    wr = wr.getLinkWith(\"Older Activities\").click();\r\n    s = wr.getText();\r\n    s = s.substring(s.indexOf(\"Activity Feed</h2>\"), s.lastIndexOf(\"</ul>\"));\r\n    entries = 0;\r\n    while (s.contains(\"<li\")) {\r\n        entries++;\r\n        s = s.substring(((s.indexOf(\"<li\")) + 1));\r\n    } \r\n    assertEquals((entries - 3), 60);\r\n}"},
 {"id":3734, "methodname":"testUpdateActivityFeed()", "methodnamerefined":"testUpdateActivityFeed", "methodabbreviation":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testUpdateActivityFeed", "fullmethod":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testUpdateActivityFeed()", "classid":504, "classname":"edu.ncsu.csc.itrust.http.ActivityFeedTest", "shortclassname":"ActivityFeedTest", "method":"public void testUpdateActivityFeed() throws Exception {\r\n    gen.transactionLog6();\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    int entries = 0;\r\n    wr = wr.getLinkWith(\"Older Activities\").click();\r\n    wr = wr.getLinkWith(\"Older Activities\").click();\r\n    wr = wr.getLinkWith(\"Refresh\").click();\r\n    String s = wr.getText();\r\n    s = s.substring(s.lastIndexOf(\"<ul\"), s.lastIndexOf(\"</ul\"));\r\n    while (s.contains(\"<li\")) {\r\n        entries++;\r\n        s = s.substring(((s.indexOf(\"<li\")) + 1));\r\n    } \r\n    assertEquals(20, entries);\r\n}"},
 {"id":3735, "methodname":"testViewActivityFeed()", "methodnamerefined":"testViewActivityFeed", "methodabbreviation":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testViewActivityFeed", "fullmethod":"edu.ncsu.csc.itrust.http.ActivityFeedTest.testViewActivityFeed()", "classid":504, "classname":"edu.ncsu.csc.itrust.http.ActivityFeedTest", "shortclassname":"ActivityFeedTest", "method":"public void testViewActivityFeed() throws Exception {\r\n    gen.transactionLog5();\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    String s = wr.getText();\r\n    Date d = new Date();\r\n    d.setTime(((d.getTime()) - ((((3 * 24) * 60) * 60) * 1000)));\r\n    new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    assertTrue(s.contains(\"Kelly Doctor</a> viewed your prescription report yesterday at 8:15AM.\"));\r\n    assertTrue(s.contains(\"Andy Programmer viewed your prescription report yesterday at 9:43AM.\"));\r\n    assertTrue(s.contains(\"Justin Time</a> created an emergency report for you yesterday at 10:04AM.\"));\r\n    assertTrue(s.contains(\"FirstUAP LastUAP</a> viewed your lab procedure results yesterday at 12:02PM.\"));\r\n    assertFalse(s.contains(\"Gandalf Stormcrow</a> viewed your risk factors yesterday at 12:58PM.\"));\r\n    assertTrue(s.contains(\"FirstUAP LastUAP</a> viewed your risk factors yesterday at 1:02PM.\"));\r\n    assertTrue(s.contains(\"Kelly Doctor</a> viewed your risk factors yesterday at 1:15PM.\"));\r\n}"},
 {"id":3736, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.AddNDTylenolTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.AddNDTylenolTest.-init-()", "classid":505, "classname":"edu.ncsu.csc.itrust.http.AddNDTylenolTest", "shortclassname":"AddNDTylenolTest", "method":"AddNDTylenolTest() {\r\n}"},
 {"id":3737, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.AddNDTylenolTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.AddNDTylenolTest.setUp()", "classid":505, "classname":"edu.ncsu.csc.itrust.http.AddNDTylenolTest", "shortclassname":"AddNDTylenolTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n}"},
 {"id":3738, "methodname":"testCreateValidHCP()", "methodnamerefined":"testCreateValidHCP", "methodabbreviation":"edu.ncsu.csc.itrust.http.AddNDTylenolTest.testCreateValidHCP", "fullmethod":"edu.ncsu.csc.itrust.http.AddNDTylenolTest.testCreateValidHCP()", "classid":505, "classname":"edu.ncsu.csc.itrust.http.AddNDTylenolTest", "shortclassname":"AddNDTylenolTest", "method":"/* Authenticate admin 90000000001\nChoose Edit ND Codes\nCode1: 55154\nCode2: 1922\nDescription: \"tylenol Tablets\"\n */\r\npublic void testCreateValidHCP() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ND Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"code1\", \"55154\");\r\n    form.setParameter(\"code2\", \"1922\");\r\n    form.setParameter(\"description\", \"Tylenol Tablets\");\r\n    form.getSubmitButtons()[1].click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DRUG_CODE_ADD, 9000000001L, 0L, \"551541922\");\r\n    wr = wc.getCurrentPage();\r\n    // verify change\r\n    assertTrue(wr.getURL().toString().contains(\"auth/admin/editNDCodes.jsp\"));\r\n    assertTrue(wr.getText().contains(\"Success: 551541922 - Tylenol Tablets added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DRUG_CODE_VIEW, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3739, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.AddPatientTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.AddPatientTest.-init-()", "classid":506, "classname":"edu.ncsu.csc.itrust.http.AddPatientTest", "shortclassname":"AddPatientTest", "method":"AddPatientTest() {\r\n}"},
 {"id":3740, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.AddPatientTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.AddPatientTest.setUp()", "classid":506, "classname":"edu.ncsu.csc.itrust.http.AddPatientTest", "shortclassname":"AddPatientTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3741, "methodname":"testBlankPatientName()", "methodnamerefined":"testBlankPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.http.AddPatientTest.testBlankPatientName", "fullmethod":"edu.ncsu.csc.itrust.http.AddPatientTest.testBlankPatientName()", "classid":506, "classname":"edu.ncsu.csc.itrust.http.AddPatientTest", "shortclassname":"AddPatientTest", "method":"public void testBlankPatientName() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // Test blank first name\r\n    wr = wc.getResponse(AddPatientTest.ADDRESS);\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.setParameter(\"firstName\", \"\");\r\n    patientForm.setParameter(\"lastName\", \"Doe\");\r\n    patientForm.setParameter(\"email\", \"john.doe@example.com\");\r\n    patientForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"This form has not been validated correctly.\"));\r\n    // Test blank last name\r\n    wr = wc.getResponse(AddPatientTest.ADDRESS);\r\n    patientForm = wr.getForms()[0];\r\n    patientForm.setParameter(\"firstName\", \"John\");\r\n    patientForm.setParameter(\"lastName\", \"\");\r\n    patientForm.setParameter(\"email\", \"john.doe@example.com\");\r\n    patientForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"This form has not been validated correctly.\"));\r\n}"},
 {"id":3742, "methodname":"testInvalidPatientEmail()", "methodnamerefined":"testInvalidPatientEmail", "methodabbreviation":"edu.ncsu.csc.itrust.http.AddPatientTest.testInvalidPatientEmail", "fullmethod":"edu.ncsu.csc.itrust.http.AddPatientTest.testInvalidPatientEmail()", "classid":506, "classname":"edu.ncsu.csc.itrust.http.AddPatientTest", "shortclassname":"AddPatientTest", "method":"public void testInvalidPatientEmail() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wc.getResponse(AddPatientTest.ADDRESS);\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.setParameter(\"firstName\", \"John\");\r\n    patientForm.setParameter(\"lastName\", \"Doe\");\r\n    patientForm.setParameter(\"email\", \"---@---.com\");\r\n    patientForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"This form has not been validated correctly.\"));\r\n}"},
 {"id":3743, "methodname":"testInvalidPatientName()", "methodnamerefined":"testInvalidPatientName", "methodabbreviation":"edu.ncsu.csc.itrust.http.AddPatientTest.testInvalidPatientName", "fullmethod":"edu.ncsu.csc.itrust.http.AddPatientTest.testInvalidPatientName()", "classid":506, "classname":"edu.ncsu.csc.itrust.http.AddPatientTest", "shortclassname":"AddPatientTest", "method":"public void testInvalidPatientName() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // Test invalid first name\r\n    wr = wc.getResponse(AddPatientTest.ADDRESS);\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.setParameter(\"firstName\", \"----\");\r\n    patientForm.setParameter(\"lastName\", \"Doe\");\r\n    patientForm.setParameter(\"email\", \"john.doe@example.com\");\r\n    patientForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"This form has not been validated correctly.\"));\r\n    // Test invalid last name\r\n    wr = wc.getResponse(AddPatientTest.ADDRESS);\r\n    patientForm = wr.getForms()[0];\r\n    patientForm.setParameter(\"firstName\", \"John\");\r\n    patientForm.setParameter(\"lastName\", \"----\");\r\n    patientForm.setParameter(\"email\", \"john.doe@example.com\");\r\n    patientForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"This form has not been validated correctly.\"));\r\n}"},
 {"id":3744, "methodname":"testValidPatient()", "methodnamerefined":"testValidPatient", "methodabbreviation":"edu.ncsu.csc.itrust.http.AddPatientTest.testValidPatient", "fullmethod":"edu.ncsu.csc.itrust.http.AddPatientTest.testValidPatient()", "classid":506, "classname":"edu.ncsu.csc.itrust.http.AddPatientTest", "shortclassname":"AddPatientTest", "method":"public void testValidPatient() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wc.getResponse(AddPatientTest.ADDRESS);\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.setParameter(\"firstName\", \"John\");\r\n    patientForm.setParameter(\"lastName\", \"Doe\");\r\n    patientForm.setParameter(\"email\", \"john.doe@example.com\");\r\n    patientForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"successfully added\"));\r\n    // Get the new patients MID and temporary password\r\n    WebTable infoTable = wr.getTableStartingWith(\"New Patient Information\");\r\n    String mid = infoTable.getTableCell(1, 1).getText();\r\n    String password = infoTable.getTableCell(2, 1).getText();\r\n    // Ensure that we can login using the patients credentials\r\n    wc = login(mid, password);\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, new Integer(mid), 0L, \"\");\r\n}"},
 {"id":3745, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.-init-()", "classid":507, "classname":"edu.ncsu.csc.itrust.http.AppointmentRequestTest", "shortclassname":"AppointmentRequestTest", "method":"AppointmentRequestTest() {\r\n}"},
 {"id":3746, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.setUp()", "classid":507, "classname":"edu.ncsu.csc.itrust.http.AppointmentRequestTest", "shortclassname":"AppointmentRequestTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();// clear tables is called in super\r\n\r\n    gen.standardData();\r\n    gen.hcp9();\r\n    gen.apptRequestConflicts();\r\n}"},
 {"id":3747, "methodname":"testAppointmnetRequestExpire()", "methodnamerefined":"testAppointmnetRequestExpire", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testAppointmnetRequestExpire", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testAppointmnetRequestExpire()", "classid":507, "classname":"edu.ncsu.csc.itrust.http.AppointmentRequestTest", "shortclassname":"AppointmentRequestTest", "method":"public void testAppointmnetRequestExpire() throws Exception {\r\n    WebConversation wc = login(\"9000000010\", \"pw\");// log in as Zoidberg\r\n\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - View My Appointment Requests\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_VIEW, 9000000010L, 0L, \"\");\r\n    assertFalse(wr.getText().contains(\"Request from: Philip Fry\"));\r\n}"},
 {"id":3748, "methodname":"testHCPAppointmentRequestConflictReject()", "methodnamerefined":"testHCPAppointmentRequestConflictReject", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testHCPAppointmentRequestConflictReject", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testHCPAppointmentRequestConflictReject()", "classid":507, "classname":"edu.ncsu.csc.itrust.http.AppointmentRequestTest", "shortclassname":"AppointmentRequestTest", "method":"public void testHCPAppointmentRequestConflictReject() throws Exception {\r\n    WebConversation wcP = login(\"26\", \"pw\");// log in as Fry\r\n\r\n    WebResponse wrP = wcP.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wrP.getTitle());\r\n    wrP = wrP.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 7);\r\n    WebForm wfP = wrP.getForms()[0];\r\n    wfP.getScriptableObject().setParameterValue(\"apptType\", \"General Checkup\");\r\n    wfP.getScriptableObject().setParameterValue(\"startDate\", format.format(cal.getTime()));\r\n    wfP.getScriptableObject().setParameterValue(\"time1\", \"01\");\r\n    wfP.getScriptableObject().setParameterValue(\"time2\", \"45\");\r\n    wfP.getScriptableObject().setParameterValue(\"time3\", \"PM\");\r\n    wfP.getScriptableObject().setParameterValue(\"lhcp\", \"9000000010\");\r\n    wrP = wfP.submit();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    assertTrue(wrP.getText().contains(\"conflicts with other existing appointments\"));\r\n    assertTrue(wrP.getText().contains(\"The following nearby time slots are available\"));\r\n    wrP.getForms()[2].submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_SUBMITTED, 26L, 9000000010L, \"\");\r\n    wrP = wrP.getLinkWith(\"Logout\").click();// log out as Fry\r\n\r\n    WebConversation wcHCP = login(\"9000000010\", \"pw\");// log in as Zoidberg\r\n\r\n    WebResponse wrHCP = wcHCP.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wrHCP.getTitle());\r\n    wrHCP = wrHCP.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - View My Appointment Requests\", wrHCP.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_VIEW, 9000000010L, 0L, \"\");\r\n    assertTrue(wrHCP.getText().contains(\"4:00\"));\r\n    wrHCP = wrHCP.getLinkWith(\"Approve\").click();\r\n}"},
 {"id":3749, "methodname":"testHCPAppointmentRequestNoConflictApprove()", "methodnamerefined":"testHCPAppointmentRequestNoConflictApprove", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testHCPAppointmentRequestNoConflictApprove", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testHCPAppointmentRequestNoConflictApprove()", "classid":507, "classname":"edu.ncsu.csc.itrust.http.AppointmentRequestTest", "shortclassname":"AppointmentRequestTest", "method":"public void testHCPAppointmentRequestNoConflictApprove() throws Exception {\r\n    WebConversation wcP = login(\"26\", \"pw\");// log in as Fry\r\n\r\n    WebResponse wrP = wcP.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wrP.getTitle());\r\n    wrP = wrP.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 1);\r\n    WebForm wfP = wrP.getForms()[0];\r\n    wfP.getScriptableObject().setParameterValue(\"apptType\", \"General Checkup\");\r\n    wfP.getScriptableObject().setParameterValue(\"startDate\", format.format(cal.getTime()));\r\n    wfP.getScriptableObject().setParameterValue(\"time1\", \"09\");\r\n    wfP.getScriptableObject().setParameterValue(\"time2\", \"45\");\r\n    wfP.getScriptableObject().setParameterValue(\"time3\", \"AM\");\r\n    wfP.getScriptableObject().setParameterValue(\"lhcp\", \"9000000010\");\r\n    wrP = wfP.submit();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    assertTrue(wrP.getText().contains(\"Your appointment request has been saved and is pending.\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_SUBMITTED, 26L, 9000000010L, \"\");\r\n    wrP = wrP.getLinkWith(\"Logout\").click();// log out as Fry\r\n\r\n    WebConversation wcHCP = login(\"9000000010\", \"pw\");// log in as Zoidberg\r\n\r\n    WebResponse wrHCP = wcHCP.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wrHCP.getTitle());\r\n    wrHCP = wrHCP.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - View My Appointment Requests\", wrHCP.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_VIEW, 9000000010L, 0L, \"\");\r\n    wrP = wrHCP.getLinkWith(\"Approve\").click();// not sure how to do this\r\n\r\n    assertEquals(\"iTrust - View My Appointment Requests\", wrP.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_APPROVED, 9000000010L, 26L, \"\");\r\n}"},
 {"id":3750, "methodname":"testHCPAppointmentRequestNoConflictReject()", "methodnamerefined":"testHCPAppointmentRequestNoConflictReject", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testHCPAppointmentRequestNoConflictReject", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testHCPAppointmentRequestNoConflictReject()", "classid":507, "classname":"edu.ncsu.csc.itrust.http.AppointmentRequestTest", "shortclassname":"AppointmentRequestTest", "method":"public void testHCPAppointmentRequestNoConflictReject() throws Exception {\r\n    WebConversation wcP = login(\"26\", \"pw\");// log in as Fry\r\n\r\n    WebResponse wrP = wcP.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wrP.getTitle());\r\n    wrP = wrP.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 1);\r\n    WebForm wfP = wrP.getForms()[0];\r\n    wfP.getScriptableObject().setParameterValue(\"apptType\", \"General Checkup\");\r\n    wfP.getScriptableObject().setParameterValue(\"startDate\", format.format(cal.getTime()));\r\n    wfP.getScriptableObject().setParameterValue(\"time1\", \"09\");\r\n    wfP.getScriptableObject().setParameterValue(\"time2\", \"45\");\r\n    wfP.getScriptableObject().setParameterValue(\"time3\", \"AM\");\r\n    wfP.getScriptableObject().setParameterValue(\"lhcp\", \"9000000010\");\r\n    wrP = wfP.submit();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    assertTrue(wrP.getText().contains(\"Your appointment request has been saved and is pending.\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_SUBMITTED, 26L, 9000000010L, \"\");\r\n    wrP = wrP.getLinkWith(\"Logout\").click();// log out as Fry\r\n\r\n    WebConversation wcHCP = login(\"9000000010\", \"pw\");// log in as Zoidberg\r\n\r\n    WebResponse wrHCP = wcHCP.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wrHCP.getTitle());\r\n    wrHCP = wrHCP.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - View My Appointment Requests\", wrHCP.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_VIEW, 9000000010L, 0L, \"\");\r\n    wrP = wrHCP.getLinkWith(\"Reject\").click();// not sure how to do this\r\n\r\n    assertEquals(\"iTrust - View My Appointment Requests\", wrP.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_REJECTED, 9000000010L, 26L, \"\");\r\n}"},
 {"id":3751, "methodname":"testPatientAppointmentRequestConflict()", "methodnamerefined":"testPatientAppointmentRequestConflict", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testPatientAppointmentRequestConflict", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testPatientAppointmentRequestConflict()", "classid":507, "classname":"edu.ncsu.csc.itrust.http.AppointmentRequestTest", "shortclassname":"AppointmentRequestTest", "method":"public void testPatientAppointmentRequestConflict() throws Exception {\r\n    WebConversation wcP = login(\"26\", \"pw\");// log in as Fry\r\n\r\n    WebResponse wrP = wcP.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wrP.getTitle());\r\n    wrP = wrP.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 7);\r\n    WebForm wfP = wrP.getForms()[0];\r\n    wfP.getScriptableObject().setParameterValue(\"apptType\", \"General Checkup\");\r\n    wfP.getScriptableObject().setParameterValue(\"startDate\", format.format(cal.getTime()));\r\n    wfP.getScriptableObject().setParameterValue(\"time1\", \"01\");\r\n    wfP.getScriptableObject().setParameterValue(\"time2\", \"45\");\r\n    wfP.getScriptableObject().setParameterValue(\"time3\", \"PM\");\r\n    wfP.getScriptableObject().setParameterValue(\"lhcp\", \"9000000010\");\r\n    wrP = wfP.submit();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    assertTrue(wrP.getText().contains(\"conflicts with other existing appointments\"));\r\n    assertTrue(wrP.getText().contains(\"The following nearby time slots are available\"));\r\n    wrP = wrP.getForms()[2].submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_SUBMITTED, 26L, 9000000010L, \"\");\r\n    assertTrue(wrP.getText().contains(\"Your appointment request has been saved and is pending.\"));\r\n    wrP = wrP.getLinkWith(\"Logout\").click();// log out as Fry\r\n\r\n    WebConversation wcHCP = login(\"9000000010\", \"pw\");// log in as Zoidberg\r\n\r\n    WebResponse wrHCP = wcHCP.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wrHCP.getTitle());\r\n    wrHCP = wrHCP.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - View My Appointment Requests\", wrHCP.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_VIEW, 9000000010L, 0L, \"\");\r\n    assertTrue(wrHCP.getText().contains(\"4:00\"));\r\n}"},
 {"id":3752, "methodname":"testPatientAppointmentRequestNoConflict()", "methodnamerefined":"testPatientAppointmentRequestNoConflict", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testPatientAppointmentRequestNoConflict", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentRequestTest.testPatientAppointmentRequestNoConflict()", "classid":507, "classname":"edu.ncsu.csc.itrust.http.AppointmentRequestTest", "shortclassname":"AppointmentRequestTest", "method":"public void testPatientAppointmentRequestNoConflict() throws Exception {\r\n    WebConversation wcP = login(\"26\", \"pw\");// log in as Fry\r\n\r\n    WebResponse wrP = wcP.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wrP.getTitle());\r\n    wrP = wrP.getLinkWith(\"Appointment Requests\").click();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 1);\r\n    WebForm wfP = wrP.getForms()[0];\r\n    wfP.getScriptableObject().setParameterValue(\"apptType\", \"General Checkup\");\r\n    wfP.getScriptableObject().setParameterValue(\"startDate\", format.format(cal.getTime()));\r\n    wfP.getScriptableObject().setParameterValue(\"time1\", \"09\");\r\n    wfP.getScriptableObject().setParameterValue(\"time2\", \"45\");\r\n    wfP.getScriptableObject().setParameterValue(\"time3\", \"PM\");\r\n    wfP.getScriptableObject().setParameterValue(\"lhcp\", \"9000000010\");\r\n    wrP = wfP.submit();\r\n    assertEquals(\"iTrust - Appointment Requests\", wrP.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REQUEST_SUBMITTED, 26L, 9000000010L, \"\");\r\n    assertTrue(wrP.getText().contains(\"Your appointment request has been saved and is pending.\"));\r\n}"},
 {"id":3753, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTest.-init-()", "classid":508, "classname":"edu.ncsu.csc.itrust.http.AppointmentTest", "shortclassname":"AppointmentTest", "method":"AppointmentTest() {\r\n}"},
 {"id":3754, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTest.setUp()", "classid":508, "classname":"edu.ncsu.csc.itrust.http.AppointmentTest", "shortclassname":"AppointmentTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();// clear tables is called in super\r\n\r\n    gen.standardData();\r\n}"},
 {"id":3755, "methodname":"testAddApptConflictNoOverride()", "methodnamerefined":"testAddApptConflictNoOverride", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptConflictNoOverride", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptConflictNoOverride()", "classid":508, "classname":"edu.ncsu.csc.itrust.http.AppointmentTest", "shortclassname":"AppointmentTest", "method":"public void testAddApptConflictNoOverride() throws Exception {\r\n    gen.uc22();\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Schedule Appointment\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"100\");\r\n    patientForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 7);\r\n    WebForm apptForm = wr.getForms()[0];\r\n    apptForm.setParameter(\"apptType\", \"Physical\");\r\n    apptForm.setParameter(\"schedDate\", format.format(cal.getTime()));\r\n    apptForm.setParameter(\"time1\", \"09\");\r\n    apptForm.setParameter(\"time2\", \"45\");\r\n    apptForm.setParameter(\"time3\", \"AM\");\r\n    wr = apptForm.submit();\r\n    assertTrue(wr.getText().contains(\"Warning\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.APPOINTMENT_ADD, 9000000000L, 100L, \"\");\r\n}"},
 {"id":3756, "methodname":"testAddApptConflictOverride()", "methodnamerefined":"testAddApptConflictOverride", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptConflictOverride", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptConflictOverride()", "classid":508, "classname":"edu.ncsu.csc.itrust.http.AppointmentTest", "shortclassname":"AppointmentTest", "method":"public void testAddApptConflictOverride() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Schedule Appointment\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"42\");\r\n    patientForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    WebForm apptForm = wr.getForms()[0];\r\n    apptForm.setParameter(\"apptType\", \"General Checkup\");\r\n    apptForm.setParameter(\"schedDate\", \"08/24/2014\");\r\n    apptForm.setParameter(\"time1\", \"09\");\r\n    apptForm.setParameter(\"time2\", \"00\");\r\n    apptForm.setParameter(\"time3\", \"AM\");\r\n    wr = apptForm.submit();\r\n    assertTrue(wr.getText().contains(\"Success: General Checkup for\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ADD, 9000000003L, 42L, \"\");\r\n    /* wr = wr.getLinkWith(\"Select a Different Patient\").click();\n    patientForm = wr.getForms()[0];\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"5\");\n    patientForm.submit();\n    wr = wc.getCurrentPage();\n\n    apptForm = wr.getForms()[0];\n    apptForm.setParameter(\"apptType\", \"Ultrasound\");\n    apptForm.setParameter(\"schedDate\", \"08/24/2014\");\n    apptForm.setParameter(\"time1\", \"09\");\n    apptForm.setParameter(\"time2\", \"15\");\n    apptForm.setParameter(\"time3\", \"AM\");\n    wr = apptForm.submit();\n\n    assertTrue(wr.getText().contains(\"Warning\"));\n    System.out.println(wr.getText());\n    apptForm = wr.getForms()[0];\n    apptForm.setParameter(\"apptType\", \"Ultrasound\");\n    apptForm.setParameter(\"schedDate\", \"08/24/2014\");\n    apptForm.setParameter(\"time1\", \"09\");\n    apptForm.setParameter(\"time2\", \"15\");\n    apptForm.setParameter(\"time3\", \"AM\");\n    apptForm.getSubmitButtonWithID(\"overrideButton\").click();\n    wr=wc.getCurrentPage();\n\n    System.out.println(wr.getText());\n\n    assertTrue(wr.getText().contains(\"Success\"));\n    assertLogged(TransactionType.APPOINTMENT_ADD,9000000003L,5L,\"\");\n    assertLogged(TransactionType.APPOINTMENT_CONFLICT_OVERRIDE,9000000003L,5L,\"\");\n     */\r\n}"},
 {"id":3757, "methodname":"testAddApptInvalidDate()", "methodnamerefined":"testAddApptInvalidDate", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptInvalidDate", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptInvalidDate()", "classid":508, "classname":"edu.ncsu.csc.itrust.http.AppointmentTest", "shortclassname":"AppointmentTest", "method":"public void testAddApptInvalidDate() throws Exception {\r\n    gen.uc22();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Schedule Appointment\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"100\");\r\n    patientForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.DAY_OF_YEAR, 1);\r\n    WebForm apptForm = wr.getForms()[0];\r\n    apptForm.setParameter(\"apptType\", \"Physical\");\r\n    apptForm.setParameter(\"schedDate\", \"38/38/2025\");\r\n    apptForm.setParameter(\"time1\", \"10\");\r\n    apptForm.setParameter(\"time2\", \"30\");\r\n    apptForm.setParameter(\"time3\", \"AM\");\r\n    wr = apptForm.submit();\r\n    assertFalse(wr.getText().contains(\"Success: Physical for\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.APPOINTMENT_ADD, 9000000000L, 100L, \"\");\r\n}"},
 {"id":3758, "methodname":"testAddApptPatientDeceased()", "methodnamerefined":"testAddApptPatientDeceased", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptPatientDeceased", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptPatientDeceased()", "classid":508, "classname":"edu.ncsu.csc.itrust.http.AppointmentTest", "shortclassname":"AppointmentTest", "method":"public void testAddApptPatientDeceased() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Schedule Appointment\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Cannot schedule appointment\"));\r\n}"},
 {"id":3759, "methodname":"testAddApptSameEndStartTimes()", "methodnamerefined":"testAddApptSameEndStartTimes", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptSameEndStartTimes", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTest.testAddApptSameEndStartTimes()", "classid":508, "classname":"edu.ncsu.csc.itrust.http.AppointmentTest", "shortclassname":"AppointmentTest", "method":"public void testAddApptSameEndStartTimes() throws Exception {\r\n    gen.uc22();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Schedule Appointment\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"100\");\r\n    patientForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 1);\r\n    WebForm apptForm = wr.getForms()[0];\r\n    apptForm.setParameter(\"apptType\", \"Physical\");\r\n    apptForm.setParameter(\"schedDate\", format.format(cal.getTime()));\r\n    apptForm.setParameter(\"time1\", \"10\");\r\n    apptForm.setParameter(\"time2\", \"30\");\r\n    apptForm.setParameter(\"time3\", \"AM\");\r\n    wr = apptForm.submit();\r\n    assertTrue(wr.getText().contains(\"Success: Physical for\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ADD, 9000000000L, 100L, \"\");\r\n}"},
 {"id":3760, "methodname":"testEditApptConflictCancel()", "methodnamerefined":"testEditApptConflictCancel", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTest.testEditApptConflictCancel", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTest.testEditApptConflictCancel()", "classid":508, "classname":"edu.ncsu.csc.itrust.http.AppointmentTest", "shortclassname":"AppointmentTest", "method":"public void testEditApptConflictCancel() throws Exception {\r\n    gen.uc22();\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"View My Appointments\").click();\r\n    TableRow[] rows = wr.getTableStartingWithPrefix(\"Patient\").getRows();\r\n    DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy hh:mm a\");\r\n    DateFormat format2 = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    Calendar c = Calendar.getInstance();\r\n    c.add(Calendar.DATE, 12);\r\n    c.set(Calendar.HOUR, 9);\r\n    c.set(Calendar.AM_PM, Calendar.AM);\r\n    c.set(Calendar.MINUTE, 45);\r\n    String date = format.format(c.getTime());\r\n    int rowIndex = 0;\r\n    for (TableRow row : rows) {\r\n        if ((row.getText().contains(date)) && (row.getText().contains(\"Random Person\"))) {\r\n            break;\r\n        }\r\n        rowIndex++;\r\n    }\r\n    wr = wr.getTableStartingWithPrefix(\"Patient\").getTableCell(rowIndex, 5).getLinkWith(\"Edit\").click();\r\n    c.add(Calendar.DATE, (-5));\r\n    c.set(Calendar.HOUR, 1);\r\n    c.set(Calendar.AM_PM, Calendar.PM);\r\n    c.set(Calendar.MINUTE, 45);\r\n    WebForm apptForm = wr.getForms()[0];\r\n    apptForm.setParameter(\"apptType\", \"General Checkup\");\r\n    apptForm.setParameter(\"schedDate\", format2.format(c.getTime()));\r\n    apptForm.setParameter(\"time1\", \"01\");\r\n    apptForm.setParameter(\"time2\", \"45\");\r\n    apptForm.setParameter(\"time3\", \"PM\");\r\n    apptForm.getSubmitButton(\"editApptButton\", \"Change\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Warning\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.APPOINTMENT_ADD, 9000000000L, 1L, \"\");\r\n    apptForm = wr.getForms()[0];\r\n    apptForm.setParameter(\"apptType\", \"General Checkup\");\r\n    apptForm.setParameter(\"schedDate\", format2.format(c.getTime()));\r\n    apptForm.setParameter(\"time1\", \"02\");\r\n    apptForm.setParameter(\"time2\", \"00\");\r\n    apptForm.setParameter(\"time3\", \"PM\");\r\n    apptForm.getSubmitButton(\"editApptButton\", \"Change\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertFalse(wr.getText().contains(\"Warning\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_EDIT, 9000000000L, 1L, \"\");\r\n}"},
 {"id":3761, "methodname":"testViewApptWithConflicts()", "methodnamerefined":"testViewApptWithConflicts", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTest.testViewApptWithConflicts", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTest.testViewApptWithConflicts()", "classid":508, "classname":"edu.ncsu.csc.itrust.http.AppointmentTest", "shortclassname":"AppointmentTest", "method":"public void testViewApptWithConflicts() throws Exception {\r\n    gen.uc22();\r\n    // Login\r\n    WebConversation wc = login(\"100\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"View My Appointments\").click();\r\n    // assertTrue(wr.getTableStartingWithPrefix(\"Patient\").getRows()[1].getAttribute(\"style\").contains(\"bold\"));\r\n    assertTrue(wr.getTableStartingWithPrefix(\"Patient\").getRows()[2].getAttribute(\"style\").contains(\"bold\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ALL_VIEW, 100L, 0L, \"\");\r\n}"},
 {"id":3762, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.-init-()", "classid":509, "classname":"edu.ncsu.csc.itrust.http.AppointmentTypeTest", "shortclassname":"AppointmentTypeTest", "method":"AppointmentTypeTest() {\r\n}"},
 {"id":3763, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.setUp()", "classid":509, "classname":"edu.ncsu.csc.itrust.http.AppointmentTypeTest", "shortclassname":"AppointmentTypeTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();// clear tables is called in super\r\n\r\n    gen.standardData();\r\n}"},
 {"id":3764, "methodname":"testAddAppointmentType()", "methodnamerefined":"testAddAppointmentType", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testAddAppointmentType", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testAddAppointmentType()", "classid":509, "classname":"edu.ncsu.csc.itrust.http.AppointmentTypeTest", "shortclassname":"AppointmentTypeTest", "method":"public void testAddAppointmentType() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Edit Appointment Types\").click();\r\n    // Fill form\r\n    assertEquals(\"iTrust - Maintain Appointment Types\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_TYPE_VIEW, 9000000001L, 0L, \"\");\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getScriptableObject().setParameterValue(\"name\", \"Immunization\");\r\n    wf.getScriptableObject().setParameterValue(\"duration\", \"30\");\r\n    wr = wf.submit(wf.getSubmitButton(\"add\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_TYPE_ADD, 9000000001L, 0L, \"\");\r\n    assertTrue(wr.getTables()[1].getRows()[8].getText().contains(\"Immunization\"));\r\n    assertTrue(wr.getTables()[1].getRows()[8].getText().contains(\"30\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_TYPE_VIEW, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3765, "methodname":"testAddAppointmentTypeLengthZero()", "methodnamerefined":"testAddAppointmentTypeLengthZero", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testAddAppointmentTypeLengthZero", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testAddAppointmentTypeLengthZero()", "classid":509, "classname":"edu.ncsu.csc.itrust.http.AppointmentTypeTest", "shortclassname":"AppointmentTypeTest", "method":"public void testAddAppointmentTypeLengthZero() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Edit Appointment Types\").click();\r\n    // Fill form\r\n    assertEquals(\"iTrust - Maintain Appointment Types\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_TYPE_VIEW, 9000000001L, 0L, \"\");\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getScriptableObject().setParameterValue(\"name\", \"Immunization\");\r\n    wf.getScriptableObject().setParameterValue(\"duration\", \"0\");\r\n    wr = wf.submit(wf.getSubmitButton(\"add\"));\r\n    assertTrue(wr.getText().contains(\"This form has not been validated correctly.\"));\r\n}"},
 {"id":3766, "methodname":"testEditAppointmentTypeDuration()", "methodnamerefined":"testEditAppointmentTypeDuration", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testEditAppointmentTypeDuration", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testEditAppointmentTypeDuration()", "classid":509, "classname":"edu.ncsu.csc.itrust.http.AppointmentTypeTest", "shortclassname":"AppointmentTypeTest", "method":"public void testEditAppointmentTypeDuration() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Edit Appointment Types\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_TYPE_VIEW, 9000000001L, 0L, \"\");\r\n    // Choose Type to edit\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getScriptableObject().setParameterValue(\"name\", \"Physical\");\r\n    wf.getScriptableObject().setParameterValue(\"duration\", \"45\");\r\n    wr = wf.submit(wf.getSubmitButton(\"update\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_TYPE_EDIT, 9000000001L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"Success: Physical - Duration: 45 updated\"));\r\n    assertTrue(wr.getTables()[1].getRows()[4].getText().contains(\"Physical\"));\r\n    assertTrue(wr.getTables()[1].getRows()[4].getText().contains(\"45\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_TYPE_VIEW, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3767, "methodname":"testEditAppointmentTypeDurationStringInput()", "methodnamerefined":"testEditAppointmentTypeDurationStringInput", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testEditAppointmentTypeDurationStringInput", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testEditAppointmentTypeDurationStringInput()", "classid":509, "classname":"edu.ncsu.csc.itrust.http.AppointmentTypeTest", "shortclassname":"AppointmentTypeTest", "method":"public void testEditAppointmentTypeDurationStringInput() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Edit Appointment Types\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_TYPE_VIEW, 9000000001L, 0L, \"\");\r\n    // Choose Type to edit\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getScriptableObject().setParameterValue(\"name\", \"Physical\");\r\n    wf.getScriptableObject().setParameterValue(\"duration\", \"foo\");\r\n    wr = wf.submit(wf.getSubmitButton(\"update\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.APPOINTMENT_TYPE_EDIT, 9000000001L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"Error: Physical - Duration: must be an integer value.\"));\r\n    assertTrue(wr.getURL().toString().contains(\"/auth/admin/editApptType.jsp\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_TYPE_VIEW, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3768, "methodname":"testHcpViewUpcomingAppointments()", "methodnamerefined":"testHcpViewUpcomingAppointments", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testHcpViewUpcomingAppointments", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testHcpViewUpcomingAppointments()", "classid":509, "classname":"edu.ncsu.csc.itrust.http.AppointmentTypeTest", "shortclassname":"AppointmentTypeTest", "method":"public void testHcpViewUpcomingAppointments() throws Exception {\r\n    // Create DB for this test case\r\n    String DIR = \"sql/data\";\r\n    DAOFactory factory = TestDAOFactory.getTestInstance();\r\n    new DBBuilder(factory).executeSQLFile((DIR + \"/clearAppointments.sql\"));\r\n    new DBBuilder(factory).executeSQLFile((DIR + \"/appointmentCase2.sql\"));\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"View My Appointments\").click();\r\n    // Create timestamp\r\n    DateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    Timestamp time = new Timestamp(new Date().getTime());\r\n    // Check Table\r\n    // Row 1\r\n    Timestamp time1 = new Timestamp(((time.getTime()) + ((((7 * 24) * 60) * 60) * 1000)));\r\n    String dt1 = dateFormat.format(new Date(time1.getTime()));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getAttribute(\"style\").contains(\"font-weight: bold;\"));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains(\"Random Person\"));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains(\"Consultation\"));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains((dt1 + \" 09:10 AM\")));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains(\"30 minutes\"));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains(\"No Comment\"));\r\n    // Row 2\r\n    assertTrue(wr.getTables()[0].getRows()[2].getAttribute(\"style\").contains(\"font-weight: bold;\"));\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains(\"Baby Programmer\"));\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains(\"General Checkup\"));\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains((dt1 + \" 09:30 AM\")));\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains(\"45 minutes\"));\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains(\"Read Comment\"));\r\n    // Row 3\r\n    Timestamp time2 = new Timestamp(((time.getTime()) + ((((10 * 24) * 60) * 60) * 1000)));\r\n    String dt2 = dateFormat.format(new Date(time2.getTime()));\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains(\"Baby Programmer\"));\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains(\"General Checkup\"));\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains((dt2 + \" 04:00 PM\")));\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains(\"45 minutes\"));\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains(\"Read Comment\"));\r\n    // Row 4\r\n    Timestamp time3 = new Timestamp(((time.getTime()) + ((((14 * 24) * 60) * 60) * 1000)));\r\n    String dt3 = dateFormat.format(new Date(time3.getTime()));\r\n    assertTrue(wr.getTables()[0].getRows()[4].getAttribute(\"style\").contains(\"font-weight: bold;\"));\r\n    assertTrue(wr.getTables()[0].getRows()[4].getText().contains(\"Random Person\"));\r\n    assertTrue(wr.getTables()[0].getRows()[4].getText().contains(\"Ultrasound\"));\r\n    assertTrue(wr.getTables()[0].getRows()[4].getText().contains((dt3 + \" 01:30 PM\")));\r\n    assertTrue(wr.getTables()[0].getRows()[4].getText().contains(\"30 minutes\"));\r\n    assertTrue(wr.getTables()[0].getRows()[4].getText().contains(\"No Comment\"));\r\n    // Row 5\r\n    assertTrue(wr.getTables()[0].getRows()[5].getAttribute(\"style\").contains(\"font-weight: bold;\"));\r\n    assertTrue(wr.getTables()[0].getRows()[5].getText().contains(\"Andy Programmer\"));\r\n    assertTrue(wr.getTables()[0].getRows()[5].getText().contains(\"General Checkup\"));\r\n    assertTrue(wr.getTables()[0].getRows()[5].getText().contains((dt3 + \" 01:45 PM\")));\r\n    assertTrue(wr.getTables()[0].getRows()[5].getText().contains(\"45 minutes\"));\r\n    assertTrue(wr.getTables()[0].getRows()[5].getText().contains(\"No Comment\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ALL_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":3769, "methodname":"testPatientViewUpcomingAppointments()", "methodnamerefined":"testPatientViewUpcomingAppointments", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testPatientViewUpcomingAppointments", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testPatientViewUpcomingAppointments()", "classid":509, "classname":"edu.ncsu.csc.itrust.http.AppointmentTypeTest", "shortclassname":"AppointmentTypeTest", "method":"public void testPatientViewUpcomingAppointments() throws Exception {\r\n    // Create DB for this test case\r\n    String DIR = \"sql/data\";\r\n    DAOFactory factory = TestDAOFactory.getTestInstance();\r\n    new DBBuilder(factory).executeSQLFile((DIR + \"/clearAppointments.sql\"));\r\n    new DBBuilder(factory).executeSQLFile((DIR + \"/appointmentCase1.sql\"));\r\n    // Login\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"View My Appointments\").click();\r\n    // Create timestamp\r\n    DateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    Timestamp time = new Timestamp(new Date().getTime());\r\n    // Check Table\r\n    // Row 1\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains(\"General Checkup\"));\r\n    Timestamp time1 = new Timestamp(((time.getTime()) + ((((14 * 24) * 60) * 60) * 1000)));\r\n    String dt1 = dateFormat.format(new Date(time1.getTime()));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains((dt1 + \" 10:30 AM\")));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains(\"45 minutes\"));\r\n    assertTrue(wr.getTables()[0].getRows()[1].getText().contains(\"Read Comment\"));\r\n    // Row 2\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains(\"Consultation\"));\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains(((\"06/04/\" + ((Calendar.getInstance().get(Calendar.YEAR)) + 1)) + \" 10:30 AM\")));\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains(\"30 minutes\"));\r\n    assertTrue(wr.getTables()[0].getRows()[2].getText().contains(\"Read Comment\"));\r\n    // Row 3\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains(\"Colonoscopy\"));\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains(((\"10/14/\" + ((Calendar.getInstance().get(Calendar.YEAR)) + 1)) + \" 08:00 AM\")));\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains(\"90 minutes\"));\r\n    assertTrue(wr.getTables()[0].getRows()[3].getText().contains(\"No Comment\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ALL_VIEW, 2L, 0L, \"\");\r\n}"},
 {"id":3770, "methodname":"testScheduleAppointment()", "methodnamerefined":"testScheduleAppointment", "methodabbreviation":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testScheduleAppointment", "fullmethod":"edu.ncsu.csc.itrust.http.AppointmentTypeTest.testScheduleAppointment()", "classid":509, "classname":"edu.ncsu.csc.itrust.http.AppointmentTypeTest", "shortclassname":"AppointmentTypeTest", "method":"public void testScheduleAppointment() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Schedule Appointment\").click();\r\n    // Select Patient\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    wr = wf.submit();\r\n    wf = wr.getFormWithID(\"mainForm\");\r\n    int year = (Calendar.getInstance().get(Calendar.YEAR)) + 1;\r\n    String scheduledDate = \"07/06/\" + year;\r\n    wf.getScriptableObject().setParameterValue(\"apptType\", \"General Checkup\");\r\n    wf.getScriptableObject().setParameterValue(\"schedDate\", scheduledDate);\r\n    wf.getScriptableObject().setParameterValue(\"time1\", \"09\");\r\n    wf.getScriptableObject().setParameterValue(\"time2\", \"00\");\r\n    wf.getScriptableObject().setParameterValue(\"time3\", \"AM\");\r\n    wf.getScriptableObject().setParameterValue(\"comment\", \"This is the next checkup for your blood pressure medication.\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ADD, 9000000000L, 1L, \"\");\r\n    assertEquals(\"iTrust - Schedule an Appointment\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"View My Appointments\").click();\r\n    assertTrue(wr.getText().contains((scheduledDate + \" 09:00 AM\")));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ALL_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":3771, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest.-init-()", "classid":510, "classname":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest", "shortclassname":"BasicHealthInfoTest", "method":"BasicHealthInfoTest() {\r\n}"},
 {"id":3772, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest.setUp()", "classid":510, "classname":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest", "shortclassname":"BasicHealthInfoTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3773, "methodname":"testBasicHealthSmokingStatus()", "methodnamerefined":"testBasicHealthSmokingStatus", "methodabbreviation":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest.testBasicHealthSmokingStatus", "fullmethod":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest.testBasicHealthSmokingStatus()", "classid":510, "classname":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest", "shortclassname":"BasicHealthInfoTest", "method":"public void testBasicHealthSmokingStatus() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    assertTrue(wr.getText().contains(\"5 - Smoker, current status unknown\"));\r\n}"},
 {"id":3774, "methodname":"testBasicHealthViewed()", "methodnamerefined":"testBasicHealthViewed", "methodabbreviation":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest.testBasicHealthViewed", "fullmethod":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest.testBasicHealthViewed()", "classid":510, "classname":"edu.ncsu.csc.itrust.http.BasicHealthInfoTest", "shortclassname":"BasicHealthInfoTest", "method":"public void testBasicHealthViewed() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/forwardUser.jsp\"), wr.getURL().toString());\r\n    wc = login(\"2\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    String s = wr.getText();\r\n    assertTrue(s.contains(\"Kelly Doctor</a> viewed your basic health information today at\"));\r\n}"},
 {"id":3775, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.CalendarTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.CalendarTest.-init-()", "classid":511, "classname":"edu.ncsu.csc.itrust.http.CalendarTest", "shortclassname":"CalendarTest", "method":"CalendarTest() {\r\n}"},
 {"id":3776, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.CalendarTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.CalendarTest.setUp()", "classid":511, "classname":"edu.ncsu.csc.itrust.http.CalendarTest", "shortclassname":"CalendarTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();// clear tables is called in super\r\n\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    // gen.officeVisit5();\r\n    gen.officeVisits();\r\n}"},
 {"id":3777, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.http.CalendarTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.http.CalendarTest.tearDown()", "classid":511, "classname":"edu.ncsu.csc.itrust.http.CalendarTest", "shortclassname":"CalendarTest", "method":"@Override\r\nprotected void tearDown() throws Exception {\r\n    gen.clearAllTables();\r\n    // gen.standardData();\r\n}"},
 {"id":3778, "methodname":"testHCPViewAppointmentCalendar()", "methodnamerefined":"testHCPViewAppointmentCalendar", "methodabbreviation":"edu.ncsu.csc.itrust.http.CalendarTest.testHCPViewAppointmentCalendar", "fullmethod":"edu.ncsu.csc.itrust.http.CalendarTest.testHCPViewAppointmentCalendar()", "classid":511, "classname":"edu.ncsu.csc.itrust.http.CalendarTest", "shortclassname":"CalendarTest", "method":"public void testHCPViewAppointmentCalendar() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    // Click Calendar\r\n    wr = wr.getLinkWith(\"Appointment Calendar\").click();\r\n    // check title\r\n    assertTrue(wr.getTitle().contains(\"Appointment Calendar\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.CALENDAR_VIEW, 9000000000L, 0L, \"\");\r\n    // check for the right appointments\r\n    String[][] tableData = wr.getTableWithID(\"calendarTable\").asText();\r\n    // On the 5th: 1:30PM - General Checkup\r\n    for (String[] list : tableData) {\r\n        for (String cell : list) {\r\n            if (cell.startsWith(\"5\")) {\r\n                assertTrue(cell.contains(\"General Checkup\"));\r\n            }\r\n        }\r\n    }\r\n    // On the 18th: 8:00AM - Colonoscopy\r\n    for (String[] list : tableData) {\r\n        for (String cell : list) {\r\n            if (cell.startsWith(\"18\")) {\r\n                assertTrue(cell.contains(\"Colonoscopy\"));\r\n            }\r\n        }\r\n    }\r\n    // On the 28th: 9:00AM - Physical\r\n    for (String[] list : tableData) {\r\n        for (String cell : list) {\r\n            if (cell.startsWith(\"28\")) {\r\n                assertTrue(cell.contains(\"Physical\"));\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":3779, "methodname":"testHCPViewAppointmentCalendarDetails()", "methodnamerefined":"testHCPViewAppointmentCalendarDetails", "methodabbreviation":"edu.ncsu.csc.itrust.http.CalendarTest.testHCPViewAppointmentCalendarDetails", "fullmethod":"edu.ncsu.csc.itrust.http.CalendarTest.testHCPViewAppointmentCalendarDetails()", "classid":511, "classname":"edu.ncsu.csc.itrust.http.CalendarTest", "shortclassname":"CalendarTest", "method":"public void testHCPViewAppointmentCalendarDetails() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    // Click Calendar\r\n    wr = wr.getLinkWith(\"Appointment Calendar\").click();\r\n    // check title\r\n    assertTrue(wr.getTitle().contains(\"Appointment Calendar\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.CALENDAR_VIEW, 9000000000L, 0L, \"\");\r\n    WebLink[] links = wr.getLinks();\r\n    int count = 0;\r\n    // get the second link with General Checkup-5\r\n    for (WebLink link : links) {\r\n        if (link.getName().contains(\"General Checkup-5\")) {\r\n            count++;\r\n            if (count == 2) {\r\n                wr = link.click();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // ensure proper data is showing up\r\n    assertTrue(wr.getText().contains(\"Andy Programmer\"));\r\n    assertTrue(wr.getText().contains(\"General Checkup\"));\r\n    assertTrue(wr.getText().contains(\"45 minutes\"));\r\n    assertTrue(wr.getText().contains(\"No Comment\"));\r\n    // get the current month and year\r\n    Calendar cal = Calendar.getInstance();\r\n    int month1 = (cal.get(Calendar.MONTH)) + 1;\r\n    int day1 = 5;\r\n    int year1 = cal.get(Calendar.YEAR);\r\n    assertTrue(wr.getText().contains((((((month1 + \"/0\") + day1) + \"/\") + year1) + \" 09:10 AM\")));\r\n}"},
 {"id":3780, "methodname":"testPatientViewFullCalendarOfficeVisitDetails()", "methodnamerefined":"testPatientViewFullCalendarOfficeVisitDetails", "methodabbreviation":"edu.ncsu.csc.itrust.http.CalendarTest.testPatientViewFullCalendarOfficeVisitDetails", "fullmethod":"edu.ncsu.csc.itrust.http.CalendarTest.testPatientViewFullCalendarOfficeVisitDetails()", "classid":511, "classname":"edu.ncsu.csc.itrust.http.CalendarTest", "shortclassname":"CalendarTest", "method":"public void testPatientViewFullCalendarOfficeVisitDetails() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    // Click Calendar\r\n    wr = wr.getLinkWith(\"Full Calendar\").click();\r\n    // check title\r\n    assertTrue(wr.getTitle().contains(\"Appointment Calendar\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.CALENDAR_VIEW, 2L, 0L, \"\");\r\n    // Patient 2 clicks the \ufffd487.00-Influenza\ufffd link on the 10th of the month.\r\n    wr = wr.getLinkWithName(\"487.00-Influenza-10\").click();\r\n    // Date of Visit: <current month> 10, <current year>.\r\n    // Physician: Kelly Doctor.\r\n    // Note: Terrible cough.\r\n    // Diagnoses: 487-Influenza.\r\n    // Medical Procedures: 1270F-Injection Procedure.\r\n    // Lab Procedure: No laboratory procedures on record.\r\n    // Medications Prescribed: No prescriptions on record.\r\n    // Immunizations: 90657-Influenza virus vaccine, split.\r\n    assertTrue(wr.getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getText().contains(\"Terrible cough.\"));\r\n    assertTrue(wr.getText().contains(\"487.00\"));\r\n    assertTrue(wr.getText().contains(\"Influenza\"));\r\n    assertTrue(wr.getText().contains(\"No Medications on record\"));\r\n    assertTrue(wr.getText().contains(\"1270F\"));\r\n    assertTrue(wr.getText().contains(\"Injection procedure\"));\r\n    assertTrue(wr.getText().contains(\"90657\"));\r\n    assertTrue(wr.getText().contains(\"Influenza virus vaccine, split\"));\r\n}"},
 {"id":3781, "methodname":"testPatientViewFullCalendarPrescriptionDetails()", "methodnamerefined":"testPatientViewFullCalendarPrescriptionDetails", "methodabbreviation":"edu.ncsu.csc.itrust.http.CalendarTest.testPatientViewFullCalendarPrescriptionDetails", "fullmethod":"edu.ncsu.csc.itrust.http.CalendarTest.testPatientViewFullCalendarPrescriptionDetails()", "classid":511, "classname":"edu.ncsu.csc.itrust.http.CalendarTest", "shortclassname":"CalendarTest", "method":"public void testPatientViewFullCalendarPrescriptionDetails() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    // Click Calendar\r\n    wr = wr.getLinkWith(\"Full Calendar\").click();\r\n    // check title\r\n    assertTrue(wr.getTitle().contains(\"Appointment Calendar\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.CALENDAR_VIEW, 2L, 0L, \"\");\r\n    // Patient 2 clicks the \ufffd487.00-Influenza\ufffd link on the 10th of the month.\r\n    wr = wr.getLinkWithName(\"664662530-Penicillin-21\").click();\r\n    // Date prescribed: <current month> 21, <current year>.\r\n    // Physician: Gandalf Stormcrow.\r\n    // Medication: 664662530-Penicillin.\r\n    // Start Date: <Current month> 21, <current year>.\r\n    // End Date: <60 days from the current date>.\r\n    // Instructions: Administer every 6 hours after meals.\r\n    assertTrue(wr.getText().contains(\"Gandalf Stormcrow\"));\r\n    assertTrue(wr.getText().contains(\"Penicillin (664662530)\"));\r\n    assertTrue(wr.getText().contains(\"250mg\"));\r\n    assertTrue(wr.getText().contains(\"Administer every 6 hours after meals\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_REPORT_VIEW, 2L, 2L, \"\");\r\n    // calculate date range\r\n    Calendar cal = Calendar.getInstance();\r\n    int month1 = (cal.get(Calendar.MONTH)) + 1;\r\n    int day1 = 21;\r\n    int year1 = cal.get(Calendar.YEAR);\r\n    assertTrue(wr.getText().contains((((((month1 + \"/\") + day1) + \"/\") + year1) + \" to \")));\r\n}"},
 {"id":3782, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.-init-()", "classid":512, "classname":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest", "shortclassname":"ComprehensiveReportingTest", "method":"ComprehensiveReportingTest() {\r\n}"},
 {"id":3783, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.setUp()", "classid":512, "classname":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest", "shortclassname":"ComprehensiveReportingTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3784, "methodname":"testComprehensiveAcceptanceSuccess()", "methodnamerefined":"testComprehensiveAcceptanceSuccess", "methodabbreviation":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.testComprehensiveAcceptanceSuccess", "fullmethod":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.testComprehensiveAcceptanceSuccess()", "classid":512, "classname":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest", "shortclassname":"ComprehensiveReportingTest", "method":"/* An HCP 9000000000, Admin 9000000001, and Patient MID 2 have been entered into the system. \nThe HCP logs in and requests a comprehensive report for patient 2. \nThe Admin logs in and approves the new request for patient 2. \nThe HCP views the approved comprehensive patient report.\n */\r\npublic void testComprehensiveAcceptanceSuccess() throws Exception {\r\n    // The HCP logs in and requests a comprehensive report for patient 2.\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Report Requests\").click();\r\n    assertTrue(wr.getText().contains(\"Report Requests\"));\r\n    wr = wr.getLinkWith(\"Add a new Report Request\").click();\r\n    assertTrue(wr.getText().contains(\"Please Select a Patient\"));\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Report Request Accepted\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.COMPREHENSIVE_REPORT_ADD, 9000000000L, 2L, \"Report ID:\");\r\n}"},
 {"id":3785, "methodname":"testHCPChoosesIncorrectPatient()", "methodnamerefined":"testHCPChoosesIncorrectPatient", "methodabbreviation":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.testHCPChoosesIncorrectPatient", "fullmethod":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.testHCPChoosesIncorrectPatient()", "classid":512, "classname":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest", "shortclassname":"ComprehensiveReportingTest", "method":"/* An HCP 9000000000 and Patient MID 2 have been entered into the system. \nThe HCP logs in and selects request comprehensive report. \nHCP enters patient 2. \nThe system responds with the name of this patient \"Andy Programmer\" and requests confirmation. \nThe HCP realizes this is the incorrect patient and cancels the request.\n */\r\npublic void testHCPChoosesIncorrectPatient() throws Exception {\r\n    // The HCP logs in and requests a comprehensive report for patient 2.\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Report Requests\").click();\r\n    assertTrue(wr.getText().contains(\"Report Requests\"));\r\n    wr = wr.getLinkWith(\"Add a new Report Request\").click();\r\n    assertTrue(wr.getText().contains(\"Please Select a Patient\"));\r\n    wr = wc.getResponse(((iTrustHTTPTest.ADDRESS) + \"/util/getUser.jsp\"));\r\n    assertEquals(\"iTrust - Find User\", wr.getTitle());\r\n    wr.getForms()[0].setParameter(\"mid\", \"2\");\r\n    wr = wr.getForms()[0].submit();\r\n    assertTrue(wr.getText().contains(\"Andy Programmer\"));\r\n    wr = wr.getForms()[0].submit();// Find another user button\r\n\r\n    assertEquals(\"iTrust - Find User\", wr.getTitle());\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.COMPREHENSIVE_REPORT_ADD, 9000000000L, 2L, \"Report ID:\");\r\n}"},
 {"id":3786, "methodname":"testHCPChoosesInvalidPatient()", "methodnamerefined":"testHCPChoosesInvalidPatient", "methodabbreviation":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.testHCPChoosesInvalidPatient", "fullmethod":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest.testHCPChoosesInvalidPatient()", "classid":512, "classname":"edu.ncsu.csc.itrust.http.ComprehensiveReportingTest", "shortclassname":"ComprehensiveReportingTest", "method":"/* An HCP 9000000000 has been entered into the system. \nThe HCP logs in and selects request comprehensive report. \nHCP enters patient 22. The system responds that patient 22 cannot be found.\n */\r\npublic void testHCPChoosesInvalidPatient() throws Exception {\r\n    // The HCP logs in and requests a comprehensive report for patient 2.\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Report Requests\").click();\r\n    assertTrue(wr.getText().contains(\"Report Requests\"));\r\n    wr = wr.getLinkWith(\"Add a new Report Request\").click();\r\n    assertTrue(wr.getText().contains(\"Please Select a Patient\"));\r\n    wr = wc.getResponse(((iTrustHTTPTest.ADDRESS) + \"/util/getUser.jsp\"));\r\n    // assertEquals(\"iTrust - Find User\", wr.getTitle());\r\n    wr.getForms()[0].setParameter(\"mid\", \"260\");\r\n    wr = wr.getForms()[0].submit();\r\n    assertTrue(wr.getText().contains(\"User does not exist\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.COMPREHENSIVE_REPORT_ADD, 9000000000L, 23L, \"Report ID:\");\r\n}"},
 {"id":3787, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ConsultationTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ConsultationTest.-init-()", "classid":513, "classname":"edu.ncsu.csc.itrust.http.ConsultationTest", "shortclassname":"ConsultationTest", "method":"ConsultationTest() {\r\n}"},
 {"id":3788, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ConsultationTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ConsultationTest.setUp()", "classid":513, "classname":"edu.ncsu.csc.itrust.http.ConsultationTest", "shortclassname":"ConsultationTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.icd9cmCodes();\r\n    gen.ndCodes();\r\n    gen.hospitals();\r\n    gen.hcp0();\r\n    gen.hcp3();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient5();\r\n    gen.clearLoginFailures();\r\n}"},
 {"id":3789, "methodname":"testReceiveAndEditConsultation()", "methodnamerefined":"testReceiveAndEditConsultation", "methodabbreviation":"edu.ncsu.csc.itrust.http.ConsultationTest.testReceiveAndEditConsultation", "fullmethod":"edu.ncsu.csc.itrust.http.ConsultationTest.testReceiveAndEditConsultation()", "classid":513, "classname":"edu.ncsu.csc.itrust.http.ConsultationTest", "shortclassname":"ConsultationTest", "method":"public void testReceiveAndEditConsultation() throws Exception {\r\n    /* WebConversation wc = login(\"9000000000\", \"pw\");\n    WebResponse wr = wc.getCurrentPage();\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\n\n    wr = wr.getLinkWith(\"Consultations\").click();\n    assertTrue(wr.getText().contains(\"HCP Consultations\"));\n\n    wr.getForms()[0].getButtons()[0].click();\n\n    wr = wc.getCurrentPage();\n\n    assertTrue(wr.getText().contains(\"Send a Consultation\"));\n\n\n    wr.getForms()[0].setParameter(\"patient\", \"5\");\n    wr.getForms()[0].setParameter(\"hcp\", \"9000000003\");\n    wr = wr.getForms()[0].submit();\n\n    assertTrue(wr.getText().contains(\"Consultation Form\"));\n\n    wr.getForms()[0].setParameter(\"msg\", \"Test3\");\n    wr = wr.getForms()[0].submit();\n\n    assertTrue(wr.getText().contains(\"Thank you, your Consultation Request was sent.\"));\n    assertLogged(TransactionType.CONSULTATION_REFERRAL_CREATE, 9000000000L, 5L, \"\");\n\n    assertTrue(wr.getText().contains(\"Test3\"));\n\n\n\n    /*\n    Time to receive the consultation.\n     */\r\n    /* wc = login(\"9000000003\", \"pw\");\n\n    wr = wc.getCurrentPage();\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\n\n    wr = wr.getLinkWith(\"Consultations\").click();\n\n\n    assertTrue(wr.getText().contains(\"HCP Consultations\"));\n\n    wr.getForms()[0].getButtons()[1].click();\n\n    wr = wc.getCurrentPage();\n\n    assertTrue(wr.getText().contains(\"View Pending Consultations\"));\n    assertLogged(TransactionType.CONSULTATION_REFERRAL_VIEW, 9000000003L, 0L, \"\");\n\n    assertTrue(wr.getText().contains(\"Baby Programmer (5)\"));\n\n    /*\n    Time to review the consultation.\n     */\r\n    /* wc = login(\"9000000000\", \"pw\");\n\n    wr = wc.getCurrentPage();\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\n\n    wr = wr.getLinkWith(\"Consultations\").click();\n\n\n    assertTrue(wr.getText().contains(\"HCP Consultations\"));\n\n    wr.getForms()[0].getButtons()[1].click();\n\n    wr = wc.getCurrentPage();\n\n    assertTrue(wr.getText().contains(\"Pending\"));\n     */\r\n}"},
 {"id":3790, "methodname":"testSubmitAndEditConsultation()", "methodnamerefined":"testSubmitAndEditConsultation", "methodabbreviation":"edu.ncsu.csc.itrust.http.ConsultationTest.testSubmitAndEditConsultation", "fullmethod":"edu.ncsu.csc.itrust.http.ConsultationTest.testSubmitAndEditConsultation()", "classid":513, "classname":"edu.ncsu.csc.itrust.http.ConsultationTest", "shortclassname":"ConsultationTest", "method":"public void testSubmitAndEditConsultation() throws Exception {\r\n    /* WebConversation wc = login(\"9000000000\", \"pw\");\n    WebResponse wr = wc.getCurrentPage();\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\n\n    wr = wr.getLinkWith(\"Consultations\").click();\n    assertTrue(wr.getText().contains(\"HCP Consultations\"));\n\n    wr.getForms()[0].getButtons()[0].click();\n\n    wr = wc.getCurrentPage();\n\n    assertTrue(wr.getText().contains(\"Send a Consultation\"));\n\n\n    wr.getForms()[0].setParameter(\"patient\", \"5\");\n    wr.getForms()[0].setParameter(\"hcp\", \"9000000003\");\n    wr = wr.getForms()[0].submit();\n\n    assertTrue(wr.getText().contains(\"Consultation Form\"));\n\n    wr.getForms()[0].setParameter(\"msg\", \"Test1\");\n    wr = wr.getForms()[0].submit();\n\n    assertTrue(wr.getText().contains(\"Thank you, your Consultation Request was sent.\"));\n    assertLogged(TransactionType.CONSULTATION_REFERRAL_CREATE, 9000000000L, 5L, \"\");\n\n    assertTrue(wr.getText().contains(\"Test1\"));\n\n    wr = wr.getLinkWith(\"Consultations\").click();\n    assertTrue(wr.getText().contains(\"HCP Consultations\"));\n\n    wr.getForms()[0].getButtons()[1].click();\n\n    wr = wc.getCurrentPage();\n\n    assertTrue(wr.getText().contains(\"View Pending Consultations\"));\n\n    assertTrue(wr.getText().contains(\"Baby Programmer (5)\"));\n     */\r\n}"},
 {"id":3791, "methodname":"testSubmitAndReceiveConsultation()", "methodnamerefined":"testSubmitAndReceiveConsultation", "methodabbreviation":"edu.ncsu.csc.itrust.http.ConsultationTest.testSubmitAndReceiveConsultation", "fullmethod":"edu.ncsu.csc.itrust.http.ConsultationTest.testSubmitAndReceiveConsultation()", "classid":513, "classname":"edu.ncsu.csc.itrust.http.ConsultationTest", "shortclassname":"ConsultationTest", "method":"/*  */\r\npublic void testSubmitAndReceiveConsultation() throws Exception {\r\n    /* WebConversation wc = login(\"9000000000\", \"pw\");\n    WebResponse wr = wc.getCurrentPage();\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\n    assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\n\n    wr = wr.getLinkWith(\"Consultations\").click();\n    assertTrue(wr.getText().contains(\"HCP Consultations\"));\n\n    wr.getForms()[0].getButtons()[0].click();\n\n    wr = wc.getCurrentPage();\n\n    assertTrue(wr.getText().contains(\"Send a Consultation\"));\n\n\n    wr.getForms()[0].setParameter(\"patient\", \"5\");\n    wr.getForms()[0].setParameter(\"hcp\", \"9000000003\");\n    wr = wr.getForms()[0].submit();\n\n    assertTrue(wr.getText().contains(\"Consultation Form\"));\n\n    wr.getForms()[0].setParameter(\"msg\", \"Test1\");\n    wr = wr.getForms()[0].submit();\n    assertLogged(TransactionType.CONSULTATION_REFERRAL_CREATE, 9000000000L, 5L, \"\");\n\n    assertTrue(wr.getText().contains(\"Thank you, your Consultation Request was sent.\"));\n\n    assertTrue(wr.getText().contains(\"Test1\"));\n\n\n    /*\n    Time to receive the consultation.\n     */\r\n    /* wc = login(\"9000000003\", \"pw\");\n\n    wr = wc.getCurrentPage();\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\n\n    wr = wr.getLinkWith(\"Consultations\").click();\n    assertTrue(wr.getText().contains(\"HCP Consultations\"));\n\n    wr.getForms()[0].getButtons()[1].click();\n    wr = wc.getCurrentPage();\n\n    assertTrue(wr.getText().contains(\"View Pending Consultations\"));\n\n    assertTrue(wr.getText().contains(\"Kelly Doctor\"));\n     */\r\n}"},
 {"id":3792, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateHCPSpecTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.CreateHCPSpecTest.-init-()", "classid":514, "classname":"edu.ncsu.csc.itrust.http.CreateHCPSpecTest", "shortclassname":"CreateHCPSpecTest", "method":"CreateHCPSpecTest() {\r\n}"},
 {"id":3793, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateHCPSpecTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.CreateHCPSpecTest.setUp()", "classid":514, "classname":"edu.ncsu.csc.itrust.http.CreateHCPSpecTest", "shortclassname":"CreateHCPSpecTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3794, "methodname":"testSpecialtyOnForm()", "methodnamerefined":"testSpecialtyOnForm", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateHCPSpecTest.testSpecialtyOnForm", "fullmethod":"edu.ncsu.csc.itrust.http.CreateHCPSpecTest.testSpecialtyOnForm()", "classid":514, "classname":"edu.ncsu.csc.itrust.http.CreateHCPSpecTest", "shortclassname":"CreateHCPSpecTest", "method":"public void testSpecialtyOnForm() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Add HCP\r\n    wr = wr.getLinkWith(\"Add HCP\").click();\r\n    // add the hcp\r\n    assertEquals(\"iTrust - Add HCP\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"Firstname\");\r\n    form.setParameter(\"lastName\", \"Lastname\");\r\n    form.setParameter(\"email\", \"abcdef@ncsu.edu\");\r\n    assertTrue(form.hasParameterNamed(\"specialty\"));\r\n    form.setParameter(\"specialty\", \"pediatrician\");\r\n    assertEquals(\"pediatrician\", form.getParameterValue(\"specialty\"));\r\n    wr = form.submit();\r\n    // make sure HCP was added\r\n    WebTable table = wr.getTables()[0];\r\n    String newMID = table.getCellAsText(1, 1);\r\n    iTrustHTTPTest.assertLogged(TransactionType.LHCP_CREATE, 9000000001L, Long.parseLong(newMID), \"\");\r\n}"},
 {"id":3795, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateHCPTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.CreateHCPTest.-init-()", "classid":515, "classname":"edu.ncsu.csc.itrust.http.CreateHCPTest", "shortclassname":"CreateHCPTest", "method":"CreateHCPTest() {\r\n}"},
 {"id":3796, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateHCPTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.CreateHCPTest.setUp()", "classid":515, "classname":"edu.ncsu.csc.itrust.http.CreateHCPTest", "shortclassname":"CreateHCPTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n    gen.cptCodes();\r\n}"},
 {"id":3797, "methodname":"testCreateValidHCP()", "methodnamerefined":"testCreateValidHCP", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateHCPTest.testCreateValidHCP", "fullmethod":"edu.ncsu.csc.itrust.http.CreateHCPTest.testCreateValidHCP()", "classid":515, "classname":"edu.ncsu.csc.itrust.http.CreateHCPTest", "shortclassname":"CreateHCPTest", "method":"/* Authenticate admin 90000000001\nChoose Add HCP option\nPhysican type not currently implemented\n[Role: Licensed Physician]\n[Enabled: true]\nLast name: Williams\nFirst name: Laurie\nEmail: laurie@ncsu.edu\nStreet address 1: 900 Main Campus Dr\nStreet address 2: BOX 2509\nCity: Raleigh\nState: NC\nZip code: 27606-1234\nPhone: 919-100-1000\n */\r\npublic void testCreateValidHCP() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Add HCP\r\n    wr = wr.getLinkWith(\"Add HCP\").click();\r\n    // add the hcp\r\n    assertEquals(\"iTrust - Add HCP\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"Laurie\");\r\n    form.setParameter(\"lastName\", \"Williams\");\r\n    form.setParameter(\"email\", \"laurie@ncsu.edu\");\r\n    wr = form.submit();\r\n    // edit the hcp\r\n    WebTable table = wr.getTables()[0];\r\n    String newMID = table.getCellAsText(1, 1);\r\n    wr = wr.getLinkWith(\"Continue\").click();\r\n    assertEquals(\"iTrust - Edit Personnel\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    form.setParameter(\"streetAddress1\", \"900 Main Campus Dr\");\r\n    form.setParameter(\"streetAddress2\", \"Box 2509\");\r\n    form.setParameter(\"city\", \"Raleigh\");\r\n    form.setParameter(\"state\", \"NC\");\r\n    form.setParameter(\"zip\", \"27606-1234\");\r\n    form.setParameter(\"phone\", \"919-100-1000\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.LHCP_CREATE, 9000000001L, Long.parseLong(newMID), \"\");\r\n}"},
 {"id":3798, "methodname":"testEditHospitalAssignments()", "methodnamerefined":"testEditHospitalAssignments", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateHCPTest.testEditHospitalAssignments", "fullmethod":"edu.ncsu.csc.itrust.http.CreateHCPTest.testEditHospitalAssignments()", "classid":515, "classname":"edu.ncsu.csc.itrust.http.CreateHCPTest", "shortclassname":"CreateHCPTest", "method":"public void testEditHospitalAssignments() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit HCP Assignment to Hospital\r\n    wr = wr.getLinkWith(\"Edit HCP Assignment to Hospital\").click();\r\n    assertEquals(\"iTrust - Please Select a Personnel\", wr.getTitle());\r\n    wr.getForms()[1].setParameter(\"FIRST_NAME\", \"Kelly\");\r\n    wr.getForms()[1].setParameter(\"LAST_NAME\", \"Doctor\");\r\n    wr.getForms()[1].getButtons()[2].click();\r\n    wr = wc.getCurrentPage();\r\n    wr.getForms()[2].getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    // assign hospital\r\n    assertEquals(\"iTrust - Hospital Staffing Assignments\", wr.getTitle());\r\n    WebLink[] weblinks = wr.getLinks();\r\n    for (int i = 0; i < (weblinks.length); i++) {\r\n        if (weblinks[i].getText().equals(\"Assign\")) {\r\n            wr = weblinks[i].click();\r\n            assertTrue(wr.getText().contains(\"HCP has been assigned\"));\r\n            iTrustHTTPTest.assertLogged(TransactionType.LHCP_ASSIGN_HOSPITAL, 9000000001L, 9000000000L, \"\");\r\n            break;\r\n        }\r\n    }\r\n    for (int i = 0; i < (weblinks.length); i++) {\r\n        if (weblinks[i].getText().equals(\"Unassign\")) {\r\n            wr = weblinks[i].click();\r\n            assertTrue(wr.getText().contains(\"HCP has been unassigned\"));\r\n            iTrustHTTPTest.assertLogged(TransactionType.LHCP_REMOVE_HOSPITAL, 9000000001L, 9000000000L, \"\");\r\n            break;\r\n        }\r\n    }\r\n}"},
 {"id":3799, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateLTSpecTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.CreateLTSpecTest.-init-()", "classid":516, "classname":"edu.ncsu.csc.itrust.http.CreateLTSpecTest", "shortclassname":"CreateLTSpecTest", "method":"CreateLTSpecTest() {\r\n}"},
 {"id":3800, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateLTSpecTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.CreateLTSpecTest.setUp()", "classid":516, "classname":"edu.ncsu.csc.itrust.http.CreateLTSpecTest", "shortclassname":"CreateLTSpecTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3801, "methodname":"testSpecialtyOnForm()", "methodnamerefined":"testSpecialtyOnForm", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateLTSpecTest.testSpecialtyOnForm", "fullmethod":"edu.ncsu.csc.itrust.http.CreateLTSpecTest.testSpecialtyOnForm()", "classid":516, "classname":"edu.ncsu.csc.itrust.http.CreateLTSpecTest", "shortclassname":"CreateLTSpecTest", "method":"public void testSpecialtyOnForm() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Add HCP\r\n    wr = wr.getLinkWith(\"Add LT\").click();\r\n    // add the hcp\r\n    assertEquals(\"iTrust - Add LT\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"New\");\r\n    form.setParameter(\"lastName\", \"Person\");\r\n    form.setParameter(\"email\", \"nperson@gmail.com\");\r\n    assertTrue(form.hasParameterNamed(\"specialty\"));\r\n    form.setParameter(\"specialty\", \"general\");\r\n    assertEquals(\"general\", form.getParameterValue(\"specialty\"));\r\n    wr = form.submit();\r\n    // make sure LT was added\r\n    WebTable table = wr.getTables()[0];\r\n    assertTrue(wr.getText().contains(\"New LT New Person successfully added!\"));\r\n    String newMID = table.getCellAsText(1, 1);\r\n    assertTrue(newMID.contains(\"500000\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.LT_CREATE, 9000000001L, Long.parseLong(newMID), \"\");\r\n}"},
 {"id":3802, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreatePHATest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.CreatePHATest.-init-()", "classid":517, "classname":"edu.ncsu.csc.itrust.http.CreatePHATest", "shortclassname":"CreatePHATest", "method":"CreatePHATest() {\r\n}"},
 {"id":3803, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreatePHATest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.CreatePHATest.setUp()", "classid":517, "classname":"edu.ncsu.csc.itrust.http.CreatePHATest", "shortclassname":"CreatePHATest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n    gen.cptCodes();\r\n}"},
 {"id":3804, "methodname":"testCreateNullPHA()", "methodnamerefined":"testCreateNullPHA", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreatePHATest.testCreateNullPHA", "fullmethod":"edu.ncsu.csc.itrust.http.CreatePHATest.testCreateNullPHA()", "classid":517, "classname":"edu.ncsu.csc.itrust.http.CreatePHATest", "shortclassname":"CreatePHATest", "method":"public void testCreateNullPHA() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Add PHA\r\n    wr = wr.getLinkWith(\"Add PHA\").click();\r\n    // add the pha\r\n    assertEquals(\"iTrust - Add PHA\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    wr = form.submit();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"This form has not been validated correctly. The following field are not properly filled in: [First name: Up to 20 Letters, space,  and -, Last name: Up to 20 Letters, space,  and -, Email: Up to 30 alphanumeric characters and symbols . and _ @]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PHA_DISABLE, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3805, "methodname":"testCreateValidPHA()", "methodnamerefined":"testCreateValidPHA", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreatePHATest.testCreateValidPHA", "fullmethod":"edu.ncsu.csc.itrust.http.CreatePHATest.testCreateValidPHA()", "classid":517, "classname":"edu.ncsu.csc.itrust.http.CreatePHATest", "shortclassname":"CreatePHATest", "method":"/* Authenticate admin 90000000001\nChoose Add PHA option\nLast name: Blah\nFirst name: Bob\nEmail: bobblah@blarg.com\n */\r\npublic void testCreateValidPHA() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Add PHA\r\n    wr = wr.getLinkWith(\"Add PHA\").click();\r\n    // add the pha\r\n    assertEquals(\"iTrust - Add PHA\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"Bob\");\r\n    form.setParameter(\"lastName\", \"Blah\");\r\n    form.setParameter(\"email\", \"bobblah@blarg.com\");\r\n    wr = form.submit();\r\n    WebTable table = wr.getTables()[0];\r\n    String newMID = table.getCellAsText(1, 1);\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"New PHA Bob Blah succesfully added!\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PHA_CREATE, 9000000001L, Long.parseLong(newMID), \"\");\r\n}"},
 {"id":3806, "methodname":"testCreateValidPHA2()", "methodnamerefined":"testCreateValidPHA2", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreatePHATest.testCreateValidPHA2", "fullmethod":"edu.ncsu.csc.itrust.http.CreatePHATest.testCreateValidPHA2()", "classid":517, "classname":"edu.ncsu.csc.itrust.http.CreatePHATest", "shortclassname":"CreatePHATest", "method":"public void testCreateValidPHA2() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Add PHA\r\n    wr = wr.getLinkWith(\"Add PHA\").click();\r\n    // add the PHA\r\n    assertEquals(\"iTrust - Add PHA\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"Tim\");\r\n    form.setParameter(\"lastName\", \"Agent\");\r\n    form.setParameter(\"email\", \"pha@timagent.com\");\r\n    wr = form.submit();\r\n    WebTable table = wr.getTables()[0];\r\n    String newMID = table.getCellAsText(1, 1);\r\n    // edit the hcp\r\n    wr = wr.getLinkWith(\"Continue\").click();\r\n    assertEquals(\"iTrust - Edit Personnel\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    form.setParameter(\"streetAddress1\", \"98765 Oak Hills Dr\");\r\n    form.setParameter(\"city\", \"Capitol City\");\r\n    form.setParameter(\"state\", \"NC\");\r\n    form.setParameter(\"zip\", \"28700-0458\");\r\n    form.setParameter(\"phone\", \"555-877-5100\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PHA_CREATE, 9000000001L, Long.parseLong(newMID), \"\");\r\n}"},
 {"id":3807, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateUAPTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.CreateUAPTest.-init-()", "classid":518, "classname":"edu.ncsu.csc.itrust.http.CreateUAPTest", "shortclassname":"CreateUAPTest", "method":"CreateUAPTest() {\r\n}"},
 {"id":3808, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateUAPTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.CreateUAPTest.setUp()", "classid":518, "classname":"edu.ncsu.csc.itrust.http.CreateUAPTest", "shortclassname":"CreateUAPTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3809, "methodname":"testCreateUAP1()", "methodnamerefined":"testCreateUAP1", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreateUAPTest.testCreateUAP1", "fullmethod":"edu.ncsu.csc.itrust.http.CreateUAPTest.testCreateUAP1()", "classid":518, "classname":"edu.ncsu.csc.itrust.http.CreateUAPTest", "shortclassname":"CreateUAPTest", "method":"/* Authenticate HCP\nMID: 9000000000\nPassword: pw\nChoose Add UAP option\nLast name: Watson\nFirst name: Doctor\nStreet address 1: 1234 Varsity Ln\nStreet address 2: 2nd Floor\nCity: Cary\nState: SC\nZip code: 12345-1234\nPhone: 704-100-1000\n */\r\npublic void testCreateUAP1() throws Exception {\r\n    // login UAP\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click on Add UAP\r\n    wr = wr.getLinkWith(\"UAP\").click();\r\n    // add the UAP\r\n    assertEquals(\"iTrust - Add UAP\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"Drake\");\r\n    form.setParameter(\"lastName\", \"Ramoray\");\r\n    form.setParameter(\"email\", \"drake@drake.com\");\r\n    wr = form.submit();\r\n    WebTable table = wr.getTables()[0];\r\n    String newMID = table.getCellAsText(1, 1);\r\n    // edit the UAP\r\n    wr = wr.getLinkWith(\"Continue\").click();\r\n    assertEquals(\"iTrust - Edit Personnel\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"Doctor\");\r\n    form.setParameter(\"lastName\", \"Watson\");\r\n    form.setParameter(\"streetAddress1\", \"1234 Varsity Ln\");\r\n    form.setParameter(\"streetAddress2\", \"2nd Lane\");\r\n    form.setParameter(\"city\", \"Cary\");\r\n    form.setParameter(\"state\", \"NC\");\r\n    form.setParameter(\"zip\", \"12345-1234\");\r\n    form.setParameter(\"phone\", \"704-100-1000\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.UAP_CREATE, 9000000000L, Long.parseLong(newMID), \"\");\r\n}"},
 {"id":3810, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.-init-()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"CreditCardValidatorTest() {\r\n}"},
 {"id":3811, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.setUp()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.clearLoginFailures();\r\n}"},
 {"id":3812, "methodname":"testBadAmex()", "methodnamerefined":"testBadAmex", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testBadAmex", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testBadAmex()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"public void testBadAmex() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"AMEX\");\r\n    form.setParameter(\"creditCardNumber\", \"5593090746812380\");// Legit Mastercard\r\n\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Number]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"6437693863890467\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Number]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3813, "methodname":"testBadDiscovers()", "methodnamerefined":"testBadDiscovers", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testBadDiscovers", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testBadDiscovers()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"public void testBadDiscovers() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"DISCOVER\");\r\n    form.setParameter(\"creditCardNumber\", \"5593090746812380\");// Legit Mastercard\r\n\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Number]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"6437693863890467\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Number]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3814, "methodname":"testBadMasterCards()", "methodnamerefined":"testBadMasterCards", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testBadMasterCards", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testBadMasterCards()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"public void testBadMasterCards() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"MASTERCARD\");\r\n    form.setParameter(\"creditCardNumber\", \"1593090746812380\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Number]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"4539592576502361\");// Legit Visa\r\n\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Number]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3815, "methodname":"testBadVisas()", "methodnamerefined":"testBadVisas", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testBadVisas", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testBadVisas()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"public void testBadVisas() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"VISA\");\r\n    form.setParameter(\"creditCardNumber\", \"5593090746812380\");// Legit Mastercard\r\n\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Number]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"6437693863890467\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Number]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3816, "methodname":"testEmptyTypeEmptyNumber()", "methodnamerefined":"testEmptyTypeEmptyNumber", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testEmptyTypeEmptyNumber", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testEmptyTypeEmptyNumber()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"public void testEmptyTypeEmptyNumber() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"\");\r\n    form.setParameter(\"creditCardNumber\", \"\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3817, "methodname":"testEmptyTypeFilledNumber()", "methodnamerefined":"testEmptyTypeFilledNumber", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testEmptyTypeFilledNumber", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testEmptyTypeFilledNumber()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"public void testEmptyTypeFilledNumber() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"\");\r\n    form.setParameter(\"creditCardNumber\", \"5593090746812380\");// Legit Mastercard\r\n\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Type]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"6437693863890467\");// Not Legit anything\r\n\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"not properly filled in: [Credit Card Type]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3818, "methodname":"testGoodAmex()", "methodnamerefined":"testGoodAmex", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testGoodAmex", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testGoodAmex()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"/* AMEX stands for American Express. */\r\npublic void testGoodAmex() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"AMEX\");\r\n    form.setParameter(\"creditCardNumber\", \"343570480641495\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"377199947956764\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"344558915054011\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3819, "methodname":"testGoodDiscovers()", "methodnamerefined":"testGoodDiscovers", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testGoodDiscovers", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testGoodDiscovers()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"public void testGoodDiscovers() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"DISCOVER\");\r\n    form.setParameter(\"creditCardNumber\", \"6011263089803439\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"6011953266156193\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"6011726402628022\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3820, "methodname":"testGoodMasterCards()", "methodnamerefined":"testGoodMasterCards", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testGoodMasterCards", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testGoodMasterCards()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"public void testGoodMasterCards() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"MASTERCARD\");\r\n    form.setParameter(\"creditCardNumber\", \"5593090746812380\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"5437693863890467\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"5343017708937494\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3821, "methodname":"testGoodVisas()", "methodnamerefined":"testGoodVisas", "methodabbreviation":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testGoodVisas", "fullmethod":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest.testGoodVisas()", "classid":519, "classname":"edu.ncsu.csc.itrust.http.CreditCardValidatorTest", "shortclassname":"CreditCardValidatorTest", "method":"public void testGoodVisas() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // click on My Demographics\r\n    wr = wr.getLinkWith(\"My Demographics\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 1L, 1L, \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"creditCardType\", \"VISA\");\r\n    form.setParameter(\"creditCardNumber\", \"4539592576502361\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"4716912133362668\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n    form.setParameter(\"creditCardNumber\", \"4485333709241203\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 1L, 1L, \"\");\r\n}"},
 {"id":3822, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.-init-()", "classid":520, "classname":"edu.ncsu.csc.itrust.http.DeactivatePatientTest", "shortclassname":"DeactivatePatientTest", "method":"DeactivatePatientTest() {\r\n}"},
 {"id":3823, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.setUp()", "classid":520, "classname":"edu.ncsu.csc.itrust.http.DeactivatePatientTest", "shortclassname":"DeactivatePatientTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patientDeactivate();\r\n}"},
 {"id":3824, "methodname":"testAdministratorReactivatePatient()", "methodnamerefined":"testAdministratorReactivatePatient", "methodabbreviation":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testAdministratorReactivatePatient", "fullmethod":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testAdministratorReactivatePatient()", "classid":520, "classname":"edu.ncsu.csc.itrust.http.DeactivatePatientTest", "shortclassname":"DeactivatePatientTest", "method":"public void testAdministratorReactivatePatient() throws Exception {\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Activate Patient\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"314159\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/admin/activatePatient.jsp\"), wr.getURL().toString());\r\n    WebForm editPatientForm = wr.getForms()[0];\r\n    editPatientForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient Successfully Activated\"));\r\n}"},
 {"id":3825, "methodname":"testHCPDeactivatePatient()", "methodnamerefined":"testHCPDeactivatePatient", "methodabbreviation":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testHCPDeactivatePatient", "fullmethod":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testHCPDeactivatePatient()", "classid":520, "classname":"edu.ncsu.csc.itrust.http.DeactivatePatientTest", "shortclassname":"DeactivatePatientTest", "method":"public void testHCPDeactivatePatient() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Deactivate Patient\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/deactivatePatient.jsp\"), wr.getURL().toString());\r\n    WebForm editPatientForm = wr.getForms()[0];\r\n    editPatientForm.setParameter(\"understand\", \"I UNDERSTAND\");\r\n    editPatientForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient Successfully Deactivated\"));\r\n}"},
 {"id":3826, "methodname":"testHCPDeactivatedPatientGroupReport()", "methodnamerefined":"testHCPDeactivatedPatientGroupReport", "methodabbreviation":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testHCPDeactivatedPatientGroupReport", "fullmethod":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testHCPDeactivatedPatientGroupReport()", "classid":520, "classname":"edu.ncsu.csc.itrust.http.DeactivatePatientTest", "shortclassname":"DeactivatePatientTest", "method":"public void testHCPDeactivatedPatientGroupReport() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Group Report\").click();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    wr = form.submit();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n}"},
 {"id":3827, "methodname":"testHCPEditDeactivatedPatient()", "methodnamerefined":"testHCPEditDeactivatedPatient", "methodabbreviation":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testHCPEditDeactivatedPatient", "fullmethod":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testHCPEditDeactivatedPatient()", "classid":520, "classname":"edu.ncsu.csc.itrust.http.DeactivatePatientTest", "shortclassname":"DeactivatePatientTest", "method":"public void testHCPEditDeactivatedPatient() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"314159\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPatient.jsp\"), wr.getURL().toString());\r\n    assertTrue(wr.getText().contains(\"Patient is deactivated.  Cannot edit.\"));\r\n}"},
 {"id":3828, "methodname":"testPatientDeactivatedLogin()", "methodnamerefined":"testPatientDeactivatedLogin", "methodabbreviation":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testPatientDeactivatedLogin", "fullmethod":"edu.ncsu.csc.itrust.http.DeactivatePatientTest.testPatientDeactivatedLogin()", "classid":520, "classname":"edu.ncsu.csc.itrust.http.DeactivatePatientTest", "shortclassname":"DeactivatePatientTest", "method":"public void testPatientDeactivatedLogin() throws Exception {\r\n    // begin at the iTrust home page\r\n    WebConversation wc = new WebConversation();\r\n    WebResponse loginResponse = wc.getResponse(iTrustHTTPTest.ADDRESS);\r\n    // log in using the given username and password\r\n    WebForm form = loginResponse.getForms()[0];\r\n    form.setParameter(\"j_username\", \"314159\");\r\n    form.setParameter(\"j_password\", \"pw\");\r\n    WebResponse homePage = loginResponse.getForms()[0].submit();\r\n    assertTrue(homePage.getText().contains(\"Failed login attempts\"));\r\n}"},
 {"id":3829, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.-init-()", "classid":521, "classname":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest", "shortclassname":"DesignateAndViewHCPUseCaseTest", "method":"DesignateAndViewHCPUseCaseTest() {\r\n}"},
 {"id":3830, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.setUp()", "classid":521, "classname":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest", "shortclassname":"DesignateAndViewHCPUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patient_hcp_vists();\r\n}"},
 {"id":3831, "methodname":"testReportSeenHCPs0()", "methodnamerefined":"testReportSeenHCPs0", "methodabbreviation":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.testReportSeenHCPs0", "fullmethod":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.testReportSeenHCPs0()", "classid":521, "classname":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest", "shortclassname":"DesignateAndViewHCPUseCaseTest", "method":"/**\r\n * Test testReportSeenHCPs0\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testReportSeenHCPs0() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Providers\").click();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    WebTable table = ((WebTable) (wr.getElementWithID(\"hcp_table\")));\r\n    TableRow[] rows = table.getRows();\r\n    assertTrue(rows[0].getText().contains(\"HCP Name\"));\r\n    assertTrue(rows[1].getText().contains(\"Gandalf Stormcrow\"));\r\n    assertTrue(rows[2].getText().contains(\"Mary Shelley\"));\r\n    assertTrue(rows[3].getText().contains(\"Lauren Frankenstein\"));\r\n    assertTrue(rows[4].getText().contains(\"Jason Frankenstein\"));\r\n    assertTrue(rows[5].getText().contains(\"Kelly Doctor\"));\r\n}"},
 {"id":3832, "methodname":"testReportSeenHCPs1()", "methodnamerefined":"testReportSeenHCPs1", "methodabbreviation":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.testReportSeenHCPs1", "fullmethod":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.testReportSeenHCPs1()", "classid":521, "classname":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest", "shortclassname":"DesignateAndViewHCPUseCaseTest", "method":"public void testReportSeenHCPs1() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Providers\").click();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    WebForm form = wr.getFormWithName(\"mainForm\");// .getFormWithID(\"mainForm\");\r\n\r\n    // form.setCheckbox(\"doctor\", \"Jason Frankenstein\", false);\r\n    form.getScriptableObject().setParameterValue(\"removeID\", \"Jason Frankenstein\");\r\n    // form.getScriptableObject().setParameterValue(\"doctor\", \"Jason Frankenstein\");\r\n    // wr.getElementsWithName(doctor)[0]\r\n    // form.getScriptableObject().submit();\r\n    // wr = wc.getCurrentPage();\r\n    wr = wr.getForms()[0].submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LHCP_VIEW, 2L, 0L, \"\");\r\n    WebTable table = ((WebTable) (wr.getElementWithID(\"hcp_table\")));\r\n    TableRow[] rows = table.getRows();\r\n    assertTrue(rows[4].getText().contains(\"Jason Frankenstein\"));\r\n}"},
 {"id":3833, "methodname":"testReportSeenHCPs2()", "methodnamerefined":"testReportSeenHCPs2", "methodabbreviation":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.testReportSeenHCPs2", "fullmethod":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest.testReportSeenHCPs2()", "classid":521, "classname":"edu.ncsu.csc.itrust.http.DesignateAndViewHCPUseCaseTest", "shortclassname":"DesignateAndViewHCPUseCaseTest", "method":"public void testReportSeenHCPs2() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Providers\").click();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"searchForm\");\r\n    form.setParameter(\"filter_name\", \"Frank\");\r\n    form.setParameter(\"filter_specialty\", \"pediatrician\");\r\n    wr = form.submit();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    WebTable table = ((WebTable) (wr.getElementWithID(\"hcp_table\")));\r\n    TableRow[] rows = table.getRows();\r\n    assertTrue(rows[1].getText().contains(\"Lauren Frankenstein\"));\r\n}"},
 {"id":3834, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest.-init-()", "classid":522, "classname":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest", "shortclassname":"DetermineOperationalProfileTest", "method":"DetermineOperationalProfileTest() {\r\n}"},
 {"id":3835, "methodname":"getRowNumber(java.lang.String)", "methodnamerefined":"getRowNumber", "methodabbreviation":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest.getRowNumber", "fullmethod":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest.getRowNumber(java.lang.String)", "classid":522, "classname":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest", "shortclassname":"DetermineOperationalProfileTest", "method":"public int getRowNumber(String description) {\r\n    TransactionType[] values = TransactionType.values();\r\n    int rownumber = 0;\r\n    for (int i = 0; i < (values.length); i++) {\r\n        if (description.equals(values[i].getDescription()))\r\n            rownumber = i + 1;\r\n\r\n    }\r\n    return rownumber;\r\n}"},
 {"id":3836, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest.setUp()", "classid":522, "classname":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest", "shortclassname":"DetermineOperationalProfileTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.uap1();\r\n    gen.tester();\r\n}"},
 {"id":3837, "methodname":"testDetermineOperationalProfile()", "methodnamerefined":"testDetermineOperationalProfile", "methodabbreviation":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest.testDetermineOperationalProfile", "fullmethod":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest.testDetermineOperationalProfile()", "classid":522, "classname":"edu.ncsu.csc.itrust.http.DetermineOperationalProfileTest", "shortclassname":"DetermineOperationalProfileTest", "method":"/* Precondition: Sample data is in the database. CreatePatient2 has passed.\nLogin with user 9999999999 and password pw.\n */\r\npublic void testDetermineOperationalProfile() throws Exception {\r\n    // login as uap and add a patient\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse home = wc.getResponse(((iTrustHTTPTest.ADDRESS) + \"auth/uap/home.jsp\"));\r\n    assertEquals(\"iTrust - UAP Home\", home.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    WebResponse wr = home.getLinkWith(\"Add Patient\").click();\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"bob\");\r\n    form.setParameter(\"lastName\", \"bob\");\r\n    form.setParameter(\"email\", \"bob@bob.com\");\r\n    wr = form.submit();\r\n    WebTable table1 = wr.getTables()[0];\r\n    String newMID = table1.getCellAsText(1, 1);\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_CREATE, 8000000009L, Long.parseLong(newMID), \"\");\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOGOUT, 8000000009L, 8000000009L, \"\");\r\n    // wr = wr.getLinkWith(\"Home\").click();\r\n    // login as tester to check the operational profile\r\n    wc = login(\"9999999999\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Operation\");\r\n    assertEquals(\"Create a patient\", table.getCellAsText(getRowNumber(\"Create a patient\"), 0));\r\n    assertEquals(\"1\", table.getCellAsText(8, 1));// was 1\r\n\r\n    assertEquals(\"17%\", table.getCellAsText(8, 2));// was 17%\r\n\r\n    assertEquals(\"1\", table.getCellAsText(8, 3));// was 1\r\n\r\n    assertEquals(\"20%\", table.getCellAsText(8, 4));// was 20%\r\n\r\n    assertEquals(\"0\", table.getCellAsText(8, 5));// was 0\r\n\r\n    assertEquals(\"0%\", table.getCellAsText(8, 6));// was 0\r\n\r\n    // now check the totals are correct\r\n    assertEquals(\"Add Medical procedure code\", table.getCellAsText(getRowNumber(\"Add Medical procedure code\"), 0));\r\n    assertEquals(\"0\", table.getCellAsText(45, 1));// was 4 - supposed to be 3\r\n\r\n    assertEquals(\"0\", table.getCellAsText(45, 3));// was 3 - supposed to be 2\r\n\r\n    assertEquals(\"0\", table.getCellAsText(45, 5));// supposed to be 1\r\n\r\n    iTrustHTTPTest.assertLogged(TransactionType.OPERATIONAL_PROFILE_VIEW, 9999999999L, 0L, \"\");\r\n}"},
 {"id":3838, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.-init-()", "classid":523, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest", "shortclassname":"DocumentOfficeVisitTest", "method":"DocumentOfficeVisitTest() {\r\n}"},
 {"id":3839, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.setUp()", "classid":523, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest", "shortclassname":"DocumentOfficeVisitTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.uap1();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n    gen.patient1();\r\n}"},
 {"id":3840, "methodname":"testDocumentOfficeVisit1()", "methodnamerefined":"testDocumentOfficeVisit1", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testDocumentOfficeVisit1", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testDocumentOfficeVisit1()", "classid":523, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest", "shortclassname":"DocumentOfficeVisitTest", "method":"/* Authenticate HCP\nMID 9000000000\nPassword: pw\nChoose Document Office Visit\nEnter Patient MID 2 and confirm\nChoose to document new office vist.\nEnter Fields:\nDate: 2005-11-2\nNotes: Great patient!\n */\r\npublic void testDocumentOfficeVisit1() throws Exception {\r\n    // login HCP\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"11/02/2005\");\r\n    form.setParameter(\"notes\", \"Great Patient!\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 2L, \"Office visit\");\r\n}"},
 {"id":3841, "methodname":"testDocumentOfficeVisit2()", "methodnamerefined":"testDocumentOfficeVisit2", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testDocumentOfficeVisit2", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testDocumentOfficeVisit2()", "classid":523, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest", "shortclassname":"DocumentOfficeVisitTest", "method":"/* Authenticate HCP\nMID 9000000000\nPassword: pw\nChoose Document Office Visit\nEnter Patient MID 2 and confirm\nChoose to document new office vist.\nEnter Fields:\nDate: 2005-11-21\nNotes: <script>alert(ha ha ha);</script>\n */\r\npublic void testDocumentOfficeVisit2() throws Exception {\r\n    // login HCP\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"11/21/2005\");\r\n    form.setParameter(\"notes\", \"<script>alert(ha ha ha);</script>\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Notes: Up to 300 alphanumeric characters, with space, and other punctuation\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 2L, \"Office visit\");\r\n}"},
 {"id":3842, "methodname":"testDocumentOfficeVisit6()", "methodnamerefined":"testDocumentOfficeVisit6", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testDocumentOfficeVisit6", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testDocumentOfficeVisit6()", "classid":523, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest", "shortclassname":"DocumentOfficeVisitTest", "method":"/* Authenticate UAP\nMID 8000000009\nPassword: uappass1\nChoose \"Document Office Visit\"\nEnter Patient MID 1\nEnter Fields:\nDate: 2005-11-21\nNotes: \"I like diet-coke\"\n */\r\npublic void testDocumentOfficeVisit6() throws Exception {\r\n    // login UAP\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // choose patient 1\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"11/21/2005\");\r\n    form.setParameter(\"notes\", \"I like diet-coke\");\r\n    form.getButtonWithID(\"update\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 8000000009L, 1L, \"Office visit\");\r\n}"},
 {"id":3843, "methodname":"testUpdateOfficeVisitOctothorpe()", "methodnamerefined":"testUpdateOfficeVisitOctothorpe", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testUpdateOfficeVisitOctothorpe", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testUpdateOfficeVisitOctothorpe()", "classid":523, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest", "shortclassname":"DocumentOfficeVisitTest", "method":"/* Authenticate HCP\nMID 8000000009\nPassword: uappass1\nChoose Document Office Visit\nEnter Patient MID 1 and confirm\nChoose to document new office vist.\nEnter Fields:\nDate: 2005-11-21\n */\r\npublic void testUpdateOfficeVisitOctothorpe() throws Exception {\r\n    // login UAP\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // choose patient 1\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"11/21/2005\");\r\n    form.setParameter(\"notes\", \"I like diet-coke #\");\r\n    form.getButtonWithID(\"update\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 8000000009L, 1L, \"Office visit\");\r\n}"},
 {"id":3844, "methodname":"testUpdateOfficeVisitSemicolon()", "methodnamerefined":"testUpdateOfficeVisitSemicolon", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testUpdateOfficeVisitSemicolon", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest.testUpdateOfficeVisitSemicolon()", "classid":523, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitTest", "shortclassname":"DocumentOfficeVisitTest", "method":"public void testUpdateOfficeVisitSemicolon() throws Exception {\r\n    // login UAP\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // choose patient 1\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"11/21/2005\");\r\n    form.setParameter(\"notes\", \"I like diet-coke ;\");\r\n    form.getButtonWithID(\"update\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 8000000009L, 1L, \"Office visit\");\r\n}"},
 {"id":3845, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.-init-()", "classid":524, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest", "shortclassname":"DocumentOfficeVisitUseCaseTest", "method":"DocumentOfficeVisitUseCaseTest() {\r\n}"},
 {"id":3846, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.setUp()", "classid":524, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest", "shortclassname":"DocumentOfficeVisitUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3847, "methodname":"testAddDiagnosisBlank()", "methodnamerefined":"testAddDiagnosisBlank", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.testAddDiagnosisBlank", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.testAddDiagnosisBlank()", "classid":524, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest", "shortclassname":"DocumentOfficeVisitUseCaseTest", "method":"public void testAddDiagnosisBlank() throws Exception {\r\n    // login UAP\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click All Patients\r\n    wr = wr.getLinkWith(\"All Patients\").click();\r\n    // Select Trend Setter\r\n    wr = wr.getLinkWith(\"Trend Setter\").click();\r\n    // Edit visit\r\n    wr = wr.getLinkWith(\"Aug 30, 2011\").click();\r\n    // Submit add diagnosis form\r\n    WebForm diagnosisForm = wr.getFormWithID(\"diagnosisForm\");\r\n    wr = diagnosisForm.submit();\r\n    // Should show a validation error\r\n    assertNotNull(wr.getElementWithID(\"iTrustFooter\"));\r\n    assertNotNull(wr.getElementWithID(\"diagnosisForm\"));\r\n}"},
 {"id":3848, "methodname":"testAddDiagnosisGood()", "methodnamerefined":"testAddDiagnosisGood", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.testAddDiagnosisGood", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.testAddDiagnosisGood()", "classid":524, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest", "shortclassname":"DocumentOfficeVisitUseCaseTest", "method":"public void testAddDiagnosisGood() throws Exception {\r\n    // login UAP\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click All Patients\r\n    wr = wr.getLinkWith(\"All Patients\").click();\r\n    // Select Trend Setter\r\n    wr = wr.getLinkWith(\"Trend Setter\").click();\r\n    // Edit visit\r\n    wr = wr.getLinkWith(\"Aug 30, 2011\").click();\r\n    // Submit add diagnosis form for tuberculosis\r\n    WebForm diagnosisForm = wr.getFormWithID(\"diagnosisForm\");\r\n    diagnosisForm.setParameter(\"ICDCode\", \"11.40\");\r\n    wr = diagnosisForm.submit();\r\n    // Should not show any validation errors\r\n    assertNotNull(wr.getElementWithID(\"iTrustFooter\"));\r\n    assertTrue(wr.getText().contains(\"Diagnosis information successfully updated\"));\r\n}"},
 {"id":3849, "methodname":"testAddLabProcedure()", "methodnamerefined":"testAddLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.testAddLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.testAddLabProcedure()", "classid":524, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest", "shortclassname":"DocumentOfficeVisitUseCaseTest", "method":"/**\r\n * Test AddLabProcedure\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddLabProcedure() throws Exception {\r\n    // login UAP\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click 06/10/2007\r\n    wr.getLinkWith(\"06/10/2007\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editOfficeVisit.jsp?ovID=955\"), wr.getURL().toString());\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add new lab procedure\r\n    WebForm form = wr.getFormWithID(\"labProcedureForm\");\r\n    form.setParameter(\"loinc\", \"10666-6\");\r\n    form.setParameter(\"labTech\", \"5000000001\");\r\n    form.getSubmitButton(\"addLP\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n}"},
 {"id":3850, "methodname":"testRemoveLabProcedure()", "methodnamerefined":"testRemoveLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.testRemoveLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest.testRemoveLabProcedure()", "classid":524, "classname":"edu.ncsu.csc.itrust.http.DocumentOfficeVisitUseCaseTest", "shortclassname":"DocumentOfficeVisitUseCaseTest", "method":"/**\r\n * Test RemoveLabProcedure\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testRemoveLabProcedure() throws Exception {\r\n    // login UAP\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click 10/10/2005\r\n    wr.getLinkWith(\"06/10/2007\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editOfficeVisit.jsp?ovID=955\"), wr.getURL().toString());\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // remove lab procedure\r\n    WebTable wt = wr.getTableStartingWith(\"[Top]Laboratory Procedures\");\r\n    assertFalse(wt.getText().contains(\"No Laboratory Procedures on record\"));\r\n    // click the remove link\r\n    wt = wr.getTableStartingWith(\"[Top]Laboratory Procedures\");\r\n    wr = wt.getTableCell(2, 10).getLinkWith(\"Remove\").click();\r\n    // confirm delete\r\n    assertEquals(\"iTrust - Delete Lab Procedure\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"deleteLabProcedureForm\");\r\n    form.getButtonWithID(\"confirmDelete\").click();\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_EDIT, 8000000009L, 2L, \"Office visit\");\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    // Cannot remove the next lab procedure--it is not in the In_Transit or\r\n    // Received states.\r\n    wt = wr.getTableStartingWith(\"[Top]Laboratory Procedures\");\r\n    assertEquals(null, wt.getTableCell(2, 10).getLinkWith(\"Remove\"));\r\n    /* wr = wt.getTableCell(2, 9).getLinkWith(\"Remove\").click();\n    assertLogged(TransactionType.OFFICE_VISIT_EDIT, 8000000009L, 2L, \"Office visit\");\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\n     */\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_VIEW, 8000000009L, 2L, \"Office visit\");\r\n    wt = wr.getTableStartingWith(\"[top]Laboratory Procedures\");\r\n    assertFalse(wt.getText().contains(\"No Laboratory Procedures on record\"));\r\n}"},
 {"id":3851, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.DrugInteractionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.DrugInteractionTest.-init-()", "classid":525, "classname":"edu.ncsu.csc.itrust.http.DrugInteractionTest", "shortclassname":"DrugInteractionTest", "method":"DrugInteractionTest() {\r\n}"},
 {"id":3852, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.DrugInteractionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.DrugInteractionTest.setUp()", "classid":525, "classname":"edu.ncsu.csc.itrust.http.DrugInteractionTest", "shortclassname":"DrugInteractionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n}"},
 {"id":3853, "methodname":"testAddNewOverrideReason()", "methodnamerefined":"testAddNewOverrideReason", "methodabbreviation":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testAddNewOverrideReason", "fullmethod":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testAddNewOverrideReason()", "classid":525, "classname":"edu.ncsu.csc.itrust.http.DrugInteractionTest", "shortclassname":"DrugInteractionTest", "method":"public void testAddNewOverrideReason() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    // click on Edit OR Codes\r\n    wr = wr.getLinkWith(\"Edit Override Reason Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain Override Reason Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"description\", \"Interaction not applicable to this patient\");\r\n    form.setParameter(\"code\", \"22222\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    // verify change\r\n    assertTrue(wr.getURL().toString().contains(\"auth/admin/editORCodes\"));\r\n    assertTrue(wr.getText().contains(\"Success: 22222 - Interaction not applicable to this patient added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OVERRIDE_CODE_ADD, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3854, "methodname":"testDeleteDrugInteraction()", "methodnamerefined":"testDeleteDrugInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testDeleteDrugInteraction", "fullmethod":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testDeleteDrugInteraction()", "classid":525, "classname":"edu.ncsu.csc.itrust.http.DrugInteractionTest", "shortclassname":"DrugInteractionTest", "method":"/* Authenticate admin 90000000001\nChoose \"Edit ND Codes\"\nChoose \"Tetracycline\"\nChoose \"Isotretinoin\" interaction\nClick delete\n */\r\npublic void testDeleteDrugInteraction() throws Exception {\r\n    HttpUnitOptions.setExceptionsThrownOnScriptError(false);\r\n    gen.ndCodes2();\r\n    gen.drugInteractions();\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ND Codes\").click();\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    // Click Tetracycline\r\n    wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Tetracycline\").click();\r\n    assertEquals(wr.getElementWithID(\"intDesc\").getAttribute(\"visibility\"), \"\");\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"codeToDelete\", \"548680955\");\r\n    form.getSubmitButton(\"delete\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Interaction deleted successfully\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DRUG_INTERACTION_DELETE, 9000000001L, 0L, \"Drug\");\r\n}"},
 {"id":3855, "methodname":"testEditOverrideReason()", "methodnamerefined":"testEditOverrideReason", "methodabbreviation":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testEditOverrideReason", "fullmethod":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testEditOverrideReason()", "classid":525, "classname":"edu.ncsu.csc.itrust.http.DrugInteractionTest", "shortclassname":"DrugInteractionTest", "method":"public void testEditOverrideReason() throws Exception {\r\n    gen.ORCodes();\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    // click on Edit OR Codes\r\n    wr = wr.getLinkWith(\"Edit Override Reason Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain Override Reason Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"code\", \"00001\");\r\n    form.setParameter(\"description\", \"Alerted interaction not super duper significant\");\r\n    form.getSubmitButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    // verify change\r\n    assertTrue(wr.getURL().toString().contains(\"auth/admin/editORCodes\"));\r\n    assertTrue(wr.getText().contains(\"Success\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OVERRIDE_CODE_EDIT, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3856, "methodname":"testRecordDrugInteraction()", "methodnamerefined":"testRecordDrugInteraction", "methodabbreviation":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testRecordDrugInteraction", "fullmethod":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testRecordDrugInteraction()", "classid":525, "classname":"edu.ncsu.csc.itrust.http.DrugInteractionTest", "shortclassname":"DrugInteractionTest", "method":"/* Authenticate admin 90000000001\nChoose \"Edit ND Codes\"\nChoose \"Edit Interactions\"\nChoose \"Adefovir\" as one drug\nChoose \"Aspirin\" as the other drug\nEnter \"May increase the risk and severity of nephrotoxicity due to additive effects on the kidney.\"\nClick submit\n */\r\npublic void testRecordDrugInteraction() throws Exception {\r\n    gen.ndCodes1();\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    // click on Add HCP\r\n    wr = wr.getLinkWith(\"Edit ND Codes\").click();\r\n    // add the hcp\r\n    WebForm form = wr.getForms()[0];\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    form.getButtonWithID(\"editInt\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit ND Code Interactions\", wr.getTitle());\r\n    WebForm intForm = wr.getForms()[0];\r\n    /* intForm.getScriptableObject().setParameterValue(\"drug1\", \"61958-0501\n\t\t\t\tAdefovir\n\t\t\t\");\n    intForm.getScriptableObject().setParameterValue(\"drug2\", \"08109-6\n\t\t\t\tAspirin\n\t\t\t\");\n    intForm.getScriptableObject().setParameterValue(\"description\", \"May increase the risk and severity of nephrotoxicity due to additive effects on the kidney.\");\n    intForm.getButtons()[0].click();\n    wr = wc.getCurrentPage();\n    assertTrue(wr.getText().contains(\"Interaction recorded successfully\"));\n    assertLogged(TransactionType.DRUG_INTERACTION_ADD, 9000000001L, 0L, \"Drug\");\n     */\r\n}"},
 {"id":3857, "methodname":"testRecordDrugInteractionSameDrugs()", "methodnamerefined":"testRecordDrugInteractionSameDrugs", "methodabbreviation":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testRecordDrugInteractionSameDrugs", "fullmethod":"edu.ncsu.csc.itrust.http.DrugInteractionTest.testRecordDrugInteractionSameDrugs()", "classid":525, "classname":"edu.ncsu.csc.itrust.http.DrugInteractionTest", "shortclassname":"DrugInteractionTest", "method":"/* Authenticate admin 90000000001\nChoose \"Edit ND Codes\"\nChoose \"Edit Interactions\"\nChoose \"Adefovir\" as both drug1 and drug2\nEnter \"Mixing this drug with itself will cause the person taking it to implode.\"\nClick submit\n */\r\npublic void testRecordDrugInteractionSameDrugs() throws Exception {\r\n    gen.ndCodes1();\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    // click on Add HCP\r\n    wr = wr.getLinkWith(\"Edit ND Codes\").click();\r\n    // add the hcp\r\n    WebForm form = wr.getForms()[0];\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit ND Code Interactions\", wr.getTitle());\r\n    /* WebForm intForm = wr.getForms()[0];\n    intForm.getScriptableObject().setParameterValue(\"drug1\", \"61958-0501\n\t\t\t\tAdefovir\n\t\t\t\");\n    intForm.getScriptableObject().setParameterValue(\"drug2\", \"61958-0501\n\t\t\t\tAdefovir\n\t\t\t\");\n    intForm.getScriptableObject().setParameterValue(\"description\", \"Mixing this drug with itself will cause the person taking it to implode.\");\n    intForm.getButtons()[0].click();\n    wr = wc.getCurrentPage();\n    assertTrue(wr.getText().contains(\"Interactions can only be recorded between two different drugs\"));\n    assertNotLogged(TransactionType.DRUG_INTERACTION_EDIT, 9000000001L, 0L, \"Drug\");\n     */\r\n}"},
 {"id":3858, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditApptTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.EditApptTest.-init-()", "classid":526, "classname":"edu.ncsu.csc.itrust.http.EditApptTest", "shortclassname":"EditApptTest", "method":"EditApptTest() {\r\n}"},
 {"id":3859, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditApptTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.EditApptTest.setUp()", "classid":526, "classname":"edu.ncsu.csc.itrust.http.EditApptTest", "shortclassname":"EditApptTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3860, "methodname":"testEditAppt()", "methodnamerefined":"testEditAppt", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditApptTest.testEditAppt", "fullmethod":"edu.ncsu.csc.itrust.http.EditApptTest.testEditAppt()", "classid":526, "classname":"edu.ncsu.csc.itrust.http.EditApptTest", "shortclassname":"EditApptTest", "method":"public void testEditAppt() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Appointments\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ALL_VIEW, 9000000000L, 0L, \"\");\r\n    WebTable table = wr.getTables()[0];\r\n    wr = table.getTableCell(((table.getRowCount()) - 1), 5).getLinkWith(\"Edit/Remove\").click();\r\n    assertTrue(wr.getText().contains(\"Andy Programmer\"));\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.setParameter(\"comment\", \"New comment!\");\r\n    SubmitButton[] buttons = wf.getSubmitButtons();\r\n    wr = wf.submit(buttons[0]);// Submit as \"Change\"\r\n\r\n    assertTrue(wr.getText().contains(\"Success: Appointment changed\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_EDIT, 9000000000L, 2L, \"\");\r\n}"},
 {"id":3861, "methodname":"testRemoveAppt()", "methodnamerefined":"testRemoveAppt", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditApptTest.testRemoveAppt", "fullmethod":"edu.ncsu.csc.itrust.http.EditApptTest.testRemoveAppt()", "classid":526, "classname":"edu.ncsu.csc.itrust.http.EditApptTest", "shortclassname":"EditApptTest", "method":"public void testRemoveAppt() throws Exception {\r\n    // login hcp\r\n    gen.uc22();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Appointments\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ALL_VIEW, 9000000000L, 0L, \"\");\r\n    WebTable table = wr.getTables()[0];\r\n    int row = 0;\r\n    for (int i = 0; i < (table.getRowCount()); i++) {\r\n        if (table.getCellAsText(i, 0).equals(\"Anakin Skywalker\")) {\r\n            row = i;\r\n            break;\r\n        }\r\n    }\r\n    wr = table.getTableCell(row, 5).getLinkWith(\"Edit/Remove\").click();\r\n    assertTrue(wr.getText().contains(\"Anakin Skywalker\"));\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getSubmitButtonWithID(\"removeButton\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Success: Appointment removed\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_REMOVE, 9000000000L, 100L, \"\");\r\n}"},
 {"id":3862, "methodname":"testSetPassedDate()", "methodnamerefined":"testSetPassedDate", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditApptTest.testSetPassedDate", "fullmethod":"edu.ncsu.csc.itrust.http.EditApptTest.testSetPassedDate()", "classid":526, "classname":"edu.ncsu.csc.itrust.http.EditApptTest", "shortclassname":"EditApptTest", "method":"public void testSetPassedDate() throws Exception {\r\n    // login hcp\r\n    gen.uc22();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Appointments\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.APPOINTMENT_ALL_VIEW, 9000000000L, 0L, \"\");\r\n    WebTable table = wr.getTables()[0];\r\n    int row = 0;\r\n    for (int i = 0; i < (table.getRowCount()); i++) {\r\n        if (table.getCellAsText(i, 0).equals(\"Anakin Skywalker\")) {\r\n            row = i;\r\n            break;\r\n        }\r\n    }\r\n    wr = table.getTableCell(row, 5).getLinkWith(\"Edit/Remove\").click();\r\n    assertTrue(wr.getText().contains(\"Anakin Skywalker\"));\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.setParameter(\"schedDate\", \"10/10/2009\");\r\n    wf.getSubmitButtonWithID(\"changeButton\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"The scheduled date of this appointment\"));\r\n    assertTrue(wr.getText().contains(\"has already passed.\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.APPOINTMENT_EDIT, 9000000000L, 100L, \"\");\r\n}"},
 {"id":3863, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDemographicsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.EditDemographicsTest.-init-()", "classid":527, "classname":"edu.ncsu.csc.itrust.http.EditDemographicsTest", "shortclassname":"EditDemographicsTest", "method":"EditDemographicsTest() {\r\n}"},
 {"id":3864, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDemographicsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.EditDemographicsTest.setUp()", "classid":527, "classname":"edu.ncsu.csc.itrust.http.EditDemographicsTest", "shortclassname":"EditDemographicsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.uap1();\r\n    gen.patient2();\r\n    gen.icd9cmCodes();\r\n}"},
 {"id":3865, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDemographicsTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.http.EditDemographicsTest.tearDown()", "classid":527, "classname":"edu.ncsu.csc.itrust.http.EditDemographicsTest", "shortclassname":"EditDemographicsTest", "method":"@Override\r\nprotected void tearDown() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":3866, "methodname":"testEditDemographics2()", "methodnamerefined":"testEditDemographics2", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDemographicsTest.testEditDemographics2", "fullmethod":"edu.ncsu.csc.itrust.http.EditDemographicsTest.testEditDemographics2()", "classid":527, "classname":"edu.ncsu.csc.itrust.http.EditDemographicsTest", "shortclassname":"EditDemographicsTest", "method":"/* Authenticate UAP:\nMID: 8000000009\nPassword: uappass1\nChoose Edit Patient.\nSelect patient 2 and confirm.\nChange Field:\nStreet address 1: <script>alert(HACK!);</script>\nConfirm and approve the selection\n */\r\npublic void testEditDemographics2() throws Exception {\r\n    // login uap\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // choose Edit Patient\r\n    wr = wr.getLinkWith(\"Edit Patient\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPatient.jsp\"), wr.getURL().toString());\r\n    // update street address to be blank\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"streetAddress1\", \"<script>alert(HACK!);</script>\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Street Address 1: Up to 30 alphanumeric characters, and .\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 8000000009L, 2L, \"\");\r\n}"},
 {"id":3867, "methodname":"testEditDemographics3()", "methodnamerefined":"testEditDemographics3", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDemographicsTest.testEditDemographics3", "fullmethod":"edu.ncsu.csc.itrust.http.EditDemographicsTest.testEditDemographics3()", "classid":527, "classname":"edu.ncsu.csc.itrust.http.EditDemographicsTest", "shortclassname":"EditDemographicsTest", "method":"/* Authenticate UAP:\nMID: 8000000009\nPassword: uappass1\nChoose Edit Patient.\nSelect patient 2 and confirm.\nChange Field:\nStreet address 1: 100 New Address\nCity: New Bern\nState: NC\nZip: 28562\nConfirm and approve the selection\n */\r\npublic void testEditDemographics3() throws Exception {\r\n    // login uap\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // choose Edit Patient\r\n    wr = wr.getLinkWith(\"Edit Patient\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPatient.jsp\"), wr.getURL().toString());\r\n    // update street address to be blank\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"streetAddress1\", \"100 New Address\");\r\n    form.setParameter(\"city\", \"New Bern\");\r\n    form.setParameter(\"state\", \"NC\");\r\n    form.setParameter(\"zip\", \"28562\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 8000000009L, 2L, \"\");\r\n}"},
 {"id":3868, "methodname":"testEditDemographics5()", "methodnamerefined":"testEditDemographics5", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDemographicsTest.testEditDemographics5", "fullmethod":"edu.ncsu.csc.itrust.http.EditDemographicsTest.testEditDemographics5()", "classid":527, "classname":"edu.ncsu.csc.itrust.http.EditDemographicsTest", "shortclassname":"EditDemographicsTest", "method":"/* Authenticate UAP:\nMID: 8000000009\nPassword: uappass1\nChoose Edit Patient.\nSelect patient 2 and confirm.\nChange Field Street address 2 to a blank.\nConfirm and approve the selection\n */\r\n/* This test throws exceptions because of date of death, not sure why */\r\npublic void testEditDemographics5() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // choose Edit Patient\r\n    wr = wr.getLinkWith(\"Edit Patient\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPatient.jsp\"), wr.getURL().toString());\r\n    // update street address to be blank\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"streetAddress2\", \"\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 8000000009L, 2L, \"\");\r\n}"},
 {"id":3869, "methodname":"testEditDemographics6()", "methodnamerefined":"testEditDemographics6", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDemographicsTest.testEditDemographics6", "fullmethod":"edu.ncsu.csc.itrust.http.EditDemographicsTest.testEditDemographics6()", "classid":527, "classname":"edu.ncsu.csc.itrust.http.EditDemographicsTest", "shortclassname":"EditDemographicsTest", "method":"/* Authenticate UAP:\nMID: 8000000009\nPassword: uappass1\nChoose Edit Patient.\nSelect patient 2 and confirm.\nChange phone to xxx-xxx-xxxx\nConfirm and approve the selection\n */\r\n/* This test throws exception based on parsing the date of death....not sure how to fix \nthat right now.\n */\r\npublic void testEditDemographics6() throws Exception {\r\n    // login as uap\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // choose Edit Patient\r\n    wr = wr.getLinkWith(\"Edit Patient\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPatient.jsp\"), wr.getURL().toString());\r\n    // update phone number with invalid characters\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"phone\", \"xxx-xxx-xxxx\");\r\n    form.setParameter(\"dateOfDeathStr\", \"\");\r\n    form.getButtons()[2].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    assertTrue(add.getText().contains(\"This form has not been validated correctly.\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 8000000009L, 2L, \"\");\r\n}"},
 {"id":3870, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.-init-()", "classid":528, "classname":"edu.ncsu.csc.itrust.http.EditDiagnosesTest", "shortclassname":"EditDiagnosesTest", "method":"EditDiagnosesTest() {\r\n}"},
 {"id":3871, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.setUp()", "classid":528, "classname":"edu.ncsu.csc.itrust.http.EditDiagnosesTest", "shortclassname":"EditDiagnosesTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3872, "methodname":"testAdminEditDiagnoses()", "methodnamerefined":"testAdminEditDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.testAdminEditDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.testAdminEditDiagnoses()", "classid":528, "classname":"edu.ncsu.csc.itrust.http.EditDiagnosesTest", "shortclassname":"EditDiagnosesTest", "method":"public void testAdminEditDiagnoses() throws Exception {\r\n    // login uap\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    // choose Edit Patient\r\n    wr = wr.getLinkWith(\"Edit Diagnoses URLs\").click();\r\n    // choose patient 2\r\n    WebForm Form = wr.getForms()[0];\r\n    Form.setParameter(\"diagnoses\", \"11.40\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[0];\r\n    Form.setParameter(\"url\", \"http://www.google.com/\");\r\n    wr = Form.submit();\r\n    assertEquals(\"iTrust - Maintain Diagnoses Links\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Tuberculosis of the lungs (11.40) URL has been successfully updated to http://www.google.com/\"));\r\n}"},
 {"id":3873, "methodname":"testDiagnosesLink()", "methodnamerefined":"testDiagnosesLink", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.testDiagnosesLink", "fullmethod":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.testDiagnosesLink()", "classid":528, "classname":"edu.ncsu.csc.itrust.http.EditDiagnosesTest", "shortclassname":"EditDiagnosesTest", "method":"public void testDiagnosesLink() throws Exception {\r\n    // login uap\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // choose Edit Patient\r\n    wr = wr.getLinkWith(\"Edit Diagnoses URLs\").click();\r\n    // choose patient 2\r\n    WebForm Form = wr.getForms()[0];\r\n    Form.setParameter(\"diagnoses\", \"715.09\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[0];\r\n    Form.setParameter(\"url\", \"http://www.wikipedia.org/\");\r\n    wr = Form.submit();\r\n    assertEquals(\"iTrust - Maintain Diagnoses Links\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"URL has been successfully updated to http://www.wikipedia.org/\"));\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    // login as patient\r\n    wc = login(\"1\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Diagnoses\").click();\r\n    wr = wr.getLinkWith(\"http://www.wikipedia.org/\").click();\r\n    assertEquals(\"Wikipedia\", wr.getTitle());\r\n}"},
 {"id":3874, "methodname":"testHCPEditDiagnoses()", "methodnamerefined":"testHCPEditDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.testHCPEditDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.http.EditDiagnosesTest.testHCPEditDiagnoses()", "classid":528, "classname":"edu.ncsu.csc.itrust.http.EditDiagnosesTest", "shortclassname":"EditDiagnosesTest", "method":"public void testHCPEditDiagnoses() throws Exception {\r\n    // login uap\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // choose Edit Patient\r\n    wr = wr.getLinkWith(\"Edit Diagnoses URLs\").click();\r\n    // choose patient 2\r\n    WebForm Form = wr.getForms()[0];\r\n    Form.setParameter(\"diagnoses\", \"11.40\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[0];\r\n    Form.setParameter(\"url\", \"http://www.google.com/\");\r\n    wr = Form.submit();\r\n    assertEquals(\"iTrust - Maintain Diagnoses Links\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Tuberculosis of the lungs (11.40) URL has been successfully updated to http://www.google.com/\"));\r\n}"},
 {"id":3875, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.-init-()", "classid":529, "classname":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest", "shortclassname":"EditLOINCDataHTTPTest", "method":"EditLOINCDataHTTPTest() {\r\n}"},
 {"id":3876, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.setUp()", "classid":529, "classname":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest", "shortclassname":"EditLOINCDataHTTPTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3877, "methodname":"testAddLOINCFile()", "methodnamerefined":"testAddLOINCFile", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.testAddLOINCFile", "fullmethod":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.testAddLOINCFile()", "classid":529, "classname":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest", "shortclassname":"EditLOINCDataHTTPTest", "method":"public void testAddLOINCFile() throws Exception {\r\n    // Log in as Admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // Click Edit LOINC Codes\r\n    wr = wr.getLinkWith(\"Edit LOINC Codes\").click();\r\n    assertEquals(\"iTrust - Maintain LOINC Codes\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOINC_CODE_VIEW, 9000000001L, 0L, \"\");\r\n    wr.getFormWithName(\"mainForm\").getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    // Import the LOINC database file\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"loincFile\", new File(\"testing-files/sample_loinc/sampleLoinc.txt\"));\r\n    wf.setParameter(\"ignoreDupData\", \"1\");\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOINC_CODE_FILE_ADD, 9000000001L, 0L, \"\");\r\n    // Check the Display Database for the updated codes\r\n    wr = wr.getLinkWith(\"Display Database\").click();\r\n    WebTable wt = wr.getTableWithID(\"loinc\");\r\n    assertEquals((33 + 1), wt.getRowCount());// 33+1 is 33 rows and a header\r\n\r\n    assertFalse(wt.getText().contains(\"THIS ONE IS DIFFERENT\"));\r\n}"},
 {"id":3878, "methodname":"testAddLOINCFileNoIgnore()", "methodnamerefined":"testAddLOINCFileNoIgnore", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.testAddLOINCFileNoIgnore", "fullmethod":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.testAddLOINCFileNoIgnore()", "classid":529, "classname":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest", "shortclassname":"EditLOINCDataHTTPTest", "method":"public void testAddLOINCFileNoIgnore() throws Exception {\r\n    // Log in as Admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // Click Edit LOINC Codes\r\n    wr = wr.getLinkWith(\"Edit LOINC Codes\").click();\r\n    assertEquals(\"iTrust - Maintain LOINC Codes\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOINC_CODE_VIEW, 9000000001L, 0L, \"\");\r\n    wr.getFormWithName(\"mainForm\").getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    // Import the LOINC database file\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"loincFile\", new File(\"testing-files/sample_loinc/sampleLoinc.txt\"));\r\n    wf.setParameter(\"ignoreDupData\", \"0\");\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOINC_CODE_FILE_ADD, 9000000001L, 0L, \"\");\r\n    // Check the Display Database for the updated codes\r\n    wr = wr.getLinkWith(\"Display Database\").click();\r\n    WebTable wt = wr.getTableWithID(\"loinc\");\r\n    assertEquals((33 + 1), wt.getRowCount());// 33+1 accounts for header\r\n\r\n    assertTrue(wt.getText().contains(\"THIS ONE IS DIFFERENT\"));\r\n}"},
 {"id":3879, "methodname":"testUploadBadLOINCFile()", "methodnamerefined":"testUploadBadLOINCFile", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.testUploadBadLOINCFile", "fullmethod":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.testUploadBadLOINCFile()", "classid":529, "classname":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest", "shortclassname":"EditLOINCDataHTTPTest", "method":"public void testUploadBadLOINCFile() throws Exception {\r\n    // Log in as Admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // Click Edit LOINC Codes\r\n    wr = wr.getLinkWith(\"Edit LOINC Codes\").click();\r\n    assertEquals(\"iTrust - Maintain LOINC Codes\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOINC_CODE_VIEW, 9000000001L, 0L, \"\");\r\n    wr.getFormWithName(\"mainForm\").getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    // Import the LOINC database file\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"loincFile\", new File(\"testing-files/sample_loinc/badLoincFile.txt\"));\r\n    wf.setParameter(\"ignoreDupData\", \"1\");\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.LOINC_CODE_FILE_ADD, 9000000001L, 0L, \"\");\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"IGNORED LINE 1: This file contains no LOINC data and should fail the LOINC file verification process.\"));\r\n    assertTrue(wr.getText().contains(\"File invalid. No LOINC data added.\"));\r\n    wr = wr.getLinkWith(\"Display Database\").click();\r\n    WebTable wt = wr.getTableWithID(\"loinc\");\r\n    assertEquals((4 + 1), wt.getRowCount());// 33+1 accounts for header\r\n\r\n}"},
 {"id":3880, "methodname":"testUploadLOINCFileInvalidLines()", "methodnamerefined":"testUploadLOINCFileInvalidLines", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.testUploadLOINCFileInvalidLines", "fullmethod":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest.testUploadLOINCFileInvalidLines()", "classid":529, "classname":"edu.ncsu.csc.itrust.http.EditLOINCDataHTTPTest", "shortclassname":"EditLOINCDataHTTPTest", "method":"public void testUploadLOINCFileInvalidLines() throws Exception {\r\n    // Log in as Admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // Click Edit LOINC Codes\r\n    wr = wr.getLinkWith(\"Edit LOINC Codes\").click();\r\n    assertEquals(\"iTrust - Maintain LOINC Codes\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOINC_CODE_VIEW, 9000000001L, 0L, \"\");\r\n    wr.getFormWithName(\"mainForm\").getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    // Import the LOINC database file\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"loincFile\", new File(\"testing-files/sample_loinc/invalidLine.txt\"));\r\n    wf.setParameter(\"ignoreDupData\", \"0\");\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOINC_CODE_FILE_ADD, 9000000001L, 0L, \"\");\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"ERROR, LINE 2: \"10054-5\"\t\"I skip rest of fields\" This form has not been validated correctly. The following field are not properly filled in: [You must have a Lab Procedure Code, Component and Kind Of Property]\"));\r\n    assertTrue(wr.getText().contains(\"Successfully added 2 lines of new LOINC data. Updated 0 lines of existing LOINC data.\"));\r\n}"},
 {"id":3881, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditPatientTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.EditPatientTest.-init-()", "classid":530, "classname":"edu.ncsu.csc.itrust.http.EditPatientTest", "shortclassname":"EditPatientTest", "method":"EditPatientTest() {\r\n}"},
 {"id":3882, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditPatientTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.EditPatientTest.setUp()", "classid":530, "classname":"edu.ncsu.csc.itrust.http.EditPatientTest", "shortclassname":"EditPatientTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3883, "methodname":"testCauseOfDeathValidation()", "methodnamerefined":"testCauseOfDeathValidation", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditPatientTest.testCauseOfDeathValidation", "fullmethod":"edu.ncsu.csc.itrust.http.EditPatientTest.testCauseOfDeathValidation()", "classid":530, "classname":"edu.ncsu.csc.itrust.http.EditPatientTest", "shortclassname":"EditPatientTest", "method":"public void testCauseOfDeathValidation() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPatient.jsp\"), wr.getURL().toString());\r\n    WebForm editPatientForm = wr.getForms()[0];\r\n    editPatientForm.setParameter(\"dateOfDeathStr\", \"\");\r\n    editPatientForm.getButtons()[2].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"This form has not been validated correctly. The following field are not properly filled in: [Cause of Death cannot be specified without Date of Death!]\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 9000000000L, 2L, \"\");\r\n}"},
 {"id":3884, "methodname":"testMFWithPersonnelMID()", "methodnamerefined":"testMFWithPersonnelMID", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditPatientTest.testMFWithPersonnelMID", "fullmethod":"edu.ncsu.csc.itrust.http.EditPatientTest.testMFWithPersonnelMID()", "classid":530, "classname":"edu.ncsu.csc.itrust.http.EditPatientTest", "shortclassname":"EditPatientTest", "method":"public void testMFWithPersonnelMID() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    WebForm editPatientForm = wr.getForms()[0];\r\n    editPatientForm.setParameter(\"motherMID\", \"9\");\r\n    editPatientForm.setParameter(\"fatherMID\", \"98\");\r\n    editPatientForm.getButtons()[2].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"This form has not been validated correctly. The following field are not properly filled in: [Mother MID: 1-10 digit number not beginning with 9, Father MID: 1-10 digit number not beginning with 9]\"));\r\n}"},
 {"id":3885, "methodname":"testMisspellings()", "methodnamerefined":"testMisspellings", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditPatientTest.testMisspellings", "fullmethod":"edu.ncsu.csc.itrust.http.EditPatientTest.testMisspellings()", "classid":530, "classname":"edu.ncsu.csc.itrust.http.EditPatientTest", "shortclassname":"EditPatientTest", "method":"public void testMisspellings() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPatient.jsp\"), wr.getURL().toString());\r\n    assertFalse(wr.getText().contains(\"Mother MIDs\"));\r\n}"},
 {"id":3886, "methodname":"testViewDemographicsTest()", "methodnamerefined":"testViewDemographicsTest", "methodabbreviation":"edu.ncsu.csc.itrust.http.EditPatientTest.testViewDemographicsTest", "fullmethod":"edu.ncsu.csc.itrust.http.EditPatientTest.testViewDemographicsTest()", "classid":530, "classname":"edu.ncsu.csc.itrust.http.EditPatientTest", "shortclassname":"EditPatientTest", "method":"public void testViewDemographicsTest() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    patientForm = wr.getFormWithID(\"editForm\");\r\n    patientForm.getScriptableObject().setParameterValue(\"email\", \"history@gmail.com\");\r\n    patientForm.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    wr.getFormWithID(\"viewHistory\").getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"history@gmail.com\"));\r\n}"},
 {"id":3887, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.-init-()", "classid":531, "classname":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest", "shortclassname":"EmergencyUseCaseTest", "method":"EmergencyUseCaseTest() {\r\n}"},
 {"id":3888, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.setUp()", "classid":531, "classname":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest", "shortclassname":"EmergencyUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3889, "methodname":"testERViewEmergencyReport1()", "methodnamerefined":"testERViewEmergencyReport1", "methodabbreviation":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.testERViewEmergencyReport1", "fullmethod":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.testERViewEmergencyReport1()", "classid":531, "classname":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest", "shortclassname":"EmergencyUseCaseTest", "method":"/*  */\r\npublic void testERViewEmergencyReport1() throws Exception {\r\n    // The HCP logs in and requests a comprehensive report for patient 2.\r\n    WebConversation wc = login(\"9000000006\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - ER Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000006L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Emergency Patient Report\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    assertEquals(\"iTrust - ER Report\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Blood Type: O-\"));\r\n    assertTrue(wr.getText().contains(\"Pollen 06/05/2007\"));\r\n    assertTrue(wr.getText().contains(\"Penicillin 06/04/2007\"));\r\n    assertTrue(wr.getText().contains(\"647641512 Prioglitazon\"));\r\n    assertTrue(wr.getText().contains(\"no immunizations on record\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.EMERGENCY_REPORT_VIEW, 9000000006L, 2L, \"\");\r\n}"},
 {"id":3890, "methodname":"testHCPViewEmergencyReport1()", "methodnamerefined":"testHCPViewEmergencyReport1", "methodabbreviation":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.testHCPViewEmergencyReport1", "fullmethod":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.testHCPViewEmergencyReport1()", "classid":531, "classname":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest", "shortclassname":"EmergencyUseCaseTest", "method":"public void testHCPViewEmergencyReport1() throws Exception {\r\n    // The HCP logs in and requests a comprehensive report for patient 2.\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Emergency Patient Report\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    assertEquals(\"iTrust - ER Report\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Blood Type: O-\"));\r\n    assertTrue(wr.getText().contains(\"Pollen 06/05/2007\"));\r\n    assertTrue(wr.getText().contains(\"Penicillin 06/04/2007\"));\r\n    assertTrue(wr.getText().contains(\"647641512 Prioglitazon\"));\r\n    assertTrue(wr.getText().contains(\"no immunizations on record\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.EMERGENCY_REPORT_VIEW, 9000000000L, 2L, \"\");\r\n}"},
 {"id":3891, "methodname":"testHCPViewEmergencyReport2()", "methodnamerefined":"testHCPViewEmergencyReport2", "methodabbreviation":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.testHCPViewEmergencyReport2", "fullmethod":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest.testHCPViewEmergencyReport2()", "classid":531, "classname":"edu.ncsu.csc.itrust.http.EmergencyUseCaseTest", "shortclassname":"EmergencyUseCaseTest", "method":"public void testHCPViewEmergencyReport2() throws Exception {\r\n    // The HCP logs in and requests a comprehensive report for patient 2.\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Emergency Patient Report\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    assertEquals(\"iTrust - ER Report\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Blood Type: AB+\"));\r\n    assertTrue(wr.getText().contains(\"No allergies on record\"));\r\n    assertTrue(wr.getText().contains(\"No current prescriptions on record\"));\r\n    assertTrue(wr.getText().contains(\"no immunizations on record\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.EMERGENCY_REPORT_VIEW, 9000000000L, 1L, \"\");\r\n}"},
 {"id":3892, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.-init-()", "classid":532, "classname":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest", "shortclassname":"ExperiencedLHCPsUseCaseTest", "method":"ExperiencedLHCPsUseCaseTest() {\r\n}"},
 {"id":3893, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.setUp()", "classid":532, "classname":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest", "shortclassname":"ExperiencedLHCPsUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patient_hcp_vists();\r\n    gen.hcp_diagnosis_data();\r\n}"},
 {"id":3894, "methodname":"testViewDiagnoses()", "methodnamerefined":"testViewDiagnoses", "methodabbreviation":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.testViewDiagnoses", "fullmethod":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.testViewDiagnoses()", "classid":532, "classname":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest", "shortclassname":"ExperiencedLHCPsUseCaseTest", "method":"public void testViewDiagnoses() throws Exception {\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Diagnoses\").click();\r\n    assertEquals(\"iTrust - My Diagnoses\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSES_LIST_VIEW, 1L, 1L, \"\");\r\n    assertTrue(wr.getText().contains(\"Echovirus(79.10)\"));\r\n    assertTrue(wr.getText().contains(\"Acute Lycanthropy(250.00)\"));\r\n}"},
 {"id":3895, "methodname":"testViewDiagnosisEchoVirus()", "methodnamerefined":"testViewDiagnosisEchoVirus", "methodabbreviation":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.testViewDiagnosisEchoVirus", "fullmethod":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.testViewDiagnosisEchoVirus()", "classid":532, "classname":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest", "shortclassname":"ExperiencedLHCPsUseCaseTest", "method":"public void testViewDiagnosisEchoVirus() throws Exception {\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Diagnoses\").click();\r\n    assertEquals(\"iTrust - My Diagnoses\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSES_LIST_VIEW, 1L, 1L, \"\");\r\n    wr = wr.getLinkWith(\"Echovirus(79.10)\").click();\r\n    wr = wr.getLinkWith(\"Transaction Log\").click();\r\n    assertTrue(wr.getText().contains(\"Find LHCPs with experience with a diagnosis\"));\r\n}"},
 {"id":3896, "methodname":"testViewHCPDetails()", "methodnamerefined":"testViewHCPDetails", "methodabbreviation":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.testViewHCPDetails", "fullmethod":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest.testViewHCPDetails()", "classid":532, "classname":"edu.ncsu.csc.itrust.http.ExperiencedLHCPsUseCaseTest", "shortclassname":"ExperiencedLHCPsUseCaseTest", "method":"public void testViewHCPDetails() throws Exception {\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Diagnoses\").click();\r\n    assertEquals(\"iTrust - My Diagnoses\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSES_LIST_VIEW, 1L, 1L, \"\");\r\n    wr = wr.getLinkWith(\"Echovirus(79.10)\").click();\r\n    wr = wr.getLinkWith(\"Jason Frankenstein\").click();\r\n    assertEquals(\"iTrust - View Personnel Details\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Jason Frankenstein\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PERSONNEL_VIEW, 1L, 9000000004L, \"\");\r\n}"},
 {"id":3897, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ExpertHospitalTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ExpertHospitalTest.-init-()", "classid":533, "classname":"edu.ncsu.csc.itrust.http.ExpertHospitalTest", "shortclassname":"ExpertHospitalTest", "method":"ExpertHospitalTest() {\r\n}"},
 {"id":3898, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ExpertHospitalTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ExpertHospitalTest.setUp()", "classid":533, "classname":"edu.ncsu.csc.itrust.http.ExpertHospitalTest", "shortclassname":"ExpertHospitalTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3899, "methodname":"testRefactor()", "methodnamerefined":"testRefactor", "methodabbreviation":"edu.ncsu.csc.itrust.http.ExpertHospitalTest.testRefactor", "fullmethod":"edu.ncsu.csc.itrust.http.ExpertHospitalTest.testRefactor()", "classid":533, "classname":"edu.ncsu.csc.itrust.http.ExpertHospitalTest", "shortclassname":"ExpertHospitalTest", "method":"public void testRefactor() {\r\n}"},
 {"id":3900, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.FindExpertTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.FindExpertTest.-init-()", "classid":534, "classname":"edu.ncsu.csc.itrust.http.FindExpertTest", "shortclassname":"FindExpertTest", "method":"FindExpertTest() {\r\n}"},
 {"id":3901, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.FindExpertTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.FindExpertTest.setUp()", "classid":534, "classname":"edu.ncsu.csc.itrust.http.FindExpertTest", "shortclassname":"FindExpertTest", "method":"protected void setUp() throws FileNotFoundException, IOException, SQLException {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.uc47SetUp();\r\n}"},
 {"id":3902, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.http.FindExpertTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.http.FindExpertTest.tearDown()", "classid":534, "classname":"edu.ncsu.csc.itrust.http.FindExpertTest", "shortclassname":"FindExpertTest", "method":"protected void tearDown() throws FileNotFoundException, IOException, SQLException {\r\n    gen.uc47TearDown();\r\n}"},
 {"id":3903, "methodname":"test100RadiusGeneral()", "methodnamerefined":"test100RadiusGeneral", "methodabbreviation":"edu.ncsu.csc.itrust.http.FindExpertTest.test100RadiusGeneral", "fullmethod":"edu.ncsu.csc.itrust.http.FindExpertTest.test100RadiusGeneral()", "classid":534, "classname":"edu.ncsu.csc.itrust.http.FindExpertTest", "shortclassname":"FindExpertTest", "method":"public void test100RadiusGeneral() throws Exception {\r\n    HttpUnitOptions.setExceptionsThrownOnScriptError(false);\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Find an Expert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"specialty\", \"general physician\");\r\n    form.getSubmitButton(\"findExpert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n}"},
 {"id":3904, "methodname":"test100RadiusOBGYN()", "methodnamerefined":"test100RadiusOBGYN", "methodabbreviation":"edu.ncsu.csc.itrust.http.FindExpertTest.test100RadiusOBGYN", "fullmethod":"edu.ncsu.csc.itrust.http.FindExpertTest.test100RadiusOBGYN()", "classid":534, "classname":"edu.ncsu.csc.itrust.http.FindExpertTest", "shortclassname":"FindExpertTest", "method":"public void test100RadiusOBGYN() throws Exception {\r\n    HttpUnitOptions.setExceptionsThrownOnScriptError(false);\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Find an Expert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"specialty\", \"ob/gyn\");\r\n    form.getSubmitButton(\"findExpert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n}"},
 {"id":3905, "methodname":"test10RadiusHeartSurgeon()", "methodnamerefined":"test10RadiusHeartSurgeon", "methodabbreviation":"edu.ncsu.csc.itrust.http.FindExpertTest.test10RadiusHeartSurgeon", "fullmethod":"edu.ncsu.csc.itrust.http.FindExpertTest.test10RadiusHeartSurgeon()", "classid":534, "classname":"edu.ncsu.csc.itrust.http.FindExpertTest", "shortclassname":"FindExpertTest", "method":"public void test10RadiusHeartSurgeon() throws Exception {\r\n    HttpUnitOptions.setExceptionsThrownOnScriptError(false);\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Find an Expert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"specialty\", \"heart surgeon\");\r\n    form.getSubmitButton(\"findExpert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n}"},
 {"id":3906, "methodname":"test10RadiusPediatrician()", "methodnamerefined":"test10RadiusPediatrician", "methodabbreviation":"edu.ncsu.csc.itrust.http.FindExpertTest.test10RadiusPediatrician", "fullmethod":"edu.ncsu.csc.itrust.http.FindExpertTest.test10RadiusPediatrician()", "classid":534, "classname":"edu.ncsu.csc.itrust.http.FindExpertTest", "shortclassname":"FindExpertTest", "method":"public void test10RadiusPediatrician() throws Exception {\r\n    HttpUnitOptions.setExceptionsThrownOnScriptError(false);\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Find an Expert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"specialty\", \"pediatrician\");\r\n    form.getSubmitButton(\"findExpert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n}"},
 {"id":3907, "methodname":"test10RadiusSurgeon()", "methodnamerefined":"test10RadiusSurgeon", "methodabbreviation":"edu.ncsu.csc.itrust.http.FindExpertTest.test10RadiusSurgeon", "fullmethod":"edu.ncsu.csc.itrust.http.FindExpertTest.test10RadiusSurgeon()", "classid":534, "classname":"edu.ncsu.csc.itrust.http.FindExpertTest", "shortclassname":"FindExpertTest", "method":"public void test10RadiusSurgeon() throws Exception {\r\n    HttpUnitOptions.setExceptionsThrownOnScriptError(false);\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Find an Expert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"specialty\", \"surgeon\");\r\n    form.getSubmitButton(\"findExpert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n}"},
 {"id":3908, "methodname":"test500RadiusSurgeon()", "methodnamerefined":"test500RadiusSurgeon", "methodabbreviation":"edu.ncsu.csc.itrust.http.FindExpertTest.test500RadiusSurgeon", "fullmethod":"edu.ncsu.csc.itrust.http.FindExpertTest.test500RadiusSurgeon()", "classid":534, "classname":"edu.ncsu.csc.itrust.http.FindExpertTest", "shortclassname":"FindExpertTest", "method":"public void test500RadiusSurgeon() throws Exception {\r\n    HttpUnitOptions.setExceptionsThrownOnScriptError(false);\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Find an Expert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"specialty\", \"surgeon\");\r\n    form.getSubmitButton(\"findExpert\").click();\r\n    assertEquals(\"iTrust - Find an Expert\", wr.getTitle());\r\n}"},
 {"id":3909, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.GetPatientIDTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.GetPatientIDTest.-init-()", "classid":535, "classname":"edu.ncsu.csc.itrust.http.GetPatientIDTest", "shortclassname":"GetPatientIDTest", "method":"GetPatientIDTest() {\r\n}"},
 {"id":3910, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.GetPatientIDTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.GetPatientIDTest.setUp()", "classid":535, "classname":"edu.ncsu.csc.itrust.http.GetPatientIDTest", "shortclassname":"GetPatientIDTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3911, "methodname":"testSelectPatientButton()", "methodnamerefined":"testSelectPatientButton", "methodabbreviation":"edu.ncsu.csc.itrust.http.GetPatientIDTest.testSelectPatientButton", "fullmethod":"edu.ncsu.csc.itrust.http.GetPatientIDTest.testSelectPatientButton()", "classid":535, "classname":"edu.ncsu.csc.itrust.http.GetPatientIDTest", "shortclassname":"GetPatientIDTest", "method":"public void testSelectPatientButton() throws Exception {\r\n    gen.hcp4();\r\n    gen.hcp5();\r\n    gen.referral_sort_testdata();\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    // click on the \"Select Patient\" button\r\n    wr.getFormWithID(\"mainForm\").getButtonWithID(\"selectPatientButton\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    assertFalse(wr.getText().contains(\"HTTP Status 500\"));\r\n    assertFalse(wr.getText().contains(\"java.lang.NumberFormatException\"));\r\n    // click on the \"Select Patient\" button again\r\n    wr.getFormWithID(\"mainForm\").getButtonWithID(\"selectPatientButton\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    assertFalse(wr.getText().contains(\"HTTP Status 500\"));\r\n    assertFalse(wr.getText().contains(\"java.lang.NumberFormatException\"));\r\n    assertFalse(wr.getText().contains(\"Viewing information for <b>null</b>\"));\r\n}"},
 {"id":3912, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.-init-()", "classid":536, "classname":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"GetVisitRemindersTest() {\r\n}"},
 {"id":3913, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.setUp()", "classid":536, "classname":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    // gen.clearAllTables();\r\n    gen.hcp0();\r\n}"},
 {"id":3914, "methodname":"testGetVisitReminders_DiagnosedCareNeeders()", "methodnamerefined":"testGetVisitReminders_DiagnosedCareNeeders", "methodabbreviation":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.testGetVisitReminders_DiagnosedCareNeeders", "fullmethod":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.testGetVisitReminders_DiagnosedCareNeeders()", "classid":536, "classname":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"public void testGetVisitReminders_DiagnosedCareNeeders() throws Exception {\r\n    gen.standardData();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Office Visit Reminders\").click();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithID(\"reminderForm\");\r\n    wf.setParameter(\"ReminderType\", \"Diagnosed Care Needers\");\r\n    wf.getButtonWithID(\"getReminders\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    assertEquals(4, wr.getTables().length);\r\n    WebTable table = wr.getTables()[0];\r\n    assertEquals(\"Zappic Clith\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-555-9213\", table.getCellAsText(2, 1));\r\n    table = wr.getTables()[1];\r\n    assertEquals(\"Random Person\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-971-0000\", table.getCellAsText(2, 1));\r\n    table = wr.getTables()[2];\r\n    assertEquals(\"Anakin Skywalker\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-419-5555\", table.getCellAsText(2, 1));\r\n    table = wr.getTables()[3];\r\n    assertEquals(\"Darryl Thompson\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-555-6709\", table.getCellAsText(2, 1));\r\n}"},
 {"id":3915, "methodname":"testGetVisitReminders_FluShotNeeders()", "methodnamerefined":"testGetVisitReminders_FluShotNeeders", "methodabbreviation":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.testGetVisitReminders_FluShotNeeders", "fullmethod":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.testGetVisitReminders_FluShotNeeders()", "classid":536, "classname":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"public void testGetVisitReminders_FluShotNeeders() throws Exception {\r\n    gen.standardData();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Office Visit Reminders\").click();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithID(\"reminderForm\");\r\n    wf.setParameter(\"ReminderType\", \"Flu Shot Needers\");\r\n    wf.getButtonWithID(\"getReminders\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    assertEquals(4, wr.getTables().length);\r\n    boolean thisYear = DateUtil.currentlyInMonthRange(8, 11);\r\n    String pretext = \"Missed\";\r\n    if (thisYear)\r\n        pretext = \"Currently Missing\";\r\n\r\n    WebTable table = wr.getTables()[0];\r\n    assertEquals(\"NoRecords Has\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-971-0000\", table.getCellAsText(2, 1));\r\n    assertEquals((pretext + \" Medication:    Flu Shot\"), table.getCellAsText(3, 1));\r\n    table = wr.getTables()[1];\r\n    assertEquals(\"Bad Horse\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-123-4567\", table.getCellAsText(2, 1));\r\n    assertEquals((pretext + \" Medication:    Flu Shot\"), table.getCellAsText(3, 1));\r\n    table = wr.getTables()[2];\r\n    assertEquals(\"Care Needs\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-971-0000\", table.getCellAsText(2, 1));\r\n    assertEquals((pretext + \" Medication:    Flu Shot\"), table.getCellAsText(3, 1));\r\n    table = wr.getTables()[3];\r\n    assertEquals(\"Random Person\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-971-0000\", table.getCellAsText(2, 1));\r\n    assertEquals((pretext + \" Medication:    Flu Shot\"), table.getCellAsText(3, 1));\r\n}"},
 {"id":3916, "methodname":"testGetVisitReminders_ImmunizationNeeders()", "methodnamerefined":"testGetVisitReminders_ImmunizationNeeders", "methodabbreviation":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.testGetVisitReminders_ImmunizationNeeders", "fullmethod":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.testGetVisitReminders_ImmunizationNeeders()", "classid":536, "classname":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"public void testGetVisitReminders_ImmunizationNeeders() throws Exception {\r\n    gen.standardData();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Office Visit Reminders\").click();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithID(\"reminderForm\");\r\n    wf.setParameter(\"ReminderType\", \"Immunization Needers\");\r\n    wf.getButtonWithID(\"getReminders\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    assertEquals(2, wr.getTables().length);\r\n    WebTable table = wr.getTables()[0];\r\n    assertEquals(\"Baby A\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-971-0000\", table.getCellAsText(2, 1));\r\n    assertEquals((\"Needs Immunization:    \" + ((((\"90371 Hepatitis B (6 months), \" + \"90681 Rotavirus (6 months), \") + \"90696 Diphtheria, Tetanus, Pertussis (15 weeks), \") + \"90669 Pneumococcal (12 months), \") + \"90649 Human Papillomavirus (9 years, 6 months)\")), table.getCellAsText(3, 1));\r\n    table = wr.getTables()[1];\r\n    assertEquals(\"Baby C\", table.getCellAsText(1, 1));\r\n    assertEquals(\"919-971-0000\", table.getCellAsText(2, 1));\r\n    assertEquals((\"Needs Immunization:    \" + (((\"90371 Hepatitis B (1 month), \" + \"90696 Diphtheria, Tetanus, Pertussis (6 weeks), \") + \"90396 Varicella (12 months), \") + \"90633 Hepatits A (18 months)\")), table.getCellAsText(3, 1));\r\n}"},
 {"id":3917, "methodname":"testGetVisitReminders_TestInitialPage()", "methodnamerefined":"testGetVisitReminders_TestInitialPage", "methodabbreviation":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.testGetVisitReminders_TestInitialPage", "fullmethod":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest.testGetVisitReminders_TestInitialPage()", "classid":536, "classname":"edu.ncsu.csc.itrust.http.GetVisitRemindersTest", "shortclassname":"GetVisitRemindersTest", "method":"public void testGetVisitReminders_TestInitialPage() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Office Visit Reminders\").click();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"<h2>Patients Needing Visits</h2>\"));\r\n    assertTrue(wr.getElementsWithName(\"ReminderType\")[0].getText().contains(\"Diagnosed Care Needers\"));\r\n    assertTrue(wr.getElementsWithName(\"ReminderType\")[0].getText().contains(\"Flu Shot Needers\"));\r\n    assertTrue(wr.getElementsWithName(\"ReminderType\")[0].getText().contains(\"Immunization Needers\"));\r\n    assertEquals(\"Get Reminders\", wr.getElementsWithName(\"getReminders\")[0].getAttribute(\"value\"));\r\n}"},
 {"id":3918, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.-init-()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"GroupReportTest() {\r\n}"},
 {"id":3919, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.setUp()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    // gen.icd9cmCodes();\r\n    // gen.ndCodes();\r\n    // gen.hospitals();\r\n    // gen.hcp0();\r\n    // gen.hcp1();\r\n    gen.standardData();\r\n    gen.clearLoginFailures();\r\n}"},
 {"id":3920, "methodname":"testDownloadButton()", "methodnamerefined":"testDownloadButton", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.testDownloadButton", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.testDownloadButton()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"public void testDownloadButton() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Group Report\").click();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    wr = form.submit();\r\n    form.submit(form.getSubmitButtons()[0]);\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form2 = wr.getFormWithID(\"mainForm2\");\r\n    // wr = form2.submit();\r\n    assertEquals(2, form2.getSubmitButtons().length);\r\n    wr = form2.submit(form2.getSubmitButtons()[1]);\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n}"},
 {"id":3921, "methodname":"testGroupReportInvalidAge()", "methodnamerefined":"testGroupReportInvalidAge", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.testGroupReportInvalidAge", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.testGroupReportInvalidAge()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"public void testGroupReportInvalidAge() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Group Report\").click();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setCheckbox(\"demographics\", \"LOWER_AGE_LIMIT\", true);\r\n    form.setCheckbox(\"demographics\", \"UPPER_AGE_LIMIT\", true);\r\n    wr = form.submit();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form2 = wr.getFormWithID(\"mainForm2\");\r\n    form2.getScriptableObject().setParameterValue(\"LOWER_AGE_LIMIT\", \"-1\");\r\n    form2.getScriptableObject().setParameterValue(\"UPPER_AGE_LIMIT\", \"asdf\");\r\n    wr = form2.submit(form2.getSubmitButtons()[0]);\r\n}"},
 {"id":3922, "methodname":"testMID()", "methodnamerefined":"testMID", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.testMID", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.testMID()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"public void testMID() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Group Report\").click();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    wr = form.submit();\r\n    form.submit(form.getSubmitButtons()[0]);\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form2 = wr.getFormWithID(\"mainForm2\");\r\n    // wr = form2.submit();\r\n    wr = form2.submit(form2.getSubmitButtons()[0]);\r\n    assertFalse(wr.getText().contains(\"<th>MID</th>\"));\r\n}"},
 {"id":3923, "methodname":"testViewGroupReportAcceptScenario()", "methodnamerefined":"testViewGroupReportAcceptScenario", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.testViewGroupReportAcceptScenario", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.testViewGroupReportAcceptScenario()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"/* matches acceptance test scenario */\r\npublic void testViewGroupReportAcceptScenario() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Group Report\").click();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setCheckbox(\"demographics\", \"GENDER\", true);\r\n    form.setCheckbox(\"demographics\", \"LOWER_AGE_LIMIT\", true);\r\n    form.setCheckbox(\"medical\", \"DIAGNOSIS_ICD_CODE\", true);\r\n    wr = form.submit();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form2 = wr.getFormWithID(\"mainForm2\");\r\n    form2.getScriptableObject().setParameterValue(\"GENDER\", \"Female\");\r\n    form2.getScriptableObject().setParameterValue(\"LOWER_AGE_LIMIT\", \"60\");\r\n    form2.getScriptableObject().setParameterValue(\"DIAGNOSIS_ICD_CODE\", \"715.09\");\r\n    wr = form2.submit(form2.getSubmitButtons()[0]);\r\n}"},
 {"id":3924, "methodname":"testViewGroupReportDemographic()", "methodnamerefined":"testViewGroupReportDemographic", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.testViewGroupReportDemographic", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.testViewGroupReportDemographic()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"/* filters by demographic filters */\r\npublic void testViewGroupReportDemographic() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Group Report\").click();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setCheckbox(\"demographics\", \"GENDER\", true);\r\n    form.setCheckbox(\"demographics\", \"FIRST_NAME\", true);\r\n    form.setCheckbox(\"demographics\", \"CONTACT_EMAIL\", true);\r\n    form.setCheckbox(\"demographics\", \"CITY\", true);\r\n    form.setCheckbox(\"demographics\", \"STATE\", true);\r\n    form.setCheckbox(\"demographics\", \"ZIP\", true);\r\n    form.setCheckbox(\"demographics\", \"INSURE_NAME\", true);\r\n    form.setCheckbox(\"demographics\", \"INSURE_ID\", true);\r\n    form.setCheckbox(\"demographics\", \"LOWER_AGE_LIMIT\", true);\r\n    form.setCheckbox(\"demographics\", \"UPPER_AGE_LIMIT\", true);\r\n    wr = form.submit();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form2 = wr.getFormWithID(\"mainForm2\");\r\n    form2.getScriptableObject().setParameterValue(\"GENDER\", \"Male\");\r\n    form2.getScriptableObject().setParameterValue(\"FIRST_NAME\", \"Baby\");\r\n    form2.getScriptableObject().setParameterValue(\"CONTACT_EMAIL\", \"fake@email.com\");\r\n    form2.getScriptableObject().setParameterValue(\"CITY\", \"Raleigh\");\r\n    form2.getScriptableObject().setParameterValue(\"STATE\", \"NC\");\r\n    form2.getScriptableObject().setParameterValue(\"ZIP\", \"27606\");\r\n    form2.getScriptableObject().setParameterValue(\"INSURE_NAME\", \"Aetna\");\r\n    form2.getScriptableObject().setParameterValue(\"INSURE_ID\", \"ChetumNHowe\");\r\n    form2.getScriptableObject().setParameterValue(\"LOWER_AGE_LIMIT\", \"10\");\r\n    form2.getScriptableObject().setParameterValue(\"UPPER_AGE_LIMIT\", \"30\");\r\n    wr = form2.submit(form2.getSubmitButtons()[0]);\r\n}"},
 {"id":3925, "methodname":"testViewGroupReportMedical()", "methodnamerefined":"testViewGroupReportMedical", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.testViewGroupReportMedical", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.testViewGroupReportMedical()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"/* filters by medical filters */\r\npublic void testViewGroupReportMedical() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Group Report\").click();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setCheckbox(\"medical\", \"PROCEDURE\", true);\r\n    form.setCheckbox(\"medical\", \"ALLERGY\", true);\r\n    form.setCheckbox(\"medical\", \"CURRENT_PRESCRIPTIONS\", true);\r\n    form.setCheckbox(\"medical\", \"PASTCURRENT_PRESCRIPTIONS\", true);\r\n    form.setCheckbox(\"medical\", \"DIAGNOSIS_ICD_CODE\", true);\r\n    form.setCheckbox(\"medical\", \"LOWER_OFFICE_VISIT_DATE\", true);\r\n    form.setCheckbox(\"medical\", \"UPPER_OFFICE_VISIT_DATE\", true);\r\n    wr = form.submit();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form2 = wr.getFormWithID(\"mainForm2\");\r\n    form2.getScriptableObject().setParameterValue(\"PROCEDURE\", \"1270F\");\r\n    form2.getScriptableObject().setParameterValue(\"ALLERGY\", \"664662530\");\r\n    form2.getScriptableObject().setParameterValue(\"CURRENT_PRESCRIPTIONS\", \"647641512\");\r\n    form2.getScriptableObject().setParameterValue(\"PASTCURRENT_PRESCRIPTIONS\", \"009042407\");\r\n    form2.getScriptableObject().setParameterValue(\"DIAGNOSIS_ICD_CODE\", \"250.10\");\r\n    form2.getScriptableObject().setParameterValue(\"DIAGNOSIS_ICD_CODE\", \"15.00\");\r\n    form2.getScriptableObject().setParameterValue(\"LOWER_OFFICE_VISIT_DATE\", \"01/01/1990\");\r\n    form2.getScriptableObject().setParameterValue(\"UPPER_OFFICE_VISIT_DATE\", \"01/01/2012\");\r\n    wr = form2.submit(form2.getSubmitButtons()[0]);\r\n}"},
 {"id":3926, "methodname":"testViewGroupReportPersonnel()", "methodnamerefined":"testViewGroupReportPersonnel", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.testViewGroupReportPersonnel", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.testViewGroupReportPersonnel()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"/* filters by personnel filters */\r\npublic void testViewGroupReportPersonnel() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Group Report\").click();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    form.setCheckbox(\"personnel\", \"DLHCP\", true);\r\n    wr = form.submit();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form2 = wr.getFormWithID(\"mainForm2\");\r\n    form2.getScriptableObject().setParameterValue(\"DLHCP\", \"Gandalf Stormcrow\");\r\n    wr = form2.submit(form2.getSubmitButtons()[0]);\r\n}"},
 {"id":3927, "methodname":"testXMLCheckboxFalse()", "methodnamerefined":"testXMLCheckboxFalse", "methodabbreviation":"edu.ncsu.csc.itrust.http.GroupReportTest.testXMLCheckboxFalse", "fullmethod":"edu.ncsu.csc.itrust.http.GroupReportTest.testXMLCheckboxFalse()", "classid":537, "classname":"edu.ncsu.csc.itrust.http.GroupReportTest", "shortclassname":"GroupReportTest", "method":"public void testXMLCheckboxFalse() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Group Report\").click();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    wr = form.submit();\r\n    assertEquals(\"iTrust - Generate Group Report\", wr.getTitle());\r\n    WebForm form2 = wr.getFormWithID(\"mainForm2\");\r\n    wr = form2.submit(form2.getSubmitButtons()[0]);\r\n    try {\r\n        wr = wr.getLinkWith(\"Download XML Report\").click();\r\n    } catch (NullPointerException e) {\r\n        // Exception is good\r\n        return;\r\n    }\r\n    fail(\"Should have thrown NullPointerException.\");\r\n}"},
 {"id":3928, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.HealthDataChartTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.HealthDataChartTest.-init-()", "classid":538, "classname":"edu.ncsu.csc.itrust.http.HealthDataChartTest", "shortclassname":"HealthDataChartTest", "method":"HealthDataChartTest() {\r\n}"},
 {"id":3929, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.HealthDataChartTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.HealthDataChartTest.setUp()", "classid":538, "classname":"edu.ncsu.csc.itrust.http.HealthDataChartTest", "shortclassname":"HealthDataChartTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.healthData();\r\n}"},
 {"id":3930, "methodname":"testCalculateBMI()", "methodnamerefined":"testCalculateBMI", "methodabbreviation":"edu.ncsu.csc.itrust.http.HealthDataChartTest.testCalculateBMI", "fullmethod":"edu.ncsu.csc.itrust.http.HealthDataChartTest.testCalculateBMI()", "classid":538, "classname":"edu.ncsu.csc.itrust.http.HealthDataChartTest", "shortclassname":"HealthDataChartTest", "method":"/* HCP 9000000000 has reported Basic Health History for\nPatient 2 (2 entries).\n\nAuthenticate HCP\nMID: 9000000000\nPassword: pw\nChoose option Basic Health Information\nChoose patient 2\nView BMI data for 10-30-2007 and 8-12-2007.\n */\r\npublic void testCalculateBMI() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    // choose date range\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    // Make sure these values are present.\r\n    WebTable table = wr.getTableStartingWith(\"Basic Health History\");\r\n    boolean matchedOctober = false;\r\n    boolean matchedAugust = false;\r\n    for (int i = (table.getRowCount()) - 1; i >= 0; i--) {\r\n        if ((table.getCellAsText(i, 9).equals(\"2007-08-12 08:34:58.0\")) && (table.getCellAsText(i, 2).equals(\"37.34\"))) {\r\n            matchedAugust = true;\r\n        } else\r\n            if ((table.getCellAsText(i, 9).equals(\"2007-10-30 10:54:22.0\")) && (table.getCellAsText(i, 2).equals(\"38.24\"))) {\r\n                matchedOctober = true;\r\n            }\r\n\r\n        if (matchedOctober && matchedAugust) {\r\n            break;\r\n        }\r\n    }\r\n    if (!(matchedOctober && matchedAugust)) {\r\n        fail();\r\n    }\r\n}"},
 {"id":3931, "methodname":"testGetHeightLineChart()", "methodnamerefined":"testGetHeightLineChart", "methodabbreviation":"edu.ncsu.csc.itrust.http.HealthDataChartTest.testGetHeightLineChart", "fullmethod":"edu.ncsu.csc.itrust.http.HealthDataChartTest.testGetHeightLineChart()", "classid":538, "classname":"edu.ncsu.csc.itrust.http.HealthDataChartTest", "shortclassname":"HealthDataChartTest", "method":"/* HCP 9000000000 has reported Basic Health History for\nPatient 2 (4 entries).\n\nAuthenticate HCP\nMID: 9000000000\nPassword: pw\nChoose option Basic Health Information\nChoose patient 2\nSelect to view line chart for weight.\n */\r\npublic void testGetHeightLineChart() throws Exception {\r\n    // login hcp\r\n    // gen.healthData2();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    // choose date range\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    // view line chart\r\n    wr = wr.getLinkWithID(\"viewHeightChart\").click();\r\n    assertEquals(\"iTrust - Height Chart\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"src=\"/iTrust/charts/\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.BASIC_HEALTH_CHARTS_VIEW, 9000000000L, 2L, \"Height\");\r\n}"},
 {"id":3932, "methodname":"testGetWeightLineChart()", "methodnamerefined":"testGetWeightLineChart", "methodabbreviation":"edu.ncsu.csc.itrust.http.HealthDataChartTest.testGetWeightLineChart", "fullmethod":"edu.ncsu.csc.itrust.http.HealthDataChartTest.testGetWeightLineChart()", "classid":538, "classname":"edu.ncsu.csc.itrust.http.HealthDataChartTest", "shortclassname":"HealthDataChartTest", "method":"/* HCP 9000000000 has reported Basic Health History for\nPatient 2 (4 entries).\n\nAuthenticate HCP\nMID: 9000000000\nPassword: pw\nChoose option Basic Health Information\nChoose patient 2\nSelect to view line chart for weight.\n */\r\npublic void testGetWeightLineChart() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    // choose date range\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    // view line chart\r\n    wr = wr.getLinkWithID(\"viewWeightChart\").click();\r\n    assertEquals(\"iTrust - Weight Chart\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"src=\"/iTrust/charts/\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.BASIC_HEALTH_CHARTS_VIEW, 9000000000L, 2L, \"Weight\");\r\n}"},
 {"id":3933, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.-init-()", "classid":539, "classname":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest", "shortclassname":"ImmunizationUseCasesTest", "method":"ImmunizationUseCasesTest() {\r\n}"},
 {"id":3934, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.setUp()", "classid":539, "classname":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest", "shortclassname":"ImmunizationUseCasesTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3935, "methodname":"testDocumentAndViewImmunizations()", "methodnamerefined":"testDocumentAndViewImmunizations", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testDocumentAndViewImmunizations", "fullmethod":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testDocumentAndViewImmunizations()", "classid":539, "classname":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest", "shortclassname":"ImmunizationUseCasesTest", "method":"public void testDocumentAndViewImmunizations() throws Exception {\r\n    boolean check = false;\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000003L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Office Visit Reminders\").click();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    // Select \"Immunization Needers\"\r\n    WebForm wf = wr.getFormWithID(\"reminderForm\");\r\n    wf.setParameter(\"ReminderType\", \"Immunization Needers\");\r\n    // Select \"Get Reminders\"\r\n    wr = wf.submit();\r\n    // Check for content\r\n    WebTable[] tables = wr.getTables();\r\n    for (WebTable t : tables) {\r\n        if (\"Patient Information\".equals(t.getCellAsText(0, 0))) {\r\n            if (\"Bowser Koopa\".equals(t.getCellAsText(1, 1))) {\r\n                // assertEquals(\"Bowser\", t.getCellAsText(2, 1));\r\n                assertEquals(\"Needs Immunization:    90371 Hepatitis B (birth), 90681 Rotavirus (6 weeks), 90696 Diphtheria, Tetanus, Pertussis (6 weeks), 90645 Haemophilus influenzae (6 weeks), 90669 Pneumococcal (6 weeks), 90712 Poliovirus (6 weeks), 90707 Measles, Mumps, Rubekka (12 months), 90396 Varicella (12 months), 90633 Hepatits A (12 months)\", t.getCellAsText(3, 1));\r\n                check = true;\r\n            } else\r\n                if (\"Princess Peach\".equals(t.getCellAsText(1, 1))) {\r\n                    // assertEquals(\"Princess\", t.getCellAsText(2,1));\r\n                    assertEquals(\"Needs Immunization:    90371 Hepatitis B (birth), 90681 Rotavirus (6 weeks), 90696 Diphtheria, Tetanus, Pertussis (6 weeks), 90645 Haemophilus influenzae (6 weeks), 90669 Pneumococcal (6 weeks), 90712 Poliovirus (6 weeks), 90707 Measles, Mumps, Rubekka (12 months), 90396 Varicella (12 months), 90633 Hepatits A (12 months)\", t.getCellAsText(3, 1));\r\n                    check = true;\r\n                }\r\n\r\n        }\r\n    }\r\n    assertTrue(check);\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_REMINDERS_VIEW, 9000000003L, 0L, \"\");\r\n}"},
 {"id":3936, "methodname":"testDocumentImmunization()", "methodnamerefined":"testDocumentImmunization", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testDocumentImmunization", "fullmethod":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testDocumentImmunization()", "classid":539, "classname":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest", "shortclassname":"ImmunizationUseCasesTest", "method":"public void testDocumentImmunization() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"6\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"07/10/2004\").click();\r\n    WebTable table = wr.getTableStartingWith(\"[Top]Immunizations\");\r\n    assertEquals(\"90649\", table.getCellAsText(2, 0));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 6L, \"Office visit\");\r\n}"},
 {"id":3937, "methodname":"testDocumentImmunization2()", "methodnamerefined":"testDocumentImmunization2", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testDocumentImmunization2", "fullmethod":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testDocumentImmunization2()", "classid":539, "classname":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest", "shortclassname":"ImmunizationUseCasesTest", "method":"/**\r\n * test update Immunization record2\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testDocumentImmunization2() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"7\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"05/10/2006\").click();\r\n    WebTable table = wr.getTableStartingWith(\"[Top]Immunizations\");\r\n    assertEquals(\"90696\", table.getCellAsText(2, 0));\r\n    wr = wr.getLinkWith(\"Remove\").click();\r\n    table = wr.getTableStartingWith(\"[Top]Immunizations\");\r\n    assertEquals(\"No immunizations on record\", table.getCellAsText(2, 0));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 7L, \"Office visit\");\r\n}"},
 {"id":3938, "methodname":"testUpdateImmunizations()", "methodnamerefined":"testUpdateImmunizations", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testUpdateImmunizations", "fullmethod":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testUpdateImmunizations()", "classid":539, "classname":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest", "shortclassname":"ImmunizationUseCasesTest", "method":"/**\r\n * test update Immunization\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testUpdateImmunizations() throws Exception {\r\n    boolean check = false;\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    // choose patient 1\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"6\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"07/10/2004\").click();\r\n    WebForm wf = wr.getFormWithID(\"immunizationForm\");\r\n    wf.setParameter(\"CPTCode\", \"90371\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_EDIT, 9000000000L, 6L, \"Office visit\");\r\n    wr = wr.getLinkWith(\"Office Visit Reminders\").click();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    // Select \"Immunization Needers\"\r\n    wf = wr.getFormWithID(\"reminderForm\");\r\n    wf.setParameter(\"ReminderType\", \"Immunization Needers\");\r\n    // Select \"Get Reminders\"\r\n    wr = wf.submit();\r\n    // Check for content\r\n    WebTable[] tables = wr.getTables();\r\n    for (WebTable t : tables) {\r\n        if (\"Patient Information\".equals(t.getCellAsText(0, 0))) {\r\n            if (\"Baby A\".equals(t.getCellAsText(1, 1))) {\r\n                // assertEquals(\"Baby\", t.getCellAsText(2, 1));\r\n                assertEquals(\"Needs Immunization:    90681 Rotavirus (6 months), 90696 Diphtheria, Tetanus, Pertussis (15 weeks), 90669 Pneumococcal (12 months), 90649 Human Papillomavirus (9 years, 6 months)\", t.getCellAsText(3, 1));\r\n                check = true;\r\n            } else\r\n                if (\"Baby C\".equals(t.getCellAsText(1, 1))) {\r\n                    // assertEquals(\"Baby\", t.getCellAsText(2, 1));\r\n                    assertEquals(\"Needs Immunization:    90371 Hepatitis B (1 month), 90696 Diphtheria, Tetanus, Pertussis (6 weeks), 90396 Varicella (12 months), 90633 Hepatits A (18 months)\", t.getCellAsText(3, 1));\r\n                    check = true;\r\n                }\r\n\r\n        }\r\n    }\r\n    assertTrue(check);\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_REMINDERS_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":3939, "methodname":"testViewImmunizationNeeders()", "methodnamerefined":"testViewImmunizationNeeders", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testViewImmunizationNeeders", "fullmethod":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testViewImmunizationNeeders()", "classid":539, "classname":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest", "shortclassname":"ImmunizationUseCasesTest", "method":"public void testViewImmunizationNeeders() throws Exception {\r\n    boolean check = false;\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Office Visit Reminders\").click();\r\n    assertEquals(\"iTrust - Visit Reminders\", wr.getTitle());\r\n    // Select \"Immunization Needers\"\r\n    WebForm wf = wr.getFormWithID(\"reminderForm\");\r\n    wf.setParameter(\"ReminderType\", \"Immunization Needers\");\r\n    // Select \"Get Reminders\"\r\n    wr = wf.submit();\r\n    // Check for content\r\n    WebTable[] tables = wr.getTables();\r\n    for (WebTable t : tables) {\r\n        if (\"Patient Information\".equals(t.getCellAsText(0, 0))) {\r\n            if (\"Baby A\".equals(t.getCellAsText(1, 1))) {\r\n                // assertEquals(\"Baby\", t.getCellAsText(2, 1));\r\n                assertEquals(\"Needs Immunization:    90371 Hepatitis B (6 months), 90681 Rotavirus (6 months), 90696 Diphtheria, Tetanus, Pertussis (15 weeks), 90669 Pneumococcal (12 months), 90649 Human Papillomavirus (9 years, 6 months)\", t.getCellAsText(3, 1));\r\n                check = true;\r\n            } else\r\n                if (\"Baby C\".equals(t.getCellAsText(1, 1))) {\r\n                    // assertEquals(\"Baby\", t.getCellAsText(2, 1));\r\n                    assertEquals(\"Needs Immunization:    90371 Hepatitis B (1 month), 90696 Diphtheria, Tetanus, Pertussis (6 weeks), 90396 Varicella (12 months), 90633 Hepatits A (18 months)\", t.getCellAsText(3, 1));\r\n                    check = true;\r\n                }\r\n\r\n        }\r\n    }\r\n    assertTrue(check);\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_REMINDERS_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":3940, "methodname":"testViewImmunizationRecord()", "methodnamerefined":"testViewImmunizationRecord", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testViewImmunizationRecord", "fullmethod":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testViewImmunizationRecord()", "classid":539, "classname":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest", "shortclassname":"ImmunizationUseCasesTest", "method":"/**\r\n * test view Immunization\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testViewImmunizationRecord() throws Exception {\r\n    WebConversation wc = login(\"6\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 6L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Records\").click();\r\n    assertEquals(\"iTrust - View My Records\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 6L, 6L, \"\");\r\n    WebTable table = wr.getTableStartingWith(\"Immunizations\");\r\n    assertEquals(\"90649\", table.getCellAsText(2, 0));\r\n    assertEquals(\"90649\", table.getCellAsText(3, 0));\r\n    assertEquals(\"90707\", table.getCellAsText(4, 0));\r\n    assertEquals(\"90396\", table.getCellAsText(5, 0));\r\n    assertEquals(\"90633\", table.getCellAsText(6, 0));\r\n    assertEquals(\"90645\", table.getCellAsText(7, 0));\r\n    assertEquals(\"90707\", table.getCellAsText(8, 0));\r\n    assertEquals(\"90396\", table.getCellAsText(9, 0));\r\n    assertEquals(\"90633\", table.getCellAsText(10, 0));\r\n    assertEquals(\"90696\", table.getCellAsText(11, 0));\r\n    assertEquals(\"90669\", table.getCellAsText(12, 0));\r\n    assertEquals(\"90712\", table.getCellAsText(13, 0));\r\n    assertEquals(\"90681\", table.getCellAsText(14, 0));\r\n    assertEquals(\"90696\", table.getCellAsText(15, 0));\r\n    assertEquals(\"90645\", table.getCellAsText(16, 0));\r\n    assertEquals(\"90669\", table.getCellAsText(17, 0));\r\n    assertEquals(\"90712\", table.getCellAsText(18, 0));\r\n    assertEquals(\"90681\", table.getCellAsText(19, 0));\r\n    assertEquals(\"90696\", table.getCellAsText(20, 0));\r\n    assertEquals(\"90645\", table.getCellAsText(21, 0));\r\n    assertEquals(\"90669\", table.getCellAsText(22, 0));\r\n    assertEquals(\"90712\", table.getCellAsText(23, 0));\r\n    assertEquals(\"90371\", table.getCellAsText(24, 0));\r\n    assertEquals(\"90371\", table.getCellAsText(25, 0));\r\n}"},
 {"id":3941, "methodname":"testViewImmunizationRecord2()", "methodnamerefined":"testViewImmunizationRecord2", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testViewImmunizationRecord2", "fullmethod":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest.testViewImmunizationRecord2()", "classid":539, "classname":"edu.ncsu.csc.itrust.http.ImmunizationUseCasesTest", "shortclassname":"ImmunizationUseCasesTest", "method":"/**\r\n * test update ImmunizationRecord\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testViewImmunizationRecord2() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Records\").click();\r\n    assertEquals(\"iTrust - View My Records\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n    WebTable table = wr.getTableStartingWith(\"Immunizations\");\r\n    assertEquals(\"No Data\", table.getCellAsText(2, 0));\r\n}"},
 {"id":3942, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.-init-()", "classid":540, "classname":"edu.ncsu.csc.itrust.http.ImportNDCodesTest", "shortclassname":"ImportNDCodesTest", "method":"ImportNDCodesTest() {\r\n}"},
 {"id":3943, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.setUp()", "classid":540, "classname":"edu.ncsu.csc.itrust.http.ImportNDCodesTest", "shortclassname":"ImportNDCodesTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n}"},
 {"id":3944, "methodname":"tempNDCFile()", "methodnamerefined":"tempNDCFile", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.tempNDCFile", "fullmethod":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.tempNDCFile()", "classid":540, "classname":"edu.ncsu.csc.itrust.http.ImportNDCodesTest", "shortclassname":"ImportNDCodesTest", "method":"private File tempNDCFile() throws IOException {\r\n    File f = File.createTempFile(\"ndcodes\", null);\r\n    FileWriter fw = new FileWriter(f);\r\n    fw.write((\"0573-0150\tHUMAN OTC DRUG\tADVIL\t\tIBUPROFEN\tTABLET, COATED\tORAL\t19840518\t\tNDA\tNDA018989\tPfizer Consumer Healthcare\tIBUPROFEN\t200\tmg/1\tNonsteroidal Anti-inflammatory Drug [EPC], Cyclooxygenase Inhibitors [MoA], Nonsteroidal Anti-inflammatory Compounds [Chemical/Ingredient]\t\n\" + ((\"50458-513\tHUMAN PRESCRIPTION DRUG\tTYLENOL with Codeine\t\tACETAMINOPHEN AND CODEINE PHOSPHATE\tTABLET\tORAL\t19770817\t\tANDA\tANDA085055\tJanssen Pharmaceuticals, Inc.\tACETAMINOPHEN; CODEINE PHOSPHATE\t300; 30\tmg/1; mg/1\t\tCIII\n\" + \"10544-591\tHUMAN PRESCRIPTION DRUG\tOxyContin\t\tOXYCODONE HYDROCHLORIDE\tTABLET, FILM COATED, EXTENDED RELEASE\tORAL\t20100126\t\tNDA\tNDA020553\tBlenheim Pharmacal, Inc.\tOXYCODONE HYDROCHLORIDE\t10\tmg/1\tOpioid Agonist [EPC], Full Opioid Agonists [MoA]\tCII\n\") + \"11523-7197\tHUMAN OTC DRUG\tClaritin\t\tLORATADINE\tSOLUTION\tORAL\t20110301\t\tNDA\tNDA020641\tSchering Plough Healthcare Products Inc.\tLORATADINE\t5\tmg/5mL\t\t\n\")));\r\n    fw.flush();\r\n    fw.close();\r\n    return f;\r\n}"},
 {"id":3945, "methodname":"tempNDCFile2()", "methodnamerefined":"tempNDCFile2", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.tempNDCFile2", "fullmethod":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.tempNDCFile2()", "classid":540, "classname":"edu.ncsu.csc.itrust.http.ImportNDCodesTest", "shortclassname":"ImportNDCodesTest", "method":"private File tempNDCFile2() throws IOException {\r\n    File f = File.createTempFile(\"ndcodes2\", null);\r\n    FileWriter fw = new FileWriter(f);\r\n    fw.write((\"0573-0150\tHUMAN OTC DRUG\tADVIL NEW\t\tIBUPROFEN\tTABLET, COATED\tORAL\t19840518\t\tNDA\tNDA018989\tPfizer Consumer Healthcare\tIBUPROFEN\t200\tmg/1\tNonsteroidal Anti-inflammatory Drug [EPC], Cyclooxygenase Inhibitors [MoA], Nonsteroidal Anti-inflammatory Compounds [Chemical/Ingredient]\t\n\" + \"50458-513\tHUMAN PRESCRIPTION DRUG\tTYLENOL with Coke\t\tACETAMINOPHEN AND CODEINE PHOSPHATE\tTABLET\tORAL\t19770817\t\tANDA\tANDA085055\tJanssen Pharmaceuticals, Inc.\tACETAMINOPHEN; CODEINE PHOSPHATE\t300; 30\tmg/1; mg/1\t\tCIII\n\"));\r\n    fw.flush();\r\n    fw.close();\r\n    return f;\r\n}"},
 {"id":3946, "methodname":"testImportDrugs()", "methodnamerefined":"testImportDrugs", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.testImportDrugs", "fullmethod":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.testImportDrugs()", "classid":540, "classname":"edu.ncsu.csc.itrust.http.ImportNDCodesTest", "shortclassname":"ImportNDCodesTest", "method":"/* Test that drugs can be updated as a list */\r\npublic void testImportDrugs() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ND Codes\").click();\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Import ND Codes\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    File f = tempNDCFile();\r\n    form.setParameter(\"fileIn\", f.getAbsoluteFile());\r\n    form.setParameter(\"strategy\", \"ignore\");\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Current Drug ND Codes\");\r\n    assertEquals(\"05730-150\", table.getCellAsText(2, 0));\r\n    assertTrue(table.getCellAsText(2, 1).contains(\"ADVIL\"));\r\n    assertEquals(\"10544-591\", table.getCellAsText(3, 0));\r\n    assertTrue(table.getCellAsText(3, 1).contains(\"OxyContin\"));\r\n    assertEquals(\"11523-7197\", table.getCellAsText(4, 0));\r\n    assertTrue(table.getCellAsText(4, 1).contains(\"Claritin\"));\r\n    assertEquals(\"50458-513\", table.getCellAsText(5, 0));\r\n    assertTrue(table.getCellAsText(5, 1).contains(\"TYLENOL with Codeine\"));\r\n    // delete temp file\r\n    f.delete();\r\n}"},
 {"id":3947, "methodname":"testImportDrugs_IgnoreDupes()", "methodnamerefined":"testImportDrugs_IgnoreDupes", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.testImportDrugs_IgnoreDupes", "fullmethod":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.testImportDrugs_IgnoreDupes()", "classid":540, "classname":"edu.ncsu.csc.itrust.http.ImportNDCodesTest", "shortclassname":"ImportNDCodesTest", "method":"/* Test the return button */\r\npublic void testImportDrugs_IgnoreDupes() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ND Codes\").click();\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Import ND Codes\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    File f = tempNDCFile();\r\n    form.setParameter(\"fileIn\", f.getAbsoluteFile());\r\n    form.setParameter(\"strategy\", \"ignore\");\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Current Drug ND Codes\");\r\n    assertEquals(\"05730-150\", table.getCellAsText(2, 0));\r\n    assertTrue(table.getCellAsText(2, 1).contains(\"ADVIL\"));\r\n    assertEquals(\"10544-591\", table.getCellAsText(3, 0));\r\n    assertTrue(table.getCellAsText(3, 1).contains(\"OxyContin\"));\r\n    assertEquals(\"11523-7197\", table.getCellAsText(4, 0));\r\n    assertTrue(table.getCellAsText(4, 1).contains(\"Claritin\"));\r\n    assertEquals(\"50458-513\", table.getCellAsText(5, 0));\r\n    assertTrue(table.getCellAsText(5, 1).contains(\"TYLENOL with Codeine\"));\r\n    // delete temp file\r\n    f.delete();\r\n    form = wr.getForms()[0];\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Import ND Codes\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    f = tempNDCFile2();\r\n    form.setParameter(\"fileIn\", f.getAbsoluteFile());\r\n    form.setParameter(\"strategy\", \"ignore\");\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    table = wr.getTableStartingWithPrefix(\"Current Drug ND Codes\");\r\n    assertEquals(\"05730-150\", table.getCellAsText(2, 0));\r\n    assertTrue(table.getCellAsText(2, 1).contains(\"ADVIL\"));\r\n    assertEquals(\"10544-591\", table.getCellAsText(3, 0));\r\n    assertTrue(table.getCellAsText(3, 1).contains(\"OxyContin\"));\r\n    assertEquals(\"11523-7197\", table.getCellAsText(4, 0));\r\n    assertTrue(table.getCellAsText(4, 1).contains(\"Claritin\"));\r\n    assertEquals(\"50458-513\", table.getCellAsText(5, 0));\r\n    assertTrue(table.getCellAsText(5, 1).contains(\"TYLENOL with Codeine\"));\r\n    // delete temp file\r\n    f.delete();\r\n}"},
 {"id":3948, "methodname":"testImportDrugs_UpdateDupes()", "methodnamerefined":"testImportDrugs_UpdateDupes", "methodabbreviation":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.testImportDrugs_UpdateDupes", "fullmethod":"edu.ncsu.csc.itrust.http.ImportNDCodesTest.testImportDrugs_UpdateDupes()", "classid":540, "classname":"edu.ncsu.csc.itrust.http.ImportNDCodesTest", "shortclassname":"ImportNDCodesTest", "method":"/* Test that a new list of drugs can update an existing list */\r\npublic void testImportDrugs_UpdateDupes() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ND Codes\").click();\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Import ND Codes\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    File f = tempNDCFile();\r\n    form.setParameter(\"fileIn\", f.getAbsoluteFile());\r\n    form.setParameter(\"strategy\", \"ignore\");\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Current Drug ND Codes\");\r\n    assertEquals(\"05730-150\", table.getCellAsText(2, 0));\r\n    assertTrue(table.getCellAsText(2, 1).contains(\"ADVIL\"));\r\n    assertEquals(\"10544-591\", table.getCellAsText(3, 0));\r\n    assertTrue(table.getCellAsText(3, 1).contains(\"OxyContin\"));\r\n    assertEquals(\"11523-7197\", table.getCellAsText(4, 0));\r\n    assertTrue(table.getCellAsText(4, 1).contains(\"Claritin\"));\r\n    assertEquals(\"50458-513\", table.getCellAsText(5, 0));\r\n    assertTrue(table.getCellAsText(5, 1).contains(\"TYLENOL with Codeine\"));\r\n    // delete temp file\r\n    f.delete();\r\n    form = wr.getForms()[0];\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Import ND Codes\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    f = tempNDCFile2();\r\n    form.setParameter(\"fileIn\", f.getAbsoluteFile());\r\n    form.setParameter(\"strategy\", \"update\");\r\n    form.getButtonWithID(\"import\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    table = wr.getTableStartingWithPrefix(\"Current Drug ND Codes\");\r\n    assertEquals(\"05730-150\", table.getCellAsText(2, 0));\r\n    assertTrue(table.getCellAsText(2, 1).contains(\"ADVIL NEW\"));\r\n    assertEquals(\"10544-591\", table.getCellAsText(3, 0));\r\n    assertTrue(table.getCellAsText(3, 1).contains(\"OxyContin\"));\r\n    assertEquals(\"11523-7197\", table.getCellAsText(4, 0));\r\n    assertTrue(table.getCellAsText(4, 1).contains(\"Claritin\"));\r\n    assertEquals(\"50458-513\", table.getCellAsText(5, 0));\r\n    assertTrue(table.getCellAsText(5, 1).contains(\"TYLENOL with Coke\"));\r\n    // delete temp file\r\n    f.delete();\r\n}"},
 {"id":3949, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.-init-()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"LabProceduresTest() {\r\n}"},
 {"id":3950, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.setUp()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.uap1();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n    gen.patient4();\r\n    gen.loincs();\r\n    gen.labProcedures();\r\n}"},
 {"id":3951, "methodname":"testAddLabProcedureWithLabTech()", "methodnamerefined":"testAddLabProcedureWithLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testAddLabProcedureWithLabTech", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testAddLabProcedureWithLabTech()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"public void testAddLabProcedureWithLabTech() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from specific date\r\n    wr.getLinkWith(\"6/10/2007\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    form = wr.getFormWithID(\"labProcedureForm\");\r\n    form.setParameter(\"loinc\", \"10666-6\");\r\n    form.setParameter(\"labTech\", \"5000000001\");\r\n    form.setParameter(\"labProcPriority\", \"1\");\r\n    form.getButtonWithID(\"add_labProcedure\").click();\r\n    // check updated page\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Lab Procedure information successfully updated.\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.LAB_PROCEDURE_ADD, 9000000000L, 2L, \"\");\r\n    // Get row containing procedure.\r\n    WebTable tbl = wr.getTableWithID(\"labProceduresTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    int rowi = 0;\r\n    for (; rowi < (rows.length); rowi++) {\r\n        if (rows[rowi].getText().startsWith(\"| 10666-6\")) {\r\n            break;\r\n        }\r\n    }\r\n    assertTrue((rowi < (rows.length)));\r\n    // Verify data in table\r\n    assertEquals(\"Lab Dude\", tbl.getCellAsText(rowi, 1));\r\n    assertEquals(\"In Transit\", tbl.getCellAsText(rowi, 2));// status\r\n\r\n    assertEquals(\"\", tbl.getCellAsText(rowi, 5));// commentary\r\n\r\n    assertEquals(\"\", tbl.getCellAsText(rowi, 6));// numerical results\r\n\r\n    assertEquals(\"\", tbl.getCellAsText(rowi, 7));// lower bound\r\n\r\n    assertEquals(\"\", tbl.getCellAsText(rowi, 8));// upper bound\r\n\r\n    assertTrue(tbl.getCellAsText(rowi, 10).contains(\"Remove\"));// action\r\n\r\n    assertTrue(tbl.getCellAsText(rowi, 10).contains(\"Reassign\"));// action\r\n\r\n}"},
 {"id":3952, "methodname":"testAddLabProcedureWithoutLabTech()", "methodnamerefined":"testAddLabProcedureWithoutLabTech", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testAddLabProcedureWithoutLabTech", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testAddLabProcedureWithoutLabTech()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"/**\r\n * Tests adding a lab procedure with no lab tech selected. Verifies that an error message is displayed.\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testAddLabProcedureWithoutLabTech() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from specific date\r\n    wr.getLinkWith(\"6/10/2007\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    form = wr.getFormWithID(\"labProcedureForm\");\r\n    form.setParameter(\"loinc\", \"10666-6\");\r\n    form.setParameter(\"labProcPriority\", \"1\");\r\n    form.getButtonWithID(\"add_labProcedure\").click();\r\n    // check updated page\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"A lab tech must be selected before adding a laboratory procedure.\"));\r\n}"},
 {"id":3953, "methodname":"testHcpLabProc()", "methodnamerefined":"testHcpLabProc", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testHcpLabProc", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testHcpLabProc()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"/* Authenticate HCP 9000000000 and Patient 2. HCP 9000000000 has ordered lab procedure 10763-1 for patient\n1 in an office visit on 7/20/2007. InputLabResults has successfully passed. All lab procedure test data\nis in database. HCP 9000000000 has authenticated successfully 1. The HCP chooses to view laboratory\nprocedure results and selects patient 2 2. The LCHP sorts by dates of the last status update. 3. The\nLHCP chooses the top procedure (the procedure from InputLabResults). 4. The LHCP allows viewing access\nto the laboratory results.\n */\r\npublic void testHcpLabProc() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Laboratory Procedures\").click();\r\n    // choose patient 1\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - View Laboratory Procedures\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Allow/Disallow Viewing\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LAB_RESULTS_VIEW, 9000000000L, 2L, \"\");\r\n}"},
 {"id":3954, "methodname":"testLabProcedureInTransitToReceived()", "methodnamerefined":"testLabProcedureInTransitToReceived", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testLabProcedureInTransitToReceived", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testLabProcedureInTransitToReceived()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"public void testLabProcedureInTransitToReceived() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    WebConversation wc = login(\"5000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Lab Tech Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"All Lab Procedures\").click();\r\n    assertEquals(\"iTrust - View Laboratory Procedures\", wr.getTitle());\r\n    // Ensure the table of received lab procedures has only one entry\r\n    WebTable tbl = wr.getTableWithID(\"receivedTable\");\r\n    assertEquals(3, tbl.getRowCount());\r\n    assertEquals(\"Beaker Beaker\", tbl.getCellAsText(2, 4));\r\n    // Check table of in-transit lab procedures\r\n    tbl = wr.getTableWithID(\"inTransitTable\");\r\n    assertEquals(20, tbl.getRowCount());\r\n    String labProcID = tbl.getCellAsText(2, 0);// lab proc id is auto-assigned\r\n\r\n    // Click \"Set to Received\" on Lab Procedure\r\n    WebForm form = wr.getFormWithID(\"inTransitForm\");\r\n    Button receivedButton = form.getButtons()[0];\r\n    assertEquals(\"Set to Received\", receivedButton.getText());\r\n    receivedButton.click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Laboratory Procedures\", wr.getTitle());\r\n    // Ensure the table of received lab procedures contains the modified lab procedure.\r\n    tbl = wr.getTableWithID(\"receivedTable\");\r\n    assertEquals(4, tbl.getRowCount());\r\n    // assertFalse(tbl.getCellAsText(2, 0).contains(\"There are no received lab procedures\"));\r\n    assertEquals(labProcID, tbl.getCellAsText(2, 0));// check that the lab proc is now here\r\n\r\n    // Check that table of in-transit lab procedures has no lab procedures\r\n    tbl = wr.getTableWithID(\"inTransitTable\");\r\n    assertEquals(19, tbl.getRowCount());\r\n    // assertTrue(tbl.getCellAsText(2, 0).contains(\"There are no lab procedures in transit\"));  // lab procedure ID\r\n}"},
 {"id":3955, "methodname":"testPatientViewLabProcedureResults()", "methodnamerefined":"testPatientViewLabProcedureResults", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatientViewLabProcedureResults", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatientViewLabProcedureResults()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"public void testPatientViewLabProcedureResults() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    WebConversation wc = login(\"22\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Lab Procedures\").click();\r\n    assertEquals(\"iTrust - View Lab Procedures\", wr.getTitle());\r\n    WebTable tbl = wr.getTableWithID(\"labProceduresTable\");\r\n    assertEquals(51, tbl.getRowCount());\r\n    int numericalColumn = 5;\r\n    assertEquals(\"\", tbl.getCellAsText(13, numericalColumn));\r\n    assertEquals(\"\", tbl.getCellAsText(12, numericalColumn));\r\n    assertEquals(\"\", tbl.getCellAsText(11, numericalColumn));\r\n    assertEquals(\"7\", tbl.getCellAsText(10, numericalColumn));\r\n    assertEquals(\"\", tbl.getCellAsText(9, numericalColumn));\r\n    assertEquals(\"\", tbl.getCellAsText(8, numericalColumn));\r\n    assertEquals(\"\", tbl.getCellAsText(7, numericalColumn));\r\n    assertEquals(\"5.23\", tbl.getCellAsText(6, numericalColumn));\r\n    assertEquals(\"\", tbl.getCellAsText(5, numericalColumn));\r\n    assertEquals(\"\", tbl.getCellAsText(4, numericalColumn));\r\n    assertEquals(\"\", tbl.getCellAsText(3, numericalColumn));\r\n    assertEquals(\"18\", tbl.getCellAsText(2, numericalColumn));\r\n    int statusColumn = 3;\r\n    assertEquals(\"In Transit\", tbl.getCellAsText(13, statusColumn));\r\n    assertEquals(\"Received\", tbl.getCellAsText(12, statusColumn));\r\n    assertEquals(\"Pending\", tbl.getCellAsText(11, statusColumn));\r\n    assertEquals(\"Completed\", tbl.getCellAsText(10, statusColumn));\r\n    assertEquals(\"In Transit\", tbl.getCellAsText(9, statusColumn));\r\n    assertEquals(\"Received\", tbl.getCellAsText(8, statusColumn));\r\n    assertEquals(\"Pending\", tbl.getCellAsText(7, statusColumn));\r\n    assertEquals(\"Completed\", tbl.getCellAsText(6, statusColumn));\r\n    assertEquals(\"In Transit\", tbl.getCellAsText(5, statusColumn));\r\n    assertEquals(\"Received\", tbl.getCellAsText(4, statusColumn));\r\n    assertEquals(\"Pending\", tbl.getCellAsText(3, statusColumn));\r\n    assertEquals(\"Completed\", tbl.getCellAsText(2, statusColumn));\r\n}"},
 {"id":3956, "methodname":"testPatientViewLabResults()", "methodnamerefined":"testPatientViewLabResults", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatientViewLabResults", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatientViewLabResults()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"public void testPatientViewLabResults() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Records\").click();\r\n    assertEquals(\"iTrust - View My Records\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n}"},
 {"id":3957, "methodname":"testPatient_LabProcedureView()", "methodnamerefined":"testPatient_LabProcedureView", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatient_LabProcedureView", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatient_LabProcedureView()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"public void testPatient_LabProcedureView() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patientLabProcedures();\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Lab Procedures\").click();\r\n    assertEquals(\"iTrust - View Lab Procedures\", wr.getTitle());\r\n    WebTable tbl = wr.getTableWithID(\"labProceduresTable\");\r\n    assertEquals(4, tbl.getRowCount());\r\n    assertEquals(\"Kelly Doctor\", tbl.getCellAsText(2, 0));\r\n    assertEquals(\"11/20/2011\", tbl.getCellAsText(2, 1));\r\n    assertEquals(\"Microscopic Observation\", tbl.getCellAsText(2, 2));\r\n    assertEquals(\"Completed\", tbl.getCellAsText(2, 3));\r\n    assertEquals(\"Its all done\", tbl.getCellAsText(2, 4));\r\n    assertEquals(\"85\", tbl.getCellAsText(2, 5));\r\n    assertEquals(\"grams\", tbl.getCellAsText(2, 6));\r\n    assertEquals(\"Normal\", tbl.getCellAsText(2, 7));\r\n}"},
 {"id":3958, "methodname":"testPatient_LabProcedureView2()", "methodnamerefined":"testPatient_LabProcedureView2", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatient_LabProcedureView2", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatient_LabProcedureView2()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"public void testPatient_LabProcedureView2() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patientLabProcedures();\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Lab Procedures\").click();\r\n    assertEquals(\"iTrust - View Lab Procedures\", wr.getTitle());\r\n    WebTable tbl = wr.getTableWithID(\"labProceduresTable\");\r\n    assertEquals(5, tbl.getRowCount());\r\n    assertEquals(\"Kelly Doctor\", tbl.getCellAsText(2, 0));\r\n    assertEquals(\"10/20/2011\", tbl.getCellAsText(2, 1));\r\n    assertEquals(\"Specimen volume\", tbl.getCellAsText(2, 2));\r\n    assertEquals(\"Completed\", tbl.getCellAsText(2, 3));\r\n    assertEquals(\"\", tbl.getCellAsText(2, 4));\r\n    assertEquals(\"79\", tbl.getCellAsText(2, 5));\r\n    assertEquals(\"ml\", tbl.getCellAsText(2, 6));\r\n    assertEquals(\"Abnormal\", tbl.getCellAsText(2, 7));\r\n}"},
 {"id":3959, "methodname":"testPatient_LabProcedureViewChart()", "methodnamerefined":"testPatient_LabProcedureViewChart", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatient_LabProcedureViewChart", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testPatient_LabProcedureViewChart()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"public void testPatient_LabProcedureViewChart() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patientLabProcedures();\r\n    WebConversation wc = login(\"21\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Lab Procedures\").click();\r\n    assertEquals(\"iTrust - View Lab Procedures\", wr.getTitle());\r\n    WebTable tbl = wr.getTableWithID(\"labProceduresTable\");\r\n    assertEquals(5, tbl.getRowCount());\r\n    wr = wr.getLinkWithID(\"viewResultsChart\").click();\r\n    assertEquals(\"Lab Procedure Results Chart\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"src=\"/iTrust/charts/\"));\r\n}"},
 {"id":3960, "methodname":"testReassignLabProcedure()", "methodnamerefined":"testReassignLabProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.http.LabProceduresTest.testReassignLabProcedure", "fullmethod":"edu.ncsu.csc.itrust.http.LabProceduresTest.testReassignLabProcedure()", "classid":541, "classname":"edu.ncsu.csc.itrust.http.LabProceduresTest", "shortclassname":"LabProceduresTest", "method":"public void testReassignLabProcedure() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from specific date\r\n    wr.getLinkWith(\"6/10/2007\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // Click the Reassign link.\r\n    WebTable tbl = wr.getTableWithID(\"labProceduresTable\");\r\n    assertEquals(\"Nice Guy\", tbl.getCellAsText(2, 1));\r\n    assertTrue(tbl.getCellAsText(2, 10).contains(\"Reassign\"));\r\n    wr = tbl.getTableCell(2, 10).getLinkWith(\"Reassign\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Reassign Lab Procedure\", wr.getTitle());\r\n    // Change the currently-assigned lab tech\r\n    form = wr.getFormWithID(\"reassignLabProcedureForm\");\r\n    form.setParameter(\"newLabTech\", \"5000000001\");\r\n    form.setParameter(\"labProcPriority\", \"1\");\r\n    form.getButtonWithID(\"setLabTech\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LAB_RESULTS_REASSIGN, 9000000000L, 2L, \"\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // Ensure the lab tech has been changed\r\n    tbl = wr.getTableWithID(\"labProceduresTable\");\r\n    assertEquals(\"Lab Dude\", tbl.getCellAsText(2, 1));\r\n}"},
 {"id":3961, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.LoginTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.LoginTest.-init-()", "classid":542, "classname":"edu.ncsu.csc.itrust.http.LoginTest", "shortclassname":"LoginTest", "method":"LoginTest() {\r\n}"},
 {"id":3962, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.LoginTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.LoginTest.setUp()", "classid":542, "classname":"edu.ncsu.csc.itrust.http.LoginTest", "shortclassname":"LoginTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n}"},
 {"id":3963, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.http.LoginTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.http.LoginTest.tearDown()", "classid":542, "classname":"edu.ncsu.csc.itrust.http.LoginTest", "shortclassname":"LoginTest", "method":"protected void tearDown() throws Exception {\r\n    super.tearDown();\r\n}"},
 {"id":3964, "methodname":"testNonNumericLogin()", "methodnamerefined":"testNonNumericLogin", "methodabbreviation":"edu.ncsu.csc.itrust.http.LoginTest.testNonNumericLogin", "fullmethod":"edu.ncsu.csc.itrust.http.LoginTest.testNonNumericLogin()", "classid":542, "classname":"edu.ncsu.csc.itrust.http.LoginTest", "shortclassname":"LoginTest", "method":"public void testNonNumericLogin() {\r\n    try {\r\n        // begin at the iTrust home page\r\n        WebConversation wc = new WebConversation();\r\n        WebResponse loginResponse = wc.getResponse(iTrustHTTPTest.ADDRESS);\r\n        // log in using the given username and password\r\n        WebForm form = loginResponse.getForms()[0];\r\n        form.setParameter(\"j_username\", \"foo\");\r\n        form.setParameter(\"j_password\", \"1234\");\r\n        WebResponse homePage = loginResponse.getForms()[0].submit();\r\n        assertFalse(homePage.getText().contains(\"NumberFormatException\"));\r\n    } catch (IOException e) {\r\n        fail(\"Exception occurred\");\r\n    } catch (SAXException e) {\r\n        fail(\"Exception occurred\");\r\n    }\r\n}"},
 {"id":3965, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsTest.-init-()", "classid":543, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsTest", "shortclassname":"MaintainStandardsTest", "method":"MaintainStandardsTest() {\r\n}"},
 {"id":3966, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsTest.setUp()", "classid":543, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsTest", "shortclassname":"MaintainStandardsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n    gen.cptCodes();\r\n}"},
 {"id":3967, "methodname":"testMaintainStandardsList1()", "methodnamerefined":"testMaintainStandardsList1", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsTest.testMaintainStandardsList1", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsTest.testMaintainStandardsList1()", "classid":543, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsTest", "shortclassname":"MaintainStandardsTest", "method":"/* Precondition: Admin exists in database and has authenticated successfully.\nAdmin Chooses to Administer CPT Codes\nAdmin Inputs Code 90736 with Description \"Shingles Vaccine\"\nAdmin Submits\n */\r\npublic void testMaintainStandardsList1() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit CPT codes\r\n    wr = wr.getLinkWith(\"Edit CPT ProcedureCodes\").click();\r\n    assertTrue(wr.getURL().toString().contains(\"auth/admin/editCPTProcedureCodes.jsp\"));\r\n    // add the cpt code\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"code\", \"90736\");\r\n    form.setParameter(\"description\", \"Shingles Vaccine\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Success: 90736 - Shingles Vaccine\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_PROCEDURE_CODE_ADD, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3968, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.-init-()", "classid":544, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase", "shortclassname":"MaintainStandardsUseCase", "method":"MaintainStandardsUseCase() {\r\n}"},
 {"id":3969, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.setUp()", "classid":544, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase", "shortclassname":"MaintainStandardsUseCase", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3970, "methodname":"testAddLOINC()", "methodnamerefined":"testAddLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testAddLOINC", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testAddLOINC()", "classid":544, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase", "shortclassname":"MaintainStandardsUseCase", "method":"/* Authenticate admin 90000000001\nAdmin Chooses to Edit LOINC Code \nAdmin Inputs Code: 10834-7, Component: Fungus Identified, Kind Of Property: Prid, Time Aspect: 24H, System: Body Fluid, Scale: Nominal, Method Type: Scoliosis \nAdmin Submits\n */\r\npublic void testAddLOINC() throws Exception {\r\n    // gen.admin1();\r\n    // gen.loincs();\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit LOINC Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain LOINC Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"code\", \"10834-7\");\r\n    form.setParameter(\"comp\", \"Fungus Identified\");\r\n    form.setParameter(\"kop\", \"Prid\");\r\n    form.setParameter(\"time\", \"24H\");\r\n    form.setParameter(\"system\", \"Body Fluid\");\r\n    form.setParameter(\"scale\", \"Nominal\");\r\n    form.setParameter(\"method\", \"Scoliosis\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    // verify change\r\n    assertTrue(wr.getURL().toString().contains(\"auth/admin/editLOINCCodes.jsp\"));\r\n    assertTrue(wr.getText().contains(\"Success: 10834-7 added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOINC_CODE_ADD, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3971, "methodname":"testAdminEnterNewICDCode()", "methodnamerefined":"testAdminEnterNewICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testAdminEnterNewICDCode", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testAdminEnterNewICDCode()", "classid":544, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase", "shortclassname":"MaintainStandardsUseCase", "method":"public void testAdminEnterNewICDCode() throws Exception {\r\n    // gen.clearAllTables();\r\n    // gen.standardData();\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ICD Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain ICD Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"code\", \"99.3\");\r\n    form.setCheckbox(\"classification\", true);\r\n    form.setParameter(\"description\", \"Tintinnabulum Bovi Deficiency\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Success: 99.3 - Tintinnabulum Bovi Deficiency added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_CODE_ADD, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3972, "methodname":"testAdminUpdateICDCode()", "methodnamerefined":"testAdminUpdateICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testAdminUpdateICDCode", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testAdminUpdateICDCode()", "classid":544, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase", "shortclassname":"MaintainStandardsUseCase", "method":"public void testAdminUpdateICDCode() throws Exception {\r\n    // gen.clearAllTables();\r\n    // gen.standardData();\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ICD Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain ICD Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"code\", \"99.3\");\r\n    form.setCheckbox(\"classification\", true);\r\n    form.setParameter(\"description\", \"Tintinnabulum Bovi Deficiency\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Success: 99.3 - Tintinnabulum Bovi Deficiency added\"));\r\n    wr = wr.getLinkWith(\"Tintinnabulum Bovi Deficiency\").click();\r\n    form = wr.getForms()[0];\r\n    form.setCheckbox(\"classification\", false);\r\n    form.getSubmitButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Success: 1 row(s) updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_CODE_EDIT, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3973, "methodname":"testAdminUpdateICDCode2()", "methodnamerefined":"testAdminUpdateICDCode2", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testAdminUpdateICDCode2", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testAdminUpdateICDCode2()", "classid":544, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase", "shortclassname":"MaintainStandardsUseCase", "method":"public void testAdminUpdateICDCode2() throws Exception {\r\n    // gen.clearAllTables();\r\n    // gen.standardData();\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ICD Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain ICD Codes\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Tuberculosis of the lung\").click();\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"description\", \"Way too long of a description which is limited to a certain size, how bif can it go I wonder?\");\r\n    form.getSubmitButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Description: Up to 30 characters, letters, numbers, and a space\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DIAGNOSIS_CODE_EDIT, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3974, "methodname":"testUpdateLOINC()", "methodnamerefined":"testUpdateLOINC", "methodabbreviation":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testUpdateLOINC", "fullmethod":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase.testUpdateLOINC()", "classid":544, "classname":"edu.ncsu.csc.itrust.http.MaintainStandardsUseCase", "shortclassname":"MaintainStandardsUseCase", "method":"/* Authenticate admin 90000000001\nAdmin Chooses to Edit LOINC Code \nAdmin Inputs Code: 10666-6, Component: Fungus Identified, Kind Of Property: Vol, Time Aspect: Pt, System: Stool, Scale: Nominal, Method Type: Multiple Personality \nAdmin Submits\n */\r\npublic void testUpdateLOINC() throws Exception {\r\n    // gen.clearAllTables();\r\n    // gen.admin1();\r\n    // gen.loincs();\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit LOINC Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain LOINC Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"code\", \"10666-6\");\r\n    form.setParameter(\"comp\", \"Fungus Identified\");\r\n    form.setParameter(\"kop\", \"Vol\");\r\n    form.setParameter(\"time\", \"Pt\");\r\n    form.setParameter(\"system\", \"Stool\");\r\n    form.setParameter(\"scale\", \"Nominal\");\r\n    form.setParameter(\"method\", \"Multiple Personality\");\r\n    form.getSubmitButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    // verify change\r\n    assertTrue(wr.getURL().toString().contains(\"auth/admin/editLOINCCodes.jsp\"));\r\n    assertTrue(wr.getText().contains(\"Success: 10666-6 updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOINC_CODE_EDIT, 9000000001L, 0L, \"\");\r\n}"},
 {"id":3975, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.-init-()", "classid":545, "classname":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest", "shortclassname":"ManageHospitalListingTest", "method":"ManageHospitalListingTest() {\r\n}"},
 {"id":3976, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.setUp()", "classid":545, "classname":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest", "shortclassname":"ManageHospitalListingTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3977, "methodname":"testCreateHospital()", "methodnamerefined":"testCreateHospital", "methodabbreviation":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.testCreateHospital", "fullmethod":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.testCreateHospital()", "classid":545, "classname":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest", "shortclassname":"ManageHospitalListingTest", "method":"public void testCreateHospital() throws Exception {\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Manage Hospital Listing\").click();\r\n    assertEquals(\"iTrust - Maintain Hospital Listing and Assignments\", wr.getTitle());\r\n    // Fill in the form\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hospitalID\", \"777\");\r\n    form.setParameter(\"hospitalName\", \"Pokemon Center\");\r\n    form.setParameter(\"hospitalAddress\", \"123 Centenial Parkway\");\r\n    form.setParameter(\"hospitalCity\", \"Raleigh\");\r\n    form.setParameter(\"hospitalState\", \"NC\");\r\n    form.setParameter(\"hospitalZip\", \"27607\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    // Ensure that the form submitted and validated successfully\r\n    /* assertTrue(wr.getText().contains(\"Success\"));\n\n    // Make sure the new hospital information is present\n    assertTrue(wr.getText().contains(\"777\"));\n    assertTrue(wr.getText().contains(\"Pokemon Center\"));\n    assertTrue(wr.getText().contains(\"123 Centenial Parkway\"));\n    assertTrue(wr.getText().contains(\"Raleigh\"));\n    assertTrue(wr.getText().contains(\"NC\"));\n    assertTrue(wr.getText().contains(\"27607\"));\n     */\r\n}"},
 {"id":3978, "methodname":"testNameTooLong()", "methodnamerefined":"testNameTooLong", "methodabbreviation":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.testNameTooLong", "fullmethod":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.testNameTooLong()", "classid":545, "classname":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest", "shortclassname":"ManageHospitalListingTest", "method":"public void testNameTooLong() throws Exception {\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Manage Hospital Listing\").click();\r\n    assertEquals(\"iTrust - Maintain Hospital Listing and Assignments\", wr.getTitle());\r\n    // Fill in the form with a name longer than 30 characters\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hospitalID\", \"777\");\r\n    form.setParameter(\"hospitalName\", \"ABCABCABCABCABCABCABCABCABCABCABC\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    // Ensure that the form failed validation\r\n    // assertTrue(wr.getText().contains(\"This form has not been validated correctly\"));\r\n}"},
 {"id":3979, "methodname":"testUpdateHospital()", "methodnamerefined":"testUpdateHospital", "methodabbreviation":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.testUpdateHospital", "fullmethod":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.testUpdateHospital()", "classid":545, "classname":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest", "shortclassname":"ManageHospitalListingTest", "method":"public void testUpdateHospital() throws Exception {\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Manage Hospital Listing\").click();\r\n    assertEquals(\"iTrust - Maintain Hospital Listing and Assignments\", wr.getTitle());\r\n    // Fill in the form, but change the name of the hospital\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hospitalID\", \"5\");\r\n    form.setParameter(\"hospitalName\", \"Facebook Insane Asylum\");\r\n    form.setParameter(\"hospitalAddress\", \"2 Yarborough Drive\");\r\n    form.setParameter(\"hospitalCity\", \"Raleigh\");\r\n    form.setParameter(\"hospitalState\", \"NC\");\r\n    form.setParameter(\"hospitalZip\", \"27607\");\r\n    form.getSubmitButtons()[1].click();\r\n    /* wr = wc.getCurrentPage();\n\n    // Ensure that the form submitted and validated successfully\n    assertTrue(wr.getText().contains(\"Success\"));\n\n    // Make sure the new hospital information is present\n    assertTrue(wr.getText().contains(\"5\"));\n    assertTrue(wr.getText().contains(\"Facebook Insane Asylum\"));\n    assertTrue(wr.getText().contains(\"2 Yarborough Drive\"));\n    assertTrue(wr.getText().contains(\"Raleigh\"));\n    assertTrue(wr.getText().contains(\"NC\"));\n    assertTrue(wr.getText().contains(\"27607\"));\n\n    assertFalse(wr.getText().contains(\"Facebook Rehab Center\"));\n     */\r\n}"},
 {"id":3980, "methodname":"testUpdateWithoutID()", "methodnamerefined":"testUpdateWithoutID", "methodabbreviation":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.testUpdateWithoutID", "fullmethod":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest.testUpdateWithoutID()", "classid":545, "classname":"edu.ncsu.csc.itrust.http.ManageHospitalListingTest", "shortclassname":"ManageHospitalListingTest", "method":"public void testUpdateWithoutID() throws Exception {\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Manage Hospital Listing\").click();\r\n    assertEquals(\"iTrust - Maintain Hospital Listing and Assignments\", wr.getTitle());\r\n    // Fill in the form, but change the name of the hospital\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hospitalName\", \"Facebook Insane Asylum\");\r\n    form.setParameter(\"hospitalAddress\", \"2 Yarborough Drive\");\r\n    form.setParameter(\"hospitalCity\", \"Raleigh\");\r\n    form.setParameter(\"hospitalState\", \"NC\");\r\n    form.setParameter(\"hospitalZip\", \"27607\");\r\n    form.getSubmitButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    // Ensure that the form failed validation\r\n    // assertTrue(wr.getText().contains(\"This form has not been validated correctly\"));\r\n}"},
 {"id":3981, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.-init-()", "classid":546, "classname":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest", "shortclassname":"MessagingUseCaseTest", "method":"MessagingUseCaseTest() {\r\n}"},
 {"id":3982, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.setUp()", "classid":546, "classname":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest", "shortclassname":"MessagingUseCaseTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();// clear tables is called in super\r\n\r\n    HttpUnitOptions.setScriptingEnabled(false);\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":3983, "methodname":"testHCPSendMessage()", "methodnamerefined":"testHCPSendMessage", "methodabbreviation":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testHCPSendMessage", "fullmethod":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testHCPSendMessage()", "classid":546, "classname":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest", "shortclassname":"MessagingUseCaseTest", "method":"public void testHCPSendMessage() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Outbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OUTBOX_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Compose a Message\").click();\r\n    // Select Patient\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    wr = wf.submit();\r\n    // Submit message\r\n    wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getScriptableObject().setParameterValue(\"subject\", \"Visit Request\");\r\n    wf.getScriptableObject().setParameterValue(\"messageBody\", \"We really need to have a visit.\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MESSAGE_SEND, 9000000000L, 2L, \"\");\r\n    // Create timestamp\r\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n    Date date = new Date();\r\n    String stamp = dateFormat.format(date);\r\n    assertTrue(wr.getText().contains(\"My Sent Messages\"));\r\n    // Check message in outbox\r\n    wr = wr.getLinkWith(\"Message Outbox\").click();\r\n    assertTrue(wr.getText().contains(\"Visit Request\"));\r\n    assertTrue(wr.getText().contains(\"Andy Programmer\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getText().contains(stamp));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OUTBOX_VIEW, 9000000000L, 0L, \"\");\r\n    // Check bolded message appears in patient\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOGOUT, 9000000000L, 9000000000L, \"\");\r\n    // wr = wr.getLinkWith(\"Log into iTrust\").click();\r\n    wc = login(\"2\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Inbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.INBOX_VIEW, 2L, 0L, \"\");\r\n    assertEquals(\"font-weight: bold;\", wr.getTableWithID(\"mailbox\").getRows()[1].getAttribute(\"style\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Visit Request\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(stamp));\r\n}"},
 {"id":3984, "methodname":"testHCPSendReplySingleCCRecipient()", "methodnamerefined":"testHCPSendReplySingleCCRecipient", "methodabbreviation":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testHCPSendReplySingleCCRecipient", "fullmethod":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testHCPSendReplySingleCCRecipient()", "classid":546, "classname":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest", "shortclassname":"MessagingUseCaseTest", "method":"public void testHCPSendReplySingleCCRecipient() throws Exception {\r\n    gen.clearMessages();\r\n    gen.messages6();\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Inbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.INBOX_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Read\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MESSAGE_VIEW, 9000000000L, 22L, \"Viewed Message: 3\");\r\n    // Message List\r\n    wr = wr.getLinkWith(\"Reply\").click();\r\n    // Submit reply\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.setParameter(\"cc\", \"9000000007\");\r\n    wf.getScriptableObject().setParameterValue(\"messageBody\", \"I will not be able to make my next schedulded appointment.  Is there anyone who can book another time?\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MESSAGE_SEND, 9000000000L, 22L, \"9000000007\");\r\n    // Create timestamp\r\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n    Date date = new Date();\r\n    String stamp = dateFormat.format(date);\r\n    // Check message in outbox\r\n    wr = wr.getLinkWith(\"Message Outbox\").click();\r\n    assertTrue(wr.getText().contains(\"RE: Appointment rescheduling\"));\r\n    assertTrue(wr.getText().contains(\"Fozzie Bear\"));\r\n    assertTrue(wr.getText().contains(\"Beaker Beaker\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getText().contains(stamp));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OUTBOX_VIEW, 9000000000L, 0L, \"\");\r\n    // Check bolded message appears in hcp\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOGOUT, 9000000000L, 9000000000L, \"\");\r\n    // wr = wr.getLinkWith(\"Log into iTrust\").click();\r\n    wc = login(\"22\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 22L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Inbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.INBOX_VIEW, 22L, 0L, \"\");\r\n    assertEquals(\"font-weight: bold;\", wr.getTableWithID(\"mailbox\").getRows()[1].getAttribute(\"style\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"RE: Appointment rescheduling\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(stamp));\r\n    // Check bolded message appears in hcp\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    // wr = wr.getLinkWith(\"Log into iTrust\").click();\r\n    wc = login(\"9000000007\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000007L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Inbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.INBOX_VIEW, 9000000007L, 0L, \"\");\r\n    assertEquals(\"font-weight: bold;\", wr.getTableWithID(\"mailbox\").getRows()[1].getAttribute(\"style\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"RE: Appointment rescheduling\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(stamp));\r\n}"},
 {"id":3985, "methodname":"testPatientSendMessageMultiRecipients()", "methodnamerefined":"testPatientSendMessageMultiRecipients", "methodabbreviation":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testPatientSendMessageMultiRecipients", "fullmethod":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testPatientSendMessageMultiRecipients()", "classid":546, "classname":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest", "shortclassname":"MessagingUseCaseTest", "method":"/* public void testHCPSortInboxBySender() throws Exception {\n// Create DB for this test case\nString DIR = \"sql/data\";\nDAOFactory factory = TestDAOFactory.getTestInstance();\nnew DBBuilder(factory).executeSQLFile(DIR + \"/clearMessages.sql\");\nnew DBBuilder(factory).executeSQLFile(DIR + \"/messageCase1.sql\");\n\n// Login\nWebConversation wc = login(\"9000000000\", \"pw\");\nWebResponse wr = wc.getCurrentPage();\nassertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\n\nwr = wr.getLinkWith(\"Message Inbox\").click();\t\nassertLogged(TransactionType.INBOX_VIEW, 9000000000L, 0L, \"\");\n\n// Sort by name in ascending order\nwr.getForms()[0].setParameter(\"sortby\", \"name\");\nwr.getForms()[0].setParameter(\"sorthow\", \"asce\");\nwr = wr.getForms()[0].submit();\n\n// Check order\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Random Person\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Appointment\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"2010-01-19 07:58\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[2].getText().contains(\"Random Person\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[2].getText().contains(\"Office Visit\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[2].getText().contains(\"2010-01-29 08:01\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[3].getText().contains(\"Random Person\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[3].getText().contains(\"RE: Lab Procedure\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[3].getText().contains(\"2010-01-29 17:58\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[4].getText().contains(\"Andy Programmer\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[4].getText().contains(\"Lab Results\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[4].getText().contains(\"2010-01-13 13:46\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[5].getText().contains(\"Andy Programmer\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[5].getText().contains(\"Prescription\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[5].getText().contains(\"2010-01-31 12:12\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[6].getText().contains(\"Andy Programmer\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[6].getText().contains(\"Scratchy Throat\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[6].getText().contains(\"2010-02-02 13:03\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[7].getText().contains(\"Baby Programmer\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[7].getText().contains(\"Remote Monitoring Question\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[7].getText().contains(\"2010-01-07 09:15\"));\n}\n\npublic void testPatientSortOutboxByTimestamp() throws Exception {\n// Create DB for this test case\nString DIR = \"sql/data\";\nDAOFactory factory = TestDAOFactory.getTestInstance();\nnew DBBuilder(factory).executeSQLFile(DIR + \"/clearMessages.sql\");\nnew DBBuilder(factory).executeSQLFile(DIR + \"/messageCase2.sql\");\n\n// Login\nWebConversation wc = login(\"1\", \"pw\");\nWebResponse wr = wc.getCurrentPage();\nassertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\n\nwr = wr.getLinkWith(\"Message Outbox\").click();\nassertLogged(TransactionType.OUTBOX_VIEW, 1L, 0L, \"\");\n\n// Sort by timestamp in descending order\nwr.getForms()[0].setParameter(\"sortby\", \"time\");\nwr.getForms()[0].setParameter(\"sorthow\", \"desc\");\nwr = wr.getForms()[0].submit();\n\n// Make sure messages are sorted by timestamp in descending order\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Kelly Doctor\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"RE: Appointment\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"2010-02-01 09:12\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[2].getText().contains(\"Kelly Doctor\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[2].getText().contains(\"Telemedicine\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[2].getText().contains(\"2010-01-31 16:01\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[3].getText().contains(\"Gandalf Stormcrow\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[3].getText().contains(\"Appointment Reschedule\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[3].getText().contains(\"2010-01-16 11:55\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[4].getText().contains(\"Kelly Doctor\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[4].getText().contains(\"Missed Appointment\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[4].getText().contains(\"2010-01-08 14:59\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[5].getText().contains(\"Kelly Doctor\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[5].getText().contains(\"Aspirin Side Effects\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[5].getText().contains(\"2009-12-29 15:33\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[6].getText().contains(\"Kelly Doctor\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[6].getText().contains(\"Old Medicine\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[6].getText().contains(\"2009-12-02 11:15\"));\n}\n\npublic void testHCPtestMessageFilter() throws Exception {\n// Create DB for this test case\nString DIR = \"sql/data\";\nDAOFactory factory = TestDAOFactory.getTestInstance();\nnew DBBuilder(factory).executeSQLFile(DIR + \"/clearMessages.sql\");\nnew DBBuilder(factory).executeSQLFile(DIR + \"/messageCase3.sql\");\n\n// Login\nWebConversation wc = login(\"9000000000\", \"pw\");\nWebResponse wr = wc.getCurrentPage();\nassertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\n\nwr = wr.getLinkWith(\"Message Inbox\").click();\nassertLogged(TransactionType.INBOX_VIEW, 9000000000L, 0L, \"\");\n\nwr = wr.getLinkWith(\"Edit Filter\").click();\n\n// Enter filter information where has words is influenza\nwr.getForms()[0].setParameter(\"sender\", \"\");\nwr.getForms()[0].setParameter(\"subject\", \"\");\nwr.getForms()[0].setParameter(\"hasWords\", \"influenza\");\nwr.getForms()[0].setParameter(\"startDate\", \"\");\nwr.getForms()[0].setParameter(\"notWords\", \"\");\nwr.getForms()[0].setParameter(\"endDate\", \"\");\nwr = wr.getForms()[0].submit(wr.getForms()[0].getSubmitButton(\"test\"));\n\n// Make sure the proper message exists in the right order\nassertTrue(wr.getTables()[2].getRows()[1].getText().contains(\"Andy Programmer\"));\nassertTrue(wr.getTables()[2].getRows()[1].getText().contains(\"RE: Influenza Vaccine\"));\nassertTrue(wr.getTables()[2].getRows()[1].getText().contains(\"2010-03-25 16:30\"));\n\nassertTrue(wr.getTables()[2].getRows()[2].getText().contains(\"Andy Programmer\"));\nassertTrue(wr.getTables()[2].getRows()[2].getText().contains(\"Influenza Vaccine\"));\nassertTrue(wr.getTables()[2].getRows()[2].getText().contains(\"2010-03-25 16:15\"));\n\nassertTrue(wr.getTables()[2].getRows()[3].getText().contains(\"Random Person\"));\nassertTrue(wr.getTables()[2].getRows()[3].getText().contains(\"Flu Season\"));\nassertTrue(wr.getTables()[2].getRows()[3].getText().contains(\"2009-12-03 08:26\"));\n\nassertTrue(wr.getTables()[2].getRows()[4].getText().contains(\"Baby Programmer\"));\nassertTrue(wr.getTables()[2].getRows()[4].getText().contains(\"Bad cough\"));\nassertTrue(wr.getTables()[2].getRows()[4].getText().contains(\"2008-06-02 20:46\"));\t\n}\n\npublic void testpatientApplyMessageFilter() throws Exception {\n// Create DB for this test case\nString DIR = \"sql/data\";\nDAOFactory factory = TestDAOFactory.getTestInstance();\nnew DBBuilder(factory).executeSQLFile(DIR + \"/clearMessages.sql\");\nnew DBBuilder(factory).executeSQLFile(DIR + \"/messageCase4.sql\");\n\n// Login\nWebConversation wc = login(\"2\", \"pw\");\nWebResponse wr = wc.getCurrentPage();\nassertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\n\nwr = wr.getLinkWith(\"Message Inbox\").click();\nassertLogged(TransactionType.INBOX_VIEW, 2L, 0L, \"\");\nwr = wr.getLinkWith(\"Apply Filter\").click();\n\n// Make sure the proper message exists in the right order\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Kelly Doctor\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"RE: Influenza Vaccine\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"2010-03-25 16:39\"));\n\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[2].getText().contains(\"Kelly Doctor\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[2].getText().contains(\"RE: Vaccines\"));\nassertTrue(wr.getTableWithID(\"mailbox\").getRows()[2].getText().contains(\"2010-01-21 20:22\"));\t\n}\n\npublic void testpatientApplyMessageFilter2() throws Exception {\n// Create DB for this test case\nString DIR = \"sql/data\";\nDAOFactory factory = TestDAOFactory.getTestInstance();\nnew DBBuilder(factory).executeSQLFile(DIR + \"/clearMessages.sql\");\nnew DBBuilder(factory).executeSQLFile(DIR + \"/messageCase3.sql\");\n\n// Login\nWebConversation wc = login(\"2\", \"pw\");\nWebResponse wr = wc.getCurrentPage();\nassertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\n\nwr = wr.getLinkWith(\"Message Inbox\").click();\nassertLogged(TransactionType.INBOX_VIEW, 2L, 0L, \"\");\nwr = wr.getLinkWith(\"Edit Filter\").click();\n\n// Enter filter information where has words is influenza\nwr.getForms()[0].setParameter(\"sender\", \"\");\nwr.getForms()[0].setParameter(\"subject\", \"\");\nwr.getForms()[0].setParameter(\"hasWords\", \"\");\nwr.getForms()[0].setParameter(\"startDate\", \"04/08/2010\");\nwr.getForms()[0].setParameter(\"notWords\", \"\");\nwr.getForms()[0].setParameter(\"endDate\", \"04/07/2010\");\nwr = wr.getForms()[0].submit(wr.getForms()[0].getSubmitButton(\"test\"));\n\n// Make sure error message is displayed\nassertTrue(wr.getText().contains(\"Error: The end date cannot be before the start date.\"));\t\n}\n\npublic void testHCPtestMessageFilter2 () throws Exception {\n// Create DB for this test case\nString DIR = \"sql/data\";\nDAOFactory factory = TestDAOFactory.getTestInstance();\nnew DBBuilder(factory).executeSQLFile(DIR + \"/clearMessages.sql\");\nnew DBBuilder(factory).executeSQLFile(DIR + \"/messageCase5.sql\");\n\n// Login\nWebConversation wc = login(\"9000000000\", \"pw\");\nWebResponse wr = wc.getCurrentPage();\nassertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\n\nwr = wr.getLinkWith(\"Message Inbox\").click();\nassertLogged(TransactionType.INBOX_VIEW, 9000000000L, 0L, \"\");\n\nwr = wr.getLinkWith(\"Edit Filter\").click();\n\n// Enter filter information where has words is influenza\nwr.getForms()[0].setParameter(\"sender\", \"\");\nwr.getForms()[0].setParameter(\"subject\", \"\");\nwr.getForms()[0].setParameter(\"hasWords\", \"influenza\");\nwr.getForms()[0].setParameter(\"startDate\", \"\");\nwr.getForms()[0].setParameter(\"notWords\", \"\");\nwr.getForms()[0].setParameter(\"endDate\", \"\");\nwr = wr.getForms()[0].submit(wr.getForms()[0].getSubmitButton(\"test\"));\n\n// Make sure the proper message exists in the right order\nassertTrue(wr.getTables()[2].getRows()[1].getText().contains(\"Andy Programmer\"));\nassertTrue(wr.getTables()[2].getRows()[1].getText().contains(\"Influenza Vaccine\"));\nassertTrue(wr.getTables()[2].getRows()[1].getText().contains(\"2010-03-25 16:15\"));\n}\n */\r\npublic void testPatientSendMessageMultiRecipients() throws Exception {\r\n    gen.messagingCcs();\r\n    // Login\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Compose a Message\").click();\r\n    // Select Patient\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getScriptableObject().setParameterValue(\"dlhcp\", \"9000000003\");\r\n    wr = wf.submit();\r\n    // Submit message\r\n    wf = wr.getFormWithID(\"mainForm\");\r\n    wf.setParameter(\"cc\", \"9000000000\");\r\n    wf.getScriptableObject().setParameterValue(\"subject\", \"This is a message to multiple recipients\");\r\n    wf.getScriptableObject().setParameterValue(\"messageBody\", \"We really need to have a visit!\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MESSAGE_SEND, 1L, 9000000003L, \"9000000000\");\r\n    String entry = wr.getTableWithID(\"mailbox\").getRows()[1].getText();\r\n    assertTrue(entry.contains(\"Gandalf Stormcrow\"));\r\n    assertTrue(entry.contains(\"Kelly Doctor\"));\r\n    assertTrue(entry.contains(\"This is a message to multiple recipients\"));\r\n}"},
 {"id":3986, "methodname":"testPatientSendReply()", "methodnamerefined":"testPatientSendReply", "methodabbreviation":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testPatientSendReply", "fullmethod":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testPatientSendReply()", "classid":546, "classname":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest", "shortclassname":"MessagingUseCaseTest", "method":"public void testPatientSendReply() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Inbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.INBOX_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Read\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MESSAGE_VIEW, 2L, 9000000000L, \"\");\r\n    // Message List\r\n    wr = wr.getLinkWith(\"Reply\").click();\r\n    // Submit reply\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.getScriptableObject().setParameterValue(\"messageBody\", \"Which office visit did you update?\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MESSAGE_SEND, 2L, 9000000000L, \"\");\r\n    // Create timestamp\r\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n    Date date = new Date();\r\n    String stamp = dateFormat.format(date);\r\n    // Check message in outbox\r\n    wr = wr.getLinkWith(\"Message Outbox\").click();\r\n    assertTrue(wr.getText().contains(\"RE: Office Visit Updated\"));\r\n    assertTrue(wr.getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getText().contains(stamp));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OUTBOX_VIEW, 2L, 0L, \"\");\r\n    // Check bolded message appears in hcp\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOGOUT, 2L, 2L, \"\");\r\n    // wr = wr.getLinkWith(\"Log into iTrust\").click();\r\n    wc = login(\"9000000000\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Inbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.INBOX_VIEW, 9000000000L, 0L, \"\");\r\n    assertEquals(\"font-weight: bold;\", wr.getTableWithID(\"mailbox\").getRows()[1].getAttribute(\"style\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Andy Programmer\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"RE: Office Visit Updated\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(stamp));\r\n}"},
 {"id":3987, "methodname":"testPatientSendReplyMultipleRecipients()", "methodnamerefined":"testPatientSendReplyMultipleRecipients", "methodabbreviation":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testPatientSendReplyMultipleRecipients", "fullmethod":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest.testPatientSendReplyMultipleRecipients()", "classid":546, "classname":"edu.ncsu.csc.itrust.http.MessagingUseCaseTest", "shortclassname":"MessagingUseCaseTest", "method":"public void testPatientSendReplyMultipleRecipients() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Inbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.INBOX_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Read\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MESSAGE_VIEW, 2L, 9000000000L, \"\");\r\n    // Message List\r\n    wr = wr.getLinkWith(\"Reply\").click();\r\n    // Submit reply\r\n    WebForm wf = wr.getFormWithID(\"mainForm\");\r\n    wf.setParameter(\"cc\", \"9000000003\");\r\n    wf.getScriptableObject().setParameterValue(\"messageBody\", \"Which office visit did you update?\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MESSAGE_SEND, 2L, 9000000000L, \"9000000003\");\r\n    // Create timestamp\r\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n    Date date = new Date();\r\n    String stamp = dateFormat.format(date);\r\n    // Check message in outbox\r\n    wr = wr.getLinkWith(\"Message Outbox\").click();\r\n    assertTrue(wr.getText().contains(\"RE: Office Visit Updated\"));\r\n    assertTrue(wr.getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getText().contains(\"Gandalf Stormcrow\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getText().contains(stamp));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OUTBOX_VIEW, 2L, 0L, \"\");\r\n    // Check bolded message appears in hcp\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOGOUT, 2L, 2L, \"\");\r\n    // wr = wr.getLinkWith(\"Log into iTrust\").click();\r\n    wc = login(\"9000000000\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Inbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.INBOX_VIEW, 9000000000L, 0L, \"\");\r\n    assertEquals(\"font-weight: bold;\", wr.getTableWithID(\"mailbox\").getRows()[1].getAttribute(\"style\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Andy Programmer\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"RE: Office Visit Updated\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(stamp));\r\n    // Check bolded message appears in hcp\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    // wr = wr.getLinkWith(\"Log into iTrust\").click();\r\n    wc = login(\"9000000003\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000003L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Message Inbox\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.INBOX_VIEW, 9000000003L, 0L, \"\");\r\n    assertEquals(\"font-weight: bold;\", wr.getTableWithID(\"mailbox\").getRows()[1].getAttribute(\"style\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"Andy Programmer\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(\"RE: Office Visit Updated\"));\r\n    assertTrue(wr.getTableWithID(\"mailbox\").getRows()[1].getText().contains(stamp));\r\n}"},
 {"id":3988, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.-init-()", "classid":547, "classname":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest", "shortclassname":"MonitorAdverseEventTest", "method":"MonitorAdverseEventTest() {\r\n}"},
 {"id":3989, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.setUp()", "classid":547, "classname":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest", "shortclassname":"MonitorAdverseEventTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n    gen.hcp0();\r\n    gen.pha1();\r\n    gen.patient1();\r\n    // gen.patient2();\r\n    gen.patient3();\r\n    gen.patient4();\r\n    gen.patient10();\r\n    gen.patient13();\r\n}"},
 {"id":3990, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.tearDown()", "classid":547, "classname":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest", "shortclassname":"MonitorAdverseEventTest", "method":"@Override\r\nprotected void tearDown() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":3991, "methodname":"testGetBarChart()", "methodnamerefined":"testGetBarChart", "methodabbreviation":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.testGetBarChart", "fullmethod":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.testGetBarChart()", "classid":547, "classname":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest", "shortclassname":"MonitorAdverseEventTest", "method":"/* HCP 9000000000 administered Hepatitis B immunization\nto 6 patients between 12/31/2008 and 5/19/2009, who all\nreported adverse events\n\nAuthenticate PHA\nMID: 7000000001\nPassword: pw\nChoose option Monitor Adverse Events\nChoose date range 08/05/2000 through 10/17/2009\nChoose to view adverse events\nSelect to view bar chart for Hepatitis B immunization (CPT Code: 90371)\n */\r\npublic void testGetBarChart() throws Exception {\r\n    gen.adverseEvent3();\r\n    // login pha\r\n    WebConversation wc = login(\"7000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - PHA Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 7000000001L, 0L, \"\");\r\n    // click Monitor Adverse Events\r\n    wr = wr.getLinkWith(\"Monitor Adverse Events\").click();\r\n    assertEquals(\"iTrust - Monitor Adverse Events\", wr.getTitle());\r\n    // choose date range\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"08/05/2000\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"10/17/2009\");\r\n    form.getButtons()[3].click();\r\n    wr = wc.getCurrentPage();\r\n    WebTable wt = wr.getTableStartingWith(\"Immunization\");\r\n    assertTrue(((wt.getRowCount()) == 7));\r\n    // view bar chart\r\n    // form = wr.getForms()[0];\r\n    wr = wr.getLinkWith(\"View Chart\").click();\r\n    assertTrue(wr.getText().contains(\"src=\"/iTrust/charts/\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ADVERSE_EVENT_CHART_VIEW, 7000000001L, 0L, \"\");\r\n}"},
 {"id":3992, "methodname":"testRemoveImmunizationAdverseEventReport()", "methodnamerefined":"testRemoveImmunizationAdverseEventReport", "methodabbreviation":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.testRemoveImmunizationAdverseEventReport", "fullmethod":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.testRemoveImmunizationAdverseEventReport()", "classid":547, "classname":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest", "shortclassname":"MonitorAdverseEventTest", "method":"/* HCP 9000000000 administered Hepatitis B immunization\nto Patient 1 (on his 3/22/2009 Office Visit) \n\nPatient 1 has reported an Adverse Event for the \nHepatitis B immunization (90371) on 5/19/2009 at 8:34AM \nwith description \ufffdA rash began spreading outward from the injection spot\ufffd \n\nAuthenticate PHA\nMID: 7000000001\nPassword: pw\nChoose option Monitor Adverse Events\nChoose date range 08/05/2000 through 10/17/2009\nChoose to view adverse events\nSelect the 8/12/2007 Adverse Event Report by Random Person, \nfor Hepatitis B immunization (CPT Code: 90371)\nRemove adverse event report\n */\r\npublic void testRemoveImmunizationAdverseEventReport() throws Exception {\r\n    gen.adverseEvent2();\r\n    // login pha\r\n    WebConversation wc = login(\"7000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - PHA Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 7000000001L, 0L, \"\");\r\n    // click Monitor Adverse Events\r\n    wr = wr.getLinkWith(\"Monitor Adverse Events\").click();\r\n    assertEquals(\"iTrust - Monitor Adverse Events\", wr.getTitle());\r\n    // choose date range\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"08/05/2000\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"10/17/2009\");\r\n    form.getButtons()[3].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Hepatitis B(90371)\"));\r\n    // get details of report\r\n    wr = wr.getLinkWith(\"Get Details\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.ADVERSE_EVENT_VIEW, 7000000001L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"Random Person\"));\r\n    assertTrue(wr.getText().contains(\"Hepatitis B (90371)\"));\r\n    assertTrue(wr.getText().contains(\"2009-05-19 08:34:00.0\"));\r\n    assertTrue(wr.getText().contains(\"A rash began spreading outward from the injection spot\"));\r\n    // remove report\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Report successfully removed\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ADVERSE_EVENT_REMOVE, 7000000001L, 0L, \"\");\r\n}"},
 {"id":3993, "methodname":"testViewDrugAdverseEvents()", "methodnamerefined":"testViewDrugAdverseEvents", "methodabbreviation":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.testViewDrugAdverseEvents", "fullmethod":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest.testViewDrugAdverseEvents()", "classid":547, "classname":"edu.ncsu.csc.itrust.http.MonitorAdverseEventTest", "shortclassname":"MonitorAdverseEventTest", "method":"/* HCP 9000000000 prescribed Citalopram Hydrobromide (54868-4985) \nto Patient 2 (on his 5/10/2007 Office Visit) \nwith start date 6/15/2007, end date 12/15/2007, \ndosage 10mg, and instructions \ufffdTake once daily with water\ufffd \n\nPatient 2 has reported an Adverse Event for the prescription drug \nCitalopram Hydrobromide (54868-4985) on 8/12/2007 at 3:10PM \nwith description \ufffdStomach cramps and migraine headaches after taking this drug\ufffd \n\nAuthenticate PHA\nMID: 7000000001\nPassword: pw\nChoose option Monitor Adverse Events\nChoose date range 02/05/1990 through 10/15/2009\nChoose to view adverse events\nSelect the 8/12/2007 Adverse Event Report by Andy Programmer, \nfor prescription drug Citalopram Hydrobromide (ND Code: 54868-4985)\nSend email to patient requesting more information\n */\r\npublic void testViewDrugAdverseEvents() throws Exception {\r\n    gen.adverseEvent1();\r\n    // login pha\r\n    WebConversation wc = login(\"7000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - PHA Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 7000000001L, 0L, \"\");\r\n    // click Monitor Adverse Events\r\n    wr = wr.getLinkWith(\"Monitor Adverse Events\").click();\r\n    assertEquals(\"iTrust - Monitor Adverse Events\", wr.getTitle());\r\n    // choose date range\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"02/05/1990\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"10/15/2009\");\r\n    form.getButtons()[2].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Citalopram Hydrobromide(548684985)\"));\r\n    // get details of report\r\n    wr = wr.getLinkWith(\"Get Details\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.ADVERSE_EVENT_VIEW, 7000000001L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"Andy Programmer\"));\r\n    assertTrue(wr.getText().contains(\"Citalopram Hydrobromide (548684985)\"));\r\n    assertTrue(wr.getText().contains(\"2007-08-12 15:10:00.0\"));\r\n    assertTrue(wr.getText().contains(\"Stomach cramps and migraine headaches after taking this drug\"));\r\n    // request more information\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Request sent\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ADVERSE_EVENT_REQUEST_MORE, 7000000001L, 0L, \"Requested more info\");\r\n}"},
 {"id":3994, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.NDCodeTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.NDCodeTest.-init-()", "classid":548, "classname":"edu.ncsu.csc.itrust.http.NDCodeTest", "shortclassname":"NDCodeTest", "method":"NDCodeTest() {\r\n}"},
 {"id":3995, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.NDCodeTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.NDCodeTest.setUp()", "classid":548, "classname":"edu.ncsu.csc.itrust.http.NDCodeTest", "shortclassname":"NDCodeTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.admin1();\r\n    gen.ndCodes();\r\n    gen.ndCodes1();\r\n    gen.ndCodes2();\r\n    gen.ndCodes3();\r\n    gen.ndCodes4();\r\n}"},
 {"id":3996, "methodname":"testRemoveNDCode()", "methodnamerefined":"testRemoveNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.http.NDCodeTest.testRemoveNDCode", "fullmethod":"edu.ncsu.csc.itrust.http.NDCodeTest.testRemoveNDCode()", "classid":548, "classname":"edu.ncsu.csc.itrust.http.NDCodeTest", "shortclassname":"NDCodeTest", "method":"/* Authenticate admin 90000000001\nChoose Edit ND Codes\nCode: 30142-416\nDescription: \"Aspirin\"\n */\r\npublic void testRemoveNDCode() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ND Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"code1\", \"08109\");\r\n    form.setParameter(\"code2\", \"6\");\r\n    form.setParameter(\"description\", \"Aspirin\");\r\n    form.getSubmitButtons()[3].click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DRUG_CODE_REMOVE, 9000000001L, 0L, \"081096\");\r\n    wr = wc.getCurrentPage();\r\n    // verify change\r\n    assertTrue(wr.getURL().toString().contains(\"auth/admin/editNDCodes.jsp\"));\r\n    assertTrue(wr.getText().contains(\"Success: 081096 - Aspirin removed\"));\r\n}"},
 {"id":3997, "methodname":"testUpdateNDCode()", "methodnamerefined":"testUpdateNDCode", "methodabbreviation":"edu.ncsu.csc.itrust.http.NDCodeTest.testUpdateNDCode", "fullmethod":"edu.ncsu.csc.itrust.http.NDCodeTest.testUpdateNDCode()", "classid":548, "classname":"edu.ncsu.csc.itrust.http.NDCodeTest", "shortclassname":"NDCodeTest", "method":"/* Authenticate admin 90000000001\nChoose Edit ND Codes\nCode: 00060-431\nDescription: \"Benzoyl Peroxide\"\n */\r\npublic void testUpdateNDCode() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Edit ND Codes\r\n    wr = wr.getLinkWith(\"Edit ND Codes\").click();\r\n    // add the codes and description\r\n    assertEquals(\"iTrust - Maintain ND Codes\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"code1\", \"00060\");\r\n    form.setParameter(\"code2\", \"431\");\r\n    form.setParameter(\"description\", \"Benzoyl Peroxidez\");\r\n    form.getSubmitButtons()[2].click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DRUG_CODE_EDIT, 9000000001L, 0L, \"00060431\");\r\n    wr = wc.getCurrentPage();\r\n    // verify change\r\n    assertTrue(wr.getURL().toString().contains(\"auth/admin/editNDCodes.jsp\"));\r\n    assertTrue(wr.getText().contains(\"Success: 1 row(s) updated\"));\r\n}"},
 {"id":3998, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.NotificationAreaTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.NotificationAreaTest.-init-()", "classid":549, "classname":"edu.ncsu.csc.itrust.http.NotificationAreaTest", "shortclassname":"NotificationAreaTest", "method":"NotificationAreaTest() {\r\n}"},
 {"id":3999, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.NotificationAreaTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.NotificationAreaTest.setUp()", "classid":549, "classname":"edu.ncsu.csc.itrust.http.NotificationAreaTest", "shortclassname":"NotificationAreaTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4000, "methodname":"testHCPTelemedicineDetailsFromNotificationCenter()", "methodnamerefined":"testHCPTelemedicineDetailsFromNotificationCenter", "methodabbreviation":"edu.ncsu.csc.itrust.http.NotificationAreaTest.testHCPTelemedicineDetailsFromNotificationCenter", "fullmethod":"edu.ncsu.csc.itrust.http.NotificationAreaTest.testHCPTelemedicineDetailsFromNotificationCenter()", "classid":549, "classname":"edu.ncsu.csc.itrust.http.NotificationAreaTest", "shortclassname":"NotificationAreaTest", "method":"public void testHCPTelemedicineDetailsFromNotificationCenter() throws Exception {\r\n    SimpleDateFormat formatter = new SimpleDateFormat();\r\n    formatter.applyPattern(\"MM/dd/yyyy\");\r\n    // String tomorrow = formatter.format(new Date((new Date()).getTime() + 86400000));\r\n    gen.appointmentCase3();\r\n    gen.remoteMonitoring3();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"3 physiological status reports\"));\r\n    assertTrue(wr.getText().contains(\"0 weight/pedometer status reports\"));\r\n}"},
 {"id":4001, "methodname":"testPatientViewDeclaredProviderFromNotificationCenter()", "methodnamerefined":"testPatientViewDeclaredProviderFromNotificationCenter", "methodabbreviation":"edu.ncsu.csc.itrust.http.NotificationAreaTest.testPatientViewDeclaredProviderFromNotificationCenter", "fullmethod":"edu.ncsu.csc.itrust.http.NotificationAreaTest.testPatientViewDeclaredProviderFromNotificationCenter()", "classid":549, "classname":"edu.ncsu.csc.itrust.http.NotificationAreaTest", "shortclassname":"NotificationAreaTest", "method":"public void testPatientViewDeclaredProviderFromNotificationCenter() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Gandalf Stormcrow\"));\r\n    assertTrue(wr.getText().contains(\"999-888-7777\"));\r\n    assertTrue(wr.getText().contains(\"gstormcrow@iTrust.org\"));\r\n}"},
 {"id":4002, "methodname":"testRepresenteeAppointmentDetailsFromNotificationCenter()", "methodnamerefined":"testRepresenteeAppointmentDetailsFromNotificationCenter", "methodabbreviation":"edu.ncsu.csc.itrust.http.NotificationAreaTest.testRepresenteeAppointmentDetailsFromNotificationCenter", "fullmethod":"edu.ncsu.csc.itrust.http.NotificationAreaTest.testRepresenteeAppointmentDetailsFromNotificationCenter()", "classid":549, "classname":"edu.ncsu.csc.itrust.http.NotificationAreaTest", "shortclassname":"NotificationAreaTest", "method":"public void testRepresenteeAppointmentDetailsFromNotificationCenter() throws Exception {\r\n    SimpleDateFormat formatter = new SimpleDateFormat();\r\n    formatter.applyPattern(\"MM/dd/yyyy\");\r\n    String tomorrow = formatter.format(new Date(((new Date().getTime()) + 86400000)));\r\n    gen.appointmentCase3();\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(tomorrow).click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"<b>Patient:</b> Random Person\"));\r\n    assertTrue(wr.getText().contains(((\"<b>Date/Time:</b> \" + tomorrow) + \" 10:30 AM\")));\r\n    assertTrue(wr.getText().contains(\"<b>HCP:</b> Kelly Doctor\"));\r\n    assertTrue(wr.getText().contains(\"<b>Duration:</b> 45 minutes\"));\r\n    assertTrue(wr.getText().contains(\"<b>Comments:</b>\"));\r\n    assertTrue(wr.getText().contains(\"General Checkup after your knee surgery.\"));\r\n}"},
 {"id":4003, "methodname":"testUnreadMessagesCount()", "methodnamerefined":"testUnreadMessagesCount", "methodabbreviation":"edu.ncsu.csc.itrust.http.NotificationAreaTest.testUnreadMessagesCount", "fullmethod":"edu.ncsu.csc.itrust.http.NotificationAreaTest.testUnreadMessagesCount()", "classid":549, "classname":"edu.ncsu.csc.itrust.http.NotificationAreaTest", "shortclassname":"NotificationAreaTest", "method":"public void testUnreadMessagesCount() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"12</a>\"));\r\n}"},
 {"id":4004, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.-init-()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"PHIRecordTest() {\r\n}"},
 {"id":4005, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.setUp()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.uap1();\r\n    gen.patient2();\r\n    gen.patient1();\r\n    gen.patient4();\r\n    gen.hcp0();\r\n}"},
 {"id":4006, "methodname":"testCreatePHIRecord()", "methodnamerefined":"testCreatePHIRecord", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"/* Authenticate HCP\nMID: 9000000000\nPassword: pw\nChoose Edit Basic Health History\nenter 0000000002 and confirm\nEnter fields:\nHeight: **\nWeight: 400 pounds\nBlood Pressure: 999/000\nSmokes: Y\nHDL: 50\nLDL: 200\nTriglycerides: 200\nConfirm and approve entries\n */\r\npublic void testCreatePHIRecord() throws Exception {\r\n    // login as hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getResponse(((iTrustHTTPTest.ADDRESS) + \"auth/hcp/home.jsp\"));\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click on Edit Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    // Choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    // attempt to add a record with 0 height and 0 weight\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    form.setParameter(\"height\", \"0\");\r\n    form.setParameter(\"weight\", \"0\");\r\n    form.setParameter(\"isSmoker\", \"1\");\r\n    form.setParameter(\"bloodPressureN\", \"999\");\r\n    form.setParameter(\"bloodPressureD\", \"000\");\r\n    form.setParameter(\"cholesterolHDL\", \"50\");\r\n    form.setParameter(\"cholesterolLDL\", \"200\");\r\n    form.setParameter(\"cholesterolTri\", \"200\");\r\n    form.getButtons()[0].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    assertTrue(add.getText().contains(\"Height must be greater than 0\"));\r\n    assertTrue(add.getText().contains(\"Weight must be greater than 0\"));\r\n}"},
 {"id":4007, "methodname":"testCreatePHIRecord1()", "methodnamerefined":"testCreatePHIRecord1", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord1", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord1()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"/* Authenticate HCP\nMID: 9000000000\nPassword: pw\nChoose Edit Basic Health History\nenter 0000000002 and confirm\nEnter fields:\nHeight: 10 inches\nWeight: 400 pounds\nBlood Pressure: 999/000\nSmokes: Y\nHDL: 50\nLDL: 200\nTriglycerides: 200\nConfirm and approve entries\n */\r\npublic void testCreatePHIRecord1() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Edit Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    // add a new record\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    form.setParameter(\"height\", \"10\");\r\n    form.setParameter(\"weight\", \"400\");\r\n    form.setParameter(\"isSmoker\", \"1\");\r\n    form.setParameter(\"bloodPressureN\", \"999\");\r\n    form.setParameter(\"bloodPressureD\", \"000\");\r\n    form.setParameter(\"cholesterolHDL\", \"50\");\r\n    form.setParameter(\"cholesterolLDL\", \"200\");\r\n    form.setParameter(\"cholesterolTri\", \"200\");\r\n    form.getButtons()[0].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    assertTrue(add.getText().contains(\"Information Recorded\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4008, "methodname":"testCreatePHIRecord2()", "methodnamerefined":"testCreatePHIRecord2", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord2", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord2()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"/* Auuthenticate UAP\nMID 8000000009\nPassword: uappass1\nChoose Edit Basic Health History\nenter 0000000002 and confirm\nEnter fields:\nHeight: 10 inches\nWeight: 400 pounds\nBlood Pressure: 999/000\nSmokes: Y\nHDL: 50\nLDL: 200\nTriglycerides: 200\nConfirm and approve entries\n */\r\npublic void testCreatePHIRecord2() throws Exception {\r\n    // login as uap\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getResponse(((iTrustHTTPTest.ADDRESS) + \"auth/uap/home.jsp\"));\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // click on Edit Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 8000000009L, 2L, \"\");\r\n    // add a record\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    form.setParameter(\"height\", \"10\");\r\n    form.setParameter(\"weight\", \"400\");\r\n    form.setParameter(\"isSmoker\", \"1\");\r\n    form.setParameter(\"bloodPressureN\", \"999\");\r\n    form.setParameter(\"bloodPressureD\", \"000\");\r\n    form.setParameter(\"cholesterolHDL\", \"50\");\r\n    form.setParameter(\"cholesterolLDL\", \"200\");\r\n    form.setParameter(\"cholesterolTri\", \"200\");\r\n    form.getButtons()[0].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    // make sure it was recorded\r\n    assertTrue(add.getText().contains(\"Information Recorded\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 8000000009L, 2L, \"\");\r\n}"},
 {"id":4009, "methodname":"testCreatePHIRecord3()", "methodnamerefined":"testCreatePHIRecord3", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord3", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord3()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"/* Auuthenticate UAP\nMID 8000000009\nPassword: pw\nChoose Edit Basic Health History\nenter 0000000002 and confirm\nEnter fields:\nHeight: 10 inches\nWeight: 400 pounds\nBlood Pressure: 999/000\nSmokes: Y\nHDL: 150\nLDL: 200\nTriglycerides: 200\nConfirm and approve entries\n */\r\npublic void testCreatePHIRecord3() throws Exception {\r\n    // login as uap\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getResponse(((iTrustHTTPTest.ADDRESS) + \"auth/uap/home.jsp\"));\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // click on Edit Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 8000000009L, 2L, \"\");\r\n    // attempt to add a record with invalid hdl\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    form.setParameter(\"height\", \"10\");\r\n    form.setParameter(\"weight\", \"400\");\r\n    form.setParameter(\"isSmoker\", \"1\");\r\n    form.setParameter(\"bloodPressureN\", \"999\");\r\n    form.setParameter(\"bloodPressureD\", \"000\");\r\n    form.setParameter(\"cholesterolHDL\", \"150\");\r\n    form.setParameter(\"cholesterolLDL\", \"200\");\r\n    form.setParameter(\"cholesterolTri\", \"200\");\r\n    form.getButtons()[0].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    assertTrue(add.getText().contains(\"Cholesterol HDL must be an integer in [0,89]\"));\r\n}"},
 {"id":4010, "methodname":"testCreatePHIRecord4()", "methodnamerefined":"testCreatePHIRecord4", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord4", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord4()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"/* Auuthenticate UAP\nMID 8000000009\nPassword: uappass1\nChoose Edit Basic Health History\nenter 0000000002 and confirm\nEnter fields:\nHeight: 10 inches\nWeight: <>\nBlood Pressure: 999/000\nSmokes: Y\nHDL: 50\nLDL: 200\nTriglycerides: 200\nConfirm and approve entries\n */\r\npublic void testCreatePHIRecord4() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // click Edit Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 8000000009L, 2L, \"\");\r\n    // add a new record\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    form.setParameter(\"height\", \"10\");\r\n    form.setParameter(\"weight\", \"<>\");\r\n    form.setParameter(\"isSmoker\", \"1\");\r\n    form.setParameter(\"bloodPressureN\", \"999\");\r\n    form.setParameter(\"bloodPressureD\", \"000\");\r\n    form.setParameter(\"cholesterolHDL\", \"50\");\r\n    form.setParameter(\"cholesterolLDL\", \"200\");\r\n    form.setParameter(\"cholesterolTri\", \"200\");\r\n    form.getButtons()[0].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    assertTrue(add.getText().contains(\"Weight: Up to 4-digit number + up to 1 decimal place\"));\r\n}"},
 {"id":4011, "methodname":"testCreatePHIRecord5()", "methodnamerefined":"testCreatePHIRecord5", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord5", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord5()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"/* Auuthenticate UAP\nMID 8000000009\nPassword: uappass1\nChoose Edit Basic Health History\nenter 0000000002 and confirm\nEnter fields:\nHeight: 10 inches\nWeight: 40000 pounds\nBlood Pressure: 999/000\nSmokes: Y\nHDL: 50\nLDL: 200\nTriglycerides: 200\nConfirm and approve entries\n */\r\npublic void testCreatePHIRecord5() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // click Edit Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 8000000009L, 2L, \"\");\r\n    // add a new record\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    form.setParameter(\"height\", \"10\");\r\n    form.setParameter(\"weight\", \"40000\");\r\n    form.setParameter(\"isSmoker\", \"1\");\r\n    form.setParameter(\"bloodPressureN\", \"999\");\r\n    form.setParameter(\"bloodPressureD\", \"000\");\r\n    form.setParameter(\"cholesterolHDL\", \"50\");\r\n    form.setParameter(\"cholesterolLDL\", \"200\");\r\n    form.setParameter(\"cholesterolTri\", \"200\");\r\n    form.getButtons()[0].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    assertTrue(add.getText().contains(\"Weight: Up to 4-digit number + up to 1 decimal place\"));\r\n}"},
 {"id":4012, "methodname":"testCreatePHIRecord6()", "methodnamerefined":"testCreatePHIRecord6", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord6", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePHIRecord6()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"/* Authenticate HCP\nMID: 9000000000\nPassword: pw\nChoose Edit Basic Health History\nenter 0000000002 and confirm\nEnter fields:\nHeight: **\nWeight: 400 pounds\nBlood Pressure: 999/000\nSmokes: Y\nHDL: 50\nLDL: 200\nTriglycerides: 200\nConfirm and approve entries\n */\r\npublic void testCreatePHIRecord6() throws Exception {\r\n    // login as hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getResponse(((iTrustHTTPTest.ADDRESS) + \"auth/hcp/home.jsp\"));\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click on Edit Basic Health Information\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    // Choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editBasicHealth.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    // attempt to add a record with invalid height\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    form.setParameter(\"height\", \"**\");\r\n    form.setParameter(\"weight\", \"400\");\r\n    form.setParameter(\"isSmoker\", \"1\");\r\n    form.setParameter(\"bloodPressureN\", \"999\");\r\n    form.setParameter(\"bloodPressureD\", \"000\");\r\n    form.setParameter(\"cholesterolHDL\", \"50\");\r\n    form.setParameter(\"cholesterolLDL\", \"200\");\r\n    form.setParameter(\"cholesterolTri\", \"200\");\r\n    form.getButtons()[0].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    assertTrue(add.getText().contains(\"Height: Up to 3-digit number + up to 1 decimal place\"));\r\n}"},
 {"id":4013, "methodname":"testCreatePatient1()", "methodnamerefined":"testCreatePatient1", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePatient1", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testCreatePatient1()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"/* Choose Add Patient option.\nLast name: Kent\nFirst name: Clark\nContact email: clark@ncsu.edu\nStreet address 1: 1100 Main Campus Dr\nStreet address 2: Rm 500\nCity: Raleigh\nState: NC\nZip code: 27606-4321\nPhone: 919-555-2000\nEmergency contact name: Lana Lang\nEmergency contact phone: 919-400-4000 \nInsurance company name: BlueCross\nInsurance company address 1: 1000 Walnut Street\nInsurance company address 2: Room 5454\nInsurance company city: Cary\nInsurance company state: NC \nInsurance company zip code: 27513-9999\nInsurance company phone: 919-300-3000\nInsurance identification: BLUE0000000001\n */\r\npublic void testCreatePatient1() throws Exception {\r\n    // login as uap\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    WebResponse addPatient = wr.getLinkWith(\"Add Patient\").click();\r\n    // add a patient with valid information\r\n    WebForm form = addPatient.getForms()[0];\r\n    form.setParameter(\"firstName\", \"Clark\");\r\n    form.setParameter(\"lastName\", \"Kent\");\r\n    form.setParameter(\"email\", \"clark@ncsu.edu\");\r\n    WebResponse editPatient = form.submit();\r\n    WebTable table = editPatient.getTables()[0];\r\n    String newMID = table.getCellAsText(1, 1);\r\n    assertTrue(editPatient.getText().contains(\"New patient Clark Kent successfully added!\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_CREATE, 8000000009L, Long.parseLong(newMID), \"\");\r\n    editPatient = editPatient.getLinkWith(\"Continue to patient information.\").click();\r\n    assertEquals(\"iTrust - Edit Patient\", editPatient.getTitle());\r\n    form = editPatient.getForms()[1];\r\n    form.setParameter(\"streetAddress1\", \"1100 Main Campus Dr\");\r\n    form.setParameter(\"streetAddress2\", \"Rm 500\");\r\n    form.setParameter(\"city\", \"Raleigh\");\r\n    form.setParameter(\"state\", \"NC\");\r\n    form.setParameter(\"zip\", \"27606-4321\");\r\n    form.setParameter(\"phone\", \"919-555-2000\");\r\n    form.setParameter(\"emergencyName\", \"Lana Lang\");\r\n    form.setParameter(\"emergencyPhone\", \"919-400-4000\");\r\n    form.setParameter(\"icName\", \"BlueCross\");\r\n    form.setParameter(\"icAddress1\", \"1000 Walnut Street\");\r\n    form.setParameter(\"icAddress2\", \"Room 5454\");\r\n    form.setParameter(\"icCity\", \"Cary\");\r\n    form.setParameter(\"icState\", \"NC\");\r\n    form.setParameter(\"icZip\", \"27513-9999\");\r\n    form.setParameter(\"icPhone\", \"919-300-3000\");\r\n    form.setParameter(\"icID\", \"BLUE0000000001\");\r\n    form.getButtons()[2].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    assertTrue(add.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 8000000009L, Long.parseLong(newMID), \"\");\r\n}"},
 {"id":4014, "methodname":"testDetectExistingHeartDiseaseRiskTest()", "methodnamerefined":"testDetectExistingHeartDiseaseRiskTest", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testDetectExistingHeartDiseaseRiskTest", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testDetectExistingHeartDiseaseRiskTest()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"/* Authenticate HCP\nMID 9000000000\nPassword: pw\nChoose Chronic Disease Risks\nSelect and confirm patient 2.\n */\r\npublic void testDetectExistingHeartDiseaseRiskTest() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Chronic Disease Risks\r\n    wr = wr.getLinkWith(\"Chronic Disease Risks\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/chronicDiseaseRisks.jsp\"), wr.getURL().toString());\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/chronicDiseaseRisks.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.RISK_FACTOR_VIEW, 9000000000L, 2L, \"\");\r\n    // make sure the correct factors for heart disease are displayed\r\n    assertTrue(wr.getText().contains(\"Patient is male\"));\r\n    assertTrue(wr.getText().contains(\"Patients body mass index is over 30\"));\r\n    assertTrue(wr.getText().contains(\"Patient has hypertension\"));\r\n    assertTrue(wr.getText().contains(\"Patient has bad cholesterol\"));\r\n    assertTrue(wr.getText().contains(\"Patient is or was a smoker\"));\r\n    assertTrue(wr.getText().contains(\"Patient has had related diagnoses\"));\r\n    assertTrue(wr.getText().contains(\"Patient has a family history of this disease\"));\r\n}"},
 {"id":4015, "methodname":"testNoHealthRecordException()", "methodnamerefined":"testNoHealthRecordException", "methodabbreviation":"edu.ncsu.csc.itrust.http.PHIRecordTest.testNoHealthRecordException", "fullmethod":"edu.ncsu.csc.itrust.http.PHIRecordTest.testNoHealthRecordException()", "classid":550, "classname":"edu.ncsu.csc.itrust.http.PHIRecordTest", "shortclassname":"PHIRecordTest", "method":"public void testNoHealthRecordException() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Chronic Disease Risks\r\n    wr = wr.getLinkWith(\"Chronic Disease Risks\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/chronicDiseaseRisks.jsp\"), wr.getURL().toString());\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"4\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/chronicDiseaseRisks.jsp\"), wr.getURL().toString());\r\n    // make sure the correct factors for heart disease are displayed\r\n    assertTrue(wr.getText().contains(\"No Data\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.RISK_FACTOR_VIEW, 9000000000L, 4L, \"\");\r\n}"},
 {"id":4016, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientHTTPTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PatientHTTPTest.-init-()", "classid":551, "classname":"edu.ncsu.csc.itrust.http.PatientHTTPTest", "shortclassname":"PatientHTTPTest", "method":"PatientHTTPTest() {\r\n}"},
 {"id":4017, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientHTTPTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PatientHTTPTest.setUp()", "classid":551, "classname":"edu.ncsu.csc.itrust.http.PatientHTTPTest", "shortclassname":"PatientHTTPTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4018, "methodname":"testChangePassword()", "methodnamerefined":"testChangePassword", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientHTTPTest.testChangePassword", "fullmethod":"edu.ncsu.csc.itrust.http.PatientHTTPTest.testChangePassword()", "classid":551, "classname":"edu.ncsu.csc.itrust.http.PatientHTTPTest", "shortclassname":"PatientHTTPTest", "method":"public void testChangePassword() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOGOUT, 2L, 2L, \"\");\r\n    assertEquals(\"iTrust - Login\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Reset Password\").click();\r\n    WebForm wf = wr.getForms()[1];\r\n    wf.setParameter(\"role\", \"patient\");\r\n    wf.setParameter(\"mid\", \"2\");\r\n    wr = wf.submit();\r\n    wf = wc.getCurrentPage().getForms()[1];\r\n    wf.setParameter(\"answer\", \"good\");\r\n    wf.setParameter(\"password\", \"password2\");\r\n    wf.setParameter(\"confirmPassword\", \"password2\");\r\n    wr = wf.submit();\r\n    assertTrue(wr.getText().contains(\"Password changed\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PASSWORD_RESET, 2L, 2L, \"\");\r\n    wc = login(\"2\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Failed login\"));\r\n    wc = login(\"2\", \"password2\");\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    assertTrue(wr.getTitle().equals(\"iTrust - Patient Home\"));\r\n}"},
 {"id":4019, "methodname":"testCodeInjection()", "methodnamerefined":"testCodeInjection", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientHTTPTest.testCodeInjection", "fullmethod":"edu.ncsu.csc.itrust.http.PatientHTTPTest.testCodeInjection()", "classid":551, "classname":"edu.ncsu.csc.itrust.http.PatientHTTPTest", "shortclassname":"PatientHTTPTest", "method":"public void testCodeInjection() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    WebResponse wr = wc.getResponse(((iTrustHTTPTest.ADDRESS) + \"auth/patient/myDiagnoses.jsp?icd=%3Cscript%3Ewindow.location=%22http://bit.ly/4kb77v%22%3C/script%3E\"));\r\n    assertFalse(wr.getText().contains(\"RickRollD\"));\r\n    assertTrue(wr.getTitle().contains(\"iTrust - My Diagnoses\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSES_LIST_VIEW, 2L, 2L, \"\");\r\n}"},
 {"id":4020, "methodname":"testViewPrescriptionRecords1()", "methodnamerefined":"testViewPrescriptionRecords1", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientHTTPTest.testViewPrescriptionRecords1", "fullmethod":"edu.ncsu.csc.itrust.http.PatientHTTPTest.testViewPrescriptionRecords1()", "classid":551, "classname":"edu.ncsu.csc.itrust.http.PatientHTTPTest", "shortclassname":"PatientHTTPTest", "method":"public void testViewPrescriptionRecords1() throws Exception {\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Prescription Records\").click();\r\n    assertEquals(\"iTrust - Get My Prescription Report\", wr.getTitle());\r\n    wr.getForms()[0].getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"<i>No prescriptions found</i>\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_REPORT_VIEW, 1L, 1L, \"\");\r\n}"},
 {"id":4021, "methodname":"testViewPrescriptionRecords2()", "methodnamerefined":"testViewPrescriptionRecords2", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientHTTPTest.testViewPrescriptionRecords2", "fullmethod":"edu.ncsu.csc.itrust.http.PatientHTTPTest.testViewPrescriptionRecords2()", "classid":551, "classname":"edu.ncsu.csc.itrust.http.PatientHTTPTest", "shortclassname":"PatientHTTPTest", "method":"public void testViewPrescriptionRecords2() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Prescription Records\").click();\r\n    assertEquals(\"iTrust - Get My Prescription Report\", wr.getTitle());\r\n    wr.getForms()[0].getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_REPORT_VIEW, 2L, 2L, \"\");\r\n    WebTable wt = wr.getTableStartingWith(\"Andy Programmer\");\r\n    // assertEquals(\"00904-2407\", wt.getCellAsText(2, 0));\r\n    // assertEquals(\"Tetracycline\", wt.getCellAsText(2, 1));\r\n    // assertEquals(\"10/10/2006 to 10/11/2006\", wt.getCellAsText(2, 2));\r\n    // assertEquals(\"Kelly Doctor\", wt.getCellAsText(2, 3));\r\n    // assertEquals(\"00904-2407\", wt.getCellAsText(3, 0));\r\n    // assertEquals(\"Tetracycline\", wt.getCellAsText(3, 1));\r\n    // assertEquals(\"10/10/2006 to 10/11/2006\", wt.getCellAsText(3, 2));\r\n    // assertEquals(\"Kelly Doctor\", wt.getCellAsText(3, 3));\r\n    assertEquals(\"64764-1512\", wt.getCellAsText(2, 0));\r\n    assertEquals(\"Prioglitazone\", wt.getCellAsText(2, 1));\r\n    assertEquals(\"10/10/2006 to 10/11/2020\", wt.getCellAsText(2, 2));\r\n    assertEquals(\"Kelly Doctor\", wt.getCellAsText(2, 3));\r\n}"},
 {"id":4022, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.-init-()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"PatientInstructionsUseCaseTest() {\r\n}"},
 {"id":4023, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.setUp()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4024, "methodname":"testAcceptanceScenario1()", "methodnamerefined":"testAcceptanceScenario1", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario1", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario1()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"public void testAcceptanceScenario1() throws Exception {\r\n    gen.hcp4();\r\n    WebConversation wc = login(\"9000000004\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"01/28/2011\");\r\n    form.setParameter(\"hospitalID\", \"2\");\r\n    form.setParameter(\"notes\", \"Has flu.\");\r\n    form.getButtonWithID(\"update\").click();\r\n    // Check that it was created\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    // Add instructions\r\n    form = wr.getFormWithID(\"patientInstructionsForm\");\r\n    form.setParameter(\"name\", \"Flu Diet\");\r\n    form.setParameter(\"url\", \"http://www.webmd.com/cold-and-flu/flu-guide/what-to-eat-when-you-have-the-flu\");\r\n    form.setParameter(\"comment\", \"Eat a healthy diet to help you get over the flu faster! Take your vitamins and drink lots of fluids\");\r\n    form.getButtonWithID(\"addPatientInstructionsButton\").click();\r\n    // check updated page\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient-Specific Instructions information successfully updated.\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_INSTRUCTIONS_ADD, 9000000004L, 1L, \"\");\r\n    WebTable tbl = wr.getTableWithID(\"patientInstructionsTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Flu Diet\"));\r\n}"},
 {"id":4025, "methodname":"testAcceptanceScenario2()", "methodnamerefined":"testAcceptanceScenario2", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario2", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario2()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"public void testAcceptanceScenario2() throws Exception {\r\n    gen.hcp4();\r\n    gen.uc44_acceptance_scenario_2();\r\n    WebConversation wc = login(\"9000000004\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from yesterday\r\n    wr.getLinkWith(\"1/28/2011\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // Verify instructions are visible\r\n    WebTable tbl = wr.getTableWithID(\"patientInstructionsTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Flu Diet\"));\r\n    // Click the remove link\r\n    assertEquals(8, tbl.getRowCount());\r\n    assertEquals(4, tbl.getColumnCount());\r\n    wr = tbl.getTableCell(2, 3).getLinkWith(\"Remove\").click();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Patient-Specific Instructions information successfully updated.\"));\r\n    // verify the instructions have been deleted\r\n    tbl = wr.getTableWithID(\"patientInstructionsTable\");\r\n    rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"No Patient Instructions on record\"));\r\n}"},
 {"id":4026, "methodname":"testAcceptanceScenario3()", "methodnamerefined":"testAcceptanceScenario3", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario3", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario3()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"public void testAcceptanceScenario3() throws Exception {\r\n    gen.uc44_acceptance_scenario_3();\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"5\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from yesterday\r\n    wr.getLinkWith(\"1/28/2011\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    form = wr.getFormWithID(\"patientInstructionsForm\");\r\n    form.setParameter(\"name\", \"Infant Milestones - 1 to 6 months.\");\r\n    form.setParameter(\"url\", \"http://www.babycenter.com/0_milestone-chart-1-to-6-months_1496585.bc\");\r\n    form.setParameter(\"comment\", \"Watch for Baby Programmer rolling over soon. Make sure to prevent falls from furniture.\");\r\n    form.getButtonWithID(\"addPatientInstructionsButton\").click();\r\n    // check updated page\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient-Specific Instructions information successfully updated.\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_INSTRUCTIONS_ADD, 9000000003L, 5L, \"\");\r\n    WebTable tbl = wr.getTableWithID(\"patientInstructionsTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Infant Milestones - 1 to 6 months.\"));\r\n}"},
 {"id":4027, "methodname":"testAcceptanceScenario4()", "methodnamerefined":"testAcceptanceScenario4", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario4", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario4()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"public void testAcceptanceScenario4() throws Exception {\r\n    gen.hcp4();\r\n    WebConversation wc = login(\"9000000004\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"01/20/2011\");\r\n    form.setParameter(\"hospitalID\", \"2\");\r\n    form.setParameter(\"notes\", \"Wrist Pain.\");\r\n    form.getButtonWithID(\"update\").click();\r\n    // Check that it was created\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    // Add instructions\r\n    form = wr.getFormWithID(\"patientInstructionsForm\");\r\n    form.setParameter(\"name\", \"Carpal Tunnel Syndrome Exercises\");\r\n    form.setParameter(\"url\", \"http://www.eatonhand.com/hw/ctexercise.htm\");\r\n    form.setParameter(\"comment\", \"Remember to try all the exercises. Use the following order: #1, #2 and #6; #3 - #5 are optional. If you have any questions, please let me know!\");\r\n    form.getButtonWithID(\"addPatientInstructionsButton\").click();\r\n    // check updated page\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient-Specific Instructions information successfully updated.\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_INSTRUCTIONS_ADD, 9000000004L, 2L, \"\");\r\n    WebTable tbl = wr.getTableWithID(\"patientInstructionsTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Carpal Tunnel Syndrome Exercises\"));\r\n}"},
 {"id":4028, "methodname":"testAcceptanceScenario5()", "methodnamerefined":"testAcceptanceScenario5", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario5", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testAcceptanceScenario5()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"@SuppressWarnings(\"deprecation\")\r\npublic void testAcceptanceScenario5() throws Exception {\r\n    gen.hcp5();\r\n    gen.uc44_acceptance_scenario_5();\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    // click Patient Specific Instructions\r\n    wr = wr.getLinkWith(\"Patient Specific Instructions\").click();\r\n    assertEquals(\"iTrust - View Patient-Specific Instructions\", wr.getTitle());\r\n    WebTable tbl = wr.getTableWithID(\"patientInstructionsTable\");\r\n    int heartburnRow = 0;\r\n    int veinRow = 0;\r\n    if (tbl.getTableCell(2, 2).asText().equals(\"Heartburn Information\")) {\r\n        heartburnRow = 2;\r\n    } else\r\n        if (tbl.getTableCell(3, 2).asText().equals(\"Heartburn Information\")) {\r\n            heartburnRow = 3;\r\n        } else\r\n            if (tbl.getTableCell(4, 2).asText().equals(\"Heartburn Information\")) {\r\n                heartburnRow = 4;\r\n            } else {\r\n                fail(\"\"Heartburn Information\" not found in table.\");\r\n            }\r\n\r\n\r\n    if (tbl.getTableCell(2, 2).asText().equals(\"Glucose Testing Information\")) {\r\n        fail(\"\"Glucose Testing Information\" was found in table.\");\r\n    } else\r\n        if (tbl.getTableCell(3, 2).asText().equals(\"Glucose Testing Information\")) {\r\n            fail(\"\"Glucose Testing Information\" was found in table.\");\r\n        } else {\r\n        }\r\n\r\n    if (tbl.getTableCell(2, 2).asText().equals(\"Vein Procedure Resource\")) {\r\n        veinRow = 2;\r\n    } else\r\n        if (tbl.getTableCell(3, 2).asText().equals(\"Vein Procedure Resource\")) {\r\n            veinRow = 3;\r\n        } else {\r\n            fail(\"\"Vein Procedure Resource\" not found in table.\");\r\n        }\r\n\r\n    // verify information in patient instructions table\r\n    assertEquals(\"Heartburn Information\", tbl.getTableCell(heartburnRow, 2).asText());\r\n    assertEquals(\"Sarah Soulcrusher\", tbl.getTableCell(heartburnRow, 1).asText());\r\n    assertEquals(\"06/10/2007\", tbl.getTableCell(heartburnRow, 0).asText());\r\n    assertEquals(\"Vein Procedure Resource\", tbl.getTableCell(veinRow, 2).asText());\r\n    assertEquals(\"Kelly Doctor\", tbl.getTableCell(veinRow, 1).asText());\r\n    assertEquals(\"06/09/2007\", tbl.getTableCell(veinRow, 0).asText());\r\n    // verify link address\r\n    assertEquals(\"http://www.mayoclinic.com/health/sclerotherapy/MY01302\", wr.getLinkWith(\"Vein Procedure Resource\").getURLString());\r\n}"},
 {"id":4029, "methodname":"testLinkToOfficeVisit()", "methodnamerefined":"testLinkToOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testLinkToOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testLinkToOfficeVisit()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"public void testLinkToOfficeVisit() throws Exception {\r\n    gen.hcp4();\r\n    gen.uc44_acceptance_scenario_2();\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    // click Patient Specific instructions\r\n    wr = wr.getLinkWith(\"Patient Specific Instructions\").click();\r\n    assertEquals(\"iTrust - View Patient-Specific Instructions\", wr.getTitle());\r\n    // Follow link to office visit page\r\n    wr = wr.getLinkWith(\"1/28/2011\").click();\r\n    assertEquals(\"iTrust - View Office Visit Details\", wr.getTitle());\r\n}"},
 {"id":4030, "methodname":"testMissingField()", "methodnamerefined":"testMissingField", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testMissingField", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testMissingField()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"public void testMissingField() throws Exception {\r\n    gen.hcp4();\r\n    WebConversation wc = login(\"9000000004\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"01/20/2011\");\r\n    form.setParameter(\"hospitalID\", \"2\");\r\n    form.setParameter(\"notes\", \"Wrist Pain.\");\r\n    form.getButtonWithID(\"update\").click();\r\n    // Check that it was created\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    // Add instructions, but with a field missing\r\n    form = wr.getFormWithID(\"patientInstructionsForm\");\r\n    form.setParameter(\"name\", \"Carpal Tunnel Syndrome Exercises\");\r\n    form.setParameter(\"url\", \"http://www.eatonhand.com/hw/ctexercise.htm\");\r\n    form.getButtonWithID(\"addPatientInstructionsButton\").click();\r\n    // check for error page\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Comments: Up to 500 alphanumeric characters, with space, and other punctuation\"));\r\n    // check that form fields still contain prior values\r\n    form = wr.getFormWithID(\"patientInstructionsForm\");\r\n    assertEquals(\"Carpal Tunnel Syndrome Exercises\", form.getParameterValue(\"name\"));\r\n    assertEquals(\"http://www.eatonhand.com/hw/ctexercise.htm\", form.getParameterValue(\"url\"));\r\n    assertEquals(\"\", form.getParameterValue(\"comment\"));\r\n}"},
 {"id":4031, "methodname":"testModifiedDate()", "methodnamerefined":"testModifiedDate", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testModifiedDate", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testModifiedDate()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"public void testModifiedDate() throws Exception {\r\n    gen.hcp4();\r\n    gen.uc44_acceptance_scenario_2();\r\n    WebConversation wc = login(\"9000000004\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from yesterday\r\n    wr.getLinkWith(\"1/28/2011\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // Verify instructions are visible\r\n    WebTable tbl = wr.getTableWithID(\"patientInstructionsTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Flu Diet\"));\r\n    // Click the edit link\r\n    assertEquals(8, tbl.getRowCount());\r\n    assertEquals(4, tbl.getColumnCount());\r\n    wr = tbl.getTableCell(2, 3).getLinkWith(\"Edit\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // check that the form now contains the values were editing\r\n    form = wr.getFormWithID(\"patientInstructionsForm\");\r\n    assertEquals(\"Flu Diet\", form.getParameterValue(\"name\"));\r\n    assertEquals(\"http://www.webmd.com/cold-and-flu/flu-guide/what-to-eat-when-you-have-the-flu\", form.getParameterValue(\"url\"));\r\n    assertEquals(\"Eat a healthy diet to help you get over the flu faster! Take your vitamins and drink lots of fluids\", form.getParameterValue(\"comment\"));\r\n    form.setParameter(\"comment\", \"I hate the flu!\");\r\n    form.getButtonWithID(\"updatePatientInstructionsButton\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // Verify instructions are visible\r\n    tbl = wr.getTableWithID(\"patientInstructionsTable\");\r\n    rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Flu Diet\"));\r\n    // verify the table is the same size as before\r\n    assertEquals(8, tbl.getRowCount());\r\n    assertEquals(4, tbl.getColumnCount());\r\n    // verify that the comments have changed\r\n    assertEquals(\"I hate the flu!\", tbl.getCellAsText(2, 1));\r\n}"},
 {"id":4032, "methodname":"testSecondEntry()", "methodnamerefined":"testSecondEntry", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testSecondEntry", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testSecondEntry()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"public void testSecondEntry() throws Exception {\r\n    gen.hcp4();\r\n    gen.uc44_acceptance_scenario_2();\r\n    WebConversation wc = login(\"9000000004\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from yesterday\r\n    wr.getLinkWith(\"1/28/2011\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    form = wr.getFormWithID(\"patientInstructionsForm\");\r\n    form.setParameter(\"name\", \"How to get rid of the flu in 5 minutes.\");\r\n    form.setParameter(\"url\", \"http://www.example.com\");\r\n    form.setParameter(\"comment\", \"You should try this miracle cure. It is not bogus or anything.\");\r\n    form.getButtonWithID(\"addPatientInstructionsButton\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // Verify instructions are visible\r\n    WebTable tbl = wr.getTableWithID(\"patientInstructionsTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Flu Diet\"));\r\n    assertTrue(rows[3].getText().contains(\"How to get rid of the flu in 5 minutes.\"));\r\n    // verify the table has one more row then before\r\n    assertEquals(9, tbl.getRowCount());\r\n    assertEquals(4, tbl.getColumnCount());\r\n}"},
 {"id":4033, "methodname":"testTooManyCharacters()", "methodnamerefined":"testTooManyCharacters", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testTooManyCharacters", "fullmethod":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest.testTooManyCharacters()", "classid":552, "classname":"edu.ncsu.csc.itrust.http.PatientInstructionsUseCaseTest", "shortclassname":"PatientInstructionsUseCaseTest", "method":"public void testTooManyCharacters() throws Exception {\r\n    gen.hcp4();\r\n    WebConversation wc = login(\"9000000004\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"01/20/2011\");\r\n    form.setParameter(\"hospitalID\", \"2\");\r\n    form.setParameter(\"notes\", \"Wrist Pain.\");\r\n    form.getButtonWithID(\"update\").click();\r\n    // Check that it was created\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    // Add instructions, but with the name is too long\r\n    form = wr.getFormWithID(\"patientInstructionsForm\");\r\n    form.setParameter(\"comment\", \"Let me know if you have any questions\");\r\n    form.setParameter(\"url\", \"http://www.eatonhand.com/hw/ctexercise.htm\");\r\n    form.setParameter(\"name\", \"This is a very long name. In fact it is too long for Patient Specific Instructions. The name must be less than 100 characters.\");\r\n    form.getButtonWithID(\"addPatientInstructionsButton\").click();\r\n    // check for error page\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Name: Up to 100 alphanumeric characters, with space, and other punctuation\"));\r\n    // check that form fields still contain prior values\r\n    form = wr.getFormWithID(\"patientInstructionsForm\");\r\n    assertEquals(\"This is a very long name. In fact it is too long for Patient Specific Instructions. The name must be less than 100 characters.\", form.getParameterValue(\"name\"));\r\n    assertEquals(\"http://www.eatonhand.com/hw/ctexercise.htm\", form.getParameterValue(\"url\"));\r\n    assertEquals(\"Let me know if you have any questions\", form.getParameterValue(\"comment\"));\r\n}"},
 {"id":4034, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.-init-()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"PatientsWithExpiringPrescriptionsTest() {\r\n}"},
 {"id":4035, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.setUp()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.icd9cmCodes();\r\n    gen.ndCodes();\r\n    gen.hospitals();\r\n    gen.hcp1();\r\n    gen.hcp2();\r\n    gen.hcp3();\r\n    gen.patient9();\r\n    gen.patient10();\r\n    gen.patient11();\r\n    gen.patient12();\r\n    gen.patient13();\r\n    gen.patient14();\r\n    // gen.UC32Acceptance();\r\n    // gen.clearLoginFailures();\r\n}"},
 {"id":4036, "methodname":"testAcceptance()", "methodnamerefined":"testAcceptance", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testAcceptance", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testAcceptance()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"/* A boundary-value test for a patient who should appear on the list.\n(Designated Tester Arehart, special-diagnosis-history, prescription expires today)\n */\r\npublic void testAcceptance() throws Exception {\r\n    gen.UC32Acceptance();\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000003L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    WebTable table = wr.getTableStartingWith(\"Gandalf Stormcrow\");\r\n    TableRow[] rows = table.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Andy Koopa\"));\r\n    assertTrue(rows[3].getText().contains(\"David Prince\"));\r\n    assertTrue(wr.getText().contains(\"Gandalf Stormcrow</th>\"));\r\n    assertFalse(wr.getText().contains(\"9000000003\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9000000003L, 16L, \"\");\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9000000003L, 17L, \"\");\r\n}"},
 {"id":4037, "methodname":"testPatient9()", "methodnamerefined":"testPatient9", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatient9", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatient9()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"/* An equivalence class test for a patient who should appear on the list.\n(Designated Tester Arehart, special-diagnosis-history, prescription expires in 5 days)\nThe prescriptions were NOT made on the same visit as a special-diagnosis.\n */\r\npublic void testPatient9() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    assertTrue(wr.getText().contains(\"Tester Arehart</th>\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    assertTrue(wr.getText().contains(\"Darryl\"));\r\n    assertTrue(wr.getText().contains(\"Thompson\"));\r\n    assertTrue(wr.getText().contains(\"a@b.com\"));\r\n    assertTrue(wr.getText().contains(\"919-555-6709\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 99L, \"\");\r\n}"},
 {"id":4038, "methodname":"testPatientEleven()", "methodnamerefined":"testPatientEleven", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientEleven", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientEleven()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"/* A boundary-value test for a patient who should appear on the list.\n(Designated Tester Arehart, special-diagnosis-history, prescription expires in 7 days)\nDiagnosed with 493.99\n */\r\npublic void testPatientEleven() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    assertTrue(wr.getText().contains(\"Tester Arehart</th>\"));\r\n    assertTrue(wr.getText().contains(\"Marie\"));\r\n    assertTrue(wr.getText().contains(\"Thompson\"));\r\n    assertTrue(wr.getText().contains(\"e@f.com\"));\r\n    assertTrue(wr.getText().contains(\"919-555-9213\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 11L, \"\");\r\n}"},
 {"id":4039, "methodname":"testPatientFifteen()", "methodnamerefined":"testPatientFifteen", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientFifteen", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientFifteen()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"/* A boundary-value test for a patient who should NOT appear on the list.\n(Designated Tester Arehart, special-diagnosis-history, prescription expired yesterday)\n */\r\npublic void testPatientFifteen() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    assertTrue(wr.getText().contains(\"Tester Arehart</th>\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    assertFalse(wr.getText().contains(\"Malk\"));\r\n    assertFalse(wr.getText().contains(\"Flober\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 15L, \"\");\r\n}"},
 {"id":4040, "methodname":"testPatientFourteen()", "methodnamerefined":"testPatientFourteen", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientFourteen", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientFourteen()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"/* A boundary-value test for a patient who should appear on the list.\n(Designated Tester Arehart, special-diagnosis-history, prescription expires today)\nDiagnosed with 459.99 (This is the closest possible to 460 because the table uses\n decimal(5,2) )\n */\r\npublic void testPatientFourteen() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    assertTrue(wr.getText().contains(\"Tester Arehart</th>\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    assertTrue(wr.getText().contains(\"Zack\"));\r\n    assertTrue(wr.getText().contains(\"Arthur\"));\r\n    assertTrue(wr.getText().contains(\"k@l.com\"));\r\n    assertTrue(wr.getText().contains(\"919-555-1234\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 14L, \"\");\r\n}"},
 {"id":4041, "methodname":"testPatientOrdering()", "methodnamerefined":"testPatientOrdering", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientOrdering", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientOrdering()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"/* A boundary-value test for a patient who should appear on the list.\n(Designated Tester Arehart, special-diagnosis-history, prescription expires today)\n */\r\npublic void testPatientOrdering() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    WebTable table = wr.getTableStartingWith(\"Tester Arehart\");\r\n    TableRow[] rows = table.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Zack Arthur\"));\r\n    assertTrue(rows[3].getText().contains(\"Darryl Thompson\"));\r\n    assertTrue(rows[4].getText().contains(\"Marie Thompson\"));\r\n    assertTrue(wr.getText().contains(\"Tester Arehart</th>\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 99L, \"\");\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 11L, \"\");\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 14L, \"\");\r\n}"},
 {"id":4042, "methodname":"testPatientTen()", "methodnamerefined":"testPatientTen", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientTen", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientTen()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"/* An equivalence class test for a patient who should NOT appear on the list.\n(Designated Tester Arehart, special-diagnosis-history, prescription expires in 10 days)\n */\r\npublic void testPatientTen() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    assertTrue(wr.getText().contains(\"Tester Arehart</th>\"));\r\n    assertFalse(wr.getText().contains(\"Zappic Clith\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 10L, \"\");\r\n}"},
 {"id":4043, "methodname":"testPatientThirteen()", "methodnamerefined":"testPatientThirteen", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientThirteen", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientThirteen()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"/* An equivalence class test for a patient who should NOT appear on the list.\n(Designated Tester Arehart, NOT special-diagnosis-history, prescription expires in 5 days)\n */\r\npublic void testPatientThirteen() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    assertTrue(wr.getText().contains(\"Tester Arehart</th>\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    assertFalse(wr.getText().contains(\"Blim Cildron\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 13L, \"\");\r\n}"},
 {"id":4044, "methodname":"testPatientTwelve()", "methodnamerefined":"testPatientTwelve", "methodabbreviation":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientTwelve", "fullmethod":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest.testPatientTwelve()", "classid":553, "classname":"edu.ncsu.csc.itrust.http.PatientsWithExpiringPrescriptionsTest", "shortclassname":"PatientsWithExpiringPrescriptionsTest", "method":"/* A boundary-value test for a patient who should NOT appear on the list.\n(Designated Tester Arehart, special-diagnosis-history, prescription expires in 8 days)\n */\r\npublic void testPatientTwelve() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    assertTrue(wr.getText().contains(\"Tester Arehart</th>\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    assertFalse(wr.getText().contains(\"Blammo\"));\r\n    assertFalse(wr.getText().contains(\"Volcano\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 12L, \"\");\r\n}"},
 {"id":4045, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PendingApptTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PendingApptTest.-init-()", "classid":554, "classname":"edu.ncsu.csc.itrust.http.PendingApptTest", "shortclassname":"PendingApptTest", "method":"PendingApptTest() {\r\n}"},
 {"id":4046, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PendingApptTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PendingApptTest.setUp()", "classid":554, "classname":"edu.ncsu.csc.itrust.http.PendingApptTest", "shortclassname":"PendingApptTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.pendingAppointmentAlert();\r\n}"},
 {"id":4047, "methodname":"testAcceptAnAppointment()", "methodnamerefined":"testAcceptAnAppointment", "methodabbreviation":"edu.ncsu.csc.itrust.http.PendingApptTest.testAcceptAnAppointment", "fullmethod":"edu.ncsu.csc.itrust.http.PendingApptTest.testAcceptAnAppointment()", "classid":554, "classname":"edu.ncsu.csc.itrust.http.PendingApptTest", "shortclassname":"PendingApptTest", "method":"public void testAcceptAnAppointment() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.pendingAppointmentAlert();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr.getLinkWith(\"Appointment Requests\").click();\r\n    wr = wc.getCurrentPage();\r\n    wr.getLinkWith(\"Approve\").click();\r\n    wr = wc.getCurrentPage();\r\n    wr.getLinkWith(\"Home\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertFalse(wr.getText().contains(\"Appointment requests.\"));\r\n}"},
 {"id":4048, "methodname":"testConflictingAppt()", "methodnamerefined":"testConflictingAppt", "methodabbreviation":"edu.ncsu.csc.itrust.http.PendingApptTest.testConflictingAppt", "fullmethod":"edu.ncsu.csc.itrust.http.PendingApptTest.testConflictingAppt()", "classid":554, "classname":"edu.ncsu.csc.itrust.http.PendingApptTest", "shortclassname":"PendingApptTest", "method":"public void testConflictingAppt() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.pendingAppointmentConflict();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr.getLinkWith(\"Appointment Requests\").click();\r\n    wr = wc.getCurrentPage();\r\n    wr.getLinkWith(\"Approve\").click();\r\n    wr = wc.getCurrentPage();\r\n    wr.getLinkWith(\"Home\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(((wr.getLinkWith(\"1\")) != (wr.getLinkWith(\"2\"))));\r\n}"},
 {"id":4049, "methodname":"testDeclineAnAppointment()", "methodnamerefined":"testDeclineAnAppointment", "methodabbreviation":"edu.ncsu.csc.itrust.http.PendingApptTest.testDeclineAnAppointment", "fullmethod":"edu.ncsu.csc.itrust.http.PendingApptTest.testDeclineAnAppointment()", "classid":554, "classname":"edu.ncsu.csc.itrust.http.PendingApptTest", "shortclassname":"PendingApptTest", "method":"public void testDeclineAnAppointment() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.pendingAppointmentAlert();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr.getLinkWith(\"Appointment Requests\").click();\r\n    wr = wc.getCurrentPage();\r\n    wr.getLinkWith(\"Reject\").click();\r\n    wr = wc.getCurrentPage();\r\n    wr.getLinkWith(\"Home\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"No appointment requests.\"));\r\n}"},
 {"id":4050, "methodname":"testPendingAppointmentAlert()", "methodnamerefined":"testPendingAppointmentAlert", "methodabbreviation":"edu.ncsu.csc.itrust.http.PendingApptTest.testPendingAppointmentAlert", "fullmethod":"edu.ncsu.csc.itrust.http.PendingApptTest.testPendingAppointmentAlert()", "classid":554, "classname":"edu.ncsu.csc.itrust.http.PendingApptTest", "shortclassname":"PendingApptTest", "method":"public void testPendingAppointmentAlert() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Appointment requests.\"));\r\n}"},
 {"id":4051, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.-init-()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"PersonalHealthRecordsUseCaseTest() {\r\n}"},
 {"id":4052, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.setUp()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4053, "methodname":"testAddAdditionalDemographics1()", "methodnamerefined":"testAddAdditionalDemographics1", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAdditionalDemographics1", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAdditionalDemographics1()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testAddAdditionalDemographics1() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 9000000000L, 2L, \"\");\r\n    WebForm editPatientForm = wr.getForms()[0];\r\n    editPatientForm.getScriptableObject().setParameterValue(\"religion\", \"Jedi\");\r\n    wr = editPatientForm.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 9000000000L, 2L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    WebTable table = wr.getTableStartingWith(\"Patient Information\");\r\n    assertTrue(table.getCellAsText(6, 0).contains(\"Religion:\"));\r\n    assertTrue(table.getCellAsText(6, 1).contains(\"Jedi\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4054, "methodname":"testAddAdditionalDemographics2()", "methodnamerefined":"testAddAdditionalDemographics2", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAdditionalDemographics2", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAdditionalDemographics2()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testAddAdditionalDemographics2() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 9000000000L, 2L, \"\");\r\n    WebForm editPatientForm = wr.getForms()[0];\r\n    editPatientForm.getScriptableObject().setParameterValue(\"spiritualPractices\", \"Sleeps in class\");\r\n    wr = editPatientForm.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 9000000000L, 2L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    WebTable table = wr.getTableStartingWith(\"Patient Information\");\r\n    assertTrue(table.getCellAsText(8, 0).contains(\"Spiritual Practices:\"));\r\n    assertTrue(table.getCellAsText(8, 1).contains(\"Sleeps in class\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4055, "methodname":"testAddAdditionalDemographics3()", "methodnamerefined":"testAddAdditionalDemographics3", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAdditionalDemographics3", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAdditionalDemographics3()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testAddAdditionalDemographics3() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 9000000000L, 2L, \"\");\r\n    WebForm editPatientForm = wr.getForms()[0];\r\n    editPatientForm.getScriptableObject().setParameterValue(\"alternateName\", \"Randy\");\r\n    wr = editPatientForm.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_EDIT, 9000000000L, 2L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    WebTable table = wr.getTableStartingWith(\"Patient Information\");\r\n    assertTrue(table.getCellAsText(9, 0).contains(\"Alternate Name:\"));\r\n    assertTrue(table.getCellAsText(9, 1).contains(\"Randy\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4056, "methodname":"testAddAllergyExistRX()", "methodnamerefined":"testAddAllergyExistRX", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAllergyExistRX", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAllergyExistRX()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testAddAllergyExistRX() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    // Logs in as Kelly Doctor\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // Clicks Document OV\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"25\");\r\n    patientForm.getButtons()[1].click();\r\n    // Selects Patient Trend Setter\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    // Clicks Yes, Document OV\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"02/01/2012\");\r\n    form.setParameter(\"notes\", \"just some notes\");\r\n    form.getButtonWithID(\"update\").click();\r\n    // Create new OV on date 02/01/2012\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 25L, \"Office visit\");\r\n    Calendar cal = Calendar.getInstance();\r\n    SimpleDateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    cal.add(Calendar.DAY_OF_YEAR, 7);\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.setParameter(\"medID\", \"00882219\");\r\n    form.setParameter(\"dosage\", \"100\");\r\n    form.setParameter(\"startDate\", \"02/01/2012\");\r\n    form.setParameter(\"endDate\", format.format(cal.getTime()));\r\n    form.setParameter(\"instructions\", \"Take once daily\");\r\n    form.getButtonWithID(\"addprescription\").click();\r\n    // Add Lantus RX, 100mg, 02/01/2012 - 08/01/2012, once daily\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Prescription information successfully updated.\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_EDIT, 9000000000L, 25L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();// Clicks PHR Info\r\n\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 25L, \"\");\r\n    form = wr.getFormWithName(\"AddAllergy\");\r\n    form.setParameter(\"description\", \"00882219\");\r\n    form.submit();\r\n    // Add Lantus Allergy (will be firstFound on todays date)\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Medication 00882219 - Lantus is currently prescribed to Trend Setter.\"));\r\n    // This is the error that should appear when this allergy is added.\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 25L, \"\");\r\n}"},
 {"id":4057, "methodname":"testAddAllergyFutRX()", "methodnamerefined":"testAddAllergyFutRX", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAllergyFutRX", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAllergyFutRX()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testAddAllergyFutRX() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    // Logs in as Kelly Doctor\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"All Patients\").click();\r\n    assertEquals(\"iTrust - View All Patients\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Anakin Skywalker\").click();\r\n    // Select Anakin Skywalker, this seemed to be easier than what the acceptance tests did.\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 100L, \"\");\r\n    /* Since we dont worry about preconditions and it takes us straight to\n    the correct page anyway, we can skip a lot of stuff here.\n     */\r\n    WebForm form = wr.getForms()[0];\r\n    form = wr.getFormWithName(\"AddAllergy\");\r\n    form.setParameter(\"description\", \"483012382\");\r\n    form.submit();\r\n    // Add M-minene Allergy (will be firstFound on todays date)\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Medication 483012382 - Midichlominene is currently prescribed to Anakin Skywalker.\"));\r\n    // This is the error that should appear when this allergy is added.\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 100L, \"\");\r\n}"},
 {"id":4058, "methodname":"testAddAllergyPrevRX()", "methodnamerefined":"testAddAllergyPrevRX", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAllergyPrevRX", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddAllergyPrevRX()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testAddAllergyPrevRX() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    // Logs in as Kelly Doctor\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // Clicks Document OV\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"25\");\r\n    patientForm.getButtons()[1].click();\r\n    // Selects Patient Trend Setter\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    WebForm form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    // Clicks Yes, Document OV\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"01/01/2012\");\r\n    form.setParameter(\"notes\", \"just some more notes\");\r\n    form.getButtonWithID(\"update\").click();\r\n    // Create new OV on date 01/01/2012\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 25L, \"Office visit\");\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.setParameter(\"medID\", \"664662530\");\r\n    form.setParameter(\"dosage\", \"60\");\r\n    form.setParameter(\"startDate\", \"01/01/2012\");\r\n    form.setParameter(\"endDate\", \"01/31/2012\");\r\n    form.setParameter(\"instructions\", \"Take three times daily with food.\");\r\n    form.getButtonWithID(\"addprescription\").click();\r\n    // Add Penicillin RX, 60mg, 01/01/2012 - 01/31/2012, thrice daily w/ food\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Prescription information successfully updated.\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_EDIT, 9000000000L, 25L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();// Clicks PHR Info\r\n\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    form = wr.getFormWithName(\"AddAllergy\");\r\n    form.setParameter(\"description\", \"664662530\");\r\n    form.submit();\r\n    // Add Penicillin Allergy (will be firstFound on todays date)\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Allergy Added\"));\r\n    // No error should appear when this allergy is added.\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 25L, \"\");\r\n}"},
 {"id":4059, "methodname":"testAddDupAllergy()", "methodnamerefined":"testAddDupAllergy", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddDupAllergy", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAddDupAllergy()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testAddDupAllergy() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    // Logs in as Kelly Doctor\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    // Clicks PHR Info\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"25\");\r\n    patientForm.getButtons()[1].click();\r\n    // Selects Patient Trend Setter\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPHR.jsp\"), wr.getURL().toString());\r\n    WebForm form = wr.getForms()[0];\r\n    form = wr.getFormWithName(\"AddAllergy\");\r\n    form.setParameter(\"description\", \"664662530\");\r\n    form.submit();\r\n    // Add Penicillin Allergy (will be firstFound on todays date)\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Allergy Added\"));\r\n    // No error should appear when this allergy is added.\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 25L, \"\");\r\n    form = wr.getFormWithName(\"AddAllergy\");\r\n    form.setParameter(\"description\", \"664662530\");\r\n    form.submit();\r\n    // Add Penicillin Allergy again\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Allergy 664662530 - Penicillin has already been added for Trend Setter.\"));\r\n    // This is the error that should appear when this allergy is added a second time.\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 25L, \"\");\r\n}"},
 {"id":4060, "methodname":"testAllergy()", "methodnamerefined":"testAllergy", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAllergy", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAllergy()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testAllergy() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    // Add allergy\r\n    WebForm wf = wr.getFormWithName(\"AddAllergy\");\r\n    wf.getScriptableObject().setParameterValue(\"description\", \"081096\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 2L, \"\");\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Allergy Added\"));\r\n}"},
 {"id":4061, "methodname":"testAllergy2()", "methodnamerefined":"testAllergy2", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAllergy2", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testAllergy2()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testAllergy2() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    // Add allergy\r\n    WebForm wf = wr.getFormWithName(\"AddAllergy\");\r\n    wf.getScriptableObject().setParameterValue(\"description\", \"664662530\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 2L, \"\");\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"664662530 - Penicillin\"));\r\n}"},
 {"id":4062, "methodname":"testEditPatient()", "methodnamerefined":"testEditPatient", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testEditPatient", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testEditPatient()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testEditPatient() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Andy Programmer\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4063, "methodname":"testEditSmokingStatus()", "methodnamerefined":"testEditSmokingStatus", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testEditSmokingStatus", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testEditSmokingStatus()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testEditSmokingStatus() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    wr = wr.getFormWithID(\"editHealth\").submit();\r\n    WebForm wf = wr.getFormWithID(\"editHealth\");\r\n    wf.getScriptableObject().setParameterValue(\"isSmoker\", \"1\");\r\n    wr = wf.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 2L, \"\");\r\n    assertTrue(wr.getText().contains(\"Information Recorded\"));\r\n}"},
 {"id":4064, "methodname":"testInvalidPatientBirthDates()", "methodnamerefined":"testInvalidPatientBirthDates", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testInvalidPatientBirthDates", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testInvalidPatientBirthDates()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testInvalidPatientBirthDates() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 9000000000L, 2L, \"\");\r\n    WebForm editPatientForm = wr.getForms()[0];\r\n    editPatientForm.getScriptableObject().setParameterValue(\"dateOfDeathStr\", \"\");\r\n    editPatientForm.getScriptableObject().setParameterValue(\"dateOfBirthStr\", \"01/03/2050\");\r\n    wr = editPatientForm.submit();\r\n    assertTrue(wr.getText().contains(\"future\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4065, "methodname":"testInvalidPatientDates()", "methodnamerefined":"testInvalidPatientDates", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testInvalidPatientDates", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testInvalidPatientDates()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testInvalidPatientDates() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 9000000000L, 2L, \"\");\r\n    WebForm editPatientForm = wr.getForms()[0];\r\n    editPatientForm.getScriptableObject().setParameterValue(\"dateOfDeathStr\", \"01/03/2050\");\r\n    wr = editPatientForm.submit();\r\n    assertTrue(wr.getText().contains(\"future\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.DEMOGRAPHICS_EDIT, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4066, "methodname":"testRepresent()", "methodnamerefined":"testRepresent", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testRepresent", "fullmethod":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest.testRepresent()", "classid":555, "classname":"edu.ncsu.csc.itrust.http.PersonalHealthRecordsUseCaseTest", "shortclassname":"PersonalHealthRecordsUseCaseTest", "method":"public void testRepresent() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    wr = wr.getLinkWith(\"Baby Programmer\").click();\r\n    // Clicking on a representees name takes you to their records\r\n    assertTrue(wr.getText().contains(\"Andy Programmer\"));\r\n    assertTrue(wr.getText().contains(\"Diabetes with ketoacidosis\"));\r\n    assertTrue(wr.getText().contains(\"Grandparent\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 5L, \"\");\r\n    wr = wr.getLinkWith(\"Random Person\").click();\r\n    assertTrue(wr.getText().contains(\"nobody@gmail.com\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 1L, \"\");\r\n}"},
 {"id":4067, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonnelHTTPTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PersonnelHTTPTest.-init-()", "classid":556, "classname":"edu.ncsu.csc.itrust.http.PersonnelHTTPTest", "shortclassname":"PersonnelHTTPTest", "method":"PersonnelHTTPTest() {\r\n}"},
 {"id":4068, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonnelHTTPTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PersonnelHTTPTest.setUp()", "classid":556, "classname":"edu.ncsu.csc.itrust.http.PersonnelHTTPTest", "shortclassname":"PersonnelHTTPTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4069, "methodname":"testViewPrescriptionRecords()", "methodnamerefined":"testViewPrescriptionRecords", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonnelHTTPTest.testViewPrescriptionRecords", "fullmethod":"edu.ncsu.csc.itrust.http.PersonnelHTTPTest.testViewPrescriptionRecords()", "classid":556, "classname":"edu.ncsu.csc.itrust.http.PersonnelHTTPTest", "shortclassname":"PersonnelHTTPTest", "method":"public void testViewPrescriptionRecords() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"All Patients\").click();\r\n    assertEquals(\"iTrust - View All Patients\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Andy Programmer\").click();\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    wr = wc.getResponse(\"http://localhost:8080/iTrust/auth/hcp-uap/getPrescriptionReport.jsp\");\r\n    assertEquals(\"iTrust - Get Prescription Report\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_REPORT_VIEW, 9000000000L, 2L, \"\");\r\n    WebTable wt = wr.getTableStartingWith(\"ND Code\");\r\n    assertEquals(\"00904-2407\", wt.getCellAsText(1, 0));\r\n    assertEquals(\"Tetracycline\", wt.getCellAsText(1, 1));\r\n    assertEquals(\"10/10/2006 to 10/11/2006\", wt.getCellAsText(1, 2));\r\n    assertEquals(\"Kelly Doctor\", wt.getCellAsText(1, 3));\r\n    assertEquals(\"00904-2407\", wt.getCellAsText(2, 0));\r\n    assertEquals(\"Tetracycline\", wt.getCellAsText(2, 1));\r\n    assertEquals(\"10/10/2006 to 10/11/2006\", wt.getCellAsText(2, 2));\r\n    assertEquals(\"Kelly Doctor\", wt.getCellAsText(2, 3));\r\n    assertEquals(\"64764-1512\", wt.getCellAsText(3, 0));\r\n    assertEquals(\"Prioglitazone\", wt.getCellAsText(3, 1));\r\n    assertEquals(\"10/10/2006 to 10/11/2020\", wt.getCellAsText(3, 2));\r\n    assertEquals(\"Kelly Doctor\", wt.getCellAsText(3, 3));\r\n}"},
 {"id":4070, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.-init-()", "classid":557, "classname":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest", "shortclassname":"PersonnelUseCaseTest", "method":"PersonnelUseCaseTest() {\r\n}"},
 {"id":4071, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.setUp()", "classid":557, "classname":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest", "shortclassname":"PersonnelUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4072, "methodname":"testAddER()", "methodnamerefined":"testAddER", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.testAddER", "fullmethod":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.testAddER()", "classid":557, "classname":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest", "shortclassname":"PersonnelUseCaseTest", "method":"public void testAddER() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Add ER\r\n    wr = wr.getLinkWith(\"Add ER\").click();\r\n    assertEquals(\"iTrust - Add ER\", wr.getTitle());\r\n}"},
 {"id":4073, "methodname":"testCreateER()", "methodnamerefined":"testCreateER", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.testCreateER", "fullmethod":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.testCreateER()", "classid":557, "classname":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest", "shortclassname":"PersonnelUseCaseTest", "method":"public void testCreateER() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Add ER\r\n    wr = wr.getLinkWith(\"Add ER\").click();\r\n    // add the ER\r\n    assertEquals(\"iTrust - Add ER\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"Nick\");\r\n    form.setParameter(\"lastName\", \"Oftime\");\r\n    form.setParameter(\"email\", \"nick@itrust.com\");\r\n    wr = form.submit();\r\n    WebTable table = wr.getTables()[0];\r\n    String newMID = table.getCellAsText(1, 1);\r\n    // Verify new emergency responder data is present\r\n    assertTrue(wr.getText().contains(\"New ER Nick Oftime succesfully added!\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ER_CREATE, 9000000001L, Long.parseLong(newMID), \"\");\r\n}"},
 {"id":4074, "methodname":"testEditERDetails()", "methodnamerefined":"testEditERDetails", "methodabbreviation":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.testEditERDetails", "fullmethod":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest.testEditERDetails()", "classid":557, "classname":"edu.ncsu.csc.itrust.http.PersonnelUseCaseTest", "shortclassname":"PersonnelUseCaseTest", "method":"public void testEditERDetails() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    // click on Add ER\r\n    wr = wr.getLinkWith(\"Add ER\").click();\r\n    // add the ER\r\n    assertEquals(\"iTrust - Add ER\", wr.getTitle());\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"firstName\", \"Nick\");\r\n    form.setParameter(\"lastName\", \"Oftime\");\r\n    form.setParameter(\"email\", \"nick@itrust.com\");\r\n    wr = form.submit();\r\n    WebTable table = wr.getTables()[0];\r\n    String newMID = table.getCellAsText(1, 1);\r\n    // Verify new emergency responder data is present\r\n    assertTrue(wr.getText().contains(\"New ER Nick Oftime succesfully added!\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ER_CREATE, 9000000001L, Long.parseLong(newMID), \"\");\r\n    wr = wr.getLinkWith(\"Continue to personnel information.\").click();\r\n    form = wr.getForms()[0];\r\n    form.setParameter(\"streetAddress1\", \"900 Main Campus Dr\");\r\n    form.setParameter(\"streetAddress2\", \"Box 2509\");\r\n    form.setParameter(\"city\", \"Raleigh\");\r\n    form.setParameter(\"state\", \"NC\");\r\n    form.setParameter(\"zip\", \"27606-1234\");\r\n    form.setParameter(\"phone\", \"919-100-1000\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ER_EDIT, 9000000001L, Long.parseLong(newMID), \"\");\r\n}"},
 {"id":4075, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.-init-()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"PhysicianSatisfactionUseCaseTest() {\r\n}"},
 {"id":4076, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.setUp()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4077, "methodname":"testSearchByHospitalSurveyResults1()", "methodnamerefined":"testSearchByHospitalSurveyResults1", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchByHospitalSurveyResults1", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchByHospitalSurveyResults1()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSearchByHospitalSurveyResults1() throws Exception {\r\n    gen.surveyResults();\r\n    // log in as patient\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpHospitalID\", \"8181818181\");\r\n    form.setParameter(\"hcpSpecialty\", SurveyResultBean.ANY_SPECIALTY);\r\n    // view current page to ensure data is correct\r\n    wr = form.submit();\r\n    WebTable wt = wr.getTableStartingWith(\"LHCP Search Results:\");\r\n    assertEquals(5, wt.getRowCount());\r\n    iTrustHTTPTest.assertLogged(TransactionType.SATISFACTION_SURVEY_VIEW, 2L, 0L, \"\");\r\n}"},
 {"id":4078, "methodname":"testSearchByHospitalSurveyResults2()", "methodnamerefined":"testSearchByHospitalSurveyResults2", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchByHospitalSurveyResults2", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchByHospitalSurveyResults2()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSearchByHospitalSurveyResults2() throws Exception {\r\n    gen.surveyResults();\r\n    // log in as uap\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpHospitalID\", \"9191919191\");\r\n    form.setParameter(\"hcpSpecialty\", SurveyResultBean.ANY_SPECIALTY);\r\n    // view current page to ensure data is correct\r\n    wr = form.submit();\r\n    WebTable wt = wr.getTableStartingWith(\"LHCP Search Results:\");\r\n    assertEquals(4, wt.getRowCount());\r\n    iTrustHTTPTest.assertLogged(TransactionType.SATISFACTION_SURVEY_VIEW, 8000000009L, 0L, \"\");\r\n}"},
 {"id":4079, "methodname":"testSearchByHospitalSurveyResults3()", "methodnamerefined":"testSearchByHospitalSurveyResults3", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchByHospitalSurveyResults3", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchByHospitalSurveyResults3()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSearchByHospitalSurveyResults3() throws Exception {\r\n    gen.surveyResults();\r\n    // log in as hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpHospitalID\", \"8181818181\");\r\n    form.setParameter(\"hcpSpecialty\", SurveyResultBean.HEART_SPECIALTY);\r\n    // view current page to ensure data is correct\r\n    wr = form.submit();\r\n    WebTable wt = wr.getTableStartingWith(\"LHCP Search Results:\");\r\n    assertEquals(3, wt.getRowCount());\r\n    iTrustHTTPTest.assertLogged(TransactionType.SATISFACTION_SURVEY_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":4080, "methodname":"testSearchForHCPSurveyResults1()", "methodnamerefined":"testSearchForHCPSurveyResults1", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchForHCPSurveyResults1", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchForHCPSurveyResults1()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"/* Preconditions: Patient 2 is in the system and has authenticated successfully. \n HCP 9000000000 is in the system with address 4321 My Road St, PO BOX 2, CityName, NY, 12345-1234 and physician type Surgeon. \n Patient 2 has had 2 office visits with HCP 9000000000, and no other office visits are in the system. \n TakeSatisfactionSurveySuccess and TakeSatisfactionSurveySuccess2 have passed successfully.\n\n 1. Patient 2 chooses to view satisfaction survey results.\n 2. Patient 2 inputs Surgeon for physician type and zip code 12377.\n 3. Submit.\n */\r\npublic void testSearchForHCPSurveyResults1() throws Exception {\r\n    // log in as patient\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpZip\", \"12377\");\r\n    form.setParameter(\"hcpSpecialty\", SurveyResultBean.SURGEON_SPECIALTY);\r\n    // view current page to ensure data is correct\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Survey Results\"));\r\n    assertTrue(wr.getText().contains(\"Kelly\"));\r\n    assertTrue(wr.getText().contains(\"Doctor\"));\r\n    assertTrue(wr.getText().contains(\"4321 My Road St\"));\r\n    assertTrue(wr.getText().contains(\"PO BOX 2\"));\r\n    assertTrue(wr.getText().contains(\"CityName\"));\r\n    assertTrue(wr.getText().contains(\"NY\"));\r\n    assertTrue(wr.getText().contains(\"12345-1234\"));\r\n    assertTrue(wr.getText().contains(\"surgeon\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.SATISFACTION_SURVEY_VIEW, 2L, 0L, \"\");\r\n}"},
 {"id":4081, "methodname":"testSearchForHCPSurveyResults2()", "methodnamerefined":"testSearchForHCPSurveyResults2", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchForHCPSurveyResults2", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchForHCPSurveyResults2()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSearchForHCPSurveyResults2() throws Exception {\r\n    gen.surveyResults();\r\n    // log in as uap\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpZip\", \"27613\");\r\n    form.setParameter(\"hcpSpecialty\", SurveyResultBean.HEART_SPECIALTY);\r\n    // view current page to ensure data is correct\r\n    wr = form.submit();\r\n    WebTable wt = wr.getTableStartingWith(\"LHCP Search Results:\");\r\n    assertEquals(\"Bad Doctor\", wt.getTableCell(2, 0).getText());\r\n    assertEquals(\"Avenue 1\", wt.getTableCell(2, 1).getText());\r\n    assertEquals(\"Avenue 2\", wt.getTableCell(2, 2).getText());\r\n    assertEquals(\"Raleigh\", wt.getTableCell(2, 3).getText());\r\n    assertEquals(\"NC\", wt.getTableCell(2, 4).getText());\r\n    assertEquals(\"27613\", wt.getTableCell(2, 5).getText());\r\n    assertEquals(\"Heart Specialist\", wt.getTableCell(2, 6).getText());\r\n    assertEquals(\"na\", wt.getTableCell(2, 7).getText());\r\n    assertEquals(\"20.00\", wt.getTableCell(2, 8).getText());\r\n    assertEquals(\"30.00\", wt.getTableCell(2, 9).getText());\r\n    assertEquals(\"1.00\", wt.getTableCell(2, 10).getText());\r\n    assertEquals(\"2.00\", wt.getTableCell(2, 11).getText());\r\n    assertEquals(\"75%\", wt.getTableCell(2, 12).getText());\r\n    iTrustHTTPTest.assertLogged(TransactionType.SATISFACTION_SURVEY_VIEW, 8000000009L, 0L, \"\");\r\n}"},
 {"id":4082, "methodname":"testSearchForHCPSurveyResults3()", "methodnamerefined":"testSearchForHCPSurveyResults3", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchForHCPSurveyResults3", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSearchForHCPSurveyResults3()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSearchForHCPSurveyResults3() throws Exception {\r\n    gen.surveyResults();\r\n    // log in as hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpZip\", \"27613-1234\");\r\n    form.setParameter(\"hcpSpecialty\", SurveyResultBean.ANY_SPECIALTY);\r\n    // view current page to ensure data is correct\r\n    wr = form.submit();\r\n    WebTable wt = wr.getTableStartingWith(\"LHCP Search Results:\");\r\n    assertEquals(\"Good Doctor\", wt.getTableCell(2, 0).getText());\r\n    assertEquals(\"Street 1\", wt.getTableCell(2, 1).getText());\r\n    assertEquals(\"Street 2\", wt.getTableCell(2, 2).getText());\r\n    assertEquals(\"Raleigh\", wt.getTableCell(2, 3).getText());\r\n    assertEquals(\"NC\", wt.getTableCell(2, 4).getText());\r\n    assertEquals(\"27613\", wt.getTableCell(2, 5).getText());\r\n    assertEquals(\"None\", wt.getTableCell(2, 6).getText());\r\n    assertEquals(\"na\", wt.getTableCell(2, 7).getText());\r\n    assertEquals(\"10.00\", wt.getTableCell(2, 8).getText());\r\n    assertEquals(\"10.00\", wt.getTableCell(2, 9).getText());\r\n    assertEquals(\"4.67\", wt.getTableCell(2, 10).getText());\r\n    assertEquals(\"5.00\", wt.getTableCell(2, 11).getText());\r\n    assertEquals(\"50%\", wt.getTableCell(2, 12).getText());\r\n    assertEquals(\"Bad Doctor\", wt.getTableCell(3, 0).getText());\r\n    assertEquals(\"Avenue 1\", wt.getTableCell(3, 1).getText());\r\n    assertEquals(\"Avenue 2\", wt.getTableCell(3, 2).getText());\r\n    assertEquals(\"Raleigh\", wt.getTableCell(3, 3).getText());\r\n    assertEquals(\"NC\", wt.getTableCell(3, 4).getText());\r\n    assertEquals(\"27613\", wt.getTableCell(3, 5).getText());\r\n    assertEquals(\"Heart Specialist\", wt.getTableCell(3, 6).getText());\r\n    assertEquals(\"na\", wt.getTableCell(3, 7).getText());\r\n    assertEquals(\"20.00\", wt.getTableCell(3, 8).getText());\r\n    assertEquals(\"30.00\", wt.getTableCell(3, 9).getText());\r\n    assertEquals(\"1.00\", wt.getTableCell(3, 10).getText());\r\n    assertEquals(\"2.00\", wt.getTableCell(3, 11).getText());\r\n    assertEquals(\"75%\", wt.getTableCell(3, 12).getText());\r\n    iTrustHTTPTest.assertLogged(TransactionType.SATISFACTION_SURVEY_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":4083, "methodname":"testSurveyResultsNoInput()", "methodnamerefined":"testSurveyResultsNoInput", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsNoInput", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsNoInput()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSurveyResultsNoInput() throws Exception {\r\n    // log in as patient\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    // view current page to ensure data is correct\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"You must enter either a zip code or a hospital ID.\"));\r\n}"},
 {"id":4084, "methodname":"testSurveyResultsTooMuchInput()", "methodnamerefined":"testSurveyResultsTooMuchInput", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsTooMuchInput", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsTooMuchInput()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSurveyResultsTooMuchInput() throws Exception {\r\n    // log in as patient\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpZip\", \"27613\");\r\n    form.setParameter(\"hcpHospitalID\", \"1\");\r\n    wr = form.submit();\r\n    // view current page to ensure data is correct\r\n    assertTrue(wr.getText().contains(\"Data for both Zip Code and Hospital ID is not allowed.  Please choose either Zip or Hospital ID.\"));\r\n}"},
 {"id":4085, "methodname":"testSurveyResultsZipCodeFormat1()", "methodnamerefined":"testSurveyResultsZipCodeFormat1", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsZipCodeFormat1", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsZipCodeFormat1()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSurveyResultsZipCodeFormat1() throws Exception {\r\n    // log in as patient\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpZip\", \"123\");\r\n    wr = form.submit();\r\n    // view current page to ensure data is correct\r\n    assertTrue(wr.getText().contains(\"Zip Code: xxxxx or xxxxx-xxxx\"));\r\n}"},
 {"id":4086, "methodname":"testSurveyResultsZipCodeFormat2()", "methodnamerefined":"testSurveyResultsZipCodeFormat2", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsZipCodeFormat2", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsZipCodeFormat2()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSurveyResultsZipCodeFormat2() throws Exception {\r\n    // log in as patient\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpZip\", \"123456\");\r\n    wr = form.submit();\r\n    // view current page to ensure data is correct\r\n    assertTrue(wr.getText().contains(\"Zip Code: xxxxx or xxxxx-xxxx\"));\r\n}"},
 {"id":4087, "methodname":"testSurveyResultsZipCodeFormat3()", "methodnamerefined":"testSurveyResultsZipCodeFormat3", "methodabbreviation":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsZipCodeFormat3", "fullmethod":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest.testSurveyResultsZipCodeFormat3()", "classid":558, "classname":"edu.ncsu.csc.itrust.http.PhysicianSatisfactionUseCaseTest", "shortclassname":"PhysicianSatisfactionUseCaseTest", "method":"public void testSurveyResultsZipCodeFormat3() throws Exception {\r\n    // log in as patient\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // go to page with HCP Survey Results\r\n    wr = wr.getLinkWith(\"Satisfaction Survey Results\").click();\r\n    assertTrue(wr.getText().contains(\"Search HCP Survey Results\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hcpZip\", \"abc\");\r\n    wr = form.submit();\r\n    // view current page to ensure data is correct\r\n    assertTrue(wr.getText().contains(\"Zip Code: xxxxx or xxxxx-xxxx\"));\r\n}"},
 {"id":4088, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionDateTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionDateTest.-init-()", "classid":559, "classname":"edu.ncsu.csc.itrust.http.PrescriptionDateTest", "shortclassname":"PrescriptionDateTest", "method":"PrescriptionDateTest() {\r\n}"},
 {"id":4089, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionDateTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionDateTest.setUp()", "classid":559, "classname":"edu.ncsu.csc.itrust.http.PrescriptionDateTest", "shortclassname":"PrescriptionDateTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.ndCodes();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient4();\r\n}"},
 {"id":4090, "methodname":"testeditOVPPrescription()", "methodnamerefined":"testeditOVPPrescription", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionDateTest.testeditOVPPrescription", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionDateTest.testeditOVPPrescription()", "classid":559, "classname":"edu.ncsu.csc.itrust.http.PrescriptionDateTest", "shortclassname":"PrescriptionDateTest", "method":"public void testeditOVPPrescription() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"06/10/2007\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 2L, \"Office visit\");\r\n    WebForm form = wr.getFormWithID(\"prescriptionForm\");\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // assertTrue(wr.getText().contains(\"Prescription Information\"));\r\n    form.setParameter(\"medID\", \"009042407\");\r\n    form.setParameter(\"dosage\", \"5\");\r\n    form.setParameter(\"startDate\", \"10/12/13\");\r\n    form.setParameter(\"endDate\", \"10/01/13\");\r\n    form.setParameter(\"instructions\", \"Take thrice daily\");\r\n    wr = form.submit();\r\n    // assertTrue(wr.getText().contains(\"Prescription Updated!\"));\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Information not valid\"));\r\n    // WebTable tbl = wr.getTableWithID(\"prescriptionsTable\");\r\n}"},
 {"id":4091, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.-init-()", "classid":560, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest", "shortclassname":"PrescriptionInstructionsTest", "method":"PrescriptionInstructionsTest() {\r\n}"},
 {"id":4092, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.setUp()", "classid":560, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest", "shortclassname":"PrescriptionInstructionsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.ndCodes();\r\n    gen.patient1();\r\n    gen.patient2();\r\n    gen.patient4();\r\n}"},
 {"id":4093, "methodname":"testUC11()", "methodnamerefined":"testUC11", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.testUC11", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.testUC11()", "classid":560, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest", "shortclassname":"PrescriptionInstructionsTest", "method":"public void testUC11() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"06/10/2007\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 2L, \"Office visit\");\r\n    /* If you fail here, you need to make the first column a link */\r\n    assertTrue(\"First column in prescription table must be a link\", ((wr.getLinkWith(\"Tetracycline (009042407)\")) != null));\r\n    wr = wr.getLinkWith(\"Tetracycline (009042407)\").click();\r\n    /* The rest of this test must be written once an instruction-modifying\n    jsp has been specd out.\n     */\r\n    assertTrue(wr.getText().contains(\"Edit Prescription Instructions\"));\r\n    WebForm wf = wr.getForms()[0];\r\n    assertEquals(\"5\", wf.getParameterValue(\"dosage\"));\r\n    assertEquals(\"Take twice daily\", wf.getParameterValue(\"instructions\"));\r\n    wf.setParameter(\"dosage\", \"10\");\r\n    wf.setParameter(\"instructions\", \"Take thrice daily\");\r\n    wr = wf.submit();\r\n    // assertTrue(wr.getText().contains(\"Prescription Updated!\"));\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    WebTable tbl = wr.getTableWithID(\"prescriptionsTable\");\r\n    assertEquals(\"10mg\", tbl.getTableCell(2, 1).getText());\r\n    assertEquals(\"Take thrice daily\", tbl.getTableCell(2, 3).getText());\r\n    /* WebTable wt = wr.getTableStartingWith(\"Prescription Updated!\");\n    assertEquals(\"10mg\", wt.getTableCell(2, 1).getText());\n    assertEquals(\"Take thrice daily\", wt.getTableCell(2, 3).getText());\n     */\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_EDIT, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4094, "methodname":"testUC19()", "methodnamerefined":"testUC19", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.testUC19", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.testUC19()", "classid":560, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest", "shortclassname":"PrescriptionInstructionsTest", "method":"public void testUC19() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Prescription Records\").click();\r\n    assertEquals(\"iTrust - Get My Prescription Report\", wr.getTitle());\r\n    WebForm viewForm = wr.getForms()[0];\r\n    viewForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_REPORT_VIEW, 2L, 2L, \"\");\r\n    assertTrue(wr.getText().contains(\"Prioglitazone\"));\r\n    /* If you fail here, you need to make the first column a link */\r\n    assertTrue(\"First column in prescription table must be a link\", ((wr.getLinkWith(\"64764-1512\")) != null));\r\n    wr = wr.getLinkWith(\"64764-1512\").click();\r\n    /* The rest of this test must be written once an instruction-modifying\n    jsp has been specd out.\n     */\r\n    assertTrue(wr.getText().contains(\"Prescription Information\"));\r\n    WebTable wt = wr.getTableStartingWith(\"Prescription Information\");\r\n    assertEquals(\"5mg\", wt.getTableCell(2, 2).getText());\r\n    assertEquals(\"Take twice daily\", wt.getTableCell(2, 4).getText());\r\n}"},
 {"id":4095, "methodname":"testUC29()", "methodnamerefined":"testUC29", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.testUC29", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.testUC29()", "classid":560, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest", "shortclassname":"PrescriptionInstructionsTest", "method":"/* We have determined that Theme 1 does not apply to UC29 because\nUC29 displays a list of medications, not a list of prescriptions.\nThe difference is that medications do not store any information about\ndosage, instructions, or particular dates or office visits.\n\nTheme 1 says we should add functionality whenever the user is viewing\na list of prescriptions, and this is not a list of prescriptions.\n\nFurthermore, we may imply from the use of medication beans instead\nof prescription beans that a conscious choice was made to avoid\ndivulging specific prescription information in this use case, so\nit would not be prudent to change that.\n */\r\npublic void testUC29() throws Exception {\r\n    gen.standardData();\r\n    gen.patient_hcp_vists();\r\n    gen.hcp_diagnosis_data();\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Diagnoses\").click();\r\n    assertEquals(\"iTrust - My Diagnoses\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSES_LIST_VIEW, 1L, 1L, \"\");\r\n    wr = wr.getLinkWith(\"Echovirus(79.10)\").click();\r\n    WebTable table = wr.getTableStartingWithPrefix(\"HCP\");\r\n    assertTrue(table.getCellAsText(1, 0).contains(\"Jason\"));\r\n    assertTrue(table.getCellAsText(1, 1).contains(\"2\"));\r\n    assertTrue(table.getCellAsText(2, 0).contains(\"Lauren\"));\r\n    assertTrue(table.getCellAsText(2, 1).contains(\"1\"));\r\n}"},
 {"id":4096, "methodname":"testUC31()", "methodnamerefined":"testUC31", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.testUC31", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest.testUC31()", "classid":560, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInstructionsTest", "shortclassname":"PrescriptionInstructionsTest", "method":"public void testUC31() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Expired Prescription Reports\").click();\r\n    assertEquals(\"iTrust - Get My Expired Prescription Reports\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Tetracycline\"));\r\n    /* If you fail here, you need to make the first column a link */\r\n    assertTrue(\"First column in prescription table must be a link\", ((wr.getLinkWith(\"00904-2407\")) != null));\r\n    wr = wr.getLinkWith(\"00904-2407\").click();\r\n    /* The rest of this test must be written once an instruction-modifying\n    jsp has been specd out.\n     */\r\n    assertTrue(wr.getText().contains(\"Prescription Information\"));\r\n    WebTable wt = wr.getTableStartingWith(\"Prescription Information\");\r\n    assertEquals(\"5mg\", wt.getTableCell(2, 2).getText());\r\n    assertEquals(\"Take twice daily\", wt.getTableCell(2, 4).getText());\r\n    iTrustHTTPTest.assertLogged(TransactionType.EXPIRED_PRESCRIPTION_VIEW, 2L, 2L, \"\");\r\n}"},
 {"id":4097, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.-init-()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"PrescriptionInteractionAndAllergyTest() {\r\n}"},
 {"id":4098, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.setUp()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n}"},
 {"id":4099, "methodname":"testAllergicPrescribe()", "methodnamerefined":"testAllergicPrescribe", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testAllergicPrescribe", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testAllergicPrescribe()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"public void testAllergicPrescribe() throws Exception {\r\n    gen.standardData();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"25\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    WebForm allergyForm = wr.getFormWithName(\"AddAllergy\");\r\n    allergyForm.setParameter(\"description\", \"664662530\");\r\n    allergyForm.submit();\r\n    // assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_EDIT, 9000000000L, 25L, \"edited your basic health information\");\r\n    wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    wr = wr.getFormWithID(\"formMain\").submit();\r\n    wr.getFormWithID(\"mainForm\").setParameter(\"visitDate\", new SimpleDateFormat(\"01/01/2012\").format(new Date()));\r\n    wr = wr.getFormWithID(\"mainForm\").submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 25L, \"Office visit\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"664662530\");\r\n    patientForm.setParameter(\"dosage\", \"60\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"01/01/2012\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"01/31/2012\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take three times daily with food.\");\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Allergy: Penicillin\"));\r\n}"},
 {"id":4100, "methodname":"testAllergicPrescribeOverride()", "methodnamerefined":"testAllergicPrescribeOverride", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testAllergicPrescribeOverride", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testAllergicPrescribeOverride()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"/**\r\n * test Allergy prescribe override\r\n *  throws Exception\r\n *\r\n * @author Dstudent\r\n * @author student\r\n */\r\npublic void testAllergicPrescribeOverride() throws Exception {\r\n    gen.patient2();\r\n    gen.officeVisit4();\r\n    gen.ndCodes1();\r\n    gen.drugInteractions3();\r\n    gen.ORCodes();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"9/15/2009\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 2L, \"Office visit\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"081096\");\r\n    patientForm.setParameter(\"dosage\", \"15\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"09/22/2009\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"10/22/2009\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take twice daily with water\");\r\n    /* patientForm = wr.getForms()[0];\n\n    patientForm = wr.getForms()[0];\n    patientForm.getScriptableObject().setParameterValue(\"addMedID\", \"081096\");\n    patientForm.getScriptableObject().setParameterValue(\"dosage\", \"15\");\n\n    patientForm.getScriptableObject().setParameterValue(\"startDate\", new SimpleDateFormat(\"9/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"endDate\", new SimpleDateFormat(\"10/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"instructions\", \"Take twice daily with water\");\n\n    patientForm.getScriptableObject().setParameterValue(\"testMed\", \"081096\");\n    patientForm.getScriptableObject().setParameterValue(\"medDos\", \"15\");\n    patientForm.getScriptableObject().setParameterValue(\"medStart\", new SimpleDateFormat(\"10/15/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"medEnd\", new SimpleDateFormat(\"10/31/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"medInst\", \"Take twice daily with water\");\n     */\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Allergy: Aspirin\"));\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"overrideCode\", \"00006\");\r\n    patientForm.getButtonWithID(\"continue\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4101, "methodname":"testAllergicPrescribeTwice()", "methodnamerefined":"testAllergicPrescribeTwice", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testAllergicPrescribeTwice", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testAllergicPrescribeTwice()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"public void testAllergicPrescribeTwice() throws Exception {\r\n    gen.standardData();\r\n    gen.ndCodes100();\r\n    gen.patient100();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"100\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    wr = wr.getFormWithID(\"formMain\").submit();\r\n    wr.getFormWithID(\"mainForm\").setParameter(\"visitDate\", new SimpleDateFormat(\"02/01/2012\").format(new Date()));\r\n    wr = wr.getFormWithID(\"mainForm\").submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 100L, \"Office visit\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"00882219\");\r\n    patientForm.setParameter(\"dosage\", \"60\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"01/01/2012\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"01/31/2012\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take three times daily with food.\");\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Allergy: Lantus\"));\r\n    // Not yet implemented\r\n    WebForm overrideForm = wr.getFormWithID(\"prescriptionForm\");\r\n    overrideForm.setParameter(\"overrideCode\", \"00001\");\r\n    overrideForm.getSubmitButton(\"continue\").click();\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OVERRIDE_INTERACTION_WARNING, 9000000000L, 100L, \"\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"00882219\");\r\n    patientForm.setParameter(\"dosage\", \"60\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"01/01/2012\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"01/31/2012\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take three times daily with food.\");\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Allergy: Lantus\"));\r\n}"},
 {"id":4102, "methodname":"testInteractionAndAllergyPrescribe()", "methodnamerefined":"testInteractionAndAllergyPrescribe", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testInteractionAndAllergyPrescribe", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testInteractionAndAllergyPrescribe()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"/**\r\n * test update interaction and allergyPrescribe\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testInteractionAndAllergyPrescribe() throws Exception {\r\n    gen.patient2();\r\n    gen.officeVisit4();\r\n    gen.ndCodes1();\r\n    gen.drugInteractions3();\r\n    gen.ORCodes();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"9/15/2009\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 2L, \"Office visit\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"619580501\");\r\n    patientForm.setParameter(\"dosage\", \"10\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"09/22/2009\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"10/22/2009\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take once a day\");\r\n    /* patientForm = wr.getForms()[0];\n\n    patientForm.getScriptableObject().setParameterValue(\"addMedID\", \"619580501\");\n    patientForm.getScriptableObject().setParameterValue(\"dosage\", \"10\");\n\n    patientForm.getScriptableObject().setParameterValue(\"startDate\", new SimpleDateFormat(\"09/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"endDate\", new SimpleDateFormat(\"10/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"instructions\", \"Take once a day\");\n\n    patientForm.getScriptableObject().setParameterValue(\"testMed\", \"619580501\");\n    patientForm.getScriptableObject().setParameterValue(\"medDos\", \"10\");\n    patientForm.getScriptableObject().setParameterValue(\"medStart\", new SimpleDateFormat(\"09/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"medEnd\", new SimpleDateFormat(\"10/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"medInst\", \"Take once a day\");\n     */\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 2L, \"\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"081096\");\r\n    patientForm.setParameter(\"dosage\", \"15\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"10/15/2009\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"10/31/2009\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take twice daily with water\");\r\n    /* patientForm = wr.getForms()[0];\n    patientForm.getScriptableObject().setParameterValue(\"addMedID\", \"081096\");\n    patientForm.getScriptableObject().setParameterValue(\"dosage\", \"15\");\n\n    patientForm.getScriptableObject().setParameterValue(\"startDate\", new SimpleDateFormat(\"10/15/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"endDate\", new SimpleDateFormat(\"10/31/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"instructions\", \"Take twice daily with water\");\n\n    patientForm.getScriptableObject().setParameterValue(\"testMed\", \"081096\");\n    patientForm.getScriptableObject().setParameterValue(\"medDos\", \"15\");\n    patientForm.getScriptableObject().setParameterValue(\"medStart\", new SimpleDateFormat(\"10/15/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"medEnd\", new SimpleDateFormat(\"10/31/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"medInst\", \"Take twice daily with water\");\n     */\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Allergy: Aspirin\"));\r\n    assertTrue(wr.getText().contains(\"Currently Prescribed: Adefovir\"));\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"overrideCode\", \"00001\");\r\n    patientForm.getButtonWithID(\"continue\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4103, "methodname":"testInteractionCancel()", "methodnamerefined":"testInteractionCancel", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testInteractionCancel", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testInteractionCancel()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"/**\r\n * test interactionNoprescribe\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testInteractionCancel() throws Exception {\r\n    gen.patient1();\r\n    gen.officeVisit3();\r\n    gen.ndCodes1();\r\n    gen.drugInteractions3();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"9/17/2009\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 1L, \"Office visit\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"619580501\");\r\n    patientForm.setParameter(\"dosage\", \"10\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"09/22/2009\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"11/22/2009\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take once daily with meal\");\r\n    /* patientForm.getScriptableObject().setParameterValue(\"addMedID\", \"619580501\");\n    patientForm.getScriptableObject().setParameterValue(\"dosage\", \"10\");\n    patientForm.getScriptableObject().setParameterValue(\"startDate\", new SimpleDateFormat(\"09/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"endDate\", new SimpleDateFormat(\"11/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"instructions\", \"Take once daily with meal\");\n\n    patientForm.getScriptableObject().setParameterValue(\"testMed\", \"619580501\");\n    patientForm.getScriptableObject().setParameterValue(\"medDos\", \"10\");\n    patientForm.getScriptableObject().setParameterValue(\"medStart\", new SimpleDateFormat(\"09/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"medEnd\", new SimpleDateFormat(\"11/22/2009\").format(new Date()));\n    patientForm.getScriptableObject().setParameterValue(\"medInst\", \"Take once daily with meal\");\n     */\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Currently Prescribed: Aspirin.\"));\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.getButtonWithID(\"cancel\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Random Person\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 1L, \"\");\r\n}"},
 {"id":4104, "methodname":"testInteractionOverride()", "methodnamerefined":"testInteractionOverride", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testInteractionOverride", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testInteractionOverride()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"public void testInteractionOverride() throws Exception {\r\n    gen.patient1();\r\n    gen.officeVisit3();\r\n    gen.ndCodes1();\r\n    gen.ndCodes4();\r\n    gen.drugInteractions4();\r\n    gen.ORCodes();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"9/17/2009\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 1L, \"Office visit\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"01864020\");\r\n    patientForm.setParameter(\"dosage\", \"10\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"08/22/2009\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"11/22/2009\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take once daily with meal\");\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Currently Prescribed: Aspirin.\"));\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"overrideCode\", \"00001\");\r\n    patientForm.getButtonWithID(\"continue\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 1L, \"\");\r\n}"},
 {"id":4105, "methodname":"testNoAllergyPrescribe()", "methodnamerefined":"testNoAllergyPrescribe", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testNoAllergyPrescribe", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testNoAllergyPrescribe()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"public void testNoAllergyPrescribe() throws Exception {\r\n    gen.standardData();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"25\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    wr = wr.getFormWithID(\"formMain\").submit();\r\n    wr.getFormWithID(\"mainForm\").setParameter(\"visitDate\", new SimpleDateFormat(\"02/01/2012\").format(new Date()));\r\n    wr = wr.getFormWithID(\"mainForm\").submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 25L, \"\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"01864020\");\r\n    patientForm.setParameter(\"dosage\", \"20\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"02/01/2012\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"08/01/2012\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take once daily.\");\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 25L, \"\");\r\n}"},
 {"id":4106, "methodname":"testPrescribeOverrideCancel()", "methodnamerefined":"testPrescribeOverrideCancel", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testPrescribeOverrideCancel", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest.testPrescribeOverrideCancel()", "classid":561, "classname":"edu.ncsu.csc.itrust.http.PrescriptionInteractionAndAllergyTest", "shortclassname":"PrescriptionInteractionAndAllergyTest", "method":"public void testPrescribeOverrideCancel() throws Exception {\r\n    gen.standardData();\r\n    gen.ndCodes100();\r\n    gen.patient100();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"100\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    wr = wr.getFormWithID(\"formMain\").submit();\r\n    wr.getFormWithID(\"mainForm\").setParameter(\"visitDate\", new SimpleDateFormat(\"02/01/2012\").format(new Date()));\r\n    wr = wr.getFormWithID(\"mainForm\").submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 100L, \"Office visit\");\r\n    patientForm = wr.getFormWithID(\"prescriptionForm\");\r\n    patientForm.setParameter(\"medID\", \"00882219\");\r\n    patientForm.setParameter(\"dosage\", \"60\");\r\n    patientForm.setParameter(\"startDate\", new SimpleDateFormat(\"01/01/2012\").format(new Date()));\r\n    patientForm.setParameter(\"endDate\", new SimpleDateFormat(\"01/31/2012\").format(new Date()));\r\n    patientForm.setParameter(\"instructions\", \"Take three times daily with food.\");\r\n    wr = patientForm.submit();\r\n    assertTrue(wr.getText().contains(\"Allergy: Lantus\"));\r\n    WebForm overrideForm = wr.getFormWithID(\"prescriptionForm\");\r\n    overrideForm.getButtonWithID(\"cancel\").click();\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 100L, \"\");\r\n}"},
 {"id":4107, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.-init-()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"PrescriptionRefactoringUseCaseTest() {\r\n}"},
 {"id":4108, "methodname":"dateOffsetStr(java.util.Date,int)", "methodnamerefined":"dateOffsetStr", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.dateOffsetStr", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.dateOffsetStr(java.util.Date,int)", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"private String dateOffsetStr(Date date, int offset) {\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(date);\r\n    cal.add(Calendar.DATE, offset);\r\n    return dateFormat.format(cal.getTime());\r\n}"},
 {"id":4109, "methodname":"getVisitID(com.meterware.httpunit.WebResponse)", "methodnamerefined":"getVisitID", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.getVisitID", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.getVisitID(com.meterware.httpunit.WebResponse)", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"/* private String dateString(String d) {\nSimpleDateFormat(\"MM/dd/yyyy\").format()\n}\n */\r\nprivate long getVisitID(WebResponse wr) throws Exception {\r\n    WebForm form = wr.getFormWithID(\"mainForm\");\r\n    String ovIDStr = form.getParameterValue(\"ovID\");\r\n    return Long.parseLong(ovIDStr);\r\n}"},
 {"id":4110, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.setUp()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4111, "methodname":"testAcceptanceScenario1()", "methodnamerefined":"testAcceptanceScenario1", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario1", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario1()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"/**\r\n * test acceptance scenario1\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testAcceptanceScenario1() throws Exception {\r\n    gen.hcp4();\r\n    WebConversation wc = login(\"9000000004\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    String dateString = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    form.setParameter(\"visitDate\", dateString);\r\n    form.setParameter(\"hospitalID\", \"2\");\r\n    form.setParameter(\"notes\", \"Showing signs of dehydration.\");\r\n    form.getButtonWithID(\"update\").click();\r\n    // Check that it was created\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000004L, 1L, \"Office visit\");\r\n    // Check database.\r\n    long ovid = getVisitID(wr);\r\n    OfficeVisitDAO ovDAO = factory.getOfficeVisitDAO();\r\n    assertTrue(ovDAO.checkOfficeVisitExists(ovid, 1));\r\n    OfficeVisitBean ovbean = ovDAO.getOfficeVisit(ovid);\r\n    assertEquals(\"2\", ovbean.getHospitalID());\r\n    assertEquals(\"Showing signs of dehydration.\", ovbean.getNotes());\r\n    assertEquals(dateString, ovbean.getVisitDateStr());\r\n    // Add diagnosis\r\n    form = wr.getFormWithID(\"diagnosisForm\");\r\n    form.setParameter(\"ICDCode\", \"79.10\");\r\n    form.getButtonWithID(\"add_diagnosis\").click();\r\n    // Check page and database.\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    DiagnosesDAO diagDAO = factory.getDiagnosesDAO();\r\n    assertEquals(1, diagDAO.getList(ovid).size());\r\n    DiagnosisBean diagBean = diagDAO.getList(ovid).get(0);\r\n    assertEquals(diagBean.getICDCode(), \"79.10\");\r\n}"},
 {"id":4112, "methodname":"testAcceptanceScenario2()", "methodnamerefined":"testAcceptanceScenario2", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario2", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario2()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"/**\r\n * test acceptance scenario2\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testAcceptanceScenario2() throws Exception {\r\n    gen.officeVisit8();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // Select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    /* WebForm patientForm = wr.getForms()[0];\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\n    patientForm.getButtons()[1].click();\n    wr = wc.getCurrentPage();\n    assertEquals(ADDRESS + \"auth/hcp-uap/documentOfficeVisit.jsp\", wr.getURL().toString());\n    wr.getLinkWith(\"02/01/2011\").click();\n\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\n     */\r\n    // Add the information to the form\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"01/01/2011\");\r\n    form.setParameter(\"hospitalID\", \"3\");\r\n    form.setParameter(\"notes\", \"Complains of acute fatigue.\");\r\n    form.getButtonWithID(\"update\").click();\r\n    // Check that it was created\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 2L, \"Office visit\");\r\n    // add a prescription\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.setParameter(\"medID\", \"081096\");\r\n    form.setParameter(\"dosage\", \"200\");\r\n    form.setParameter(\"startDate\", \"02/01/2011\");\r\n    form.setParameter(\"endDate\", \"02/15/2011\");\r\n    form.setParameter(\"instructions\", \"Take every six hours with food.\");\r\n    wr = form.submit();\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 2L, \"\");\r\n    // there was an allergy warning\r\n    assertTrue(wr.getText().contains(\"Allergy: Aspirin\"));\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.getButtonWithID(\"cancel\").click();\r\n    // remain on the same page\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 2L, \"\");\r\n    PrescriptionsDAO pDAO = factory.getPrescriptionsDAO();\r\n    long ovid = getVisitID(wr);\r\n    assertEquals(0, pDAO.getList(ovid).size());\r\n}"},
 {"id":4113, "methodname":"testAcceptanceScenario3()", "methodnamerefined":"testAcceptanceScenario3", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario3", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario3()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"/**\r\n * test acceptance scenario3\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testAcceptanceScenario3() throws Exception {\r\n    gen.officeVisit5();\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // Select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"5\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from yesterday\r\n    String dateString = todayOffsetStr((-1));\r\n    wr.getLinkWith(dateString).click();\r\n    // Check that the page contains the existing office visit\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    assertEquals(dateString, form.getParameterValue(\"visitDate\"));\r\n    assertEquals(\"3\", form.getParameterValue(\"hospitalID\"));\r\n    assertEquals(\"Hates getting shots\", form.getParameterValue(\"notes\"));\r\n    WebTable tbl = wr.getTableWithID(\"labProceduresTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"13495-7\"));\r\n    tbl = wr.getTableWithID(\"immunizationsTable\");\r\n    rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Measles, Mumps, Rubella\"));\r\n    assertTrue(rows[3].getText().contains(\"Hepatitis B\"));\r\n    assertTrue(rows[4].getText().contains(\"Poliovirus\"));\r\n    // Add a new prescription.\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.setParameter(\"medID\", \"664662530\");\r\n    form.setParameter(\"dosage\", \"150\");\r\n    form.setParameter(\"startDate\", todayOffsetStr(0));\r\n    form.setParameter(\"endDate\", todayOffsetStr(21));\r\n    form.setParameter(\"instructions\", \"Take once daily with water.\");\r\n    wr = form.submit();\r\n    // Check page and database.\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    PrescriptionsDAO preDAO = factory.getPrescriptionsDAO();\r\n    assertEquals(1, preDAO.getList(380).size());\r\n    PrescriptionBean preBean = preDAO.getList(380).get(0);\r\n    assertEquals(preBean.getMedication().getNDCode(), \"664662530\");\r\n}"},
 {"id":4114, "methodname":"testAcceptanceScenario4()", "methodnamerefined":"testAcceptanceScenario4", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario4", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario4()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"/**\r\n * test acceptance scenario4\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testAcceptanceScenario4() throws Exception {\r\n    gen.officeVisit6();\r\n    gen.hcp4();\r\n    gen.ndCodes3();\r\n    WebConversation wc = login(\"9000000004\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from yesterday\r\n    String dateString = \"02/02/2011\";\r\n    wr.getLinkWith(dateString).click();\r\n    // Check that the page contains the existing office visit\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertEquals(390, getVisitID(wr));\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    assertEquals(dateString, form.getParameterValue(\"visitDate\"));\r\n    assertEquals(\"2\", form.getParameterValue(\"hospitalID\"));\r\n    assertEquals(\"Second medical visit in two days\", form.getParameterValue(\"notes\"));\r\n    WebTable tbl = wr.getTableWithID(\"prescriptionsTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Aspirin\"));\r\n    // Add a new prescription.\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.setParameter(\"medID\", \"678771191\");\r\n    form.setParameter(\"dosage\", \"400\");\r\n    form.setParameter(\"startDate\", \"02/02/2011\");\r\n    form.setParameter(\"endDate\", \"02/16/2011\");\r\n    form.setParameter(\"instructions\", \"Take once daily\");\r\n    wr = form.submit();\r\n    // Verify that warning occurred\r\n    assertTrue(wr.getText().contains(\"Currently Prescribed: Aspirin\"));\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.setParameter(\"overrideCode\", \"00006\");\r\n    form.getButtonWithID(\"continue\").click();\r\n    // Check page and database.\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    PrescriptionsDAO preDAO = factory.getPrescriptionsDAO();\r\n    assertEquals(2, preDAO.getList(390).size());\r\n    PrescriptionBean preBean = preDAO.getList(390).get(1);\r\n    assertEquals(\"678771191\", preBean.getMedication().getNDCode());\r\n}"},
 {"id":4115, "methodname":"testAcceptanceScenario5()", "methodnamerefined":"testAcceptanceScenario5", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario5", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testAcceptanceScenario5()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"/**\r\n * test acceptance scenario5\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testAcceptanceScenario5() throws Exception {\r\n    gen.officeVisit7();\r\n    gen.hcp5();\r\n    gen.ndCodes3();\r\n    WebConversation wc = login(\"9000000005\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from yesterday\r\n    String dateString = \"01/26/2011\";\r\n    wr.getLinkWith(dateString).click();\r\n    // Check that the page contains the existing office visit\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertEquals(395, getVisitID(wr));\r\n    WebTable tbl = wr.getTableWithID(\"prescriptionsTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Ibuprofen\"));\r\n    // edit the prescription\r\n    wr = tbl.getTableCell(2, 0).getLinkWith(\"Ibuprofen\").click();\r\n    assertEquals(\"iTrust - Edit Prescription Information\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    form.setParameter(\"dosage\", \"1000\");\r\n    form.setParameter(\"instructions\", \"Take as many as you want\");\r\n    wr = form.submit();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"information successfully updated\"));\r\n    PrescriptionsDAO preDAO = factory.getPrescriptionsDAO();\r\n    assertEquals(1, preDAO.getList(395).size());\r\n    PrescriptionBean preBean = preDAO.getList(395).get(0);\r\n    assertEquals(\"678771191\", preBean.getMedication().getNDCode());\r\n    assertEquals(1000, preBean.getDosage());\r\n    assertEquals(\"Take as many as you want\", preBean.getInstructions());\r\n    tbl = wr.getTableWithID(\"prescriptionsTable\");\r\n    assertEquals(\"Ibuprofen (678771191)\", tbl.getTableCell(2, 0).getText());\r\n    assertEquals(\"1000mg\", tbl.getTableCell(2, 1).getText());\r\n    assertEquals(\"Take as many as you want\", tbl.getTableCell(2, 3).getText());\r\n}"},
 {"id":4116, "methodname":"testEditPrescriptionLogging()", "methodnamerefined":"testEditPrescriptionLogging", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testEditPrescriptionLogging", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testEditPrescriptionLogging()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"/**\r\n * test Prescription logging\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testEditPrescriptionLogging() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    String dateString = \"02/02/2011\";\r\n    form.setParameter(\"visitDate\", dateString);\r\n    form.setParameter(\"hospitalID\", \"2\");\r\n    form.setParameter(\"notes\", \"Its a sunny day.\");\r\n    form.getButtonWithID(\"update\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 1L, \"\");\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_EDIT, 9000000000L, 1L, \"\");\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_REMOVE, 9000000000L, 1L, \"\");\r\n    // add a prescription\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.setParameter(\"medID\", \"081096\");\r\n    form.setParameter(\"dosage\", \"200\");\r\n    form.setParameter(\"startDate\", \"02/02/2011\");\r\n    form.setParameter(\"endDate\", \"02/09/2011\");\r\n    form.setParameter(\"instructions\", \"Take daily with water.\");\r\n    wr = form.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 1L, \"\");\r\n    // edit the prescription\r\n    WebTable tbl = wr.getTableWithID(\"prescriptionsTable\");\r\n    wr = tbl.getTableCell(2, 0).getLinkWith(\"Aspirin\").click();\r\n    assertEquals(\"iTrust - Edit Prescription Information\", wr.getTitle());\r\n    form = wr.getForms()[0];\r\n    form.setParameter(\"dosage\", \"400\");\r\n    wr = form.submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_EDIT, 9000000000L, 1L, \"\");\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // remove the prescription\r\n    tbl = wr.getTableWithID(\"prescriptionsTable\");\r\n    TableRow[] rows = tbl.getRows();\r\n    assertTrue(rows[2].getText().contains(\"Aspirin\"));\r\n    wr = tbl.getTableCell(2, 5).getLinkWith(\"Remove\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_REMOVE, 9000000000L, 1L, \"\");\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n}"},
 {"id":4117, "methodname":"testEditPrescriptionNoOverrideReason()", "methodnamerefined":"testEditPrescriptionNoOverrideReason", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testEditPrescriptionNoOverrideReason", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testEditPrescriptionNoOverrideReason()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"public void testEditPrescriptionNoOverrideReason() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    String dateString = \"02/02/2011\";\r\n    form.setParameter(\"visitDate\", dateString);\r\n    form.setParameter(\"hospitalID\", \"2\");\r\n    form.setParameter(\"notes\", \"Its a sunny day.\");\r\n    form.getButtonWithID(\"update\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 1L, \"\");\r\n    // add a prescription, but without instructions\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.setParameter(\"medID\", \"664662530\");\r\n    form.setParameter(\"dosage\", \"200\");\r\n    form.setParameter(\"startDate\", \"02/02/2011\");\r\n    form.setParameter(\"endDate\", \"02/09/2011\");\r\n    form.setParameter(\"instructions\", \"Take every day\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Allergy: Penicillin\"));\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.getButtonWithID(\"continue\").click();\r\n    // The allergy warning is still displayed\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Allergy: Penicillin\"));\r\n}"},
 {"id":4118, "methodname":"testIllegalCharacters()", "methodnamerefined":"testIllegalCharacters", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testIllegalCharacters", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testIllegalCharacters()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"/**\r\n * test illegal characters\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testIllegalCharacters() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // try to add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    String dateString = \"02/02/2011\";\r\n    form.setParameter(\"visitDate\", dateString);\r\n    form.setParameter(\"hospitalID\", \"2\");\r\n    form.setParameter(\"notes\", \"&ampersand&\");\r\n    form.getButtonWithID(\"update\").click();\r\n    // check for error message\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Input not valid\"));\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000000L, 1L, \"\");\r\n}"},
 {"id":4119, "methodname":"testPrescriptionNoInstructions()", "methodnamerefined":"testPrescriptionNoInstructions", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testPrescriptionNoInstructions", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testPrescriptionNoInstructions()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"/**\r\n * test Prescrition instructions\r\n *  throws Exception\r\n *\r\n * @author student\r\n * @author student\r\n */\r\npublic void testPrescriptionNoInstructions() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    String dateString = \"02/02/2011\";\r\n    form.setParameter(\"visitDate\", dateString);\r\n    form.setParameter(\"hospitalID\", \"2\");\r\n    form.setParameter(\"notes\", \"Its a sunny day.\");\r\n    form.getButtonWithID(\"update\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 1L, \"\");\r\n    // add a prescription, but without instructions\r\n    form = wr.getFormWithID(\"prescriptionForm\");\r\n    form.setParameter(\"medID\", \"081096\");\r\n    form.setParameter(\"dosage\", \"200\");\r\n    form.setParameter(\"startDate\", \"02/02/2011\");\r\n    form.setParameter(\"endDate\", \"02/09/2011\");\r\n    wr = form.submit();\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.PRESCRIPTION_ADD, 9000000000L, 1L, \"\");\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Instructions: Up to 300 alphanumeric characters, with space, and other punctuation\"));\r\n}"},
 {"id":4120, "methodname":"testReasonCodesAddNew()", "methodnamerefined":"testReasonCodesAddNew", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testReasonCodesAddNew", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.testReasonCodesAddNew()", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"public void testReasonCodesAddNew() {\r\n}"},
 {"id":4121, "methodname":"todayOffsetStr(int)", "methodnamerefined":"todayOffsetStr", "methodabbreviation":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.todayOffsetStr", "fullmethod":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest.todayOffsetStr(int)", "classid":562, "classname":"edu.ncsu.csc.itrust.http.PrescriptionRefactoringUseCaseTest", "shortclassname":"PrescriptionRefactoringUseCaseTest", "method":"private String todayOffsetStr(int offset) {\r\n    return dateOffsetStr(new Date(), offset);\r\n}"},
 {"id":4122, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.-init-()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"ReferralsTest() {\r\n}"},
 {"id":4123, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.setUp()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4124, "methodname":"testCreateNewReferral()", "methodnamerefined":"testCreateNewReferral", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.testCreateNewReferral", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.testCreateNewReferral()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"public void testCreateNewReferral() throws Exception {\r\n    gen.officeVisit3();\r\n    // login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from specific date\r\n    wr.getLinkWith(\"9/17/2009\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // click on the add referral button\r\n    form = wr.getFormWithID(\"createReferralForm\");\r\n    form.getButtonWithID(\"add_referral\").click();\r\n    // select the HCP\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Please Select a Personnel\", wr.getTitle());\r\n    form = wr.getForms()[1];\r\n    form.setParameter(\"FIRST_NAME\", \"Gandalf\");\r\n    form.setParameter(\"LAST_NAME\", \"Stormcrow\");\r\n    form.getButtons()[2].click();\r\n    wr = wc.getCurrentPage();\r\n    wr.getForms()[2].getButtons()[0].click();\r\n    // we should be on the edit referral page now\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Referral\", wr.getTitle());\r\n    // fill in the form\r\n    form = wr.getFormWithID(\"editReferralForm\");\r\n    form.setParameter(\"priority\", \"1\");\r\n    form.setParameter(\"referralDetails\", \"See Gandalf.  He will translate the engravings on that ring for you.\");\r\n    form.getButtonWithID(\"submitCreate\").click();\r\n    // we should be back on the edit office visit page\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // see that referral is now in the table\r\n    WebTable tbl = wr.getTableWithID(\"referralsTable\");\r\n    assertEquals(\"Gandalf Stormcrow\", tbl.getCellAsText(2, 0));// receiving HCP\r\n\r\n    assertEquals(\"See Gandalf. He will translate the engravings on that ring for you.\", tbl.getCellAsText(2, 1));// notes\r\n\r\n    assertEquals(\"1\", tbl.getCellAsText(2, 2));// priority\r\n\r\n    String datestr = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    assertTrue(tbl.getCellAsText(2, 3).contains(datestr));// time stamp\r\n\r\n}"},
 {"id":4125, "methodname":"testDeleteExistingReferral()", "methodnamerefined":"testDeleteExistingReferral", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.testDeleteExistingReferral", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.testDeleteExistingReferral()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"/**\r\n * Tests deleting (canceling) an existing referral from the referrals list.\r\n *\r\n * @throws Exception\r\n * \t\tExceptions will be thrown if any of the .get*WithID() calls fail.\r\n */\r\npublic void testDeleteExistingReferral() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Sent Referrals\").click();\r\n    // select the patient\r\n    WebForm form = wr.getFormWithID(\"editReferralForm\");\r\n    form.getButtons()[0].click();\r\n    // we should be on the edit referral page now\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Referral\", wr.getTitle());\r\n    // click the delete button and confirm\r\n    form = wr.getFormWithID(\"editReferralForm\");\r\n    form.getButtonWithID(\"submitDelete\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Referral\", wr.getTitle());\r\n    form = wr.getFormWithID(\"editReferralForm\");\r\n    form.getButtonWithID(\"submitCreate\").click();\r\n    // we should be back on the edit office visit page\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Sent Referrals\", wr.getTitle());\r\n    // verify that no exceptions were thrown\r\n    assertFalse(wr.getText().contains(\"NumberFormatException\"));\r\n    assertFalse(wr.getText().contains(\"<h2>Oops! Your page wasnt found</h2>\"));\r\n    assertFalse(wr.getText().contains(\"NullPointerException\"));\r\n}"},
 {"id":4126, "methodname":"testHCPViewOVFromReferral()", "methodnamerefined":"testHCPViewOVFromReferral", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.testHCPViewOVFromReferral", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.testHCPViewOVFromReferral()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"public void testHCPViewOVFromReferral() throws Exception {\r\n    gen.referrals();\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Received Referrals\").click();\r\n    // Clicks to view referral detail\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Received Referrals\", wr.getTitle());\r\n    WebTable tbl = wr.getTableWithID(\"receivedReferralsTable\");\r\n    tbl.getTableCell(3, 3).getLinkWith(\"View\").click();\r\n    // Clicks on the date in the referral detail to go to Office Visit page\r\n    wr = wc.getCurrentPage();\r\n    WebTable reftbl = wr.getTableWithID(\"receivedViewingReferral\");\r\n    reftbl.getTableCell(2, 3).getLinkWith(\"06/10/2007\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Viewing information for\"));\r\n}"},
 {"id":4127, "methodname":"testHCPViewSentReferrals()", "methodnamerefined":"testHCPViewSentReferrals", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.testHCPViewSentReferrals", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.testHCPViewSentReferrals()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"public void testHCPViewSentReferrals() throws Exception {\r\n    gen.hcp4();\r\n    gen.hcp5();\r\n    gen.referral_sort_testdata();\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Sent Referrals\").click();\r\n    assertEquals(\"iTrust - View Sent Referrals\", wr.getTitle());\r\n    WebTable tbl = wr.getTableWithID(\"sentReferralsTable\");\r\n    assertEquals(11, tbl.getRowCount());\r\n    // original sort is by time stamp (descending)\r\n    int updatedColumn = 2;\r\n    assertEquals(\"12/22/2011\n00:00 AM\", tbl.getCellAsText(2, updatedColumn));\r\n    assertEquals(\"12/10/2011\n00:00 AM\", tbl.getCellAsText(3, updatedColumn));\r\n    assertEquals(\"12/01/2010\n00:00 AM\", tbl.getCellAsText(4, updatedColumn));\r\n    assertEquals(\"11/10/2010\n00:00 AM\", tbl.getCellAsText(5, updatedColumn));\r\n    assertEquals(\"10/13/2010\n00:00 AM\", tbl.getCellAsText(6, updatedColumn));\r\n    assertEquals(\"08/10/2010\n00:00 AM\", tbl.getCellAsText(7, updatedColumn));\r\n    assertEquals(\"11/30/2009\n00:00 AM\", tbl.getCellAsText(8, updatedColumn));\r\n    assertEquals(\"09/10/2009\n00:00 AM\", tbl.getCellAsText(9, updatedColumn));\r\n    assertEquals(\"10/10/2008\n00:00 AM\", tbl.getCellAsText(10, updatedColumn));\r\n    // Sort by receiving HCP\r\n    wr.getFormWithID(\"sortByReceivingHCP\").getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Sent Referrals\", wr.getTitle());\r\n    tbl = wr.getTableWithID(\"sentReferralsTable\");\r\n    assertEquals(11, tbl.getRowCount());\r\n    int receivingColumn = 0;\r\n    assertEquals(\"Beaker Beaker\", tbl.getCellAsText(2, receivingColumn));\r\n    assertEquals(\"Beaker Beaker\", tbl.getCellAsText(3, receivingColumn));\r\n    assertEquals(\"Kelly Doctor\", tbl.getCellAsText(4, receivingColumn));\r\n    assertEquals(\"Kelly Doctor\", tbl.getCellAsText(5, receivingColumn));\r\n    assertEquals(\"Antonio Medico\", tbl.getCellAsText(6, receivingColumn));\r\n    assertEquals(\"Antonio Medico\", tbl.getCellAsText(7, receivingColumn));\r\n    assertEquals(\"Antonio Medico\", tbl.getCellAsText(8, receivingColumn));\r\n    assertEquals(\"Sarah Soulcrusher\", tbl.getCellAsText(9, receivingColumn));\r\n    assertEquals(\"Sarah Soulcrusher\", tbl.getCellAsText(10, receivingColumn));\r\n    // Sort by receiving HCP in reverse\r\n    wr.getFormWithID(\"sortByReceivingHCP\").getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Sent Referrals\", wr.getTitle());\r\n    tbl = wr.getTableWithID(\"sentReferralsTable\");\r\n    assertEquals(11, tbl.getRowCount());\r\n    assertEquals(\"Beaker Beaker\", tbl.getCellAsText(10, receivingColumn));\r\n    assertEquals(\"Beaker Beaker\", tbl.getCellAsText(9, receivingColumn));\r\n    assertEquals(\"Kelly Doctor\", tbl.getCellAsText(8, receivingColumn));\r\n    assertEquals(\"Kelly Doctor\", tbl.getCellAsText(7, receivingColumn));\r\n    assertEquals(\"Antonio Medico\", tbl.getCellAsText(6, receivingColumn));\r\n    assertEquals(\"Antonio Medico\", tbl.getCellAsText(5, receivingColumn));\r\n    assertEquals(\"Antonio Medico\", tbl.getCellAsText(4, receivingColumn));\r\n    assertEquals(\"Sarah Soulcrusher\", tbl.getCellAsText(3, receivingColumn));\r\n    assertEquals(\"Sarah Soulcrusher\", tbl.getCellAsText(2, receivingColumn));\r\n    // Sort by patient\r\n    wr.getFormWithID(\"sortByPatient\").getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Sent Referrals\", wr.getTitle());\r\n    tbl = wr.getTableWithID(\"sentReferralsTable\");\r\n    assertEquals(11, tbl.getRowCount());\r\n    int patientColumn = 1;\r\n    assertEquals(\"Fozzie Bear\", tbl.getCellAsText(2, patientColumn));\r\n    assertEquals(\"Fozzie Bear\", tbl.getCellAsText(3, patientColumn));\r\n    assertEquals(\"Fozzie Bear\", tbl.getCellAsText(4, patientColumn));\r\n    assertEquals(\"Random Person\", tbl.getCellAsText(5, patientColumn));\r\n    assertEquals(\"Random Person\", tbl.getCellAsText(6, patientColumn));\r\n    assertEquals(\"Random Person\", tbl.getCellAsText(7, patientColumn));\r\n    assertEquals(\"Andy Programmer\", tbl.getCellAsText(8, patientColumn));\r\n    assertEquals(\"Andy Programmer\", tbl.getCellAsText(9, patientColumn));\r\n    assertEquals(\"Andy Programmer\", tbl.getCellAsText(10, patientColumn));\r\n    // Sort by priority\r\n    wr.getFormWithID(\"sortByPriority\").getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Sent Referrals\", wr.getTitle());\r\n    tbl = wr.getTableWithID(\"sentReferralsTable\");\r\n    assertEquals(11, tbl.getRowCount());\r\n    int priorityColumn = 3;\r\n    assertEquals(\"1\", tbl.getCellAsText(2, priorityColumn));\r\n    assertEquals(\"1\", tbl.getCellAsText(3, priorityColumn));\r\n    assertEquals(\"1\", tbl.getCellAsText(4, priorityColumn));\r\n    assertEquals(\"2\", tbl.getCellAsText(5, priorityColumn));\r\n    assertEquals(\"2\", tbl.getCellAsText(6, priorityColumn));\r\n    assertEquals(\"2\", tbl.getCellAsText(7, priorityColumn));\r\n    assertEquals(\"3\", tbl.getCellAsText(8, priorityColumn));\r\n    assertEquals(\"3\", tbl.getCellAsText(9, priorityColumn));\r\n    assertEquals(\"3\", tbl.getCellAsText(10, priorityColumn));\r\n}"},
 {"id":4128, "methodname":"testHCPViewsReferralsList()", "methodnamerefined":"testHCPViewsReferralsList", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.testHCPViewsReferralsList", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.testHCPViewsReferralsList()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"public void testHCPViewsReferralsList() throws Exception {\r\n    gen.referrals();\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Received Referrals\").click();\r\n    // Checks referral list to see that it is sorted by priority\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Received Referrals\", wr.getTitle());\r\n    WebTable tbl = wr.getTableWithID(\"receivedReferralsTable\");\r\n    assertEquals(\"1\", tbl.getTableCell(2, 0).getText());\r\n    assertEquals(\"1\", tbl.getTableCell(3, 0).getText());\r\n    assertEquals(\"1\", tbl.getTableCell(4, 0).getText());\r\n    assertEquals(\"1\", tbl.getTableCell(5, 0).getText());\r\n    assertEquals(\"2\", tbl.getTableCell(6, 0).getText());\r\n    assertEquals(\"2\", tbl.getTableCell(7, 0).getText());\r\n    assertEquals(\"3\", tbl.getTableCell(8, 0).getText());\r\n}"},
 {"id":4129, "methodname":"testHPCViewReferralsEdit()", "methodnamerefined":"testHPCViewReferralsEdit", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.testHPCViewReferralsEdit", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.testHPCViewReferralsEdit()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"public void testHPCViewReferralsEdit() throws Exception {\r\n    gen.hcp4();\r\n    gen.hcp5();\r\n    gen.referral_sort_testdata();\r\n    WebConversation wc = login(\"9000000003\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Sent Referrals\").click();\r\n    assertEquals(\"iTrust - View Sent Referrals\", wr.getTitle());\r\n    WebTable tbl = wr.getTableWithID(\"sentReferralsTable\");\r\n    assertEquals(11, tbl.getRowCount());\r\n    // click on the \"Details\" button\r\n    wr.getFormWithID(\"editReferralForm\").getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Referral\", wr.getTitle());\r\n    // click the \"Save Changes\" button\r\n    wr.getFormWithID(\"editReferralForm\").getButtonWithID(\"submitEdit\").click();\r\n    wr = wc.getCurrentPage();\r\n    // verify that no exceptions were thrown\r\n    assertFalse(wr.getText().contains(\"NumberFormatException\"));\r\n    assertFalse(wr.getText().contains(\"<h2>Oops! Your page wasnt found</h2>\"));\r\n    assertFalse(wr.getText().contains(\"NullPointerException\"));\r\n}"},
 {"id":4130, "methodname":"testModifyExistingReferral()", "methodnamerefined":"testModifyExistingReferral", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.testModifyExistingReferral", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.testModifyExistingReferral()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"public void testModifyExistingReferral() throws Exception {\r\n    // login\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // select the patient\r\n    WebForm form = wr.getForms()[0];\r\n    form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // Select the office visit from specific date\r\n    wr.getLinkWith(\"6/10/2007\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // get the row containing the referral to edit\r\n    int rown = 3;\r\n    WebTable tbl = wr.getTableWithID(\"referralsTable\");\r\n    assertTrue(tbl.getCellAsText(rown, 3).contains(\"07/09/2007\"));\r\n    form = tbl.getTableCell(rown, 4).getForms()[0];\r\n    form.getButtons()[0].click();\r\n    // we should be on the edit referral page now\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Referral\", wr.getTitle());\r\n    // fill in the form\r\n    form = wr.getFormWithID(\"editReferralForm\");\r\n    form.setParameter(\"priority\", \"1\");\r\n    form.setParameter(\"referralDetails\", \"Gandalf will take care of you--for a price!\");\r\n    form.getButtonWithID(\"submitEdit\").click();\r\n    // we should be back on the edit office visit page\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // verify that no exceptions were thrown\r\n    assertFalse(wr.getText().contains(\"NumberFormatException\"));\r\n    assertFalse(wr.getText().contains(\"<h2>Oops! Your page wasnt found</h2>\"));\r\n    assertFalse(wr.getText().contains(\"NullPointerException\"));\r\n    // see that referral is now in the table\r\n    tbl = wr.getTableWithID(\"referralsTable\");\r\n    assertEquals(\"Gandalf Stormcrow\", tbl.getCellAsText(rown, 0));// receiving HCP\r\n\r\n    assertEquals(\"Gandalf will take care of you--for a price!\", tbl.getCellAsText(rown, 1));// notes\r\n\r\n    assertEquals(\"1\", tbl.getCellAsText(rown, 2));// priority\r\n\r\n    assertTrue(tbl.getCellAsText(rown, 3).contains(\"07/09/2007\"));// time stamp\r\n\r\n}"},
 {"id":4131, "methodname":"testPatientSendsMessageToReceivingHCP()", "methodnamerefined":"testPatientSendsMessageToReceivingHCP", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.testPatientSendsMessageToReceivingHCP", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.testPatientSendsMessageToReceivingHCP()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"public void testPatientSendsMessageToReceivingHCP() throws Exception {\r\n    gen.patient2();\r\n    gen.referrals();\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"My Referrals\").click();\r\n    // Pull up the details of the very first referral in the table\r\n    wr = wc.getCurrentPage();\r\n    WebTable tbl = wr.getTableWithID(\"patientReferralsTable\");\r\n    assertEquals(\"Gandalf Stormcrow\", tbl.getTableCell(3, 1).getText());\r\n    assertEquals(\"07/15/2007 00:00 AM\", tbl.getTableCell(3, 2).getText());\r\n    tbl.getTableCell(3, 3).getLinkWith(\"View\").click();\r\n    // Click on link to send a message\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Referrals\", wr.getTitle());\r\n    WebTable reftbl = wr.getTableWithID(\"patientViewingReferral\");\r\n    assertEquals(\"06/10/2007\", reftbl.getTableCell(2, 3).getText());\r\n    assertEquals(\"Gandalf will make sure that the virus does not get past your immune system\", reftbl.getTableCell(2, 4).getText());\r\n    reftbl.getTableCell(2, 6).getLinkWith(\"Email Gandalf Stormcrow\").click();\r\n    // Fill out the message box and submit a message to the receiving HCP\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Referrals\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"To Gandalf Stormcrow\"));\r\n    WebForm form = wr.getForms()[2];\r\n    form.setParameter(\"messageBody\", \"I want an appointment!\");\r\n    form.getButtons()[0].click();\r\n    // Check to see if there is a success message.\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Your message has successfully been sent!\"));\r\n}"},
 {"id":4132, "methodname":"testPatientViewReferralsWithDetails()", "methodnamerefined":"testPatientViewReferralsWithDetails", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReferralsTest.testPatientViewReferralsWithDetails", "fullmethod":"edu.ncsu.csc.itrust.http.ReferralsTest.testPatientViewReferralsWithDetails()", "classid":563, "classname":"edu.ncsu.csc.itrust.http.ReferralsTest", "shortclassname":"ReferralsTest", "method":"public void testPatientViewReferralsWithDetails() throws Exception {\r\n    gen.patient2();\r\n    gen.referrals();\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Referrals\").click();\r\n    // Check to see that a referral exists with a receiving HCP of Gandalf Stormcrow\r\n    wr = wc.getCurrentPage();\r\n    WebTable tbl = wr.getTableWithID(\"patientReferralsTable\");\r\n    assertTrue(tbl.getTableCell(3, 1).getText().contains(\"Gandalf Stormcrow\"));\r\n    // Click to see details about the referral and check to see Sending HCP as Kelly Doctor\r\n    // Receiving doctor again is Gandalf Stormcrow\r\n    tbl.getTableCell(3, 3).getLinkWith(\"View\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View Referrals\", wr.getTitle());\r\n    WebTable reftbl = wr.getTableWithID(\"patientViewingReferral\");\r\n    assertTrue(reftbl.getTableCell(2, 1).getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(reftbl.getTableCell(2, 2).getText().contains(\"Gandalf\"));\r\n    assertTrue(reftbl.getTableCell(2, 4).getText().contains(\"Gandalf will make sure that the virus\"));\r\n}"},
 {"id":4133, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReportAdverseImmuEventTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ReportAdverseImmuEventTest.-init-()", "classid":564, "classname":"edu.ncsu.csc.itrust.http.ReportAdverseImmuEventTest", "shortclassname":"ReportAdverseImmuEventTest", "method":"ReportAdverseImmuEventTest() {\r\n}"},
 {"id":4134, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReportAdverseImmuEventTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ReportAdverseImmuEventTest.setUp()", "classid":564, "classname":"edu.ncsu.csc.itrust.http.ReportAdverseImmuEventTest", "shortclassname":"ReportAdverseImmuEventTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.cptCodes();\r\n    gen.ovImmune();\r\n    gen.patient1();\r\n}"},
 {"id":4135, "methodname":"testReport()", "methodnamerefined":"testReport", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReportAdverseImmuEventTest.testReport", "fullmethod":"edu.ncsu.csc.itrust.http.ReportAdverseImmuEventTest.testReport()", "classid":564, "classname":"edu.ncsu.csc.itrust.http.ReportAdverseImmuEventTest", "shortclassname":"ReportAdverseImmuEventTest", "method":"public void testReport() throws Exception {\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Records\").click();\r\n    assertEquals(\"iTrust - View My Records\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 1L, 1L, \"\");\r\n    WebLink[] weblinks = wr.getLinks();\r\n    for (int i = 0; i < (weblinks.length); i++) {\r\n        if (weblinks[i].getText().equals(\"Report\")) {\r\n            wr = weblinks[i].click();\r\n            break;\r\n        }\r\n    }\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Report Adverse Event\", wr.getTitle());\r\n    WebForm patientForm = wr.getFormWithID(\"mainForm\");\r\n    patientForm.getScriptableObject().setParameterValue(\"Comment\", \"Ive been experiencing extreme fatigue and severe nausea following this immunization.\");\r\n    wr = patientForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Adverse Event Successfully Reported\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ADVERSE_EVENT_REPORT, 1L, 0L, \"\");\r\n}"},
 {"id":4136, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest.-init-()", "classid":565, "classname":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest", "shortclassname":"ReportAdversePrescriptionTest", "method":"ReportAdversePrescriptionTest() {\r\n}"},
 {"id":4137, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest.setUp()", "classid":565, "classname":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest", "shortclassname":"ReportAdversePrescriptionTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.ovMed();\r\n    gen.patient2();\r\n    gen.patient1();\r\n}"},
 {"id":4138, "methodname":"testReport()", "methodnamerefined":"testReport", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest.testReport", "fullmethod":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest.testReport()", "classid":565, "classname":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest", "shortclassname":"ReportAdversePrescriptionTest", "method":"public void testReport() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0, \"\");\r\n    wr = wr.getLinkWith(\"Prescription Records\").click();\r\n    assertEquals(\"iTrust - Get My Prescription Report\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    // patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[0].click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_REPORT_VIEW, 2L, 2L, \"\");\r\n    wr = wc.getCurrentPage();\r\n    patientForm = wr.getForms()[1];\r\n    patientForm.setParameter(\"checking0\", \"Y\");\r\n    patientForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Report Adverse Event\", wr.getTitle());\r\n    patientForm = wr.getFormWithID(\"mainForm\");\r\n    patientForm.getScriptableObject().setParameterValue(\"Comment\", \"My joints hurt and my muscles ache. Ive been having severe nausea after taking this medication.\");\r\n    wr = patientForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"Adverse Event Successfully Reported\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ADVERSE_EVENT_REPORT, 2L, 0, \"\");\r\n}"},
 {"id":4139, "methodname":"testReportAdverseEventsButton()", "methodnamerefined":"testReportAdverseEventsButton", "methodabbreviation":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest.testReportAdverseEventsButton", "fullmethod":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest.testReportAdverseEventsButton()", "classid":565, "classname":"edu.ncsu.csc.itrust.http.ReportAdversePrescriptionTest", "shortclassname":"ReportAdversePrescriptionTest", "method":"public void testReportAdverseEventsButton() throws Exception {\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0, \"\");\r\n    wr = wr.getLinkWith(\"Prescription Records\").click();\r\n    assertEquals(\"iTrust - Get My Prescription Report\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getButtons()[0].click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRESCRIPTION_REPORT_VIEW, 1L, 1L, \"\");\r\n    wr = wc.getCurrentPage();\r\n    for (int i = 0; i < (wr.getElementNames().length); i++) {\r\n        assertNotSame(\"adevent\", wr.getElementNames()[i]);\r\n    }\r\n}"},
 {"id":4140, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.SearchUserTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.SearchUserTest.-init-()", "classid":566, "classname":"edu.ncsu.csc.itrust.http.SearchUserTest", "shortclassname":"SearchUserTest", "method":"SearchUserTest() {\r\n}"},
 {"id":4141, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.SearchUserTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.SearchUserTest.setUp()", "classid":566, "classname":"edu.ncsu.csc.itrust.http.SearchUserTest", "shortclassname":"SearchUserTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4142, "methodname":"testGetPatient()", "methodnamerefined":"testGetPatient", "methodabbreviation":"edu.ncsu.csc.itrust.http.SearchUserTest.testGetPatient", "fullmethod":"edu.ncsu.csc.itrust.http.SearchUserTest.testGetPatient()", "classid":566, "classname":"edu.ncsu.csc.itrust.http.SearchUserTest", "shortclassname":"SearchUserTest", "method":"public void testGetPatient() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    wr.getForms()[1].setParameter(\"FIRST_NAME\", \"Random\");\r\n    wr.getForms()[1].setParameter(\"LAST_NAME\", \"Person\");\r\n    wr.getForms()[1].getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    WebTable wt = wr.getTableStartingWith(\"MID\");\r\n    assertEquals(\"MID\", wt.getCellAsText(0, 0));\r\n    assertEquals(\"\", wt.getCellAsText(1, 0));\r\n    assertEquals(\"Random\", wt.getCellAsText(1, 1));\r\n    assertEquals(\"Person\", wt.getCellAsText(1, 2));\r\n}"},
 {"id":4143, "methodname":"testGetPatient2()", "methodnamerefined":"testGetPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.http.SearchUserTest.testGetPatient2", "fullmethod":"edu.ncsu.csc.itrust.http.SearchUserTest.testGetPatient2()", "classid":566, "classname":"edu.ncsu.csc.itrust.http.SearchUserTest", "shortclassname":"SearchUserTest", "method":"public void testGetPatient2() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    wr.getForms()[1].setParameter(\"FIRST_NAME\", \"Andy\");\r\n    wr.getForms()[1].getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    WebTable wt = wr.getTableStartingWith(\"MID\");\r\n    assertEquals(\"MID\", wt.getCellAsText(0, 0));\r\n    assertEquals(\"\", wt.getCellAsText(1, 0));\r\n    assertEquals(\"Andy\", wt.getCellAsText(1, 1));\r\n    assertEquals(\"Programmer\", wt.getCellAsText(1, 2));\r\n}"},
 {"id":4144, "methodname":"testGetPatient3()", "methodnamerefined":"testGetPatient3", "methodabbreviation":"edu.ncsu.csc.itrust.http.SearchUserTest.testGetPatient3", "fullmethod":"edu.ncsu.csc.itrust.http.SearchUserTest.testGetPatient3()", "classid":566, "classname":"edu.ncsu.csc.itrust.http.SearchUserTest", "shortclassname":"SearchUserTest", "method":"public void testGetPatient3() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"UAPs\").click();\r\n    assertEquals(\"iTrust - Please Select a Personnel\", wr.getTitle());\r\n    wr.getForms()[1].setParameter(\"FIRST_NAME\", \"Kelly\");\r\n    wr.getForms()[1].setParameter(\"LAST_NAME\", \"Doctor\");\r\n    wr.getForms()[1].getButtons()[2].click();\r\n    wr = wc.getCurrentPage();\r\n    WebTable wt = wr.getTables()[1];\r\n    assertEquals(\"MID\", wt.getCellAsText(0, 0));/* assertEquals(\"\", wt.getCellAsText(1, 0));\n    assertEquals(\"Kelly\", wt.getCellAsText(1, 1));\n    assertEquals(\"Doctor\", wt.getCellAsText(1, 2));\n     */\r\n\r\n}"},
 {"id":4145, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.-init-()", "classid":567, "classname":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest", "shortclassname":"SecureMIDNFRTest", "method":"SecureMIDNFRTest() {\r\n}"},
 {"id":4146, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.setUp()", "classid":567, "classname":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest", "shortclassname":"SecureMIDNFRTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.ndCodes();\r\n    gen.uap1();\r\n    gen.patient2();\r\n    gen.patient1();\r\n    gen.patient5();\r\n    gen.hcp0();\r\n}"},
 {"id":4147, "methodname":"testMIDShown1()", "methodnamerefined":"testMIDShown1", "methodabbreviation":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.testMIDShown1", "fullmethod":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.testMIDShown1()", "classid":567, "classname":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest", "shortclassname":"SecureMIDNFRTest", "method":"public void testMIDShown1() throws Exception {\r\n    // login uap\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // choose Edit Patient\r\n    wr = wr.getLinkWith(\"Edit Patient\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    // get the current page\r\n    wr = wc.getCurrentPage();\r\n    // confirm no MID in url\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPatient.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 8000000009L, 2L, \"\");\r\n}"},
 {"id":4148, "methodname":"testMIDShown2()", "methodnamerefined":"testMIDShown2", "methodabbreviation":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.testMIDShown2", "fullmethod":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.testMIDShown2()", "classid":567, "classname":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest", "shortclassname":"SecureMIDNFRTest", "method":"public void testMIDShown2() throws Exception {\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // choose Edit Patient\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    // get the current page\r\n    wr = wc.getCurrentPage();\r\n    // confirm no MID in url\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPatient.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DEMOGRAPHICS_VIEW, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4149, "methodname":"testMIDShown3()", "methodnamerefined":"testMIDShown3", "methodabbreviation":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.testMIDShown3", "fullmethod":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest.testMIDShown3()", "classid":567, "classname":"edu.ncsu.csc.itrust.http.SecureMIDNFRTest", "shortclassname":"SecureMIDNFRTest", "method":"public void testMIDShown3() throws Exception {\r\n    // log in as hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // go to edit phr\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    // select patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = patientForm.submit();\r\n    // find the baby programmer link\r\n    wr = wr.getLinkWith(\"Baby Programmer\").click();\r\n    // make sure theres no MID in the url\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPHR.jsp?relative=1\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4150, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.SecurePasswordTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.SecurePasswordTest.-init-()", "classid":568, "classname":"edu.ncsu.csc.itrust.http.SecurePasswordTest", "shortclassname":"SecurePasswordTest", "method":"SecurePasswordTest() {\r\n}"},
 {"id":4151, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.SecurePasswordTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.SecurePasswordTest.setUp()", "classid":568, "classname":"edu.ncsu.csc.itrust.http.SecurePasswordTest", "shortclassname":"SecurePasswordTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4152, "methodname":"testLoginHash()", "methodnamerefined":"testLoginHash", "methodabbreviation":"edu.ncsu.csc.itrust.http.SecurePasswordTest.testLoginHash", "fullmethod":"edu.ncsu.csc.itrust.http.SecurePasswordTest.testLoginHash()", "classid":568, "classname":"edu.ncsu.csc.itrust.http.SecurePasswordTest", "shortclassname":"SecurePasswordTest", "method":"public void testLoginHash() throws Exception {\r\n    // Kelly Doctor logs into iTrust\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // Ensure password pw is hashed correctly and stored in the database\r\n    wr = wr.getLinkWith(\"Display Database\").click();\r\n    assertEquals(DigestUtils.shaHex(\"pw\"), wr.getTableWithID(\"users\").getCellAsText(1, 1));\r\n}"},
 {"id":4153, "methodname":"testResetPasswordHash()", "methodnamerefined":"testResetPasswordHash", "methodabbreviation":"edu.ncsu.csc.itrust.http.SecurePasswordTest.testResetPasswordHash", "fullmethod":"edu.ncsu.csc.itrust.http.SecurePasswordTest.testResetPasswordHash()", "classid":568, "classname":"edu.ncsu.csc.itrust.http.SecurePasswordTest", "shortclassname":"SecurePasswordTest", "method":"public void testResetPasswordHash() throws Exception {\r\n    // Click Reset Password at the login screen\r\n    WebConversation wc = new WebConversation();\r\n    WebResponse wr = wc.getResponse(iTrustHTTPTest.ADDRESS);\r\n    wr = wr.getLinkWith(\"Reset Password\").click();\r\n    // Enter 1 in the MID field for Random Person\r\n    wr.getForms()[1].setParameter(\"mid\", \"1\");\r\n    wr = wr.getForms()[1].submit();\r\n    // Answer security question and set new password\r\n    wr.getForms()[1].setParameter(\"answer\", \"blue\");\r\n    wr.getForms()[1].setParameter(\"password\", \"newPw12345\");\r\n    wr.getForms()[1].setParameter(\"confirmPassword\", \"newPw12345\");\r\n    wr = wr.getForms()[1].submit();\r\n    iTrustHTTPTest.assertLogged(TransactionType.PASSWORD_RESET, 1L, 1L, \"\");\r\n    // Ensure that the password has been hashed\r\n    wr = wr.getLinkWith(\"Display Database\").click();\r\n    assertEquals(\"c43d8e3fe57fe45586d03204c4db94b177256d51\", wr.getTableWithID(\"users\").getCellAsText(9, 1));\r\n}"},
 {"id":4154, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.-init-()", "classid":569, "classname":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest", "shortclassname":"SendEmailNotificationTest", "method":"SendEmailNotificationTest() {\r\n}"},
 {"id":4155, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.setUp()", "classid":569, "classname":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest", "shortclassname":"SendEmailNotificationTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.icd9cmCodes();\r\n    gen.ndCodes();\r\n    gen.hospitals();\r\n    gen.hcp1();\r\n    gen.hcp2();\r\n    gen.hcp3();\r\n    gen.er4();\r\n    gen.patient9();\r\n    gen.UC32Acceptance();\r\n    gen.clearLoginFailures();\r\n}"},
 {"id":4156, "methodname":"testOfficeVisitRemindersEmail()", "methodnamerefined":"testOfficeVisitRemindersEmail", "methodabbreviation":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.testOfficeVisitRemindersEmail", "fullmethod":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.testOfficeVisitRemindersEmail()", "classid":569, "classname":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest", "shortclassname":"SendEmailNotificationTest", "method":"public void testOfficeVisitRemindersEmail() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Office Visit Reminders\").click();\r\n    assertTrue(wr.getText().contains(\"Patients Needing Visits\"));\r\n    wr = wr.getForms()[0].submit();\r\n    assertTrue(wr.getText().contains(\"Darryl Thompson\"));\r\n    wr = wr.getLinkWith(\"Darryl Thompson\").click();\r\n    assertTrue(wr.getText().contains(\"Send Email Form\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_REMINDERS_VIEW, 9900000000L, 0L, \"\");\r\n}"},
 {"id":4157, "methodname":"testPrescriptionRenewalEmail()", "methodnamerefined":"testPrescriptionRenewalEmail", "methodabbreviation":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.testPrescriptionRenewalEmail", "fullmethod":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.testPrescriptionRenewalEmail()", "classid":569, "classname":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest", "shortclassname":"SendEmailNotificationTest", "method":"public void testPrescriptionRenewalEmail() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Potential Prescription-Renewals\").click();\r\n    assertTrue(wr.getText().contains(\"Darryl Thompson\"));\r\n    wr = wr.getLinkWith(\"Darryl Thompson\").click();\r\n    assertTrue(wr.getText().contains(\"Send Email Form\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PRECONFIRM_PRESCRIPTION_RENEWAL, 9900000000L, 99L, \"\");\r\n}"},
 {"id":4158, "methodname":"testSendAnEmail()", "methodnamerefined":"testSendAnEmail", "methodabbreviation":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.testSendAnEmail", "fullmethod":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest.testSendAnEmail()", "classid":569, "classname":"edu.ncsu.csc.itrust.http.SendEmailNotificationTest", "shortclassname":"SendEmailNotificationTest", "method":"public void testSendAnEmail() throws Exception {\r\n    WebConversation wc = login(\"9900000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9900000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Office Visit Reminders\").click();\r\n    assertTrue(wr.getText().contains(\"Patients Needing Visits\"));\r\n    wr = wr.getForms()[0].submit();\r\n    assertTrue(wr.getText().contains(\"Darryl Thompson\"));\r\n    wr = wr.getLinkWith(\"Darryl Thompson\").click();\r\n    assertTrue(wr.getText().contains(\"Send Email Form\"));\r\n    wr = wr.getForms()[0].submit();\r\n    assertTrue(wr.getText().contains(\"Your Email was sent:\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_REMINDERS_VIEW, 9900000000L, 0L, \"\");\r\n}"},
 {"id":4159, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.-init-()", "classid":570, "classname":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest", "shortclassname":"SurveyUseCaseTest", "method":"SurveyUseCaseTest() {\r\n}"},
 {"id":4160, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.setUp()", "classid":570, "classname":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest", "shortclassname":"SurveyUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n}"},
 {"id":4161, "methodname":"testTakeSatisfactionSurveyCancel()", "methodnamerefined":"testTakeSatisfactionSurveyCancel", "methodabbreviation":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.testTakeSatisfactionSurveyCancel", "fullmethod":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.testTakeSatisfactionSurveyCancel()", "classid":570, "classname":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest", "shortclassname":"SurveyUseCaseTest", "method":"/* Precondition:\nPatient 2 and HCP 9000000000 are in the system. \nPatient 2 had an office visit with HCP 9000000000 on 6/10/2007. \nPatient 2 has successfully authenticated.\nDescription:\nPatient 2 chooses to view his records.\nPatient 2 clicks a link next to his office visit on 6/10/2007 to take satisfaction survey.\nPatient 2 changes his mind and decides to cancel his input.\n */\r\npublic void testTakeSatisfactionSurveyCancel() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Records\").click();\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n    WebTable wt = wr.getTableStartingWith(\"Office Visits\");\r\n    wr = wt.getTableCell(1, 1).getLinkWith(\"Complete Visit Survey\").click();\r\n    assertTrue(wr.getText().contains(\"iTrust Patient Survey for Office Visit on Jun 10, 2007\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"examMinutesString\", \"10\");\r\n    form.setParameter(\"Satradios\", \"satRadio3\");\r\n    // patient changes his mind and cancels his input\r\n    wr = wr.getLinkWith(\"Home\").click();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Records\").click();\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    wt = wr.getTableStartingWith(\"Office Visits\");\r\n    // make sure survey CAN still be taken.  This will throw an exception if the survey is not available\r\n    wr = wt.getTableCell(1, 1).getLinkWith(\"Complete Visit Survey\").click();\r\n    iTrustHTTPTest.assertNotLogged(TransactionType.SATISFACTION_SURVEY_TAKE, 2L, 2L, \"\");\r\n}"},
 {"id":4162, "methodname":"testTakeSatisfactionSurveySuccess()", "methodnamerefined":"testTakeSatisfactionSurveySuccess", "methodabbreviation":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.testTakeSatisfactionSurveySuccess", "fullmethod":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.testTakeSatisfactionSurveySuccess()", "classid":570, "classname":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest", "shortclassname":"SurveyUseCaseTest", "method":"/* Precondition:\nPatient 2 and HCP 9000000000 are in the system. \nPatient 2 had an office visit with HCP 9000000000 on 6/10/2007. \nPatient 2 has successfully authenticated.\nDescription:\nPatient 2 chooses to view his records.\nPatient 2 clicks a link next to his office visit on 6/10/2007 to take satisfaction survey.\nHe inputs the following information and submits:\n15 minutes \n10 minutes \n3 \n5\nExpected Results:\nThe survey answers are stored and the event is logged.\n */\r\npublic void testTakeSatisfactionSurveySuccess() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Records\").click();\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n    WebTable wt = wr.getTableStartingWith(\"Office Visits\");\r\n    wr = wt.getTableCell(1, 1).getLinkWith(\"Complete Visit Survey\").click();\r\n    assertTrue(wr.getText().contains(\"iTrust Patient Survey for Office Visit on Jun 10, 2007\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"waitingMinutesString\", \"15\");\r\n    form.setParameter(\"examMinutesString\", \"10\");\r\n    form.setParameter(\"Satradios\", \"satRadio3\");\r\n    form.setParameter(\"Treradios\", \"treRadio5\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Survey Successfully Submitted\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.SATISFACTION_SURVEY_TAKE, 2L, 2L, \"\");\r\n    // make sure survey cannot be taken again\r\n    wt = wr.getTableStartingWith(\"Office Visits\");\r\n    try {\r\n        wr = wt.getTableCell(1, 1).getLinkWith(\"Complete Visit Survey\").click();\r\n        fail(\"the link should have disappeared\");\r\n    } catch (NullPointerException ex) {\r\n        assertEquals(null, ex.getMessage());\r\n    }\r\n}"},
 {"id":4163, "methodname":"testTakeSatisfactionSurveySuccess2()", "methodnamerefined":"testTakeSatisfactionSurveySuccess2", "methodabbreviation":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.testTakeSatisfactionSurveySuccess2", "fullmethod":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest.testTakeSatisfactionSurveySuccess2()", "classid":570, "classname":"edu.ncsu.csc.itrust.http.SurveyUseCaseTest", "shortclassname":"SurveyUseCaseTest", "method":"/* Precondition:\nPatient 2 and HCP 9000000000 are in the system. \nPatient 2 had an office visit with HCP 9000000000 on 6/10/2007. \nPatient 2 has successfully authenticated.\nDescription:\nPatient 2 chooses to view his records.\nPatient 2 clicks a link next to his office visit on 6/10/2007 to take satisfaction survey.\nHe inputs the following information and submits:\n[none] \n10 minutes \n3 \n[none]\nExpected Results:\nThe survey answers are stored and the event is logged.\n */\r\npublic void testTakeSatisfactionSurveySuccess2() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Records\").click();\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n    WebTable wt = wr.getTableStartingWith(\"Office Visits\");\r\n    wr = wt.getTableCell(1, 1).getLinkWith(\"Complete Visit Survey\").click();\r\n    assertTrue(wr.getText().contains(\"iTrust Patient Survey for Office Visit on Jun 10, 2007\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"examMinutesString\", \"10\");\r\n    form.setParameter(\"Satradios\", \"satRadio3\");\r\n    wr = form.submit();\r\n    assertTrue(wr.getText().contains(\"Survey Successfully Submitted\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.SATISFACTION_SURVEY_TAKE, 2L, 2L, \"\");\r\n    // make sure survey cannot be taken again\r\n    wt = wr.getTableStartingWith(\"Office Visits\");\r\n    try {\r\n        wr = wt.getTableCell(1, 1).getLinkWith(\"Complete Visit Survey\").click();\r\n        fail(\"the link should have disappeared\");\r\n    } catch (NullPointerException ex) {\r\n        assertEquals(null, ex.getMessage());\r\n    }\r\n}"},
 {"id":4164, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.-init-()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"TelemonitoringUseCaseTest() {\r\n}"},
 {"id":4165, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.setUp()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"protected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4166, "methodname":"testAddPatientsToMonitor()", "methodnamerefined":"testAddPatientsToMonitor", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testAddPatientsToMonitor", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testAddPatientsToMonitor()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testAddPatientsToMonitor() throws Exception {\r\n    // login HCP\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // Click Edit Patient List\r\n    wr = wr.getLinkWith(\"Edit Patient List\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    WebForm wf = wr.getForms()[0];\r\n    // Allow Blood Pressure, Weight, and Pedometer\r\n    wf.setCheckbox(\"bloodPressure\", true);\r\n    wf.setCheckbox(\"weight\", true);\r\n    wf.setCheckbox(\"pedometer\", true);\r\n    assertEquals(\"Add Andy Programmer\", wf.getButtons()[0].getValue());\r\n    wf.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient Andy Programmer Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_ADD, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4167, "methodname":"testDetailedExternalData()", "methodnamerefined":"testDetailedExternalData", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testDetailedExternalData", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testDetailedExternalData()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"// Test for UC34\r\npublic void testDetailedExternalData() throws Exception {\r\n    gen.remoteMonitoring6();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Monitor Patients\").click();\r\n    wr = wr.getLinkWith(\"Random Person (MID 1)\").click();\r\n    int ONE_DAY = ((24 * 60) * 60) * 1000;\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    SimpleDateFormat sdf2 = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n    Date date = new Date();\r\n    date.setTime(((date.getTime()) - (3 * ONE_DAY)));\r\n    Date yesterday = new Date();\r\n    yesterday.setTime(((yesterday.getTime()) - ONE_DAY));\r\n    Date twoDaysAgo = new Date(((yesterday.getTime()) - ONE_DAY));\r\n    WebForm wf = wr.getFormWithID(\"datebuttons\");\r\n    wf.getScriptableObject().setParameterValue(\"startDate\", sdf.format(date));\r\n    wr = wf.submit(wf.getSubmitButton(\"Get Records\"));\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Patient Weight/Pedometer Statistics\");\r\n    // First entry:\r\n    assertEquals(((sdf2.format(new Date())) + \" 07:17:00.0\"), table.getCellAsText(2, 0));\r\n    assertEquals(\"70.0\", table.getCellAsText(2, 1));\r\n    assertEquals(\"192.5\", table.getCellAsText(2, 2));\r\n    assertEquals(\"\", table.getCellAsText(2, 3));\r\n    // Second entry:\r\n    assertEquals(((sdf2.format(yesterday)) + \" 07:48:00.0\"), table.getCellAsText(3, 0));\r\n    assertEquals(\"70.0\", table.getCellAsText(3, 1));\r\n    assertEquals(\"\", table.getCellAsText(3, 2));\r\n    assertEquals(\"8153\", table.getCellAsText(3, 3));\r\n    // Third entry:\r\n    assertEquals(((sdf2.format(twoDaysAgo)) + \" 08:19:00.0\"), table.getCellAsText(4, 0));\r\n    assertEquals(\"70.0\", table.getCellAsText(4, 1));\r\n    assertEquals(\"180.0\", table.getCellAsText(4, 2));\r\n    assertEquals(\"\", table.getCellAsText(4, 3));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":4168, "methodname":"testRemovePatientsToMonitor()", "methodnamerefined":"testRemovePatientsToMonitor", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testRemovePatientsToMonitor", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testRemovePatientsToMonitor()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testRemovePatientsToMonitor() throws Exception {\r\n    // Add patient 1 to HCP 9000000000s monitoring list\r\n    gen.remoteMonitoring2();\r\n    // login HCP\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // Click Edit Patient List\r\n    wr = wr.getLinkWith(\"Edit Patient List\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    WebForm confirmForm = wr.getForms()[0];\r\n    assertEquals(\"Remove Random Person\", confirmForm.getButtons()[0].getValue());\r\n    confirmForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient Random Person Removed\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_REMOVE, 9000000000L, 1L, \"\");\r\n}"},
 {"id":4169, "methodname":"testReportPatientHeight()", "methodnamerefined":"testReportPatientHeight", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testReportPatientHeight", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testReportPatientHeight()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"// Test for UC34\r\npublic void testReportPatientHeight() throws Exception {\r\n    gen.remoteMonitoring7();\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    WebForm wf = wr.getForms()[0];\r\n    wf.setParameter(\"height\", \"73.2\");\r\n    wr = wf.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_REPORT, 1L, 1L, \"\");\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    wf = wr.getForms()[0];\r\n    wf.setParameter(\"height\", \"73.2\");\r\n    wr = wf.submit();\r\n    assertTrue(wr.getText().contains(\"Invalid entry: Patient height entries for today cannot exceed 1.\"));\r\n}"},
 {"id":4170, "methodname":"testReportPatientStatus()", "methodnamerefined":"testReportPatientStatus", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testReportPatientStatus", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testReportPatientStatus()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testReportPatientStatus() throws Exception {\r\n    // Add patient 1 to HCP 9000000000s monitoring list\r\n    gen.remoteMonitoring2();\r\n    // login Patient\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // Click Report Status\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    WebForm dataForm = wr.getForms()[0];\r\n    dataForm.getScriptableObject().setParameterValue(\"systolicBloodPressure\", \"100\");\r\n    dataForm.getScriptableObject().setParameterValue(\"diastolicBloodPressure\", \"75\");\r\n    dataForm.getScriptableObject().setParameterValue(\"glucoseLevel\", \"120\");\r\n    dataForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_REPORT, 1L, 1L, \"\");\r\n}"},
 {"id":4171, "methodname":"testReportPatientWeightAndPedometer()", "methodnamerefined":"testReportPatientWeightAndPedometer", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testReportPatientWeightAndPedometer", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testReportPatientWeightAndPedometer()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testReportPatientWeightAndPedometer() throws Exception {\r\n    // Add patient 1 to HCP 9000000000s monitoring list\r\n    gen.remoteMonitoring2();\r\n    // login Patient\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    // Click Report Status\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    WebForm wf = wr.getForms()[0];\r\n    wf.setParameter(\"weight\", \"174\");\r\n    wf.setParameter(\"pedometerReading\", \"8238\");\r\n    wr = wf.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_REPORT, 1L, 1L, \"\");\r\n}"},
 {"id":4172, "methodname":"testRepresentativeReportPatientStatus()", "methodnamerefined":"testRepresentativeReportPatientStatus", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testRepresentativeReportPatientStatus", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testRepresentativeReportPatientStatus()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testRepresentativeReportPatientStatus() throws Exception {\r\n    gen.remoteMonitoring4();\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    assertEquals(\"iTrust - Report Status\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Random Person\").click();\r\n    wr = wc.getCurrentPage();\r\n    WebForm wf = wr.getForms()[0];\r\n    wf.setParameter(\"glucoseLevel\", \"120\");\r\n    wr = wf.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_REPORT, 2L, 1L, \"\");\r\n}"},
 {"id":4173, "methodname":"testRepresentativeReportWeight()", "methodnamerefined":"testRepresentativeReportWeight", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testRepresentativeReportWeight", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testRepresentativeReportWeight()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testRepresentativeReportWeight() throws Exception {\r\n    // Add patient 1 to HCP 9000000000s monitoring list\r\n    // Also add three reports\r\n    gen.remoteMonitoring2();\r\n    // login Patient\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // Click Report Status\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    wr = wr.getLinkWith(\"Random Person\").click();\r\n    wr = wc.getCurrentPage();\r\n    WebForm wf = wr.getForms()[0];\r\n    wf.setParameter(\"weight\", \"174\");\r\n    wr = wf.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_REPORT, 2L, 1L, \"\");\r\n}"},
 {"id":4174, "methodname":"testUAPAddHCPMonitor()", "methodnamerefined":"testUAPAddHCPMonitor", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPAddHCPMonitor", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPAddHCPMonitor()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testUAPAddHCPMonitor() throws Exception {\r\n    gen.remoteMonitoring8();\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Edit Patient List\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    WebForm confirmForm = wr.getForms()[0];\r\n    assertEquals(\"Add Andy Programmer\", confirmForm.getButtons()[0].getValue());\r\n    confirmForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient Andy Programmer Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_ADD, 8000000009L, 2L, \"\");\r\n    // go to reporting page\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    assertTrue(wr.getText().contains(\"Andy Programmer\"));\r\n    assertEquals(\"iTrust - Report Status\", wr.getTitle());\r\n    WebForm wf = wr.getForms()[0];\r\n    wf.setParameter(\"systolicBloodPressure\", \"110\");\r\n    wf.setParameter(\"diastolicBloodPressure\", \"85\");\r\n    wr = wf.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_REPORT, 8000000009L, 2L, \"\");\r\n    // logout\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.LOGOUT, 8000000009L, 8000000009L, \"\");\r\n    // log back in\r\n    WebConversation wcHCP = login(\"9000000000\", \"pw\");\r\n    wr = wcHCP.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Monitor Patients\").click();\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Patient Physiologic Statistics\");\r\n    assertEquals(\"Andy Programmer (MID 2)\", table.getCellAsText(2, 0));\r\n    assertEquals(\"110\", table.getCellAsText(2, 2));\r\n    assertEquals(\"85\", table.getCellAsText(2, 3));\r\n    assertEquals(\"\", table.getCellAsText(2, 4));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":4175, "methodname":"testUAPAddPatientToMonitorTest()", "methodnamerefined":"testUAPAddPatientToMonitorTest", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPAddPatientToMonitorTest", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPAddPatientToMonitorTest()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testUAPAddPatientToMonitorTest() throws Exception {\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Edit Patient List\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    WebForm confirmForm = wr.getForms()[0];\r\n    assertEquals(\"Add Andy Programmer\", confirmForm.getButtons()[0].getValue());\r\n    confirmForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient Andy Programmer Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_ADD, 8000000009L, 2L, \"\");\r\n}"},
 {"id":4176, "methodname":"testUAPAddReportDeleteCannotReport()", "methodnamerefined":"testUAPAddReportDeleteCannotReport", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPAddReportDeleteCannotReport", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPAddReportDeleteCannotReport()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testUAPAddReportDeleteCannotReport() throws Exception {\r\n    gen.remoteMonitoring8();\r\n    // log in to iTrust\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // add Patient 2 to reporting list\r\n    wr = wr.getLinkWith(\"Edit Patient List\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    WebForm confirmForm = wr.getForms()[0];\r\n    assertEquals(\"Add Andy Programmer\", confirmForm.getButtons()[0].getValue());\r\n    confirmForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient Andy Programmer Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_ADD, 8000000009L, 2L, \"\");\r\n    // go to reporting page\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    assertTrue(wr.getText().contains(\"Andy Programmer\"));\r\n    assertEquals(\"iTrust - Report Status\", wr.getTitle());\r\n    wr = wc.getCurrentPage();\r\n    WebForm wf = wr.getForms()[0];\r\n    wf.setParameter(\"systolicBloodPressure\", \"100\");\r\n    wf.setParameter(\"diastolicBloodPressure\", \"75\");\r\n    wr = wf.submit();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_REPORT, 8000000009L, 2L, \"\");\r\n    // remove Patient 2 from reporting list\r\n    wr = wr.getLinkWith(\"Edit Patient List\").click();\r\n    WebForm confirmFormNew = wr.getForms()[0];\r\n    assertEquals(\"Remove Andy Programmer\", confirmFormNew.getButtons()[0].getValue());\r\n    confirmFormNew.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Patient Andy Programmer Removed\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_REMOVE, 8000000009L, 2L, \"\");\r\n}"},
 {"id":4177, "methodname":"testUAPReportPatientPedometerReading()", "methodnamerefined":"testUAPReportPatientPedometerReading", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPReportPatientPedometerReading", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPReportPatientPedometerReading()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testUAPReportPatientPedometerReading() throws Exception {\r\n    // Add patient 1 to HCP 9000000000s monitoring list\r\n    // Also add three reports\r\n    gen.remoteMonitoring2();\r\n    gen.remoteMonitoringUAP();\r\n    // login Patient\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    // Click Report Status\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Andy Programmer\").click();\r\n    wr = wc.getCurrentPage();\r\n    WebForm dataForm = wr.getForms()[0];\r\n    dataForm.getScriptableObject().setParameterValue(\"pedometerReading\", \"9163\");\r\n    dataForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_REPORT, 8000000009L, 2L, \"\");\r\n}"},
 {"id":4178, "methodname":"testUAPReportPatientStatus()", "methodnamerefined":"testUAPReportPatientStatus", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPReportPatientStatus", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testUAPReportPatientStatus()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testUAPReportPatientStatus() throws Exception {\r\n    gen.remoteMonitoringUAP();\r\n    WebConversation wc = login(\"8000000009\", \"uappass1\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - UAP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 8000000009L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Report Telemedicine Status\").click();\r\n    assertEquals(\"iTrust - View Monitored Patients\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Andy Programmer\").click();\r\n    assertEquals(\"iTrust - Report Status\", wr.getTitle());\r\n    WebForm dataForm = wr.getForms()[0];\r\n    dataForm.getScriptableObject().setParameterValue(\"systolicBloodPressure\", \"100\");\r\n    dataForm.getScriptableObject().setParameterValue(\"diastolicBloodPressure\", \"75\");\r\n    dataForm.getScriptableObject().setParameterValue(\"glucoseLevel\", \"120\");\r\n    dataForm.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Added\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_REPORT, 8000000009L, 2L, \"\");\r\n}"},
 {"id":4179, "methodname":"testViewMonitoringList()", "methodnamerefined":"testViewMonitoringList", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testViewMonitoringList", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testViewMonitoringList()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testViewMonitoringList() throws Exception {\r\n    // Sets up all preconditions listed in acceptance test\r\n    gen.remoteMonitoring3();\r\n    // login HCP\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Monitor Patients\").click();\r\n    // Verify all data\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Patient Physiologic Statistics\");\r\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n    Date date = new Date();\r\n    assertEquals(\"Random Person (MID 1)\", table.getCellAsText(2, 0));\r\n    assertTrue(table.getCellAsText(2, 1).contains(dateFormat.format(date)));\r\n    assertTrue(table.getCellAsText(2, 1).contains(\"08:00:00\"));\r\n    assertEquals(\"160\", table.getCellAsText(2, 2));\r\n    assertEquals(\"110\", table.getCellAsText(2, 3));\r\n    assertEquals(\"60\", table.getCellAsText(2, 4));\r\n    assertEquals(\"Andy Programmer\", table.getCellAsText(2, 5));\r\n    // Highlighting for abnormal data\r\n    assertEquals(\"#ffff00\", table.getRows()[2].getAttribute(\"bgcolor\"));\r\n    assertEquals(\"Random Person (MID 1)\", table.getCellAsText(3, 0));\r\n    assertTrue(table.getCellAsText(3, 1).contains(dateFormat.format(date)));\r\n    assertTrue(table.getCellAsText(3, 1).contains(\"07:15:00\"));\r\n    assertEquals(\"100\", table.getCellAsText(3, 2));\r\n    assertEquals(\"70\", table.getCellAsText(3, 3));\r\n    assertEquals(\"90\", table.getCellAsText(3, 4));\r\n    assertEquals(\"FirstUAP LastUAP\", table.getCellAsText(3, 5));\r\n    assertEquals(\"Random Person (MID 1)\", table.getCellAsText(4, 0));\r\n    assertTrue(table.getCellAsText(4, 1).contains(dateFormat.format(date)));\r\n    assertTrue(table.getCellAsText(4, 1).contains(\"05:30:00\"));\r\n    assertEquals(\"90\", table.getCellAsText(4, 2));\r\n    assertEquals(\"60\", table.getCellAsText(4, 3));\r\n    assertEquals(\"80\", table.getCellAsText(4, 4));\r\n    assertEquals(\"Random Person\", table.getCellAsText(4, 5));\r\n    assertEquals(\"Baby Programmer (MID 5)\", table.getCellAsText(5, 0));\r\n    assertEquals(\"No Information Provided\", table.getCellAsText(5, 1));\r\n    assertEquals(\"\", table.getCellAsText(5, 2));\r\n    assertEquals(\"\", table.getCellAsText(5, 3));\r\n    assertEquals(\"\", table.getCellAsText(5, 4));\r\n    assertEquals(\"\", table.getCellAsText(5, 5));\r\n    // Highlighting for no entry\r\n    assertEquals(\"#ff6666\", table.getRows()[5].getAttribute(\"bgcolor\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":4180, "methodname":"testViewWeightAndPedometerReports()", "methodnamerefined":"testViewWeightAndPedometerReports", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testViewWeightAndPedometerReports", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testViewWeightAndPedometerReports()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"public void testViewWeightAndPedometerReports() throws Exception {\r\n    // Sets up all preconditions listed in acceptance test\r\n    gen.remoteMonitoring5();\r\n    // login HCP\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Monitor Patients\").click();\r\n    // Verify all data\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Patient External Statistics\");\r\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n    Date date = new Date();\r\n    assertEquals(\"Random Person (MID 1)\", table.getCellAsText(2, 0));\r\n    assertTrue(table.getCellAsText(2, 1).contains(dateFormat.format(date)));\r\n    assertTrue(table.getCellAsText(2, 1).contains(\"07:17:00\"));\r\n    assertEquals(\"186.5\", table.getCellAsText(2, 3));\r\n    assertEquals(\"\", table.getCellAsText(2, 4));\r\n    assertEquals(\"Random Person\", table.getCellAsText(2, 5));\r\n    // Highlighting for abnormal data\r\n    assertEquals(\"#ffff00\", table.getRows()[2].getAttribute(\"bgcolor\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":4181, "methodname":"testWeightHighlighting()", "methodnamerefined":"testWeightHighlighting", "methodabbreviation":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testWeightHighlighting", "fullmethod":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest.testWeightHighlighting()", "classid":571, "classname":"edu.ncsu.csc.itrust.http.TelemonitoringUseCaseTest", "shortclassname":"TelemonitoringUseCaseTest", "method":"// Test for UC34\r\npublic void testWeightHighlighting() throws Exception {\r\n    gen.remoteMonitoring6();\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Monitor Patients\").click();\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Patient External Statistics\");\r\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n    Date date = new Date();\r\n    assertEquals(\"Random Person (MID 1)\", table.getCellAsText(2, 0));\r\n    assertTrue(table.getCellAsText(2, 1).contains(dateFormat.format(date)));\r\n    assertTrue(table.getCellAsText(2, 1).contains(\"07:17:00\"));\r\n    assertEquals(\"70.0\", table.getCellAsText(2, 2));\r\n    assertEquals(\"192.5\", table.getCellAsText(2, 3));\r\n    assertEquals(\"\", table.getCellAsText(2, 4));\r\n    assertEquals(\"Random Person\", table.getCellAsText(2, 5));\r\n    // Highlighting for abnormal data\r\n    assertEquals(\"#ffff00\", table.getRows()[2].getAttribute(\"bgcolor\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.TELEMEDICINE_DATA_VIEW, 9000000000L, 0L, \"\");\r\n}"},
 {"id":4182, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.-init-()", "classid":572, "classname":"edu.ncsu.csc.itrust.http.UploadPatientFileTest", "shortclassname":"UploadPatientFileTest", "method":"UploadPatientFileTest() {\r\n}"},
 {"id":4183, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.setUp()", "classid":572, "classname":"edu.ncsu.csc.itrust.http.UploadPatientFileTest", "shortclassname":"UploadPatientFileTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4184, "methodname":"testHCPPatientUploadBinaryData()", "methodnamerefined":"testHCPPatientUploadBinaryData", "methodabbreviation":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadBinaryData", "fullmethod":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadBinaryData()", "classid":572, "classname":"edu.ncsu.csc.itrust.http.UploadPatientFileTest", "shortclassname":"UploadPatientFileTest", "method":"public void testHCPPatientUploadBinaryData() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Upload Patient File\").click();\r\n    assertEquals(\"iTrust - Upload Patient File\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"patientFile\", new File(\"testing-files/sample_patientupload/HCPPatientUploadBinaryData.doc\"));\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"File upload was unsuccessful\"));\r\n}"},
 {"id":4185, "methodname":"testHCPPatientUploadDuplicateField()", "methodnamerefined":"testHCPPatientUploadDuplicateField", "methodabbreviation":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadDuplicateField", "fullmethod":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadDuplicateField()", "classid":572, "classname":"edu.ncsu.csc.itrust.http.UploadPatientFileTest", "shortclassname":"UploadPatientFileTest", "method":"public void testHCPPatientUploadDuplicateField() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Upload Patient File\").click();\r\n    assertEquals(\"iTrust - Upload Patient File\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"patientFile\", new File(\"testing-files/sample_patientupload/HCPPatientUploadDuplicateField.csv\"));\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"File upload was unsuccessful\"));\r\n    assertTrue(wr.getText().contains(\"Duplicate field \"firstName\"\"));\r\n}"},
 {"id":4186, "methodname":"testHCPPatientUploadEmptyFile()", "methodnamerefined":"testHCPPatientUploadEmptyFile", "methodabbreviation":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadEmptyFile", "fullmethod":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadEmptyFile()", "classid":572, "classname":"edu.ncsu.csc.itrust.http.UploadPatientFileTest", "shortclassname":"UploadPatientFileTest", "method":"public void testHCPPatientUploadEmptyFile() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Upload Patient File\").click();\r\n    assertEquals(\"iTrust - Upload Patient File\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"patientFile\", new File(\"testing-files/sample_patientupload/HCPPatientUploadEmptyFile.csv\"));\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"File upload was unsuccessful\"));\r\n    assertTrue(wr.getText().contains(\"File is not valid CSV file\"));\r\n}"},
 {"id":4187, "methodname":"testHCPPatientUploadInvalidData()", "methodnamerefined":"testHCPPatientUploadInvalidData", "methodabbreviation":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadInvalidData", "fullmethod":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadInvalidData()", "classid":572, "classname":"edu.ncsu.csc.itrust.http.UploadPatientFileTest", "shortclassname":"UploadPatientFileTest", "method":"public void testHCPPatientUploadInvalidData() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Upload Patient File\").click();\r\n    assertEquals(\"iTrust - Upload Patient File\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"patientFile\", new File(\"testing-files/sample_patientupload/HCPPatientUploadInvalidData.csv\"));\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"File upload was successful, but some patients could not be added\"));\r\n    assertTrue(wr.getText().contains(\"Field number mismatch on line 3\"));\r\n    assertTrue(wr.getText().contains(\"Field number mismatch on line 4\"));\r\n    assertTrue(wr.getText().contains(\"Input validation failed for patient &quot;not,valid first&quot;!\"));\r\n    assertTrue(wr.getText().contains(\"Input validation failed for patient &quot;Not valid&quot\"));\r\n    assertTrue(wr.getText().contains(\"<td>Correct</td>\"));\r\n    assertTrue(wr.getText().contains(\"<td>Number</td>\"));\r\n}"},
 {"id":4188, "methodname":"testHCPPatientUploadInvalidField()", "methodnamerefined":"testHCPPatientUploadInvalidField", "methodabbreviation":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadInvalidField", "fullmethod":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadInvalidField()", "classid":572, "classname":"edu.ncsu.csc.itrust.http.UploadPatientFileTest", "shortclassname":"UploadPatientFileTest", "method":"public void testHCPPatientUploadInvalidField() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Upload Patient File\").click();\r\n    assertEquals(\"iTrust - Upload Patient File\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"patientFile\", new File(\"testing-files/sample_patientupload/HCPPatientUploadInvalidField.csv\"));\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"File upload was unsuccessful\"));\r\n    assertTrue(wr.getText().contains(\"Field \"invalidfield\" is invalid\"));\r\n}"},
 {"id":4189, "methodname":"testHCPPatientUploadRequiredFieldMissing()", "methodnamerefined":"testHCPPatientUploadRequiredFieldMissing", "methodabbreviation":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadRequiredFieldMissing", "fullmethod":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadRequiredFieldMissing()", "classid":572, "classname":"edu.ncsu.csc.itrust.http.UploadPatientFileTest", "shortclassname":"UploadPatientFileTest", "method":"public void testHCPPatientUploadRequiredFieldMissing() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Upload Patient File\").click();\r\n    assertEquals(\"iTrust - Upload Patient File\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"patientFile\", new File(\"testing-files/sample_patientupload/HCPPatientUploadRequiredFieldMissing.csv\"));\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"File upload was unsuccessful\"));\r\n    assertTrue(wr.getText().contains(\"Required field \"email\" is missing\"));\r\n}"},
 {"id":4190, "methodname":"testHCPPatientUploadValidData()", "methodnamerefined":"testHCPPatientUploadValidData", "methodabbreviation":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadValidData", "fullmethod":"edu.ncsu.csc.itrust.http.UploadPatientFileTest.testHCPPatientUploadValidData()", "classid":572, "classname":"edu.ncsu.csc.itrust.http.UploadPatientFileTest", "shortclassname":"UploadPatientFileTest", "method":"public void testHCPPatientUploadValidData() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Upload Patient File\").click();\r\n    assertEquals(\"iTrust - Upload Patient File\", wr.getTitle());\r\n    WebForm wf = wr.getFormWithName(\"mainForm\");\r\n    wf.setParameter(\"patientFile\", new File(\"testing-files/sample_patientupload/HCPPatientUploadValidData.csv\"));\r\n    wf.getButtonWithID(\"sendFile\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Upload Successful\"));\r\n    assertTrue(wr.getText().contains(\"<td>Michael</td>\"));\r\n    assertTrue(wr.getText().contains(\"<td>Marley</td>\"));\r\n    assertTrue(wr.getText().contains(\"<td>Michael</td>\"));\r\n    assertTrue(wr.getText().contains(\"<td>Bazik</td>\"));\r\n    assertTrue(wr.getText().contains(\"<td>Barry</td>\"));\r\n    assertTrue(wr.getText().contains(\"<td>Peddycord</td>\"));\r\n}"},
 {"id":4191, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.-init-()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"ViewAccessLogTest() {\r\n}"},
 {"id":4192, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.setUp()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.uap1();\r\n    gen.patient2();\r\n    gen.patient1();\r\n    gen.patient4();\r\n    gen.hcp0();\r\n    gen.hcp3();\r\n    gen.er4();\r\n}"},
 {"id":4193, "methodname":"testViewAccessLog1()", "methodnamerefined":"testViewAccessLog1", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLog1", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLog1()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"/* HCP 9000000000 has viewed PHR of patient 2.\nAuthenticate Patient\nMID: 2\nPassword: pw\nChoose option View Access Log\n */\r\npublic void testViewAccessLog1() throws Exception {\r\n    // clear operational profile\r\n    gen.transactionLog();\r\n    // hcp views phr of patient 2\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Edit PHR\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/getPatientID.jsp?forward=hcp-uap/editPHR.jsp\"), wr.getURL().toString());\r\n    // choose patient 2\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/editPHR.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_HEALTH_INFORMATION_VIEW, 9000000000L, 2L, \"\");\r\n    // login patient 2\r\n    wc = login(\"2\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // click on View Access Log\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    // check the table that displays the access log\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Date\");\r\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n    Date date = new Date();\r\n    assertTrue(table.getCellAsText(1, 0).contains(dateFormat.format(date)));\r\n    assertEquals(\"Kelly Doctor\", table.getCellAsText(1, 1));\r\n    assertTrue(table.getCellAsText(1, 3).contains(\"View personal health information\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ACCESS_LOG_VIEW, 2L, 0L, \"\");\r\n}"},
 {"id":4194, "methodname":"testViewAccessLog2()", "methodnamerefined":"testViewAccessLog2", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLog2", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLog2()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"/* HCP 9000000000 has viewed PHR of patient 2 on 11/11/2007.\nAuthenticate Patient\nMID: 2\nPassword: pw\nChoose option View Access Log\nChoose date range 6/22/2000 through 6/23/2000\n */\r\npublic void testViewAccessLog2() throws Exception {\r\n    // clear operational profile\r\n    gen.transactionLog();\r\n    // login patient 2\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // click on View Access Log\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    // select the date range and submit\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"startDate\", \"06/22/2000\");\r\n    form.setParameter(\"endDate\", \"06/23/2000\");\r\n    form.getSubmitButtons()[0].click();\r\n    WebResponse add = wc.getCurrentPage();\r\n    assertFalse(add.getText().contains(\"Exception\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ACCESS_LOG_VIEW, 2L, 0L, \"\");\r\n}"},
 {"id":4195, "methodname":"testViewAccessLog3()", "methodnamerefined":"testViewAccessLog3", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLog3", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLog3()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"/* Authenticate Patient\nMID: 1\nPassword: pw\nChoose option View Access Log\n */\r\npublic void testViewAccessLog3() throws Exception {\r\n    // clear operational profile\r\n    gen.transactionLog();\r\n    // make sure that no exceptions are thrown even though patient 1 has nothing in the view\r\n    // access log\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    assertFalse(wr.getText().contains(\"Exception\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ACCESS_LOG_VIEW, 1L, 0L, \"\");\r\n}"},
 {"id":4196, "methodname":"testViewAccessLogBadDateHandling()", "methodnamerefined":"testViewAccessLogBadDateHandling", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogBadDateHandling", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogBadDateHandling()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"/**\r\n * Verifies that the access log correctly handle bad date inputs\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testViewAccessLogBadDateHandling() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    WebConversation wc = login(\"23\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    assertEquals(\"iTrust - View My Access Log\", wr.getTitle());\r\n    WebForm dateForm = wr.getForms()[0];\r\n    dateForm.setParameter(\"startDate\", \"6/22/2007\");\r\n    dateForm.setParameter(\"endDate\", \"6/21/2007\");\r\n    dateForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View My Access Log\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"<h2>Information not valid</h2><div class=\"errorList\">Start date must be before end date!<br /></div>\"));\r\n    dateForm = wr.getForms()[0];\r\n    dateForm.setParameter(\"startDate\", \"June 22nd, 2007\");\r\n    dateForm.setParameter(\"endDate\", \"6/23/2007\");\r\n    dateForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - View My Access Log\", wr.getTitle());\r\n    assertTrue(wr.getText().contains(\"<h2>Information not valid</h2><div class=\"errorList\">Enter dates in MM/dd/yyyy<br /></div>\"));\r\n    // This test is currently commented out because the bug is due to \"functionality\" in the SimpleDataFormat class which assumes that month 13 === 1\r\n    /* dateForm = wr.getForms()[0];\n    dateForm.setParameter(\"startDate\", \"13/01/2010\");\n    dateForm.setParameter(\"endDate\", \"6/24/2011\");\n    dateForm.submit();\n\n    wr = wc.getCurrentPage();\n    assertEquals(\"iTrust - View My Access Log\", wr.getTitle());\n    assertTrue(wr.getText().contains(\"<h2>Information not valid</h2><div class=\"errorList\">Enter dates in MM/dd/yyyy<br /></div>\"));\n     */\r\n}"},
 {"id":4197, "methodname":"testViewAccessLogByDate()", "methodnamerefined":"testViewAccessLogByDate", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogByDate", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogByDate()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"public void testViewAccessLogByDate() throws Exception {\r\n    gen.transactionLog2();\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    assertFalse(wr.getText().contains(\"Exception\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"startDate\", \"03/01/2008\");\r\n    form.setParameter(\"endDate\", \"12/01/2008\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wr.getLinkWith(\"Date\").click();\r\n    /* WebTable table = wr.getTableStartingWithPrefix(\"Date\");\n    assertTrue(table.getCellAsText(1, 3).contains(\"View emergency report\"));\n    assertTrue(table.getCellAsText(2, 3).contains(\"Edit Office Visits\"));\n    assertTrue(table.getCellAsText(3, 3).contains(\"View prescription report\"));\n    assertTrue(table.getCellAsText(4, 3).contains(\"View risk factors\"));\n    assertLogged(TransactionType.ACCESS_LOG_VIEW, 2L, 0L, \"\");\n     */\r\n}"},
 {"id":4198, "methodname":"testViewAccessLogByRole()", "methodnamerefined":"testViewAccessLogByRole", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogByRole", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogByRole()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"public void testViewAccessLogByRole() throws Exception {\r\n    gen.transactionLog3();\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 1L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    assertFalse(wr.getText().contains(\"Exception\"));\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"startDate\", \"02/01/2008\");\r\n    form.setParameter(\"endDate\", \"09/22/2009\");\r\n    form.getSubmitButtons()[0].click();\r\n    form.getScriptableObject().setParameterValue(\"sortBy\", \"role\");\r\n    wr = form.submit();\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Date\");\r\n    assertTrue(table.getCellAsText(1, 2).contains(\"Emergency Responder\"));\r\n    assertTrue(table.getCellAsText(2, 2).contains(\"LHCP\"));\r\n    assertTrue(table.getCellAsText(3, 2).contains(\"LHCP\"));\r\n    assertTrue(table.getCellAsText(4, 2).contains(\"LHCP\"));\r\n    assertTrue(table.getCellAsText(5, 2).contains(\"Personal Health Representative\"));\r\n    assertTrue(table.getCellAsText(6, 2).contains(\"UAP\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.ACCESS_LOG_VIEW, 1L, 0L, \"\");\r\n}"},
 {"id":4199, "methodname":"testViewAccessLogNonRepresentativeView1()", "methodnamerefined":"testViewAccessLogNonRepresentativeView1", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogNonRepresentativeView1", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogNonRepresentativeView1()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"/**\r\n * Verifies that a non-representative is not shown a representee to select.\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testViewAccessLogNonRepresentativeView1() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    WebConversation wc = login(\"23\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    assertEquals(\"iTrust - View My Access Log\", wr.getTitle());\r\n    assertFalse(wr.getText().contains(\"Devils Advocate\"));\r\n}"},
 {"id":4200, "methodname":"testViewAccessLogNonRepresentativeView2()", "methodnamerefined":"testViewAccessLogNonRepresentativeView2", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogNonRepresentativeView2", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogNonRepresentativeView2()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"/**\r\n * Verifies that DLHCP information is correctly hidden in the Access Log for a non-representative.\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testViewAccessLogNonRepresentativeView2() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    WebConversation wc = login(\"9000000007\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"5\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Patient\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(\"iTrust - Edit Basic Health Record\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    assertEquals(\"iTrust - Login\", wr.getTitle());\r\n    wc = login(\"9000000000\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"5\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Patient\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    assertEquals(\"iTrust - Login\", wr.getTitle());\r\n    wc = login(\"9000000000\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());\r\n    patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"5\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Edit Patient\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Basic Health Information\").click();\r\n    assertEquals(\"iTrust - Edit Basic Health Record\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Patient Information\").click();\r\n    assertEquals(\"iTrust - Edit Patient\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"PHR Information\").click();\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    assertEquals(\"iTrust - Login\", wr.getTitle());\r\n    wc = login(\"5\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    assertEquals(\"iTrust - View My Access Log\", wr.getTitle());\r\n    assertFalse(wr.getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getText().contains(\"Beaker Beaker\"));\r\n}"},
 {"id":4201, "methodname":"testViewAccessLogRepresentativeView()", "methodnamerefined":"testViewAccessLogRepresentativeView", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogRepresentativeView", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAccessLogTest.testViewAccessLogRepresentativeView()", "classid":573, "classname":"edu.ncsu.csc.itrust.http.ViewAccessLogTest", "shortclassname":"ViewAccessLogTest", "method":"/**\r\n * Verifies that a representative is able to view the access log of a representee.\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testViewAccessLogRepresentativeView() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    WebConversation wc = login(\"24\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    assertEquals(\"iTrust - View My Access Log\", wr.getTitle());\r\n    // select Dare Devil from the dropdown menu\r\n    WebForm representeeSelectForm = wr.getFormWithID(\"logMIDSelectionForm\");\r\n    representeeSelectForm.setParameter(\"logMID\", \"23\");\r\n    representeeSelectForm.submit();\r\n    wr = wc.getCurrentPage();\r\n    assertFalse(wr.getText().contains(\"Beaker Beaker\"));\r\n    assertTrue(wr.getText().contains(\"<td >2007-06-23 06:55:59.0</td>\"));\r\n    wr = wr.getLinkWith(\"Role\").click();\r\n    assertEquals(\"iTrust - View My Access Log\", wr.getTitle());\r\n    assertFalse(wr.getText().contains(\"Beaker Beaker\"));\r\n    assertTrue(wr.getText().contains(\"<td >2007-06-23 06:55:59.0</td>\"));\r\n    wr = wr.getLinkWith(\"Access Log\").click();\r\n    assertEquals(\"iTrust - View My Access Log\", wr.getTitle());\r\n    assertFalse(wr.getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getText().contains(\"<td >2007-06-25 06:54:59.0</td>\"));\r\n}"},
 {"id":4202, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAllPatientsUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAllPatientsUseCaseTest.-init-()", "classid":574, "classname":"edu.ncsu.csc.itrust.http.ViewAllPatientsUseCaseTest", "shortclassname":"ViewAllPatientsUseCaseTest", "method":"ViewAllPatientsUseCaseTest() {\r\n}"},
 {"id":4203, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAllPatientsUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAllPatientsUseCaseTest.setUp()", "classid":574, "classname":"edu.ncsu.csc.itrust.http.ViewAllPatientsUseCaseTest", "shortclassname":"ViewAllPatientsUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    HttpUnitOptions.setScriptingEnabled(false);\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4204, "methodname":"testViewAllPatients()", "methodnamerefined":"testViewAllPatients", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewAllPatientsUseCaseTest.testViewAllPatients", "fullmethod":"edu.ncsu.csc.itrust.http.ViewAllPatientsUseCaseTest.testViewAllPatients()", "classid":574, "classname":"edu.ncsu.csc.itrust.http.ViewAllPatientsUseCaseTest", "shortclassname":"ViewAllPatientsUseCaseTest", "method":"/* Precondition:\nLHCP 9000000000 and Patients 1-4 are in the database \nOffice Visits 11, 902-911, 111, and 1 are in the database. \nLHCP 9000000000 has authenticated successfully.\nDescription:\n1. LHCP clicks on \"View All Patients\" link.\nExpected Results:\nA list of the following should be displayed:\nRandom person\nAndy programmer\nBowser Koopa\n */\r\npublic void testViewAllPatients() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"All Patients\").click();\r\n    assertEquals(\"iTrust - View All Patients\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_VIEW, 9000000000L, 0L, \"\");\r\n    WebTable wt = wr.getTableStartingWith(\"Patient\");\r\n    assertEquals(\"10/10/2008\", wt.getTableCell(1, 2).getText());\r\n    assertEquals(\"09/14/2009\", wt.getTableCell(2, 2).getText());\r\n    assertEquals(\"\", wt.getTableCell(4, 2).getText());\r\n    assertEquals(\"344 Bob Street Raleigh NC 27607\", wt.getTableCell(2, 1).getText());\r\n}"},
 {"id":4205, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.-init-()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"ViewDiagnosisStatisticsTest() {\r\n}"},
 {"id":4206, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.setUp()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/**\r\n * Sets up the test. Clears the tables then adds necessary data\r\n */\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    gen.patient_hcp_vists();\r\n    gen.hcp_diagnosis_data();\r\n}"},
 {"id":4207, "methodname":"testViewDiagnosisTrendsEpidemic_InvalidThreshold()", "methodnamerefined":"testViewDiagnosisTrendsEpidemic_InvalidThreshold", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrendsEpidemic_InvalidThreshold", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrendsEpidemic_InvalidThreshold()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/* Authenticate PHA\nMID 7000000001\nPassword: pw\nChoose \"Epidemics\"\nEnter Fields:\nDiagnosis: 84.50 Malaria\nZipCode: 12345\nStartDate: 1/23/12\nThreshold: [leave blank]\n */\r\npublic void testViewDiagnosisTrendsEpidemic_InvalidThreshold() throws Exception {\r\n    // pha views diagnosis statistics for mumps\r\n    // login pha\r\n    WebConversation wc = login(\"7000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - PHA Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 7000000001L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"epidemics\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"84.50\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"12345\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"01/23/2012\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_EPIDEMICS_VIEW, 7000000001L, 0L, \"\");\r\n}"},
 {"id":4208, "methodname":"testViewDiagnosisTrends_InvalidDates()", "methodnamerefined":"testViewDiagnosisTrends_InvalidDates", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_InvalidDates", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_InvalidDates()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/* Authenticate HCP\nMID 9000000000\nPassword: pw\nChoose \"Diagnosis Trends\"\nEnter Fields:\nICDCode: 487.00\nZipCode: 276\nStartDate: 09/28/2011, EndDate: 08/28/2011\n */\r\npublic void testViewDiagnosisTrends_InvalidDates() throws Exception {\r\n    // hcp views diagnosis statistics for malaria with invalid dates\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"trends\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"84.50\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27519\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"09/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"08/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 9000000000L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"Information not valid\"));\r\n    assertTrue(wr.getText().contains(\"Start date must be before end date!\"));\r\n}"},
 {"id":4209, "methodname":"testViewDiagnosisTrends_InvalidZip()", "methodnamerefined":"testViewDiagnosisTrends_InvalidZip", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_InvalidZip", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_InvalidZip()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/* Authenticate HCP\nMID 9000000008\nPassword: pw\nChoose \"Diagnosis Trends\"\nEnter Fields:\nICDCode: 487.00\nZipCode: 276\nStartDate: 08/28/2011, EndDate: 09/28/2011\n */\r\npublic void testViewDiagnosisTrends_InvalidZip() throws Exception {\r\n    // hcp views diagnosis statistics for influenza using an invalid zip code\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000008\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000008L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"trends\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"487.00\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"276\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"08/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"09/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 9000000008L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"Information not valid\"));\r\n    assertTrue(wr.getText().contains(\"Zip Code must be 5 digits!\"));\r\n}"},
 {"id":4210, "methodname":"testViewDiagnosisTrends_LHCPObserveIncrease()", "methodnamerefined":"testViewDiagnosisTrends_LHCPObserveIncrease", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_LHCPObserveIncrease", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_LHCPObserveIncrease()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/* Authenticate HCP\nMID 9000000008\nPassword: pw\nChoose \"Diagnosis Trends\"\nEnter Fields:\nICDCode: 487.00\nZipCode: 27695\nStartDate: 08/28/2011, EndDate: 09/28/2011\nDocument new office visit\nAdd new diagnosis (487.00)\nChoose \"Diagnosis Trends\"\nEnter Fields:\nICDCode: 487.00\nZipCode: 27695\nStartDate: 08/28/2011, EndDate: 09/28/2011\n */\r\npublic void testViewDiagnosisTrends_LHCPObserveIncrease() throws Exception {\r\n    // hcp views diagnosis statistics for influenza\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000008\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000008L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"trends\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"487.00\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27695\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"08/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"09/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 9000000008L, 0L, \"\");\r\n    WebTable table = wr.getTableWithID(\"diagnosisStatisticsTable\");\r\n    long local1 = Long.parseLong(table.getCellAsText(1, 2));\r\n    long region1 = Long.parseLong(table.getCellAsText(1, 3));\r\n    // click Document Office Visit\r\n    wr = wr.getLinkWith(\"Document Office Visit\").click();\r\n    // choose patient 25\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"25\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-uap/documentOfficeVisit.jsp\"), wr.getURL().toString());\r\n    // click Yes, Document Office Visit\r\n    form = wr.getForms()[0];\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Document Office Visit\", wr.getTitle());\r\n    // add a new office visit\r\n    form = wr.getFormWithID(\"mainForm\");\r\n    form.setParameter(\"visitDate\", \"09/28/2011\");\r\n    form.setParameter(\"notes\", \"I like diet-coke\");\r\n    form.getButtonWithID(\"update\").click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Information Successfully Updated\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.OFFICE_VISIT_CREATE, 9000000008L, 25L, \"Office visit\");\r\n    // add a new diagnosis\r\n    form = wr.getFormWithID(\"diagnosisForm\");\r\n    form.setParameter(\"ICDCode\", \"487.00\");\r\n    form.getButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Diagnosis information successfully updated.\"));\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"trends\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"487.00\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27606-1234\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"08/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"09/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 9000000008L, 0L, \"\");\r\n    table = wr.getTableWithID(\"diagnosisStatisticsTable\");\r\n    long local2 = Long.parseLong(table.getCellAsText(1, 2));\r\n    long region2 = Long.parseLong(table.getCellAsText(1, 3));\r\n    assertEquals((local1 + 1), local2);\r\n    assertEquals((region1 + 1), region2);\r\n}"},
 {"id":4211, "methodname":"testViewDiagnosisTrends_NoDiagnosisSelected()", "methodnamerefined":"testViewDiagnosisTrends_NoDiagnosisSelected", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_NoDiagnosisSelected", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_NoDiagnosisSelected()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/* Authenticate HCP\nMID 9000000008\nPassword: pw\nChoose \"Diagnosis Trends\"\nEnter Fields:\nICDCode: \"\"\nZipCode: 276\nStartDate: 08/28/2011, EndDate: 09/28/2011\n */\r\npublic void testViewDiagnosisTrends_NoDiagnosisSelected() throws Exception {\r\n    // pha views diagnosis statistics without selecting a diagnosis\r\n    // login pha\r\n    WebConversation wc = login(\"7000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - PHA Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 7000000001L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"trends\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27695\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"06/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"09/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 7000000001L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"Information not valid\"));\r\n    assertTrue(wr.getText().contains(\"ICDCode must be valid diagnosis!\"));\r\n}"},
 {"id":4212, "methodname":"testViewDiagnosisTrends_PHAView1()", "methodnamerefined":"testViewDiagnosisTrends_PHAView1", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_PHAView1", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_PHAView1()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/* Authenticate PHA\nMID 7000000001\nPassword: pw\nChoose \"Diagnosis Trends\"\nEnter Fields:\nICDCode: 72.00\nZipCode: 27695\nStartDate: 06/28/2011, EndDate: 09/28/2011\n */\r\npublic void testViewDiagnosisTrends_PHAView1() throws Exception {\r\n    // pha views diagnosis statistics for mumps\r\n    // login pha\r\n    WebConversation wc = login(\"7000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - PHA Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 7000000001L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"trends\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"72.00\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27695\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"06/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"09/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 7000000001L, 0L, \"\");\r\n    WebTable table = wr.getTableWithID(\"diagnosisStatisticsTable\");\r\n    assertTrue(table.getCellAsText(1, 2).contains(\"0\"));\r\n    assertTrue(table.getCellAsText(1, 3).contains(\"2\"));\r\n}"},
 {"id":4213, "methodname":"testViewDiagnosisTrends_RegionNotLess()", "methodnamerefined":"testViewDiagnosisTrends_RegionNotLess", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_RegionNotLess", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_RegionNotLess()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/* Authenticate HCP\nMID 9000000008\nPassword: pw\nChoose \"Diagnosis Trends\"\nEnter Fields:\nICDCode: 487.00\nZipCode: 27607\nStartDate: 08/28/2011, EndDate: 09/28/2011\n */\r\npublic void testViewDiagnosisTrends_RegionNotLess() throws Exception {\r\n    // hcp views diagnosis statistics for mumps\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000008\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000008L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"trends\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"487.00\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27607\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"08/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"09/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 9000000008L, 0L, \"\");\r\n    WebTable table = wr.getTableWithID(\"diagnosisStatisticsTable\");\r\n    long local = Long.parseLong(table.getCellAsText(1, 2));\r\n    long region = Long.parseLong(table.getCellAsText(1, 3));\r\n    assertTrue((local <= region));\r\n}"},
 {"id":4214, "methodname":"testViewDiagnosisTrends_SameDateStartEnd()", "methodnamerefined":"testViewDiagnosisTrends_SameDateStartEnd", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_SameDateStartEnd", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_SameDateStartEnd()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/* Authenticate HCP\nMID 9000000000\nPassword: pw\nChoose \"Diagnosis Trends\"\nEnter Fields:\nICDCode: 84.50\nZipCode: 276\nStartDate: 09/28/2011, EndDate: 09/28/2011\n */\r\npublic void testViewDiagnosisTrends_SameDateStartEnd() throws Exception {\r\n    // hcp views diagnosis statistics for malaria\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"trends\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"84.50\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27519\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"09/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"09/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 9000000000L, 0L, \"\");\r\n    WebTable table = wr.getTableWithID(\"diagnosisStatisticsTable\");\r\n    assertTrue(table.getCellAsText(1, 2).contains(\"0\"));\r\n    assertTrue(table.getCellAsText(1, 3).contains(\"0\"));\r\n}"},
 {"id":4215, "methodname":"testViewDiagnosisTrends_SameRegionCount()", "methodnamerefined":"testViewDiagnosisTrends_SameRegionCount", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_SameRegionCount", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.testViewDiagnosisTrends_SameRegionCount()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"/* Authenticate HCP\nMID 9000000008\nPassword: pw\nChoose \"Diagnosis Trends\"\nEnter Fields:\nICDCode: 487.00\nZipCode: 27695\nStartDate: 08/28/2011, EndDate: 09/28/2011\nEnter Fields:\nICDCode: 487.00\nZipCode: 27606\nStartDate: 08/28/2011, EndDate: 09/28/2011\n */\r\npublic void testViewDiagnosisTrends_SameRegionCount() throws Exception {\r\n    // hcp views diagnosis statistics for malaria in 2 zip codes. ensures the region matches\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"trends\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"84.50\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27695\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"06/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"09/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 9000000000L, 0L, \"\");\r\n    WebTable table = wr.getTableWithID(\"diagnosisStatisticsTable\");\r\n    long region1 = Long.parseLong(table.getCellAsText(1, 3));\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"84.50\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27606\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"06/28/2011\");\r\n    form.getScriptableObject().setParameterValue(\"endDate\", \"09/28/2011\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_TRENDS_VIEW, 9000000000L, 0L, \"\");\r\n    table = wr.getTableWithID(\"diagnosisStatisticsTable\");\r\n    long region2 = Long.parseLong(table.getCellAsText(1, 3));\r\n    assertEquals(region1, region2);\r\n}"},
 {"id":4216, "methodname":"viewDiagnosisEpidemics_NoEpidemic()", "methodnamerefined":"viewDiagnosisEpidemics_NoEpidemic", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.viewDiagnosisEpidemics_NoEpidemic", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.viewDiagnosisEpidemics_NoEpidemic()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"public void viewDiagnosisEpidemics_NoEpidemic() throws Exception {\r\n    gen.influenza_epidemic();\r\n    // pha views diagnosis statistics for mumps\r\n    // login pha\r\n    WebConversation wc = login(\"7000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - PHA Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 7000000001L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"epidemics\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"487.00\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27607\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"02/15/2010\");\r\n    form.getScriptableObject().setParameterValue(\"threshold\", \"\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_EPIDEMICS_VIEW, 7000000001L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"There is no epidemic occurring in the region.\"));\r\n}"},
 {"id":4217, "methodname":"viewDiagnosisEpidemics_NoEpidemicRecords()", "methodnamerefined":"viewDiagnosisEpidemics_NoEpidemicRecords", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.viewDiagnosisEpidemics_NoEpidemicRecords", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.viewDiagnosisEpidemics_NoEpidemicRecords()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"public void viewDiagnosisEpidemics_NoEpidemicRecords() throws Exception {\r\n    // hcp views diagnosis statistics for mumps\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"epidemics\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Epidemic\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"84.50\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"38201\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"06/02/2010\");\r\n    form.getScriptableObject().setParameterValue(\"threshold\", \"110\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_EPIDEMICS_VIEW, 9000000000L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"There is no epidemic occurring in the region.\"));\r\n}"},
 {"id":4218, "methodname":"viewDiagnosisEpidemics_YesEpidemic()", "methodnamerefined":"viewDiagnosisEpidemics_YesEpidemic", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.viewDiagnosisEpidemics_YesEpidemic", "fullmethod":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest.viewDiagnosisEpidemics_YesEpidemic()", "classid":575, "classname":"edu.ncsu.csc.itrust.http.ViewDiagnosisStatisticsTest", "shortclassname":"ViewDiagnosisStatisticsTest", "method":"public void viewDiagnosisEpidemics_YesEpidemic() throws Exception {\r\n    gen.influenza_epidemic();\r\n    // hcp views diagnosis statistics for mumps\r\n    // login hcp\r\n    WebConversation wc = login(\"9000000007\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000007L, 0L, \"\");\r\n    // click Diagnosis Trends\r\n    wr = wr.getLinkWith(\"Diagnosis Trends\").click();\r\n    WebForm form = wr.getFormWithID(\"formSelectFlow\");\r\n    form.getScriptableObject().setParameterValue(\"viewSelect\", \"epidemics\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    // View Trend\r\n    form = wr.getFormWithID(\"formMain\");\r\n    form.getScriptableObject().setParameterValue(\"icdCode\", \"487.00\");\r\n    form.getScriptableObject().setParameterValue(\"zipCode\", \"27607\");\r\n    form.getScriptableObject().setParameterValue(\"startDate\", \"11/02/2011\");\r\n    form.getScriptableObject().setParameterValue(\"threshold\", \"\");\r\n    form.getSubmitButtons()[0].click();\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(((iTrustHTTPTest.ADDRESS) + \"auth/hcp-pha/viewDiagnosisStatistics.jsp\"), wr.getURL().toString());\r\n    iTrustHTTPTest.assertLogged(TransactionType.DIAGNOSIS_EPIDEMICS_VIEW, 9000000007L, 0L, \"\");\r\n    assertTrue(wr.getText().contains(\"THERE IS AN EPIDEMIC OCCURRING IN THIS REGION!\"));\r\n}"},
 {"id":4219, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewEmergencyReportTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewEmergencyReportTest.-init-()", "classid":576, "classname":"edu.ncsu.csc.itrust.http.ViewEmergencyReportTest", "shortclassname":"ViewEmergencyReportTest", "method":"ViewEmergencyReportTest() {\r\n}"},
 {"id":4220, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewEmergencyReportTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewEmergencyReportTest.setUp()", "classid":576, "classname":"edu.ncsu.csc.itrust.http.ViewEmergencyReportTest", "shortclassname":"ViewEmergencyReportTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.icd9cmCodes();\r\n    gen.ndCodes();\r\n    gen.hospitals();\r\n    gen.hcp1();\r\n    gen.hcp2();\r\n    gen.hcp3();\r\n    gen.er4();\r\n    gen.patient9();\r\n    gen.UC32Acceptance();\r\n    gen.clearLoginFailures();\r\n}"},
 {"id":4221, "methodname":"testGenerateReport()", "methodnamerefined":"testGenerateReport", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewEmergencyReportTest.testGenerateReport", "fullmethod":"edu.ncsu.csc.itrust.http.ViewEmergencyReportTest.testGenerateReport()", "classid":576, "classname":"edu.ncsu.csc.itrust.http.ViewEmergencyReportTest", "shortclassname":"ViewEmergencyReportTest", "method":"// 9000000006\r\npublic void testGenerateReport() throws Exception {\r\n    WebConversation wc = login(\"9000000006\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - ER Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000006L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Emergency Patient Report\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"99\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"Darryl Thompson\"));\r\n    wr = wr.getLinkWith(\"Logout\").click();\r\n    assertTrue(wr.getText().contains(\"Welcome to iTrust\"));\r\n    wc = login(\"9900000000\", \"pw\");\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Email History\").click();\r\n    assertTrue(wr.getText().contains(\"tarehart@iTrust.org\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.EMERGENCY_REPORT_VIEW, 9000000006L, 99L, \"\");\r\n}"},
 {"id":4222, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.-init-()", "classid":577, "classname":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest", "shortclassname":"ViewExpiredPrescriptionsTest", "method":"ViewExpiredPrescriptionsTest() {\r\n}"},
 {"id":4223, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.setUp()", "classid":577, "classname":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest", "shortclassname":"ViewExpiredPrescriptionsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.icd9cmCodes();\r\n    gen.ndCodes();\r\n    gen.uap1();\r\n    gen.patient2();\r\n    gen.patient1();\r\n    gen.patient4();\r\n    gen.patient9();\r\n    gen.hcp0();\r\n    gen.hcp1();\r\n    gen.hcp2();\r\n    gen.clearLoginFailures();\r\n    gen.hcp3();\r\n}"},
 {"id":4224, "methodname":"testViewExpired1()", "methodnamerefined":"testViewExpired1", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.testViewExpired1", "fullmethod":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.testViewExpired1()", "classid":577, "classname":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest", "shortclassname":"ViewExpiredPrescriptionsTest", "method":"/* Authenticate Patient\nMID: 2\nPassword: pw\nChoose option My Expired Prescription Reports\n */\r\npublic void testViewExpired1() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // click on My Expired Prescription Reports\r\n    wr = wr.getLinkWith(\"My Expired Prescription Reports\").click();\r\n    assertTrue(wr.getText().contains(\"00904-2407\"));\r\n    assertFalse(wr.getText().contains(\"9000000000\"));\r\n    // click on a particular office visit to check medication and diagnoses\r\n    wr = wr.getLinkWith(\"Kelly Doctor\").click();// This click does not work at the moment.\r\n\r\n    assertTrue(wr.getText().contains(\"surgeon\"));\r\n    assertTrue(wr.getText().contains(\"4321 My Road St\"));\r\n    assertTrue(wr.getText().contains(\"CityName\"));\r\n    assertTrue(wr.getText().contains(\"NY\"));\r\n    assertTrue(wr.getText().contains(\"12345-1234\"));\r\n    assertTrue(wr.getText().contains(\"999-888-7777\"));\r\n    assertTrue(wr.getText().contains(\"kdoctor@iTrust.org\"));\r\n    assertFalse(wr.getText().contains(\"9000000000\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.EXPIRED_PRESCRIPTION_VIEW, 2L, 2L, \"\");\r\n}"},
 {"id":4225, "methodname":"testViewExpired2()", "methodnamerefined":"testViewExpired2", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.testViewExpired2", "fullmethod":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.testViewExpired2()", "classid":577, "classname":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest", "shortclassname":"ViewExpiredPrescriptionsTest", "method":"/* Authenticate Patient\nMID: 99\nPassword: pw\nChoose option My Expired Prescription Reports\n */\r\npublic void testViewExpired2() throws Exception {\r\n    // login patient 9\r\n    WebConversation wc = login(\"99\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 99L, 0L, \"\");\r\n    // click on My Expired Prescription Reports\r\n    wr = wr.getLinkWith(\"My Expired Prescription Reports\").click();\r\n    assertTrue(wr.getText().contains(\"00904-2407\"));\r\n    assertTrue(wr.getText().contains(\"08109-6\"));\r\n    assertFalse(wr.getText().contains(\"9000000000\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    // click on a particular office visit to check medication and diagnoses\r\n    wr = wr.getLinkWith(\"Tester Arehart\").click();// This click does not work at the moment.\r\n\r\n    assertTrue(wr.getText().contains(\"Neurologist\"));\r\n    assertTrue(wr.getText().contains(\"2110 Thanem Circle\"));\r\n    assertTrue(wr.getText().contains(\"Raleigh\"));\r\n    assertTrue(wr.getText().contains(\"NC\"));\r\n    assertTrue(wr.getText().contains(\"12345-1234\"));\r\n    assertTrue(wr.getText().contains(\"999-888-7777\"));\r\n    assertTrue(wr.getText().contains(\"tarehart@iTrust.org\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.EXPIRED_PRESCRIPTION_VIEW, 99L, 99L, \"\");\r\n}"},
 {"id":4226, "methodname":"testViewExpired3()", "methodnamerefined":"testViewExpired3", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.testViewExpired3", "fullmethod":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.testViewExpired3()", "classid":577, "classname":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest", "shortclassname":"ViewExpiredPrescriptionsTest", "method":"/* Authenticate Patient\nMID: 99\nPassword: pw\nChoose option My Expired Prescription Reports\n */\r\npublic void testViewExpired3() throws Exception {\r\n    // login patient 9\r\n    WebConversation wc = login(\"99\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 99L, 0L, \"\");\r\n    // click on My Expired Prescription Reports\r\n    wr = wr.getLinkWith(\"My Expired Prescription Reports\").click();\r\n    assertTrue(wr.getText().contains(\"00904-2407\"));\r\n    assertTrue(wr.getText().contains(\"08109-6\"));\r\n    assertFalse(wr.getText().contains(\"9000000000\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.EXPIRED_PRESCRIPTION_VIEW, 99L, 99L, \"\");\r\n    // click on a particular office visit to check medication and diagnoses\r\n    wr = wr.getLinkWith(\"Kelly Doctor\").click();// This click does not work at the moment.\r\n\r\n    assertTrue(wr.getText().contains(\"surgeon\"));\r\n    assertTrue(wr.getText().contains(\"4321 My Road St\"));\r\n    assertTrue(wr.getText().contains(\"CityName\"));\r\n    assertTrue(wr.getText().contains(\"NY\"));\r\n    assertTrue(wr.getText().contains(\"12345-1234\"));\r\n    assertTrue(wr.getText().contains(\"999-888-7777\"));\r\n    assertTrue(wr.getText().contains(\"kdoctor@iTrust.org\"));\r\n    assertFalse(wr.getText().contains(\"9000000000\"));\r\n}"},
 {"id":4227, "methodname":"testViewExpired4()", "methodnamerefined":"testViewExpired4", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.testViewExpired4", "fullmethod":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest.testViewExpired4()", "classid":577, "classname":"edu.ncsu.csc.itrust.http.ViewExpiredPrescriptionsTest", "shortclassname":"ViewExpiredPrescriptionsTest", "method":"/* Make sure that missing contact info is represented as blanks.\nMID: 99\nPassword: pw\nChoose option My Expired Prescription Reports\n */\r\npublic void testViewExpired4() throws Exception {\r\n    // login patient 9\r\n    WebConversation wc = login(\"99\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 99L, 0L, \"\");\r\n    // click on My Expired Prescription Reports\r\n    wr = wr.getLinkWith(\"My Expired Prescription Reports\").click();\r\n    assertTrue(wr.getText().contains(\"00904-2407\"));\r\n    assertTrue(wr.getText().contains(\"08109-6\"));\r\n    assertFalse(wr.getText().contains(\"9000000000\"));\r\n    assertFalse(wr.getText().contains(\"9900000000\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.EXPIRED_PRESCRIPTION_VIEW, 99L, 99L, \"\");\r\n    // click on a particular office visit to check medication and diagnoses\r\n    wr = wr.getLinkWith(\"Jimmy Incomplete\").click();// This click does not work at the moment.\r\n\r\n    assertFalse(wr.getText().contains(\"null\"));\r\n    assertFalse(wr.getText().contains(\"AK\"));\r\n    assertFalse(wr.getText().contains(\"9990000000\"));\r\n}"},
 {"id":4228, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.-init-()", "classid":578, "classname":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest", "shortclassname":"ViewMyProvidersTest", "method":"ViewMyProvidersTest() {\r\n}"},
 {"id":4229, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.setUp()", "classid":578, "classname":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest", "shortclassname":"ViewMyProvidersTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();// clear tables is called in super\r\n\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4230, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.tearDown", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.tearDown()", "classid":578, "classname":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest", "shortclassname":"ViewMyProvidersTest", "method":"@Override\r\nprotected void tearDown() throws Exception {\r\n    super.tearDown();\r\n    gen.clearAllTables();\r\n}"},
 {"id":4231, "methodname":"testViewMyProviders1()", "methodnamerefined":"testViewMyProviders1", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.testViewMyProviders1", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.testViewMyProviders1()", "classid":578, "classname":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest", "shortclassname":"ViewMyProvidersTest", "method":"public void testViewMyProviders1() throws Exception {\r\n    // login patient 1\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Providers\").click();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    WebTable wt = wr.getTableStartingWith(\"HCP Name\");\r\n    // Row count is number of HCPs (2) + header row + footer row == 4.\r\n    assertEquals(4, wt.getRowCount());\r\n    assertEquals(\"Gandalf Stormcrow\", wt.getCellAsText(1, 0));\r\n    assertEquals(\"Kelly Doctor\", wt.getCellAsText(2, 0));\r\n    // Filter on last name.\r\n    wr.getForms()[1].setParameter(\"filter_name\", \"Doctor\");\r\n    wr = wr.getForms()[1].submit();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    wt = wr.getTableStartingWith(\"HCP Name\");\r\n    // Only Kelly Doctor should be listed now.\r\n    assertEquals(3, wt.getRowCount());\r\n    assertEquals(\"Kelly Doctor\", wt.getCellAsText(1, 0));\r\n    // Gandalf Stormcrow is no longer listed.\r\n    assertFalse(\"Gandalf Stormcrow\".equals(wt.getCellAsText(2, 0)));\r\n}"},
 {"id":4232, "methodname":"testViewMyProviders2()", "methodnamerefined":"testViewMyProviders2", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.testViewMyProviders2", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest.testViewMyProviders2()", "classid":578, "classname":"edu.ncsu.csc.itrust.http.ViewMyProvidersTest", "shortclassname":"ViewMyProvidersTest", "method":"public void testViewMyProviders2() throws Exception {\r\n    // login patient 1\r\n    WebConversation wc = login(\"1\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Providers\").click();\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    WebTable wt = wr.getTableStartingWith(\"HCP Name\");\r\n    // Row count is number of HCPs (2) + header row + footer row == 4.\r\n    assertEquals(4, wt.getRowCount());\r\n    assertEquals(\"Gandalf Stormcrow\", wt.getCellAsText(1, 0));\r\n    assertEquals(\"Kelly Doctor\", wt.getCellAsText(2, 0));\r\n    // Filter on specialty.\r\n    wr.getForms()[1].setParameter(\"filter_specialty\", \"surgeon\");\r\n    wr = wr.getForms()[1].submit();\r\n    // Only Kelly Doctor should be listed now... no more Gandalf Stormcrow.\r\n    assertEquals(\"iTrust - My Providers\", wr.getTitle());\r\n    wt = wr.getTableStartingWith(\"HCP Name\");\r\n    assertEquals(3, wt.getRowCount());\r\n    assertEquals(\"Kelly Doctor\", wt.getCellAsText(1, 0));\r\n    assertFalse(\"Gandalf Stormcrow\".equals(wt.getCellAsText(2, 0)));\r\n}"},
 {"id":4233, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.-init-()", "classid":579, "classname":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest", "shortclassname":"ViewMyRecordsTest", "method":"ViewMyRecordsTest() {\r\n}"},
 {"id":4234, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.setUp()", "classid":579, "classname":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest", "shortclassname":"ViewMyRecordsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.icd9cmCodes();\r\n    gen.ndCodes();\r\n    gen.uap1();\r\n    gen.patient2();\r\n    gen.patient1();\r\n    gen.patient4();\r\n    gen.hcp0();\r\n    gen.clearLoginFailures();\r\n    gen.hcp3();\r\n}"},
 {"id":4235, "methodname":"testViewRecords3()", "methodnamerefined":"testViewRecords3", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.testViewRecords3", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.testViewRecords3()", "classid":579, "classname":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest", "shortclassname":"ViewMyRecordsTest", "method":"/* Authenticate Patient\nMID: 2\nPassword: pw\nChoose option View My Records\n */\r\npublic void testViewRecords3() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // click on View My Records\r\n    wr = wr.getLinkWith(\"My Records\").click();\r\n    assertTrue(wr.getText().contains(\"210.0lbs\"));\r\n    assertTrue(wr.getText().contains(\"500 mg/dL\"));\r\n    // click on a particular office visit to check medication and diagnoses\r\n    wr = wr.getLinkWith(\"Jun 10, 2007\").click();\r\n    assertTrue(wr.getText().contains(\"Diabetes with ketoacidosis\"));\r\n    assertTrue(wr.getText().contains(\"Prioglitazone\"));\r\n    assertTrue(wr.getText().contains(\"Tetracycline\"));\r\n    assertTrue(wr.getText().contains(\"Notes:\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n}"},
 {"id":4236, "methodname":"testViewRecords4()", "methodnamerefined":"testViewRecords4", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.testViewRecords4", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.testViewRecords4()", "classid":579, "classname":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest", "shortclassname":"ViewMyRecordsTest", "method":"/* Authenticate Patient\nMID: 4\nPassword: pw\nChoose option View My Records\n */\r\npublic void testViewRecords4() throws Exception {\r\n    // login patient who has no records\r\n    WebConversation wc = login(\"4\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 4L, 0L, \"\");\r\n    // upon viewing records, make sure that no exceptions are thrown\r\n    wr = wr.getLinkWith(\"My Records\").click();\r\n    assertFalse(wr.getText().contains(\"Exception\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 4L, 4L, \"\");\r\n}"},
 {"id":4237, "methodname":"testViewRecords5()", "methodnamerefined":"testViewRecords5", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.testViewRecords5", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest.testViewRecords5()", "classid":579, "classname":"edu.ncsu.csc.itrust.http.ViewMyRecordsTest", "shortclassname":"ViewMyRecordsTest", "method":"/* Authenticate Patient\nMID: 2\nPassword: pw\nChoose option View My Records\nChoose to view records for mid 1, the person he represents.\n */\r\npublic void testViewRecords5() throws Exception {\r\n    // login patient 2\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    // click View My Records\r\n    wr = wr.getLinkWith(\"My Records\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n    WebTable wt = wr.getTableStartingWith(\"Patients Andy Represents\");\r\n    assertEquals(\"Random Person\", wt.getTableCell(2, 0).getLinkWith(\"Random Person\").getText());\r\n    wr = wt.getTableCell(2, 0).getLinkWith(\"Random Person\").click();\r\n    // check to make sure you are viewing patient 1s records\r\n    assertTrue(wr.getText().contains(\"You are currently viewing your representees records\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 1L, \"\");\r\n}"},
 {"id":4238, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyReportRequestsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyReportRequestsTest.-init-()", "classid":580, "classname":"edu.ncsu.csc.itrust.http.ViewMyReportRequestsTest", "shortclassname":"ViewMyReportRequestsTest", "method":"ViewMyReportRequestsTest() {\r\n}"},
 {"id":4239, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyReportRequestsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyReportRequestsTest.setUp()", "classid":580, "classname":"edu.ncsu.csc.itrust.http.ViewMyReportRequestsTest", "shortclassname":"ViewMyReportRequestsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n}"},
 {"id":4240, "methodname":"testViewMyReportRequests()", "methodnamerefined":"testViewMyReportRequests", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewMyReportRequestsTest.testViewMyReportRequests", "fullmethod":"edu.ncsu.csc.itrust.http.ViewMyReportRequestsTest.testViewMyReportRequests()", "classid":580, "classname":"edu.ncsu.csc.itrust.http.ViewMyReportRequestsTest", "shortclassname":"ViewMyReportRequestsTest", "method":"public void testViewMyReportRequests() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"My Report Requests\").click();\r\n    assertFalse(wr.getText().contains(\"Exception\"));\r\n    wr = wr.getLinkWith(\"Add a new Report Request\").click();\r\n    WebForm patientForm = wr.getForms()[0];\r\n    patientForm.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"2\");\r\n    patientForm.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.COMPREHENSIVE_REPORT_ADD, 9000000000L, 2L, \"\");\r\n    WebTable table = wr.getTableStartingWithPrefix(\"Report Requests\");\r\n    assertTrue(table.getCellAsText(2, 4).contains(\"Requested\"));\r\n    WebLink[] weblinks = wr.getLinks();\r\n    for (int i = 0; i < (weblinks.length); i++) {\r\n        if (weblinks[i].getText().equals(\"View\")) {\r\n            wr = weblinks[i].click();\r\n            break;\r\n        }\r\n    }\r\n    assertEquals(\"iTrust - Comprehensive Patient Report\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"My Report Requests\").click();\r\n    table = wr.getTableStartingWithPrefix(\"Report Requests\");\r\n    assertTrue(table.getCellAsText(2, 4).contains(\"Viewed\"));\r\n    weblinks = wr.getLinks();\r\n    for (int i = 0; i < (weblinks.length); i++) {\r\n        if (weblinks[i].getText().equals(\"View\")) {\r\n            wr = weblinks[i].click();\r\n            break;\r\n        }\r\n    }\r\n    assertEquals(\"iTrust - Comprehensive Patient Report\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.COMPREHENSIVE_REPORT_VIEW, 9000000000L, 2L, \"\");\r\n}"},
 {"id":4241, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewPatientsUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewPatientsUseCaseTest.-init-()", "classid":581, "classname":"edu.ncsu.csc.itrust.http.ViewPatientsUseCaseTest", "shortclassname":"ViewPatientsUseCaseTest", "method":"ViewPatientsUseCaseTest() {\r\n}"},
 {"id":4242, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewPatientsUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewPatientsUseCaseTest.setUp()", "classid":581, "classname":"edu.ncsu.csc.itrust.http.ViewPatientsUseCaseTest", "shortclassname":"ViewPatientsUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    HttpUnitOptions.setScriptingEnabled(false);\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4243, "methodname":"testViewLHCPPatients()", "methodnamerefined":"testViewLHCPPatients", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewPatientsUseCaseTest.testViewLHCPPatients", "fullmethod":"edu.ncsu.csc.itrust.http.ViewPatientsUseCaseTest.testViewLHCPPatients()", "classid":581, "classname":"edu.ncsu.csc.itrust.http.ViewPatientsUseCaseTest", "shortclassname":"ViewPatientsUseCaseTest", "method":"/* Precondition:\nLHCP 9000000000 and Patients 1-4 are in the database \nOffice Visits 11, 902-911, 111, and 1 are in the database. \nLHCP 9000000000 has authenticated successfully.\nDescription:\n1. LHCP clicks on \"View All Patients\" link.\nExpected Results:\nA list of the following should be displayed:\nAndy Programmer, 344 Bob Street Raleigh NC 27607, 2007-06-10.\nCare needs, 1247 Noname Dr Suite 106 Raleigh NC 27606, 2005-10-10.\nRandom Person, 1247 Noname Dr Suite 106 Raleigh NC 27606, 2005-10-10.\n */\r\npublic void testViewLHCPPatients() throws Exception {\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000000L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"All Patients\").click();\r\n    assertEquals(\"iTrust - View All Patients\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.PATIENT_LIST_VIEW, 9000000000L, 0L, \"\");\r\n    WebTable wt = wr.getTableStartingWith(\"Patient\");\r\n    assertEquals(\"09/14/2009\", wt.getTableCell(2, 2).getText());\r\n    assertEquals(\"10/10/2005\", wt.getTableCell(3, 2).getText());\r\n    assertEquals(\"\", wt.getTableCell(4, 2).getText());\r\n    assertEquals(\"05/10/2006\", wt.getTableCell(5, 2).getText());\r\n    assertEquals(\"07/10/2004\", wt.getTableCell(6, 2).getText());\r\n    assertEquals(\"05/10/2006\", wt.getTableCell(7, 2).getText());\r\n    assertEquals(\"05/10/1999\", wt.getTableCell(8, 2).getText());\r\n    assertEquals(\"06/10/2007\", wt.getTableCell(9, 2).getText());\r\n    assertEquals(\"06/09/2007\", wt.getTableCell(10, 2).getText());\r\n    assertEquals(\"\", wt.getTableCell(11, 2).getText());\r\n    assertEquals(\"344 Bob Street Raleigh NC 27607\", wt.getTableCell(2, 1).getText());\r\n    wr = wr.getLinkWith(\"Andy Programmer\").click();\r\n    assertEquals(\"iTrust - Edit Personal Health Record\", wr.getTitle());\r\n}"},
 {"id":4244, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.-init-()", "classid":582, "classname":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest", "shortclassname":"ViewRecordsUseCaseTest", "method":"ViewRecordsUseCaseTest() {\r\n}"},
 {"id":4245, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.setUp()", "classid":582, "classname":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest", "shortclassname":"ViewRecordsUseCaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n}"},
 {"id":4246, "methodname":"testDoctor()", "methodnamerefined":"testDoctor", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.testDoctor", "fullmethod":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.testDoctor()", "classid":582, "classname":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest", "shortclassname":"ViewRecordsUseCaseTest", "method":"public void testDoctor() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Records\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n    wr = wr.getLinkWith(\"Kelly Doctor\").click();\r\n    assertTrue(wr.getText().contains(\"kdoctor@iTrust.org\"));\r\n}"},
 {"id":4247, "methodname":"testRepresent()", "methodnamerefined":"testRepresent", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.testRepresent", "fullmethod":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.testRepresent()", "classid":582, "classname":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest", "shortclassname":"ViewRecordsUseCaseTest", "method":"public void testRepresent() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Records\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n    wr = wr.getLinkWith(\"Baby Programmer\").click();\r\n    // Clicking on a representees name takes you to their records\r\n    assertTrue(wr.getText().contains(\"You are currently viewing your representees records\"));\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 5L, \"\");\r\n}"},
 {"id":4248, "methodname":"testViewMyRecords()", "methodnamerefined":"testViewMyRecords", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.testViewMyRecords", "fullmethod":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.testViewMyRecords()", "classid":582, "classname":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest", "shortclassname":"ViewRecordsUseCaseTest", "method":"public void testViewMyRecords() throws Exception {\r\n    // Login\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Records\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n    // Records page contains patient information\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n}"},
 {"id":4249, "methodname":"testViewPatientOfficeVisit()", "methodnamerefined":"testViewPatientOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.testViewPatientOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest.testViewPatientOfficeVisit()", "classid":582, "classname":"edu.ncsu.csc.itrust.http.ViewRecordsUseCaseTest", "shortclassname":"ViewRecordsUseCaseTest", "method":"/* Precondition:\nPatient 2 and all his data have been loaded into iTrust\nPatient 2 has successfully authenticated\nDescription:\n1. Patient 2 chooses to view his records\n2. Chooses link to office visit \"6/10/2007\"\nExpected Result:\nThe following data should be displayed: Office Visit Details Date: 06/10/2007\n  HCP: Kelly Doctor (9000000000)\n  Diagnoses\n  ICD Code\tDescription\n  No Diagnoses for this visit\n  Medications\n  No Medications on record\n  Procedures\n  No Procedures on record\n */\r\npublic void testViewPatientOfficeVisit() throws Exception {\r\n    WebConversation wc = login(\"2\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Patient Home\", wr.getTitle());\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 2L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"View My Records\").click();\r\n    iTrustHTTPTest.assertLogged(TransactionType.MEDICAL_RECORD_VIEW, 2L, 2L, \"\");\r\n    assertTrue(wr.getText().contains(\"Patient Information\"));\r\n    WebTable wt = wr.getTableStartingWith(\"Office Visits\");\r\n    wr = wt.getTableCell(2, 0).getLinkWith(\"Jun 10, 2007\").click();\r\n    assertTrue(wr.getText().contains(\"Kelly Doctor\"));\r\n    assertTrue(wr.getText().contains(\"Diabetes with ketoacidosis\"));\r\n    assertTrue(wr.getText().contains(\"64764-1512\"));\r\n    assertTrue(wr.getText().contains(\"Injection procedure\"));\r\n}"},
 {"id":4250, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.WardTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.WardTest.-init-()", "classid":583, "classname":"edu.ncsu.csc.itrust.http.WardTest", "shortclassname":"WardTest", "method":"WardTest() {\r\n}"},
 {"id":4251, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.WardTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.WardTest.setUp()", "classid":583, "classname":"edu.ncsu.csc.itrust.http.WardTest", "shortclassname":"WardTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    super.setUp();\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    // gen.insertwards();\r\n    // gen.hcp0();\r\n}"},
 {"id":4252, "methodname":"testaddwardtohospital()", "methodnamerefined":"testaddwardtohospital", "methodabbreviation":"edu.ncsu.csc.itrust.http.WardTest.testaddwardtohospital", "fullmethod":"edu.ncsu.csc.itrust.http.WardTest.testaddwardtohospital()", "classid":583, "classname":"edu.ncsu.csc.itrust.http.WardTest", "shortclassname":"WardTest", "method":"// 4. Admin will create a new Hospital (\"Purple Hospital\") and give it 3 wards - 2 pediatric wards and a cardiac ward. Each ward will have 3 rooms.\r\npublic void testaddwardtohospital() throws Exception {\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    iTrustHTTPTest.assertLogged(TransactionType.HOME_VIEW, 9000000001L, 0L, \"\");\r\n    wr = wr.getLinkWith(\"Manage Hospital Listing\").click();\r\n    assertEquals(\"iTrust - Maintain Hospital Listing and Assignments\", wr.getTitle());\r\n    // Fill in the form\r\n    WebForm form = wr.getForms()[0];\r\n    form.setParameter(\"hospitalID\", \"5\");\r\n    form.setParameter(\"hospitalName\", \"Purple Hospital\");\r\n    // form.getSubmitButtons()[0].click();\r\n    form.submit(form.getSubmitButton(\"add\"));\r\n    wr = wc.getCurrentPage();\r\n    wr = wr.getLinkWith(\"Manage Wards\").click();\r\n    WebForm Form = wr.getForms()[0];// get list of hospitals\r\n\r\n    Form.setParameter(\"hospitals\", \"5\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[1];\r\n    Form.setParameter(\"ward\", \"Pediatric\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    // add rooms\r\n    Form = wr.getForms()[2];\r\n    Form.setParameter(\"room\", \"1\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[3];\r\n    Form.setParameter(\"room\", \"2\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[4];\r\n    Form.setParameter(\"room\", \"3\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[1];\r\n    Form.setParameter(\"ward\", \"Pediatric\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[7];\r\n    Form.setParameter(\"room\", \"1\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[8];\r\n    Form.setParameter(\"room\", \"2\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[9];\r\n    Form.setParameter(\"room\", \"3\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[1];\r\n    Form.setParameter(\"ward\", \"Cardiac\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[2];\r\n    Form.setParameter(\"room\", \"1\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[3];\r\n    Form.setParameter(\"room\", \"2\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[4];\r\n    Form.setParameter(\"room\", \"3\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    // if we get here we pass because if something went wrong the from numbers would be messed up and it would fail.\r\n    assertTrue(true);\r\n    /* for (int i = 0; i < wr.getForms().length; i++){\n    System.out.println(wr.getForms()[i].getParameterNames()[0]);\n    }\n     */\r\n}"},
 {"id":4253, "methodname":"testadminaddremoveward()", "methodnamerefined":"testadminaddremoveward", "methodabbreviation":"edu.ncsu.csc.itrust.http.WardTest.testadminaddremoveward", "fullmethod":"edu.ncsu.csc.itrust.http.WardTest.testadminaddremoveward()", "classid":583, "classname":"edu.ncsu.csc.itrust.http.WardTest", "shortclassname":"WardTest", "method":"public void testadminaddremoveward() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Manage Wards\").click();\r\n    WebForm Form = wr.getForms()[0];// get list of hospitals\r\n\r\n    Form.setParameter(\"hospitals\", \"5\");// facebook rehab center\r\n\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[1];\r\n    Form.setParameter(\"ward\", \"ChatAddictionClinic\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\" colspan=\"3\">ChatAddictionClinic\"));\r\n    Form = wr.getForms()[3];// get removeward button\r\n\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    // check make sure table is gone\r\n    assertFalse(wr.getText().contains(\" colspan=\"3\">ChatAddictionClinic\"));\r\n}"},
 {"id":4254, "methodname":"testadminassignhcp()", "methodnamerefined":"testadminassignhcp", "methodabbreviation":"edu.ncsu.csc.itrust.http.WardTest.testadminassignhcp", "fullmethod":"edu.ncsu.csc.itrust.http.WardTest.testadminassignhcp()", "classid":583, "classname":"edu.ncsu.csc.itrust.http.WardTest", "shortclassname":"WardTest", "method":"// 5. Admin will assigned \"Heart Doctor (Heart Surgeon)\" to the cardiac ward and \"Baby Doctor (Pediatrician)\" to the two pediatric wards.\r\n// If the admin assigns the wrong doctor to the wrong ward, an error will be displayed.\r\n// changed baby doctor to kelly doctor because testdata is already present\r\npublic void testadminassignhcp() throws Exception {\r\n    // login admin\r\n    WebConversation wc = login(\"9000000001\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Admin Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Manage Wards\").click();\r\n    WebForm Form = wr.getForms()[0];// get list of hospitals\r\n\r\n    Form.setParameter(\"hospitals\", \"1\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    // add kelly doctor to cardiology\r\n    Form = wr.getForms()[4];// get cardiology add hcp form\r\n\r\n    // check size\r\n    String[] check = Form.getParameterNames();\r\n    /* for (int i = 0; i < wr.getForms().length; i++){\n    System.out.println(wr.getForms()[i].getParameterNames()[0]);\n    }\n     */\r\n    assertEquals(\"HCPtoAdd\", check[0]);\r\n    Form.setParameter(\"HCPtoAdd\", \"9000000000\");// add kelly doctor\r\n\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[4];// get unassign hcp\r\n\r\n    check = Form.getParameterNames();\r\n    assertEquals(\"removeHCP\", check[0]);\r\n    Form.setParameter(\"HCPtoRemove\", \"9000000000\");\r\n    Form.submit();\r\n}"},
 {"id":4255, "methodname":"testhcpaddremovepatient()", "methodnamerefined":"testhcpaddremovepatient", "methodabbreviation":"edu.ncsu.csc.itrust.http.WardTest.testhcpaddremovepatient", "fullmethod":"edu.ncsu.csc.itrust.http.WardTest.testhcpaddremovepatient()", "classid":583, "classname":"edu.ncsu.csc.itrust.http.WardTest", "shortclassname":"WardTest", "method":"// 6. Heart Doctor will assign 3 patients to the cardiac ward. If Heart Doctor tries to assign yet another, an error will be displayed static the ward is full.\r\npublic void testhcpaddremovepatient() throws Exception {\r\n    // login uap\r\n    WebConversation wc = login(\"9000000000\", \"pw\");\r\n    WebResponse wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - HCP Home\", wr.getTitle());\r\n    wr = wr.getLinkWith(\"Manage Wards\").click();\r\n    WebForm Form = wr.getForms()[0];// get search by ward\r\n\r\n    Form.setParameter(\"searchbyroomWard\", \"1\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[4];// select form to remove patient\r\n\r\n    Form.submit();// remove current patient\r\n\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[0];// get search by ward\r\n\r\n    Form.setParameter(\"searchbyroomWard\", \"1\");\r\n    Form.submit();// reget list of wards\r\n\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[3];\r\n    Form.submit();// click assign patient\r\n\r\n    wr = wc.getCurrentPage();\r\n    assertEquals(\"iTrust - Please Select a Patient\", wr.getTitle());// check title\r\n\r\n    // Form = wr.getForms()[1];\r\n    // sorced from sorceforge\r\n    Form = wr.getForms()[0];\r\n    Form.getScriptableObject().setParameterValue(\"UID_PATIENTID\", \"1\");\r\n    Form.getButtons()[1].click();\r\n    wr = wc.getCurrentPage();\r\n    Form = wr.getForms()[0];// get search by ward\r\n\r\n    Form.setParameter(\"searchbyroomWard\", \"1\");\r\n    Form.submit();\r\n    wr = wc.getCurrentPage();\r\n    assertTrue(wr.getText().contains(\"<td>Random Person</td>\"));\r\n}"},
 {"id":4256, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.-init-()", "classid":584, "classname":"edu.ncsu.csc.itrust.http.iTrustHTTPTest", "shortclassname":"iTrustHTTPTest", "method":"iTrustHTTPTest() {\r\n}"},
 {"id":4257, "methodname":"assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "methodnamerefined":"assertLogged", "methodabbreviation":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertLogged", "fullmethod":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "classid":584, "classname":"edu.ncsu.csc.itrust.http.iTrustHTTPTest", "shortclassname":"iTrustHTTPTest", "method":"public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if ((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) {\r\n            assertTrue(((t.getTransactionType()) == code));\r\n            if (!(t.getAddedInfo().trim().contains(addedInfo.trim()))) {\r\n                fail(\"Additional Information is not logged correctly.\");\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    fail(\"Event not logged as specified.\");\r\n}"},
 {"id":4258, "methodname":"assertNotLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "methodnamerefined":"assertNotLogged", "methodabbreviation":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertNotLogged", "fullmethod":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertNotLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "classid":584, "classname":"edu.ncsu.csc.itrust.http.iTrustHTTPTest", "shortclassname":"iTrustHTTPTest", "method":"public static void assertNotLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if (((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) && (t.getAddedInfo().trim().contains(addedInfo))) {\r\n            fail(\"Event was logged, but should NOT have been logged\");\r\n            return;\r\n        }\r\n    }\r\n}"},
 {"id":4259, "methodname":"login(java.lang.String,java.lang.String)", "methodnamerefined":"login", "methodabbreviation":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.login", "fullmethod":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.login(java.lang.String,java.lang.String)", "classid":584, "classname":"edu.ncsu.csc.itrust.http.iTrustHTTPTest", "shortclassname":"iTrustHTTPTest", "method":"/**\r\n * Helper method for logging in to iTrust\r\n *\r\n * @param username\r\n * \t\t\r\n * @param password\r\n * \t\t\r\n * @return {@link WebConversation}\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic WebConversation login(String username, String password) throws Exception {\r\n    try {\r\n        // begin at the iTrust home page\r\n        WebConversation wc = new WebConversation();\r\n        WebResponse loginResponse = wc.getResponse(iTrustHTTPTest.ADDRESS);\r\n        // log in using the given username and password\r\n        WebForm form = loginResponse.getForms()[0];\r\n        form.setParameter(\"j_username\", username);\r\n        form.setParameter(\"j_password\", password);\r\n        WebResponse homePage = loginResponse.getForms()[0].submit();\r\n        if (homePage.getTitle().equals(\"iTrust Login\")) {\r\n            throw new IllegalArgumentException(\"Error logging in, user not in database?\");\r\n        }\r\n        iTrustHTTPTest.assertLogged(TransactionType.LOGIN_SUCCESS, Long.parseLong(username), Long.parseLong(username), \"\");\r\n        return wc;\r\n    } catch (ConnectException e) {\r\n        throw new ConnectException(\"Tomcat must be running to run HTTP tests.\");\r\n    }\r\n}"},
 {"id":4260, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.setUp()", "classid":584, "classname":"edu.ncsu.csc.itrust.http.iTrustHTTPTest", "shortclassname":"iTrustHTTPTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    HttpUnitOptions.clearScriptErrorMessages();\r\n    HttpUnitOptions.setScriptingEnabled(true);\r\n    HttpUnitOptions.setExceptionsThrownOnScriptError(false);\r\n    gen.clearAllTables();\r\n}"},
 {"id":4261, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-(java.lang.String)", "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "shortclassname":"DemographicReportFilter", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n */\r\nprivate DemographicReportFilterType(String name) {\r\n    this.name = name;\r\n}"},
 {"id":4262, "methodname":"-init-(edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-(edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "shortclassname":"DemographicReportFilter", "method":"/**\r\n *\r\n *\r\n * @param filterType\r\n * \t\t\r\n * @param filterValue\r\n * \t\t\r\n */\r\npublic DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    fDAO = factory.getFamilyDAO();\r\n}"},
 {"id":4263, "methodname":"filter(java.util.List)", "methodnamerefined":"filter", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter.filter", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter.filter(java.util.List)", "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "shortclassname":"DemographicReportFilter", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic List<PatientBean> filter(List<PatientBean> patients) {\r\n    List<PatientBean> prunedList = new ArrayList<PatientBean>();\r\n    boolean add = ((filterValue) != null) && (!(filterValue.isEmpty()));\r\n    if (add) {\r\n        for (PatientBean patient : patients) {\r\n            add = false;\r\n            switch (filterType) {\r\n                case MID :\r\n                    add = filterValue.equalsIgnoreCase(Long.toString(patient.getMID()));\r\n                    break;\r\n                case GENDER :\r\n                    add = filterValue.equalsIgnoreCase(patient.getGender().toString());\r\n                    break;\r\n                case LAST_NAME :\r\n                    add = patient.getLastName().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case FIRST_NAME :\r\n                    add = patient.getFirstName().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case CONTACT_EMAIL :\r\n                    add = patient.getEmail().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case STREET_ADDR :\r\n                    add = ((patient.getStreetAddress1().equalsIgnoreCase(filterValue)) || (patient.getStreetAddress2().equalsIgnoreCase(filterValue))) || ((((patient.getStreetAddress1()) + \" \") + (patient.getStreetAddress2())).equalsIgnoreCase(filterValue));\r\n                    break;\r\n                case CITY :\r\n                    add = patient.getCity().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case STATE :\r\n                    add = patient.getState().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case ZIP :\r\n                    add = patient.getZip().contains(filterValue);\r\n                    break;\r\n                case PHONE :\r\n                    add = patient.getPhone().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case EMER_CONTACT_NAME :\r\n                    add = patient.getEmergencyName().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case EMER_CONTACT_PHONE :\r\n                    add = patient.getEmergencyPhone().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_NAME :\r\n                    add = patient.getIcName().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_ADDR :\r\n                    add = ((patient.getIcAddress1().equalsIgnoreCase(filterValue)) || (patient.getIcAddress2().equalsIgnoreCase(filterValue))) || ((((patient.getIcAddress1()) + \" \") + (patient.getIcAddress2())).equalsIgnoreCase(filterValue));\r\n                    break;\r\n                case INSURE_CITY :\r\n                    add = patient.getIcCity().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_STATE :\r\n                    add = patient.getIcState().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_ZIP :\r\n                    add = patient.getIcZip().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_PHONE :\r\n                    add = patient.getIcPhone().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case INSURE_ID :\r\n                    add = patient.getIcID().equalsIgnoreCase(filterValue);\r\n                    break;\r\n                case PARENT_FIRST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                        for (FamilyMemberBean parent : parents) {\r\n                            if (filterValue.equalsIgnoreCase(parent.getFirstName())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case PARENT_LAST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                        for (FamilyMemberBean parent : parents) {\r\n                            if (parent.getLastName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case CHILD_FIRST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                        for (FamilyMemberBean child : children) {\r\n                            if (child.getFirstName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case CHILD_LAST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                        for (FamilyMemberBean child : children) {\r\n                            if (child.getLastName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case SIBLING_FIRST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                        for (FamilyMemberBean sibling : siblings) {\r\n                            if (sibling.getFirstName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case SIBLING_LAST_NAME :\r\n                    try {\r\n                        List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                        for (FamilyMemberBean sibling : siblings) {\r\n                            if (sibling.getLastName().equals(filterValue)) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                    // case DOB:\r\n                    // String dates[] = filterValue.split(\"-\");\r\n                    // if (dates.length != 2)\r\n                    // break;\r\n                    // try {\r\n                    // SimpleDateFormat frmt = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n                    // Date d1 = frmt.parse(dates[0]);\r\n                    // Date d2 = frmt.parse(dates[1]);\r\n                    // add = patient.getDateOfBirth().compareTo(d1) >= 0 && patient.getDateOfBirth().compareTo(d2)\r\n                    // <= 0;\r\n                    // } catch (Exception e) {\r\n                    // break;\r\n                    // }\r\n                    // break;\r\n                case LOWER_AGE_LIMIT :\r\n                    int lalval = Integer.parseInt(filterValue);\r\n                    if (lalval < 0) {\r\n                        throw new NumberFormatException(\"Age must be GTE 0!\");\r\n                    }\r\n                    add = lalval <= (patient.getAge());\r\n                    break;\r\n                case UPPER_AGE_LIMIT :\r\n                    int ualval = Integer.parseInt(filterValue);\r\n                    if (ualval < 0) {\r\n                        throw new NumberFormatException(\"Age must be GTE 0!\");\r\n                    }\r\n                    add = ((patient.getAge()) > 0) && (ualval >= (patient.getAge()));\r\n                    break;\r\n                case DEACTIVATED :\r\n                    if (filterValue.equals(\"exclude\")) {\r\n                        add = patient.getDateOfDeactivationStr().equals(\"\");\r\n                    } else\r\n                        if (filterValue.equals(\"only\")) {\r\n                            add = !(patient.getDateOfDeactivationStr().equals(\"\"));\r\n                        } else {\r\n                            add = true;\r\n                        }\r\n\r\n                    break;\r\n                default :\r\n                    break;\r\n            }\r\n            if (add) {\r\n                prunedList.add(patient);\r\n            }\r\n        }\r\n    }\r\n    return prunedList;\r\n}"},
 {"id":4264, "methodname":"filterTypeFromString(java.lang.String)", "methodnamerefined":"filterTypeFromString", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter.filterTypeFromString", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter.filterTypeFromString(java.lang.String)", "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "shortclassname":"DemographicReportFilter", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n * @return \r\n */\r\npublic static DemographicReportFilter.DemographicReportFilterType filterTypeFromString(String name) {\r\n    for (DemographicReportFilter.DemographicReportFilterType type : DemographicReportFilter.DemographicReportFilterType.values()) {\r\n        if (type.name().equalsIgnoreCase(name)) {\r\n            return type;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":4265, "methodname":"getFilterType()", "methodnamerefined":"getFilterType", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter.getFilterType", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter.getFilterType()", "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "shortclassname":"DemographicReportFilter", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic DemographicReportFilter.DemographicReportFilterType getFilterType() {\r\n    return filterType;\r\n}"},
 {"id":4266, "methodname":"getFilterTypeString()", "methodnamerefined":"getFilterTypeString", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter.getFilterTypeString", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter.getFilterTypeString()", "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "shortclassname":"DemographicReportFilter", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getFilterTypeString() {\r\n    return filterType.toString();\r\n}"},
 {"id":4267, "methodname":"getFilterValue()", "methodnamerefined":"getFilterValue", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter.getFilterValue", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter.getFilterValue()", "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "shortclassname":"DemographicReportFilter", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getFilterValue() {\r\n    return filterValue;\r\n}"},
 {"id":4268, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter.toString", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter.toString()", "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "shortclassname":"DemographicReportFilter", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic String toString() {\r\n    String out = ((\"Filter by \" + (filterType.toString())) + \" with value \") + (filterValue);\r\n    return out;\r\n}"},
 {"id":4269, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType.-init-(java.lang.String)", "classid":585, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType", "shortclassname":"DemographicReportFilter$DemographicReportFilterType", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n */\r\nprivate DemographicReportFilterType(String name) {\r\n    this.name = name;\r\n}"},
 {"id":4270, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType.toString", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType.toString()", "classid":585, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType", "shortclassname":"DemographicReportFilter$DemographicReportFilterType", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic String toString() {\r\n    return this.name;\r\n}"},
 {"id":4271, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.-init-()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"DemographicReportFilterTest() {\r\n}"},
 {"id":4272, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.setUp()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    allPatients = pDAO.getAllPatients();\r\n}"},
 {"id":4273, "methodname":"testFilterByChildFirstName()", "methodnamerefined":"testFilterByChildFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByChildFirstName", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByChildFirstName()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByChildFirstName() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CHILD_FIRST_NAME, \"Care\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(1, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 1L));\r\n}"},
 {"id":4274, "methodname":"testFilterByChildFirstNameNoResult()", "methodnamerefined":"testFilterByChildFirstNameNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByChildFirstNameNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByChildFirstNameNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByChildFirstNameNoResult() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CHILD_FIRST_NAME, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4275, "methodname":"testFilterByChildLastName()", "methodnamerefined":"testFilterByChildLastName", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByChildLastName", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByChildLastName()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByChildLastName() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CHILD_LAST_NAME, \"A\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(1, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 2L));\r\n}"},
 {"id":4276, "methodname":"testFilterByChildLastNameNoResult()", "methodnamerefined":"testFilterByChildLastNameNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByChildLastNameNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByChildLastNameNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByChildLastNameNoResult() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CHILD_LAST_NAME, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4277, "methodname":"testFilterByCity1()", "methodnamerefined":"testFilterByCity1", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByCity1", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByCity1()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByCity1() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CITY, \"\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(0, res.size());\r\n}"},
 {"id":4278, "methodname":"testFilterByCity2()", "methodnamerefined":"testFilterByCity2", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByCity2", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByCity2()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByCity2() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CITY, \"New YORK\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(3, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 22L));// Fozzie Bear\r\n\r\n    assertTrue(((res.get(1).getMID()) == 23L));// Dare Devil\r\n\r\n    assertTrue(((res.get(2).getMID()) == 24L));// Devils Advocate\r\n\r\n}"},
 {"id":4279, "methodname":"testFilterByCityNoResult()", "methodnamerefined":"testFilterByCityNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByCityNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByCityNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByCityNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CITY, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4280, "methodname":"testFilterByContactEmail()", "methodnamerefined":"testFilterByContactEmail", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByContactEmail", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByContactEmail()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByContactEmail() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CONTACT_EMAIL, \"fake@email.com\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(6, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 3L));// Care Needs\r\n\r\n    assertTrue(((res.get(1).getMID()) == 4L));// NoRecords Has\r\n\r\n    assertTrue(((res.get(2).getMID()) == 5L));// Baby Programmer\r\n\r\n    assertTrue(((res.get(3).getMID()) == 6L));// Baby A\r\n\r\n    assertTrue(((res.get(4).getMID()) == 7L));// Baby B\r\n\r\n    assertTrue(((res.get(5).getMID()) == 8L));// Baby C\r\n\r\n}"},
 {"id":4281, "methodname":"testFilterByContactEmailNoResult()", "methodnamerefined":"testFilterByContactEmailNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByContactEmailNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByContactEmailNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByContactEmailNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CONTACT_EMAIL, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4282, "methodname":"testFilterByEmerContactName()", "methodnamerefined":"testFilterByEmerContactName", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByEmerContactName", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByEmerContactName()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByEmerContactName() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.EMER_CONTACT_NAME, \"Mum\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(6, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 3L));\r\n    assertTrue(((res.get(1).getMID()) == 4L));\r\n    assertTrue(((res.get(2).getMID()) == 5L));\r\n    assertTrue(((res.get(3).getMID()) == 6L));\r\n    assertTrue(((res.get(4).getMID()) == 7L));\r\n    assertTrue(((res.get(5).getMID()) == 8L));\r\n}"},
 {"id":4283, "methodname":"testFilterByEmerContactNameNoResult()", "methodnamerefined":"testFilterByEmerContactNameNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByEmerContactNameNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByEmerContactNameNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByEmerContactNameNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.EMER_CONTACT_NAME, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4284, "methodname":"testFilterByFirstName()", "methodnamerefined":"testFilterByFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByFirstName", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByFirstName()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByFirstName() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.FIRST_NAME, \"Baby\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(4, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 5L));// Baby Programmer\r\n\r\n    assertTrue(((res.get(1).getMID()) == 6L));// Baby A\r\n\r\n    assertTrue(((res.get(2).getMID()) == 7L));// Baby B\r\n\r\n    assertTrue(((res.get(3).getMID()) == 8L));// Baby C\r\n\r\n}"},
 {"id":4285, "methodname":"testFilterByFirstNameNoResult()", "methodnamerefined":"testFilterByFirstNameNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByFirstNameNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByFirstNameNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByFirstNameNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.FIRST_NAME, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4286, "methodname":"testFilterByGender()", "methodnamerefined":"testFilterByGender", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByGender", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByGender()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByGender() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.GENDER, \"Female\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(4, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 1L));\r\n    assertTrue(((res.get(1).getMID()) == 5L));\r\n    assertTrue(((res.get(2).getMID()) == 6L));\r\n    assertTrue(((res.get(3).getMID()) == 21L));\r\n}"},
 {"id":4287, "methodname":"testFilterByGenderNoResult()", "methodnamerefined":"testFilterByGenderNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByGenderNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByGenderNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByGenderNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.GENDER, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4288, "methodname":"testFilterByInsuranceZip()", "methodnamerefined":"testFilterByInsuranceZip", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByInsuranceZip", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByInsuranceZip()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByInsuranceZip() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.INSURE_ZIP, \"19003-2715\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(5, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 2L));\r\n    assertTrue(((res.get(1).getMID()) == 22L));\r\n    assertTrue(((res.get(2).getMID()) == 25L));\r\n    assertTrue(((res.get(3).getMID()) == 23L));\r\n    assertTrue(((res.get(4).getMID()) == 24L));\r\n}"},
 {"id":4289, "methodname":"testFilterByInsuranceZipNoResult()", "methodnamerefined":"testFilterByInsuranceZipNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByInsuranceZipNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByInsuranceZipNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByInsuranceZipNoResult() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.INSURE_ZIP, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4290, "methodname":"testFilterByInvalidLowerAge()", "methodnamerefined":"testFilterByInvalidLowerAge", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByInvalidLowerAge", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByInvalidLowerAge()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByInvalidLowerAge() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.LOWER_AGE_LIMIT, \"-1\", factory);\r\n    try {\r\n        List<PatientBean> res = filter.filter(allPatients);\r\n    } catch (NumberFormatException e) {\r\n        // exception is good\r\n        return;\r\n    }\r\n    assertTrue(false);\r\n}"},
 {"id":4291, "methodname":"testFilterByInvalidUpperAge()", "methodnamerefined":"testFilterByInvalidUpperAge", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByInvalidUpperAge", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByInvalidUpperAge()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByInvalidUpperAge() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.UPPER_AGE_LIMIT, \"-1\", factory);\r\n    try {\r\n        List<PatientBean> res = filter.filter(allPatients);\r\n    } catch (NumberFormatException e) {\r\n        // exception is good\r\n        return;\r\n    }\r\n    assertTrue(false);\r\n}"},
 {"id":4292, "methodname":"testFilterByLastName()", "methodnamerefined":"testFilterByLastName", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByLastName", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByLastName()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByLastName() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.LAST_NAME, \"Programmer\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(2, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 2L));// Andy Programmer\r\n\r\n    assertTrue(((res.get(1).getMID()) == 5L));// Baby Programmer\r\n\r\n}"},
 {"id":4293, "methodname":"testFilterByLastNameNoResult()", "methodnamerefined":"testFilterByLastNameNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByLastNameNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByLastNameNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByLastNameNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.LAST_NAME, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4294, "methodname":"testFilterByLowerAge()", "methodnamerefined":"testFilterByLowerAge", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByLowerAge", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByLowerAge()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"// public void testFilterByDOB() throws Exception {\r\n// filter = new DemographicReportFilter(DemographicReportFilterType.DOB, \"01/01/1950-01/01/1951\", factory);\r\n// List<PatientBean> res = filter.filter(allPatients);\r\n// assertEquals(4, res.size());\r\n// assertTrue(res.get(0).getMID() == 1L);\r\n// assertTrue(res.get(1).getMID() == 3L);\r\n// assertTrue(res.get(2).getMID() == 4L);\r\n// assertTrue(res.get(3).getMID() == 42L);\r\n// }\r\n// \r\n// public void testFilterByDOBNoResult() throws Exception {\r\n// filter = new DemographicReportFilter(DemographicReportFilterType.DOB, \"Dalpe\", factory);\r\n// List<PatientBean> res = filter.filter(allPatients);\r\n// assertTrue(res.isEmpty());\r\n// }\r\npublic void testFilterByLowerAge() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.LOWER_AGE_LIMIT, \"60\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(4, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 1L));\r\n    assertTrue(((res.get(1).getMID()) == 3L));\r\n    assertTrue(((res.get(2).getMID()) == 4L));\r\n    assertTrue(((res.get(3).getMID()) == 42L));\r\n}"},
 {"id":4295, "methodname":"testFilterByLowerAgeNoResult()", "methodnamerefined":"testFilterByLowerAgeNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByLowerAgeNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByLowerAgeNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByLowerAgeNoResult() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.LOWER_AGE_LIMIT, \"Dalpe\", factory);\r\n    try {\r\n        List<PatientBean> res = filter.filter(allPatients);\r\n    } catch (NumberFormatException e) {\r\n        // exception is good.\r\n        return;\r\n    }\r\n    assertTrue(false);\r\n}"},
 {"id":4296, "methodname":"testFilterByParentFirstName()", "methodnamerefined":"testFilterByParentFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentFirstName", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentFirstName()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByParentFirstName() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PARENT_FIRST_NAME, \"Random\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(5, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 2L));\r\n    assertTrue(((res.get(1).getMID()) == 3L));\r\n    assertTrue(((res.get(2).getMID()) == 4L));\r\n    assertTrue(((res.get(3).getMID()) == 20L));\r\n    assertTrue(((res.get(4).getMID()) == 21L));\r\n}"},
 {"id":4297, "methodname":"testFilterByParentFirstName2()", "methodnamerefined":"testFilterByParentFirstName2", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentFirstName2", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentFirstName2()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByParentFirstName2() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PARENT_FIRST_NAME, \"Andy\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(4, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 5L));\r\n    assertTrue(((res.get(1).getMID()) == 6L));\r\n    assertTrue(((res.get(2).getMID()) == 7L));\r\n    assertTrue(((res.get(3).getMID()) == 8L));\r\n}"},
 {"id":4298, "methodname":"testFilterByParentFirstNameNoResult()", "methodnamerefined":"testFilterByParentFirstNameNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentFirstNameNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentFirstNameNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByParentFirstNameNoResult() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PARENT_FIRST_NAME, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4299, "methodname":"testFilterByParentLastName()", "methodnamerefined":"testFilterByParentLastName", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentLastName", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentLastName()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByParentLastName() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PARENT_LAST_NAME, \"Person\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(5, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 2L));\r\n    assertTrue(((res.get(1).getMID()) == 3L));\r\n    assertTrue(((res.get(2).getMID()) == 4L));\r\n    assertTrue(((res.get(3).getMID()) == 20L));\r\n    assertTrue(((res.get(4).getMID()) == 21L));\r\n}"},
 {"id":4300, "methodname":"testFilterByParentLastName2()", "methodnamerefined":"testFilterByParentLastName2", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentLastName2", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentLastName2()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByParentLastName2() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PARENT_LAST_NAME, \"Programmer\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(4, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 5L));\r\n    assertTrue(((res.get(1).getMID()) == 6L));\r\n    assertTrue(((res.get(2).getMID()) == 7L));\r\n    assertTrue(((res.get(3).getMID()) == 8L));\r\n}"},
 {"id":4301, "methodname":"testFilterByParentLastNameNoResult()", "methodnamerefined":"testFilterByParentLastNameNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentLastNameNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByParentLastNameNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByParentLastNameNoResult() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PARENT_LAST_NAME, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4302, "methodname":"testFilterByPhone()", "methodnamerefined":"testFilterByPhone", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByPhone", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByPhone()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByPhone() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PHONE, \"555-555-5554\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(1, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 25L));// Trend Setter\r\n\r\n}"},
 {"id":4303, "methodname":"testFilterByPhoneNoResult()", "methodnamerefined":"testFilterByPhoneNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByPhoneNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByPhoneNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByPhoneNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PHONE, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4304, "methodname":"testFilterBySiblingFirstName()", "methodnamerefined":"testFilterBySiblingFirstName", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterBySiblingFirstName", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterBySiblingFirstName()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterBySiblingFirstName() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.SIBLING_FIRST_NAME, \"Baby\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(4, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 5L));\r\n    assertTrue(((res.get(1).getMID()) == 6L));\r\n    assertTrue(((res.get(2).getMID()) == 7L));\r\n    assertTrue(((res.get(3).getMID()) == 8L));\r\n}"},
 {"id":4305, "methodname":"testFilterBySiblingFirstNameNoResult()", "methodnamerefined":"testFilterBySiblingFirstNameNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterBySiblingFirstNameNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterBySiblingFirstNameNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterBySiblingFirstNameNoResult() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.SIBLING_FIRST_NAME, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4306, "methodname":"testFilterBySiblingLastName()", "methodnamerefined":"testFilterBySiblingLastName", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterBySiblingLastName", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterBySiblingLastName()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterBySiblingLastName() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.SIBLING_LAST_NAME, \"A\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(3, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 5L));\r\n    assertTrue(((res.get(1).getMID()) == 7L));\r\n    assertTrue(((res.get(2).getMID()) == 8L));\r\n}"},
 {"id":4307, "methodname":"testFilterBySiblingLastNameNoResult()", "methodnamerefined":"testFilterBySiblingLastNameNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterBySiblingLastNameNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterBySiblingLastNameNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterBySiblingLastNameNoResult() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.SIBLING_LAST_NAME, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4308, "methodname":"testFilterByState()", "methodnamerefined":"testFilterByState", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByState", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByState()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByState() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.STATE, \"NY\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(3, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 22L));// Fozzie Bear\r\n\r\n    assertTrue(((res.get(1).getMID()) == 23L));// Dare Devil\r\n\r\n    assertTrue(((res.get(2).getMID()) == 24L));// Devils Advocate\r\n\r\n}"},
 {"id":4309, "methodname":"testFilterByStateNoResult()", "methodnamerefined":"testFilterByStateNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStateNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStateNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByStateNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.STATE, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4310, "methodname":"testFilterByStreetAddr1()", "methodnamerefined":"testFilterByStreetAddr1", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStreetAddr1", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStreetAddr1()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByStreetAddr1() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.STREET_ADDR, \"1247 Noname Dr\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(8, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 1L));// random person\r\n\r\n    assertTrue(((res.get(1).getMID()) == 3L));// care needs\r\n\r\n    assertTrue(((res.get(2).getMID()) == 4L));// norecords has\r\n\r\n    assertTrue(((res.get(3).getMID()) == 5L));// baby programmer\r\n\r\n    assertTrue(((res.get(4).getMID()) == 6L));// baby a\r\n\r\n    assertTrue(((res.get(5).getMID()) == 7L));// baby b\r\n\r\n    assertTrue(((res.get(6).getMID()) == 8L));// baby c\r\n\r\n    assertTrue(((res.get(7).getMID()) == 42L));// bad horse\r\n\r\n}"},
 {"id":4311, "methodname":"testFilterByStreetAddr2()", "methodnamerefined":"testFilterByStreetAddr2", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStreetAddr2", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStreetAddr2()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByStreetAddr2() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.STREET_ADDR, \"Suite 106\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(8, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 1L));// random person\r\n\r\n    assertTrue(((res.get(1).getMID()) == 3L));// care needs\r\n\r\n    assertTrue(((res.get(2).getMID()) == 4L));// norecords has\r\n\r\n    assertTrue(((res.get(3).getMID()) == 5L));// baby programmer\r\n\r\n    assertTrue(((res.get(4).getMID()) == 6L));// baby a\r\n\r\n    assertTrue(((res.get(5).getMID()) == 7L));// baby b\r\n\r\n    assertTrue(((res.get(6).getMID()) == 8L));// baby c\r\n\r\n    assertTrue(((res.get(7).getMID()) == 42L));// bad horse\r\n\r\n}"},
 {"id":4312, "methodname":"testFilterByStreetAddr3()", "methodnamerefined":"testFilterByStreetAddr3", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStreetAddr3", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStreetAddr3()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByStreetAddr3() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.STREET_ADDR, \"1247 Noname Dr Suite 106\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(8, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 1L));// random person\r\n\r\n    assertTrue(((res.get(1).getMID()) == 3L));// care needs\r\n\r\n    assertTrue(((res.get(2).getMID()) == 4L));// norecords has\r\n\r\n    assertTrue(((res.get(3).getMID()) == 5L));// baby programmer\r\n\r\n    assertTrue(((res.get(4).getMID()) == 6L));// baby a\r\n\r\n    assertTrue(((res.get(5).getMID()) == 7L));// baby b\r\n\r\n    assertTrue(((res.get(6).getMID()) == 8L));// baby c\r\n\r\n    assertTrue(((res.get(7).getMID()) == 42L));// bad horse\r\n\r\n}"},
 {"id":4313, "methodname":"testFilterByStreetAddrNoResult()", "methodnamerefined":"testFilterByStreetAddrNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStreetAddrNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByStreetAddrNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByStreetAddrNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.STREET_ADDR, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4314, "methodname":"testFilterByUpperAge()", "methodnamerefined":"testFilterByUpperAge", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByUpperAge", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByUpperAge()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByUpperAge() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.UPPER_AGE_LIMIT, \"10\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(2, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 20L));\r\n    assertTrue(((res.get(1).getMID()) == 21L));\r\n}"},
 {"id":4315, "methodname":"testFilterByUpperAgeNoResult()", "methodnamerefined":"testFilterByUpperAgeNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByUpperAgeNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByUpperAgeNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByUpperAgeNoResult() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.UPPER_AGE_LIMIT, \"Dalpe\", factory);\r\n    try {\r\n        List<PatientBean> res = filter.filter(allPatients);\r\n    } catch (NumberFormatException e) {\r\n        // exception is good.\r\n        return;\r\n    }\r\n    assertTrue(false);\r\n}"},
 {"id":4316, "methodname":"testFilterByZip()", "methodnamerefined":"testFilterByZip", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByZip", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByZip()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByZip() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.ZIP, \"10001\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(3, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 22L));// Fozzie Bear\r\n\r\n    assertTrue(((res.get(1).getMID()) == 23L));// Dare Devil\r\n\r\n    assertTrue(((res.get(2).getMID()) == 24L));// Devils Advocate\r\n\r\n}"},
 {"id":4317, "methodname":"testFilterByZip2()", "methodnamerefined":"testFilterByZip2", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByZip2", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByZip2()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByZip2() throws Exception {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.ZIP, \"27606-1234\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(8, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 1L));// random person\r\n\r\n    assertTrue(((res.get(1).getMID()) == 3L));// care needs\r\n\r\n    assertTrue(((res.get(2).getMID()) == 4L));// norecords has\r\n\r\n    assertTrue(((res.get(3).getMID()) == 5L));// baby programmer\r\n\r\n    assertTrue(((res.get(4).getMID()) == 6L));// baby a\r\n\r\n    assertTrue(((res.get(5).getMID()) == 7L));// baby b\r\n\r\n    assertTrue(((res.get(6).getMID()) == 8L));// baby c\r\n\r\n    assertTrue(((res.get(7).getMID()) == 42L));// bad horse\r\n\r\n}"},
 {"id":4318, "methodname":"testFilterByZipNoResult()", "methodnamerefined":"testFilterByZipNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByZipNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterByZipNoResult()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterByZipNoResult() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.ZIP, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4319, "methodname":"testFilterTypeFromString()", "methodnamerefined":"testFilterTypeFromString", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterTypeFromString", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testFilterTypeFromString()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testFilterTypeFromString() {\r\n    DemographicReportFilter.DemographicReportFilterType expected = DemographicReportFilter.DemographicReportFilterType.EMER_CONTACT_NAME;\r\n    DemographicReportFilter.DemographicReportFilterType actual = DemographicReportFilter.filterTypeFromString(\"emer_contACT_naME\");\r\n    assertEquals(expected, actual);\r\n}"},
 {"id":4320, "methodname":"testGetFilterType()", "methodnamerefined":"testGetFilterType", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testGetFilterType", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testGetFilterType()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testGetFilterType() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CITY, \"city!\", factory);\r\n    DemographicReportFilter.DemographicReportFilterType expected = DemographicReportFilter.DemographicReportFilterType.CITY;\r\n    assertEquals(expected, filter.getFilterType());\r\n}"},
 {"id":4321, "methodname":"testGetFilterValue()", "methodnamerefined":"testGetFilterValue", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testGetFilterValue", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testGetFilterValue()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testGetFilterValue() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CITY, \"city!\", factory);\r\n    String expected = \"city!\";\r\n    assertEquals(expected, filter.getFilterValue());\r\n}"},
 {"id":4322, "methodname":"testToString()", "methodnamerefined":"testToString", "methodabbreviation":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testToString", "fullmethod":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest.testToString()", "classid":587, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilterTest", "shortclassname":"DemographicReportFilterTest", "method":"public void testToString() {\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.LAST_NAME, \"val\", factory);\r\n    String expected = \"Filter by LAST NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CHILD_FIRST_NAME, \"val\", factory);\r\n    expected = \"Filter by CHILDS FIRST NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CHILD_LAST_NAME, \"val\", factory);\r\n    expected = \"Filter by CHILDS LAST NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CITY, \"val\", factory);\r\n    expected = \"Filter by CITY with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.CONTACT_EMAIL, \"val\", factory);\r\n    expected = \"Filter by CONTACT EMAIL with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.EMER_CONTACT_NAME, \"val\", factory);\r\n    expected = \"Filter by EMERGENCY CONTACT NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.EMER_CONTACT_PHONE, \"val\", factory);\r\n    expected = \"Filter by EMERGENCY CONTACT PHONE # with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.FIRST_NAME, \"val\", factory);\r\n    expected = \"Filter by FIRST NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.INSURE_ADDR, \"val\", factory);\r\n    expected = \"Filter by INSURANCE COMPANY ADDRESS with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.INSURE_CITY, \"val\", factory);\r\n    expected = \"Filter by INSURANCE COMPANY CITY with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.INSURE_ID, \"val\", factory);\r\n    expected = \"Filter by INSURANCE COMPANY ID with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.INSURE_NAME, \"val\", factory);\r\n    expected = \"Filter by INSURANCE COMPANY NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.INSURE_PHONE, \"val\", factory);\r\n    expected = \"Filter by INSURANCE COMPANY PHONE # with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.INSURE_STATE, \"val\", factory);\r\n    expected = \"Filter by INSURANCE COMPANY STATE with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.INSURE_ZIP, \"val\", factory);\r\n    expected = \"Filter by INSURANCE COMPANY ZIPCODE with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PARENT_FIRST_NAME, \"val\", factory);\r\n    expected = \"Filter by PARENTS FIRST NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PARENT_LAST_NAME, \"val\", factory);\r\n    expected = \"Filter by PARENTS LAST NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.PHONE, \"val\", factory);\r\n    expected = \"Filter by PHONE # with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.SIBLING_FIRST_NAME, \"val\", factory);\r\n    expected = \"Filter by SIBLINGS FIRST NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.SIBLING_LAST_NAME, \"val\", factory);\r\n    expected = \"Filter by SIBLINGS LAST NAME with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.STATE, \"val\", factory);\r\n    expected = \"Filter by STATE with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.STREET_ADDR, \"val\", factory);\r\n    expected = \"Filter by STREET ADDRESS with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.ZIP, \"val\", factory);\r\n    expected = \"Filter by ZIPCODE with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.GENDER, \"val\", factory);\r\n    expected = \"Filter by GENDER with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.LOWER_AGE_LIMIT, \"val\", factory);\r\n    expected = \"Filter by LOWER AGE LIMIT with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.UPPER_AGE_LIMIT, \"val\", factory);\r\n    expected = \"Filter by UPPER AGE LIMIT with value val\";\r\n    assertEquals(expected, filter.toString());\r\n    filter = new DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType.MID, \"val\", factory);\r\n    expected = \"Filter by MID with value val\";\r\n    assertEquals(expected, filter.toString());\r\n}"},
 {"id":4323, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-(java.lang.String)", "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "shortclassname":"MedicalReportFilter", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n */\r\nprivate MedicalReportFilterType(String name) {\r\n    this.name = name;\r\n}"},
 {"id":4324, "methodname":"-init-(edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-(edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "shortclassname":"MedicalReportFilter", "method":"/**\r\n *\r\n *\r\n * @param filterType\r\n * \t\t\r\n * @param filterValue\r\n * \t\t\r\n */\r\npublic MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}"},
 {"id":4325, "methodname":"filter(java.util.List)", "methodnamerefined":"filter", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter.filter", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter.filter(java.util.List)", "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "shortclassname":"MedicalReportFilter", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic List<PatientBean> filter(List<PatientBean> patients) {\r\n    List<PatientBean> prunedList = new ArrayList<PatientBean>();\r\n    boolean add = ((filterValue) != null) && (!(filterValue.isEmpty()));\r\n    if (add) {\r\n        for (PatientBean patient : patients) {\r\n            add = false;\r\n            switch (filterType) {\r\n                case ALLERGY :\r\n                    try {\r\n                        List<AllergyBean> allergies = aDAO.getAllergies(patient.getMID());\r\n                        for (AllergyBean allergy : allergies) {\r\n                            if (filterValue.equalsIgnoreCase(allergy.getNDCode())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case CURRENT_PRESCRIPTIONS :\r\n                    try {\r\n                        List<PrescriptionBean> prescriptions = pDAO.getCurrentPrescriptions(patient.getMID());\r\n                        for (PrescriptionBean prescription : prescriptions) {\r\n                            if ((filterValue.equalsIgnoreCase(prescription.getMedication().getNDCode())) || (filterValue.equalsIgnoreCase(prescription.getMedication().getNDCodeFormatted()))) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case DIAGNOSIS_ICD_CODE :\r\n                    try {\r\n                        List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                        for (DiagnosisBean diagnosis : diagnoses) {\r\n                            if (filterValue.equalsIgnoreCase(diagnosis.getICDCode())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                    // case OFFICE_VISIT_DATE:\r\n                    // String dates[] = filterValue.split(\"-\");\r\n                    // if (dates.length != 2)\r\n                    // break;\r\n                    // try {\r\n                    // SimpleDateFormat frmt = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n                    // Date d1 = frmt.parse(dates[0]);\r\n                    // Date d2 = frmt.parse(dates[1]);\r\n                    // \r\n                    // List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                    // for (OfficeVisitBean visit : visits) {\r\n                    // if (d1.compareTo(visit.getVisitDate()) <= 0\r\n                    // && d2.compareTo(visit.getVisitDate()) >= 0) {\r\n                    // add = true;\r\n                    // break;\r\n                    // }\r\n                    // }\r\n                    // } catch (Exception e) {\r\n                    // break;\r\n                    // }\r\n                    // break;\r\n                case PASTCURRENT_PRESCRIPTIONS :\r\n                    try {\r\n                        List<PrescriptionBean> prescriptions = pDAO.getPrescriptions(patient.getMID());\r\n                        for (PrescriptionBean prescription : prescriptions) {\r\n                            if ((filterValue.equalsIgnoreCase(prescription.getMedication().getNDCode())) || (filterValue.equalsIgnoreCase(prescription.getMedication().getNDCodeFormatted()))) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case PROCEDURE :\r\n                    try {\r\n                        List<ProcedureBean> procedures = pDAO.getProcedures(patient.getMID());\r\n                        for (ProcedureBean procedure : procedures) {\r\n                            if (filterValue.equalsIgnoreCase(procedure.getCPTCode())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case MISSING_DIAGNOSIS_ICD_CODE :\r\n                    try {\r\n                        List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                        add = true;\r\n                        for (DiagnosisBean diagnosis : diagnoses) {\r\n                            if (filterValue.equalsIgnoreCase(diagnosis.getICDCode())) {\r\n                                add = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case LOWER_OFFICE_VISIT_DATE :\r\n                    try {\r\n                        SimpleDateFormat frmt = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n                        Date d = frmt.parse(filterValue);\r\n                        List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                        for (OfficeVisitBean visit : visits) {\r\n                            if ((d.compareTo(visit.getVisitDate())) <= 0) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UPPER_OFFICE_VISIT_DATE :\r\n                    try {\r\n                        SimpleDateFormat frmt = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n                        Date d = frmt.parse(filterValue);\r\n                        List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                        for (OfficeVisitBean visit : visits) {\r\n                            if ((d.compareTo(visit.getVisitDate())) >= 0) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                default :\r\n                    break;\r\n            }\r\n            if (add)\r\n                prunedList.add(patient);\r\n\r\n        }\r\n    }\r\n    return prunedList;\r\n}"},
 {"id":4326, "methodname":"filterTypeFromString(java.lang.String)", "methodnamerefined":"filterTypeFromString", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter.filterTypeFromString", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter.filterTypeFromString(java.lang.String)", "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "shortclassname":"MedicalReportFilter", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n * @return \r\n */\r\npublic static MedicalReportFilter.MedicalReportFilterType filterTypeFromString(String name) {\r\n    for (MedicalReportFilter.MedicalReportFilterType type : MedicalReportFilter.MedicalReportFilterType.values()) {\r\n        if (type.name().equalsIgnoreCase(name)) {\r\n            return type;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":4327, "methodname":"getFilterType()", "methodnamerefined":"getFilterType", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter.getFilterType", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter.getFilterType()", "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "shortclassname":"MedicalReportFilter", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic MedicalReportFilter.MedicalReportFilterType getFilterType() {\r\n    return filterType;\r\n}"},
 {"id":4328, "methodname":"getFilterTypeString()", "methodnamerefined":"getFilterTypeString", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter.getFilterTypeString", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter.getFilterTypeString()", "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "shortclassname":"MedicalReportFilter", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getFilterTypeString() {\r\n    return filterType.toString();\r\n}"},
 {"id":4329, "methodname":"getFilterValue()", "methodnamerefined":"getFilterValue", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter.getFilterValue", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter.getFilterValue()", "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "shortclassname":"MedicalReportFilter", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getFilterValue() {\r\n    return filterValue;\r\n}"},
 {"id":4330, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter.toString", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter.toString()", "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "shortclassname":"MedicalReportFilter", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic String toString() {\r\n    String out = ((\"Filter by \" + (filterType.toString())) + \" with value \") + (filterValue);\r\n    return out;\r\n}"},
 {"id":4331, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType.-init-(java.lang.String)", "classid":588, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType", "shortclassname":"MedicalReportFilter$MedicalReportFilterType", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n */\r\nprivate MedicalReportFilterType(String name) {\r\n    this.name = name;\r\n}"},
 {"id":4332, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType.toString", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType.toString()", "classid":588, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType", "shortclassname":"MedicalReportFilter$MedicalReportFilterType", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic String toString() {\r\n    return this.name;\r\n}"},
 {"id":4333, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.-init-()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"MedicalReportFilterTest() {\r\n}"},
 {"id":4334, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.setUp()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    allPatients = pDAO.getAllPatients();\r\n}"},
 {"id":4335, "methodname":"testFilterByAllergy()", "methodnamerefined":"testFilterByAllergy", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByAllergy", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByAllergy()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByAllergy() throws Exception {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.ALLERGY, \"00882219\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(1, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 100L));\r\n}"},
 {"id":4336, "methodname":"testFilterByAllergyNoResult()", "methodnamerefined":"testFilterByAllergyNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByAllergyNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByAllergyNoResult()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByAllergyNoResult() {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.ALLERGY, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4337, "methodname":"testFilterByCurrentPrescriptions()", "methodnamerefined":"testFilterByCurrentPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByCurrentPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByCurrentPrescriptions()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByCurrentPrescriptions() throws Exception {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.CURRENT_PRESCRIPTIONS, \"647641512\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(3, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 2L));\r\n    assertTrue(((res.get(1).getMID()) == 99L));\r\n    assertTrue(((res.get(2).getMID()) == 10L));\r\n}"},
 {"id":4338, "methodname":"testFilterByCurrentPrescriptionsNoResult()", "methodnamerefined":"testFilterByCurrentPrescriptionsNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByCurrentPrescriptionsNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByCurrentPrescriptionsNoResult()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByCurrentPrescriptionsNoResult() {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.CURRENT_PRESCRIPTIONS, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4339, "methodname":"testFilterByLowerOfficeVisit()", "methodnamerefined":"testFilterByLowerOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByLowerOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByLowerOfficeVisit()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByLowerOfficeVisit() throws Exception {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.LOWER_OFFICE_VISIT_DATE, \"01/01/2012\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(1, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 100L));\r\n}"},
 {"id":4340, "methodname":"testFilterByLowerOfficeVisitNoResult()", "methodnamerefined":"testFilterByLowerOfficeVisitNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByLowerOfficeVisitNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByLowerOfficeVisitNoResult()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByLowerOfficeVisitNoResult() {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.LOWER_OFFICE_VISIT_DATE, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4341, "methodname":"testFilterByOfficeVisit()", "methodnamerefined":"testFilterByOfficeVisit", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByOfficeVisit", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByOfficeVisit()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByOfficeVisit() throws Exception {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.UPPER_OFFICE_VISIT_DATE, \"12/10/1985\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(2, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 2L));\r\n    assertTrue(((res.get(1).getMID()) == 99L));\r\n}"},
 {"id":4342, "methodname":"testFilterByOfficeVisitNoResult()", "methodnamerefined":"testFilterByOfficeVisitNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByOfficeVisitNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByOfficeVisitNoResult()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByOfficeVisitNoResult() {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.UPPER_OFFICE_VISIT_DATE, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4343, "methodname":"testFilterByPastCurrentPrescriptions()", "methodnamerefined":"testFilterByPastCurrentPrescriptions", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByPastCurrentPrescriptions", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByPastCurrentPrescriptions()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByPastCurrentPrescriptions() throws Exception {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.PASTCURRENT_PRESCRIPTIONS, \"081096\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(1, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 99L));\r\n}"},
 {"id":4344, "methodname":"testFilterByPastCurrentPrescriptionsNoResult()", "methodnamerefined":"testFilterByPastCurrentPrescriptionsNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByPastCurrentPrescriptionsNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByPastCurrentPrescriptionsNoResult()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByPastCurrentPrescriptionsNoResult() {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.PASTCURRENT_PRESCRIPTIONS, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4345, "methodname":"testFilterByProcedure()", "methodnamerefined":"testFilterByProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByProcedure", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByProcedure()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByProcedure() throws Exception {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.PROCEDURE, \"1270F\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(1, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 2L));// Andy Programmer\r\n\r\n}"},
 {"id":4346, "methodname":"testFilterByProcedureNoResult()", "methodnamerefined":"testFilterByProcedureNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByProcedureNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterByProcedureNoResult()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterByProcedureNoResult() {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.PROCEDURE, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4347, "methodname":"testFilterTypeFromString()", "methodnamerefined":"testFilterTypeFromString", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterTypeFromString", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testFilterTypeFromString()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testFilterTypeFromString() {\r\n    MedicalReportFilter.MedicalReportFilterType expected = MedicalReportFilter.MedicalReportFilterType.CURRENT_PRESCRIPTIONS;\r\n    MedicalReportFilter.MedicalReportFilterType actual = MedicalReportFilter.filterTypeFromString(\"CurrENt_PREscriptions\");\r\n    assertEquals(expected, actual);\r\n}"},
 {"id":4348, "methodname":"testGetFilterType()", "methodnamerefined":"testGetFilterType", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testGetFilterType", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testGetFilterType()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testGetFilterType() {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.PROCEDURE, \"city!\", factory);\r\n    MedicalReportFilter.MedicalReportFilterType expected = MedicalReportFilter.MedicalReportFilterType.PROCEDURE;\r\n    assertEquals(expected, filter.getFilterType());\r\n}"},
 {"id":4349, "methodname":"testGetFilterValue()", "methodnamerefined":"testGetFilterValue", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testGetFilterValue", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testGetFilterValue()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testGetFilterValue() {\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.PROCEDURE, \"city!\", factory);\r\n    String expected = \"city!\";\r\n    assertEquals(expected, filter.getFilterValue());\r\n}"},
 {"id":4350, "methodname":"testToString()", "methodnamerefined":"testToString", "methodabbreviation":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testToString", "fullmethod":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest.testToString()", "classid":590, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilterTest", "shortclassname":"MedicalReportFilterTest", "method":"public void testToString() {\r\n    String expected = \"\";\r\n    filter = new MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType.ALLERGY, \"val\", factory);\r\n    expected = \"Filter by ALLERGY with value val\";\r\n    assertEquals(expected, filter.toString());\r\n}"},
 {"id":4351, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-(java.lang.String)", "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "shortclassname":"PersonnelReportFilter", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n */\r\nprivate PersonnelReportFilterType(String name) {\r\n    this.name = name;\r\n}"},
 {"id":4352, "methodname":"-init-(edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-(edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "shortclassname":"PersonnelReportFilter", "method":"public PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n}"},
 {"id":4353, "methodname":"filter(java.util.List)", "methodnamerefined":"filter", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.filter", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.filter(java.util.List)", "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "shortclassname":"PersonnelReportFilter", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic List<PatientBean> filter(List<PatientBean> patients) {\r\n    List<PatientBean> prunedList = new ArrayList<PatientBean>();\r\n    boolean add = ((filterValue) != null) && (!(filterValue.isEmpty()));\r\n    if (add) {\r\n        for (PatientBean patient : patients) {\r\n            add = false;\r\n            switch (filterType) {\r\n                case DLHCP :\r\n                    try {\r\n                        List<PersonnelBean> dlhcps = pDAO.getDeclaredHCPs(patient.getMID());\r\n                        for (PersonnelBean dlhcp : dlhcps) {\r\n                            if (filterValue.equalsIgnoreCase(dlhcp.getFullName())) {\r\n                                add = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        break;\r\n                    }\r\n                    break;\r\n                default :\r\n                    break;\r\n            }\r\n            if (add)\r\n                prunedList.add(patient);\r\n\r\n        }\r\n    }\r\n    return prunedList;\r\n}"},
 {"id":4354, "methodname":"filterTypeFromString(java.lang.String)", "methodnamerefined":"filterTypeFromString", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.filterTypeFromString", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.filterTypeFromString(java.lang.String)", "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "shortclassname":"PersonnelReportFilter", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n * @return \r\n */\r\npublic static PersonnelReportFilter.PersonnelReportFilterType filterTypeFromString(String name) {\r\n    for (PersonnelReportFilter.PersonnelReportFilterType type : PersonnelReportFilter.PersonnelReportFilterType.values()) {\r\n        if (type.name().equalsIgnoreCase(name)) {\r\n            return type;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":4355, "methodname":"getFilterType()", "methodnamerefined":"getFilterType", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.getFilterType", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.getFilterType()", "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "shortclassname":"PersonnelReportFilter", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic PersonnelReportFilter.PersonnelReportFilterType getFilterType() {\r\n    return filterType;\r\n}"},
 {"id":4356, "methodname":"getFilterTypeString()", "methodnamerefined":"getFilterTypeString", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.getFilterTypeString", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.getFilterTypeString()", "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "shortclassname":"PersonnelReportFilter", "method":"/**\r\n *\r\n *\r\n * @return \r\n */\r\npublic String getFilterTypeString() {\r\n    return filterType.toString();\r\n}"},
 {"id":4357, "methodname":"getFilterValue()", "methodnamerefined":"getFilterValue", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.getFilterValue", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.getFilterValue()", "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "shortclassname":"PersonnelReportFilter", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic String getFilterValue() {\r\n    return filterValue;\r\n}"},
 {"id":4358, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.toString", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.toString()", "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "shortclassname":"PersonnelReportFilter", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic String toString() {\r\n    String out = ((\"Filter by \" + (filterType.toString())) + \" with value \") + (filterValue);\r\n    return out;\r\n}"},
 {"id":4359, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType.-init-(java.lang.String)", "classid":591, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType", "shortclassname":"PersonnelReportFilter$PersonnelReportFilterType", "method":"/**\r\n *\r\n *\r\n * @param name\r\n * \t\t\r\n */\r\nprivate PersonnelReportFilterType(String name) {\r\n    this.name = name;\r\n}"},
 {"id":4360, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType.toString", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType.toString()", "classid":591, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType", "shortclassname":"PersonnelReportFilter$PersonnelReportFilterType", "method":"/**\r\n *\r\n */\r\n@Override\r\npublic String toString() {\r\n    return this.name;\r\n}"},
 {"id":4361, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.-init-()", "classid":593, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest", "shortclassname":"PersonnelReportFilterTest", "method":"PersonnelReportFilterTest() {\r\n}"},
 {"id":4362, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.setUp()", "classid":593, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest", "shortclassname":"PersonnelReportFilterTest", "method":"protected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n    gen.standardData();\r\n    allPatients = pDAO.getAllPatients();\r\n}"},
 {"id":4363, "methodname":"testFilterByProcedure()", "methodnamerefined":"testFilterByProcedure", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testFilterByProcedure", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testFilterByProcedure()", "classid":593, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest", "shortclassname":"PersonnelReportFilterTest", "method":"public void testFilterByProcedure() throws Exception {\r\n    filter = new PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType.DLHCP, \"Beaker Beaker\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertEquals(2, res.size());\r\n    assertTrue(((res.get(0).getMID()) == 22L));\r\n    assertTrue(((res.get(1).getMID()) == 23L));\r\n}"},
 {"id":4364, "methodname":"testFilterByProcedureNoResult()", "methodnamerefined":"testFilterByProcedureNoResult", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testFilterByProcedureNoResult", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testFilterByProcedureNoResult()", "classid":593, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest", "shortclassname":"PersonnelReportFilterTest", "method":"public void testFilterByProcedureNoResult() {\r\n    filter = new PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType.DLHCP, \"Dalpe\", factory);\r\n    List<PatientBean> res = filter.filter(allPatients);\r\n    assertTrue(res.isEmpty());\r\n}"},
 {"id":4365, "methodname":"testFilterTypeFromString()", "methodnamerefined":"testFilterTypeFromString", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testFilterTypeFromString", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testFilterTypeFromString()", "classid":593, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest", "shortclassname":"PersonnelReportFilterTest", "method":"public void testFilterTypeFromString() {\r\n    PersonnelReportFilter.PersonnelReportFilterType expected = PersonnelReportFilter.PersonnelReportFilterType.DLHCP;\r\n    PersonnelReportFilter.PersonnelReportFilterType actual = PersonnelReportFilter.filterTypeFromString(\"dLhCP\");\r\n    assertEquals(expected, actual);\r\n}"},
 {"id":4366, "methodname":"testGetFilterType()", "methodnamerefined":"testGetFilterType", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testGetFilterType", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testGetFilterType()", "classid":593, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest", "shortclassname":"PersonnelReportFilterTest", "method":"public void testGetFilterType() {\r\n    filter = new PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType.DLHCP, \"city!\", factory);\r\n    PersonnelReportFilter.PersonnelReportFilterType expected = PersonnelReportFilter.PersonnelReportFilterType.DLHCP;\r\n    assertEquals(expected, filter.getFilterType());\r\n}"},
 {"id":4367, "methodname":"testGetFilterValue()", "methodnamerefined":"testGetFilterValue", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testGetFilterValue", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testGetFilterValue()", "classid":593, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest", "shortclassname":"PersonnelReportFilterTest", "method":"public void testGetFilterValue() {\r\n    filter = new PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType.DLHCP, \"city!\", factory);\r\n    String expected = \"city!\";\r\n    assertEquals(expected, filter.getFilterValue());\r\n}"},
 {"id":4368, "methodname":"testToString()", "methodnamerefined":"testToString", "methodabbreviation":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testToString", "fullmethod":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest.testToString()", "classid":593, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilterTest", "shortclassname":"PersonnelReportFilterTest", "method":"public void testToString() {\r\n    String expected = \"\";\r\n    filter = new PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType.DLHCP, \"val\", factory);\r\n    expected = \"Filter by DECLARED HCP with value val\";\r\n    assertEquals(expected, filter.toString());\r\n}"},
 {"id":4369, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.report.ReportFilter.-init-", "fullmethod":"edu.ncsu.csc.itrust.report.ReportFilter.-init-()", "classid":594, "classname":"edu.ncsu.csc.itrust.report.ReportFilter", "shortclassname":"ReportFilter", "method":"ReportFilter() {\r\n}"},
 {"id":4370, "methodname":"filter(java.util.List)", "methodnamerefined":"filter", "methodabbreviation":"edu.ncsu.csc.itrust.report.ReportFilter.filter", "fullmethod":"edu.ncsu.csc.itrust.report.ReportFilter.filter(java.util.List)", "classid":594, "classname":"edu.ncsu.csc.itrust.report.ReportFilter", "shortclassname":"ReportFilter", "method":"/**\r\n *\r\n *\r\n * @param patients\r\n * \t\t\r\n * @return \r\n */\r\npublic abstract List<PatientBean> filter(List<PatientBean> patients);"},
 {"id":4371, "methodname":"getFilterTypeString()", "methodnamerefined":"getFilterTypeString", "methodabbreviation":"edu.ncsu.csc.itrust.report.ReportFilter.getFilterTypeString", "fullmethod":"edu.ncsu.csc.itrust.report.ReportFilter.getFilterTypeString()", "classid":594, "classname":"edu.ncsu.csc.itrust.report.ReportFilter", "shortclassname":"ReportFilter", "method":"public abstract String getFilterTypeString();"},
 {"id":4372, "methodname":"getFilterValue()", "methodnamerefined":"getFilterValue", "methodabbreviation":"edu.ncsu.csc.itrust.report.ReportFilter.getFilterValue", "fullmethod":"edu.ncsu.csc.itrust.report.ReportFilter.getFilterValue()", "classid":594, "classname":"edu.ncsu.csc.itrust.report.ReportFilter", "shortclassname":"ReportFilter", "method":"public abstract String getFilterValue();"},
 {"id":4373, "methodname":"toString()", "methodnamerefined":"toString", "methodabbreviation":"edu.ncsu.csc.itrust.report.ReportFilter.toString", "fullmethod":"edu.ncsu.csc.itrust.report.ReportFilter.toString()", "classid":594, "classname":"edu.ncsu.csc.itrust.report.ReportFilter", "shortclassname":"ReportFilter", "method":"/**\r\n *\r\n */\r\npublic abstract String toString();"},
 {"id":4374, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":595, "classname":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator", "shortclassname":"ChronicDiseaseMediator", "method":"/**\r\n * Given a factory and patient ID, and sets up a list of all risk checkers\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory to be used in creating the necessary DAOs to perform the checks.\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @throws DBException\r\n * \t\t\r\n * @throws NoHealthRecordsException\r\n * \t\t\r\n */\r\npublic ChronicDiseaseMediator(DAOFactory factory, long pid) throws DBException, NoHealthRecordsException {\r\n    riskCheckers = new ArrayList<RiskChecker>();\r\n    riskCheckers.add(new HeartDiseaseRisks(factory, pid));\r\n    riskCheckers.add(new Type1DiabetesRisks(factory, pid));\r\n    riskCheckers.add(new Type2DiabetesRisks(factory, pid));\r\n}"},
 {"id":4375, "methodname":"getDiseaseAtRisk()", "methodnamerefined":"getDiseaseAtRisk", "methodabbreviation":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator.getDiseaseAtRisk", "fullmethod":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator.getDiseaseAtRisk()", "classid":595, "classname":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator", "shortclassname":"ChronicDiseaseMediator", "method":"/**\r\n *\r\n *\r\n * @return A list of diseases that this patient is at risk for\r\n */\r\npublic List<RiskChecker> getDiseaseAtRisk() {\r\n    List<RiskChecker> diseases = new ArrayList<RiskChecker>();\r\n    for (RiskChecker diseaseChecker : riskCheckers) {\r\n        if (diseaseChecker.isAtRisk())\r\n            diseases.add(diseaseChecker);\r\n\r\n    }\r\n    return diseases;\r\n}"},
 {"id":4376, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest.-init-()", "classid":596, "classname":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest", "shortclassname":"ChronicDiseaseMediatorTest", "method":"ChronicDiseaseMediatorTest() {\r\n}"},
 {"id":4377, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest.setUp()", "classid":596, "classname":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest", "shortclassname":"ChronicDiseaseMediatorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen.clearAllTables();\r\n}"},
 {"id":4378, "methodname":"testNoRecords()", "methodnamerefined":"testNoRecords", "methodabbreviation":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest.testNoRecords", "fullmethod":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest.testNoRecords()", "classid":596, "classname":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest", "shortclassname":"ChronicDiseaseMediatorTest", "method":"public void testNoRecords() throws Exception {\r\n    try {\r\n        new ChronicDiseaseMediator(factory, 2L);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (NoHealthRecordsException e) {\r\n        assertEquals(\"message matches too\", NoHealthRecordsException.MESSAGE, e.getMessage());\r\n    }\r\n}"},
 {"id":4379, "methodname":"testPatient2()", "methodnamerefined":"testPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest.testPatient2", "fullmethod":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest.testPatient2()", "classid":596, "classname":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediatorTest", "shortclassname":"ChronicDiseaseMediatorTest", "method":"public void testPatient2() throws Exception {\r\n    gen.patient2();\r\n    List<RiskChecker> list = new ChronicDiseaseMediator(factory, 2L).getDiseaseAtRisk();\r\n    assertEquals(2, list.size());\r\n    assertEquals(\"Heart Disease\", list.get(0).getName());\r\n    assertEquals(\"Type 2 Diabetes\", list.get(1).getName());\r\n}"},
 {"id":4380, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":597, "classname":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks", "shortclassname":"HeartDiseaseRisks", "method":"public HeartDiseaseRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}"},
 {"id":4381, "methodname":"getDiseaseRiskFactors()", "methodnamerefined":"getDiseaseRiskFactors", "methodabbreviation":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.getDiseaseRiskFactors", "fullmethod":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.getDiseaseRiskFactors()", "classid":597, "classname":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks", "shortclassname":"HeartDiseaseRisks", "method":"@Override\r\nprotected List<PatientRiskFactor> getDiseaseRiskFactors() {\r\n    List<PatientRiskFactor> factors = new ArrayList<PatientRiskFactor>();\r\n    factors.add(new GenderFactor(patient, Gender.Male));\r\n    factors.add(new AgeFactor(patient, 45));\r\n    factors.add(new EthnicityFactor(patient, Ethnicity.Hispanic, Ethnicity.AfricanAmerican, Ethnicity.AmericanIndian));\r\n    factors.add(new WeightFactor(currentHealthRecord, 30));\r\n    factors.add(new HypertensionFactor(currentHealthRecord));\r\n    factors.add(new CholesterolFactor(currentHealthRecord));\r\n    factors.add(new SmokingFactor(factory, patient.getMID()));\r\n    factors.add(new PriorDiagnosisFactor(factory, patient.getMID(), 250.0, 251.0));\r\n    factors.add(new FamilyHistoryFactor(factory, patient.getMID(), 350.0, 460.0));\r\n    return factors;\r\n}"},
 {"id":4382, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.getName", "fullmethod":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.getName()", "classid":597, "classname":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks", "shortclassname":"HeartDiseaseRisks", "method":"@Override\r\npublic String getName() {\r\n    return \"Heart Disease\";\r\n}"},
 {"id":4383, "methodname":"qualifiesForDisease()", "methodnamerefined":"qualifiesForDisease", "methodabbreviation":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.qualifiesForDisease", "fullmethod":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.qualifiesForDisease()", "classid":597, "classname":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks", "shortclassname":"HeartDiseaseRisks", "method":"@Override\r\npublic boolean qualifiesForDisease() {\r\n    return true;\r\n}"},
 {"id":4384, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest.-init-()", "classid":598, "classname":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest", "shortclassname":"HeartDiseaseTest", "method":"HeartDiseaseTest() {\r\n}"},
 {"id":4385, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest.setUp()", "classid":598, "classname":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest", "shortclassname":"HeartDiseaseTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n}"},
 {"id":4386, "methodname":"testPatient1()", "methodnamerefined":"testPatient1", "methodabbreviation":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest.testPatient1", "fullmethod":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest.testPatient1()", "classid":598, "classname":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest", "shortclassname":"HeartDiseaseTest", "method":"public void testPatient1() throws Exception {\r\n    checker = new HeartDiseaseRisks(factory, 1L);\r\n    assertTrue(checker.isAtRisk());\r\n    List<PatientRiskFactor> factors = checker.getPatientRiskFactors();\r\n    assertEquals(3, factors.size());\r\n    assertEquals(\"Patient is over 45\", factors.get(0).getDescription());\r\n    assertEquals(\"Patients ethnicity is African American\", factors.get(1).getDescription());\r\n    assertEquals(\"Patient has had related diagnoses\", factors.get(2).getDescription());\r\n    // assertEquals(\"Patient has a family history of this disease\", factors.get(3).getDescription());\r\n}"},
 {"id":4387, "methodname":"testPatient2()", "methodnamerefined":"testPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest.testPatient2", "fullmethod":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest.testPatient2()", "classid":598, "classname":"edu.ncsu.csc.itrust.risk.HeartDiseaseTest", "shortclassname":"HeartDiseaseTest", "method":"public void testPatient2() throws Exception {\r\n    checker = new HeartDiseaseRisks(factory, 2L);\r\n    assertTrue(checker.isAtRisk());\r\n    List<PatientRiskFactor> factors = checker.getPatientRiskFactors();\r\n    assertEquals(7, factors.size());\r\n    assertEquals(\"Patient is male\", factors.get(0).getDescription());\r\n    assertEquals(\"Patients body mass index is over 30\", factors.get(1).getDescription());\r\n    assertEquals(\"Patient has hypertension\", factors.get(2).getDescription());\r\n    assertEquals(\"Patient has bad cholesterol\", factors.get(3).getDescription());\r\n    assertEquals(\"Patient is or was a smoker\", factors.get(4).getDescription());\r\n    assertEquals(\"Patient has had related diagnoses\", factors.get(5).getDescription());\r\n    assertEquals(\"Patient has a family history of this disease\", factors.get(6).getDescription());\r\n}"},
 {"id":4388, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.RiskChecker.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.RiskChecker.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":599, "classname":"edu.ncsu.csc.itrust.risk.RiskChecker", "shortclassname":"RiskChecker", "method":"public RiskChecker(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    this.factory = factory;\r\n    HealthRecordsDAO hrDAO = factory.getHealthRecordsDAO();\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(patientID);\r\n    if ((records.size()) > 0)\r\n        currentHealthRecord = records.get(0);\r\n    else\r\n        throw new NoHealthRecordsException();\r\n\r\n    patient = factory.getPatientDAO().getPatient(patientID);\r\n}"},
 {"id":4389, "methodname":"getDiseaseRiskFactors()", "methodnamerefined":"getDiseaseRiskFactors", "methodabbreviation":"edu.ncsu.csc.itrust.risk.RiskChecker.getDiseaseRiskFactors", "fullmethod":"edu.ncsu.csc.itrust.risk.RiskChecker.getDiseaseRiskFactors()", "classid":599, "classname":"edu.ncsu.csc.itrust.risk.RiskChecker", "shortclassname":"RiskChecker", "method":"/**\r\n *\r\n *\r\n * @return A java.util.List of the risk factors increasing this patients disease risk.\r\n */\r\nprotected abstract List<PatientRiskFactor> getDiseaseRiskFactors();"},
 {"id":4390, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.risk.RiskChecker.getName", "fullmethod":"edu.ncsu.csc.itrust.risk.RiskChecker.getName()", "classid":599, "classname":"edu.ncsu.csc.itrust.risk.RiskChecker", "shortclassname":"RiskChecker", "method":"/**\r\n *\r\n *\r\n * @return The name of the disease being checked.\r\n */\r\npublic abstract String getName();"},
 {"id":4391, "methodname":"getPatientRiskFactors()", "methodnamerefined":"getPatientRiskFactors", "methodabbreviation":"edu.ncsu.csc.itrust.risk.RiskChecker.getPatientRiskFactors", "fullmethod":"edu.ncsu.csc.itrust.risk.RiskChecker.getPatientRiskFactors()", "classid":599, "classname":"edu.ncsu.csc.itrust.risk.RiskChecker", "shortclassname":"RiskChecker", "method":"/**\r\n *\r\n *\r\n * @return A java.util.List of patient risk factors associated with this disease.\r\n */\r\npublic List<PatientRiskFactor> getPatientRiskFactors() {\r\n    List<PatientRiskFactor> patientRiskFactors = new ArrayList<PatientRiskFactor>();\r\n    List<PatientRiskFactor> diseaseRiskFactors = getDiseaseRiskFactors();\r\n    for (PatientRiskFactor factor : diseaseRiskFactors) {\r\n        if (factor.hasRiskFactor()) {\r\n            patientRiskFactors.add(factor);\r\n        }\r\n    }\r\n    return patientRiskFactors;\r\n}"},
 {"id":4392, "methodname":"isAtRisk()", "methodnamerefined":"isAtRisk", "methodabbreviation":"edu.ncsu.csc.itrust.risk.RiskChecker.isAtRisk", "fullmethod":"edu.ncsu.csc.itrust.risk.RiskChecker.isAtRisk()", "classid":599, "classname":"edu.ncsu.csc.itrust.risk.RiskChecker", "shortclassname":"RiskChecker", "method":"/**\r\n * This method exists purely for performance - just stop once you hit the threshold. <br />\r\n * <br />\r\n * Also, the risk factors should be cached in the RiskFactor implementors - in getPatientRiskFactors there\r\n * should be no double-querying\r\n *\r\n * @return isAtRisk\r\n */\r\npublic boolean isAtRisk() {\r\n    if (qualifiesForDisease()) {\r\n        int numRisks = 0;\r\n        List<PatientRiskFactor> diseaseRiskFactors = getDiseaseRiskFactors();\r\n        for (PatientRiskFactor factor : diseaseRiskFactors) {\r\n            if (factor.hasRiskFactor())\r\n                numRisks++;\r\n\r\n            if (numRisks >= (RiskChecker.RISK_THRESHOLD))\r\n                return true;\r\n\r\n        }\r\n    }\r\n    return false;// both an else from qualifies or NOT over the threshold\r\n\r\n}"},
 {"id":4393, "methodname":"qualifiesForDisease()", "methodnamerefined":"qualifiesForDisease", "methodabbreviation":"edu.ncsu.csc.itrust.risk.RiskChecker.qualifiesForDisease", "fullmethod":"edu.ncsu.csc.itrust.risk.RiskChecker.qualifiesForDisease()", "classid":599, "classname":"edu.ncsu.csc.itrust.risk.RiskChecker", "shortclassname":"RiskChecker", "method":"/**\r\n *\r\n *\r\n * @return A boolean indicating whether the patient is at increased risk.\r\n */\r\npublic abstract boolean qualifiesForDisease();"},
 {"id":4394, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":600, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks", "shortclassname":"Type1DiabetesRisks", "method":"public Type1DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}"},
 {"id":4395, "methodname":"getDiseaseRiskFactors()", "methodnamerefined":"getDiseaseRiskFactors", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.getDiseaseRiskFactors", "fullmethod":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.getDiseaseRiskFactors()", "classid":600, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks", "shortclassname":"Type1DiabetesRisks", "method":"@Override\r\nprotected List<PatientRiskFactor> getDiseaseRiskFactors() {\r\n    List<PatientRiskFactor> factors = new ArrayList<PatientRiskFactor>();\r\n    factors.add(new EthnicityFactor(patient, Ethnicity.Caucasian));\r\n    factors.add(new FamilyHistoryFactor(factory, patient.getMID(), 250.0, 251.0));\r\n    factors.add(new ChildhoodInfectionFactor(factory, patient.getMID(), 79.3));\r\n    return factors;\r\n}"},
 {"id":4396, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.getName", "fullmethod":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.getName()", "classid":600, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks", "shortclassname":"Type1DiabetesRisks", "method":"@Override\r\npublic String getName() {\r\n    return \"Type 1 Diabetes\";\r\n}"},
 {"id":4397, "methodname":"qualifiesForDisease()", "methodnamerefined":"qualifiesForDisease", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.qualifiesForDisease", "fullmethod":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.qualifiesForDisease()", "classid":600, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks", "shortclassname":"Type1DiabetesRisks", "method":"@Override\r\npublic boolean qualifiesForDisease() {\r\n    return (patient.getAge()) < 12;\r\n}"},
 {"id":4398, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.-init-()", "classid":601, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest", "shortclassname":"Type1DiabetesTest", "method":"Type1DiabetesTest() {\r\n}"},
 {"id":4399, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.setUp()", "classid":601, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest", "shortclassname":"Type1DiabetesTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n}"},
 {"id":4400, "methodname":"testNoPHR()", "methodnamerefined":"testNoPHR", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.testNoPHR", "fullmethod":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.testNoPHR()", "classid":601, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest", "shortclassname":"Type1DiabetesTest", "method":"public void testNoPHR() throws Exception {\r\n    try {\r\n        checker = new Type1DiabetesRisks(factory, 200L);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (NoHealthRecordsException e) {\r\n        assertEquals(NoHealthRecordsException.MESSAGE, e.getMessage());\r\n    }\r\n}"},
 {"id":4401, "methodname":"testPatient2()", "methodnamerefined":"testPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.testPatient2", "fullmethod":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.testPatient2()", "classid":601, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest", "shortclassname":"Type1DiabetesTest", "method":"// Note: patient 2 does NOT qualify for the disease, see the next test\r\npublic void testPatient2() throws Exception {\r\n    checker = new Type1DiabetesRisks(factory, 2L);\r\n    List<PatientRiskFactor> factors = checker.getPatientRiskFactors();\r\n    assertEquals(3, factors.size());\r\n    assertEquals(\"Patients ethnicity is Caucasian\", factors.get(0).getDescription());\r\n    assertEquals(\"Patient has a family history of this disease\", factors.get(1).getDescription());\r\n    assertEquals((\"This patient had a viral infection during their childhood that would \" + \"increase the risk for this diesease\"), factors.get(2).getDescription());\r\n}"},
 {"id":4402, "methodname":"testQualifies()", "methodnamerefined":"testQualifies", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.testQualifies", "fullmethod":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest.testQualifies()", "classid":601, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesTest", "shortclassname":"Type1DiabetesTest", "method":"public void testQualifies() throws Exception {\r\n    checker = new Type1DiabetesRisks(factory, 2L);\r\n    assertFalse(checker.qualifiesForDisease());\r\n    PatientBean p = factory.getPatientDAO().getPatient(2L);\r\n    p.setDateOfBirthStr(DateUtil.yearsAgo(10));\r\n    factory.getPatientDAO().editPatient(p, 9000000003L);\r\n    checker = new Type1DiabetesRisks(factory, 2L);\r\n    assertTrue(checker.qualifiesForDisease());\r\n    assertTrue(checker.isAtRisk());\r\n}"},
 {"id":4403, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":602, "classname":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks", "shortclassname":"Type2DiabetesRisks", "method":"public Type2DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}"},
 {"id":4404, "methodname":"getDiseaseRiskFactors()", "methodnamerefined":"getDiseaseRiskFactors", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.getDiseaseRiskFactors", "fullmethod":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.getDiseaseRiskFactors()", "classid":602, "classname":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks", "shortclassname":"Type2DiabetesRisks", "method":"@Override\r\nprotected List<PatientRiskFactor> getDiseaseRiskFactors() {\r\n    List<PatientRiskFactor> factors = new ArrayList<PatientRiskFactor>();\r\n    factors.add(new AgeFactor(patient, 45));\r\n    factors.add(new EthnicityFactor(patient, Ethnicity.Hispanic, Ethnicity.AfricanAmerican, Ethnicity.AmericanIndian, Ethnicity.Asian));\r\n    factors.add(new WeightFactor(currentHealthRecord, 25));\r\n    factors.add(new HypertensionFactor(currentHealthRecord));\r\n    factors.add(new CholesterolFactor(currentHealthRecord));\r\n    factors.add(new PriorDiagnosisFactor(factory, patient.getMID(), 250.0, 251.0));\r\n    factors.add(new FamilyHistoryFactor(factory, patient.getMID(), 250.0, 251.0));\r\n    return factors;\r\n}"},
 {"id":4405, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.getName", "fullmethod":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.getName()", "classid":602, "classname":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks", "shortclassname":"Type2DiabetesRisks", "method":"@Override\r\npublic String getName() {\r\n    return \"Type 2 Diabetes\";\r\n}"},
 {"id":4406, "methodname":"qualifiesForDisease()", "methodnamerefined":"qualifiesForDisease", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.qualifiesForDisease", "fullmethod":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.qualifiesForDisease()", "classid":602, "classname":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks", "shortclassname":"Type2DiabetesRisks", "method":"@Override\r\npublic boolean qualifiesForDisease() {\r\n    return (patient.getAge()) >= 12;\r\n}"},
 {"id":4407, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest.-init-()", "classid":603, "classname":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest", "shortclassname":"Type2DiabetesTest", "method":"Type2DiabetesTest() {\r\n}"},
 {"id":4408, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest.setUp()", "classid":603, "classname":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest", "shortclassname":"Type2DiabetesTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient1();\r\n    gen.patient2();\r\n}"},
 {"id":4409, "methodname":"testPatient2()", "methodnamerefined":"testPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest.testPatient2", "fullmethod":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest.testPatient2()", "classid":603, "classname":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest", "shortclassname":"Type2DiabetesTest", "method":"public void testPatient2() throws Exception {\r\n    checker = new Type2DiabetesRisks(factory, 2L);\r\n    List<PatientRiskFactor> factors = checker.getPatientRiskFactors();\r\n    assertEquals(5, factors.size());\r\n    assertEquals(\"Patients body mass index is over 25\", factors.get(0).getDescription());\r\n    assertEquals(\"Patient has hypertension\", factors.get(1).getDescription());\r\n    assertEquals(\"Patient has bad cholesterol\", factors.get(2).getDescription());\r\n    assertEquals(\"Patient has had related diagnoses\", factors.get(3).getDescription());\r\n    assertEquals(\"Patient has a family history of this disease\", factors.get(4).getDescription());\r\n}"},
 {"id":4410, "methodname":"testQualifies()", "methodnamerefined":"testQualifies", "methodabbreviation":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest.testQualifies", "fullmethod":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest.testQualifies()", "classid":603, "classname":"edu.ncsu.csc.itrust.risk.Type2DiabetesTest", "shortclassname":"Type2DiabetesTest", "method":"public void testQualifies() throws Exception {\r\n    checker = new Type2DiabetesRisks(factory, 2L);\r\n    assertTrue(checker.qualifiesForDisease());\r\n    PatientBean p = factory.getPatientDAO().getPatient(2L);\r\n    p.setDateOfBirthStr(DateUtil.yearsAgo(10));\r\n    factory.getPatientDAO().editPatient(p, 9000000003L);\r\n    checker = new Type2DiabetesRisks(factory, 2L);\r\n    assertFalse(checker.qualifiesForDisease());\r\n}"},
 {"id":4411, "methodname":"-init-(edu.ncsu.csc.itrust.beans.PatientBean,int)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.AgeFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.AgeFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,int)", "classid":604, "classname":"edu.ncsu.csc.itrust.risk.factors.AgeFactor", "shortclassname":"AgeFactor", "method":"public AgeFactor(PatientBean patient, int age) {\r\n    this.age = age;\r\n    this.patient = patient;\r\n}"},
 {"id":4412, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.AgeFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.AgeFactor.getDescription()", "classid":604, "classname":"edu.ncsu.csc.itrust.risk.factors.AgeFactor", "shortclassname":"AgeFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"Patient is over \" + (age);\r\n}"},
 {"id":4413, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.AgeFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.AgeFactor.hasFactor()", "classid":604, "classname":"edu.ncsu.csc.itrust.risk.factors.AgeFactor", "shortclassname":"AgeFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    return (patient.getAge()) > (age);\r\n}"},
 {"id":4414, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest.-init-()", "classid":605, "classname":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest", "shortclassname":"AgeFactorTest", "method":"AgeFactorTest() {\r\n}"},
 {"id":4415, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest.setUp()", "classid":605, "classname":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest", "shortclassname":"AgeFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    p = new PatientBean();\r\n    factor = new AgeFactor(p, 45);\r\n}"},
 {"id":4416, "methodname":"testDefaultAge()", "methodnamerefined":"testDefaultAge", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest.testDefaultAge", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest.testDefaultAge()", "classid":605, "classname":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest", "shortclassname":"AgeFactorTest", "method":"public void testDefaultAge() throws Exception {\r\n    assertFalse(factor.hasRiskFactor());\r\n    factor = new AgeFactor(p, (-1));\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4417, "methodname":"testRegularAge()", "methodnamerefined":"testRegularAge", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest.testRegularAge", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest.testRegularAge()", "classid":605, "classname":"edu.ncsu.csc.itrust.risk.factors.AgeFactorTest", "shortclassname":"AgeFactorTest", "method":"public void testRegularAge() throws Exception {\r\n    p.setDateOfBirthStr(DateUtil.yearsAgo(44));\r\n    assertFalse(factor.hasRiskFactor());\r\n    p.setDateOfBirthStr(DateUtil.yearsAgo(46));\r\n    factor = new AgeFactor(p, 45);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4418, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double[])", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double[])", "classid":606, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor", "shortclassname":"ChildhoodInfectionFactor", "method":"public ChildhoodInfectionFactor(DAOFactory factory, long mid, double... icdCodes) {\r\n    this.factory = factory;\r\n    this.patientID = mid;\r\n    this.icdCodes = icdCodes.clone();\r\n}"},
 {"id":4419, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.getDescription()", "classid":606, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor", "shortclassname":"ChildhoodInfectionFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"This patient had a viral infection during their childhood that would increase the risk for this diesease\";\r\n}"},
 {"id":4420, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.hasFactor()", "classid":606, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor", "shortclassname":"ChildhoodInfectionFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    try {\r\n        return factory.getRiskDAO().hadChildhoodInfection(patientID, icdCodes);\r\n    } catch (DBException e) {\r\n        System.err.println(\"DBException on Childhood Infection Risk, giving no risk\");\r\n        return false;\r\n    }\r\n}"},
 {"id":4421, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.-init-()", "classid":607, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest", "shortclassname":"ChildhoodInfectionFactorTest", "method":"ChildhoodInfectionFactorTest() {\r\n}"},
 {"id":4422, "methodname":"addInfection(java.util.Date,double)", "methodnamerefined":"addInfection", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.addInfection", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.addInfection(java.util.Date,double)", "classid":607, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest", "shortclassname":"ChildhoodInfectionFactorTest", "method":"private void addInfection(Date date, double icd) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits(VisitDate,PatientID, hcpid, hospitalid) VALUES(?, 2, 9000000000, 1)\");\r\n        ps.setDate(1, new java.sql.Date(date.getTime()));\r\n        ps.executeUpdate();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovdiagnosis(VisitID, ICDCode) VALUES(?,?)\");\r\n        ps.setLong(1, DBUtil.getLastInsert(conn));\r\n        ps.setDouble(2, icd);\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":4423, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.setUp()", "classid":607, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest", "shortclassname":"ChildhoodInfectionFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    factor = new ChildhoodInfectionFactor(factory, 2L, 250.3, 487);\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hospitals();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n    p = factory.getPatientDAO().getPatient(2L);\r\n}"},
 {"id":4424, "methodname":"testDBException()", "methodnamerefined":"testDBException", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testDBException", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testDBException()", "classid":607, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest", "shortclassname":"ChildhoodInfectionFactorTest", "method":"public void testDBException() throws Exception {\r\n    this.factory = EvilDAOFactory.getEvilInstance();\r\n    factor = new ChildhoodInfectionFactor(factory, 2L, 250.3, 487);\r\n    assertFalse(factor.hasFactor());\r\n}"},
 {"id":4425, "methodname":"testManyInfectionsDuringChildhood()", "methodnamerefined":"testManyInfectionsDuringChildhood", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testManyInfectionsDuringChildhood", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testManyInfectionsDuringChildhood()", "classid":607, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest", "shortclassname":"ChildhoodInfectionFactorTest", "method":"public void testManyInfectionsDuringChildhood() throws Exception {\r\n    addInfection(new SimpleDateFormat(\"MM/dd/yyyy\").parse(p.getDateOfBirthStr()), 250.3);\r\n    addInfection(new SimpleDateFormat(\"MM/dd/yyyy\").parse(p.getDateOfBirthStr()), 487);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4426, "methodname":"testNoInfectionsAtAll()", "methodnamerefined":"testNoInfectionsAtAll", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testNoInfectionsAtAll", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testNoInfectionsAtAll()", "classid":607, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest", "shortclassname":"ChildhoodInfectionFactorTest", "method":"public void testNoInfectionsAtAll() throws Exception {\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4427, "methodname":"testNoInfectionsDuringChildhood()", "methodnamerefined":"testNoInfectionsDuringChildhood", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testNoInfectionsDuringChildhood", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testNoInfectionsDuringChildhood()", "classid":607, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest", "shortclassname":"ChildhoodInfectionFactorTest", "method":"public void testNoInfectionsDuringChildhood() throws Exception {\r\n    addInfection(new Date(), 250.3);\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4428, "methodname":"testOneInfectionDuringChildhood()", "methodnamerefined":"testOneInfectionDuringChildhood", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testOneInfectionDuringChildhood", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testOneInfectionDuringChildhood()", "classid":607, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest", "shortclassname":"ChildhoodInfectionFactorTest", "method":"public void testOneInfectionDuringChildhood() throws Exception {\r\n    addInfection(new SimpleDateFormat(\"MM/dd/yyyy\").parse(p.getDateOfBirthStr()), 250.3);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4429, "methodname":"testRegularPatient2()", "methodnamerefined":"testRegularPatient2", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testRegularPatient2", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest.testRegularPatient2()", "classid":607, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactorTest", "shortclassname":"ChildhoodInfectionFactorTest", "method":"public void testRegularPatient2() throws Exception {\r\n    factor = new ChildhoodInfectionFactor(factory, 2L, 79.1, 79.3);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4430, "methodname":"-init-(edu.ncsu.csc.itrust.beans.HealthRecord)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord)", "classid":608, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor", "shortclassname":"CholesterolFactor", "method":"public CholesterolFactor(HealthRecord currentHealthRecord) {\r\n    this.record = currentHealthRecord;\r\n}"},
 {"id":4431, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor.getDescription()", "classid":608, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor", "shortclassname":"CholesterolFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"Patient has bad cholesterol\";\r\n}"},
 {"id":4432, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor.hasFactor()", "classid":608, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor", "shortclassname":"CholesterolFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    return (((record.getCholesterolHDL()) < (CholesterolFactor.hdlThreshold)) || ((record.getCholesterolLDL()) > (CholesterolFactor.ldlThreshold))) || ((record.getCholesterolTri()) > (CholesterolFactor.triThreshold));\r\n}"},
 {"id":4433, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.-init-()", "classid":609, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest", "shortclassname":"CholesterolFactorTest", "method":"CholesterolFactorTest() {\r\n}"},
 {"id":4434, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.setUp()", "classid":609, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest", "shortclassname":"CholesterolFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    hr = new HealthRecord();\r\n    factor = new CholesterolFactor(hr);\r\n    hr.setCholesterolHDL(36);\r\n    hr.setCholesterolLDL(239);\r\n    hr.setCholesterolTri(249);\r\n}"},
 {"id":4435, "methodname":"testAllGood()", "methodnamerefined":"testAllGood", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.testAllGood", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.testAllGood()", "classid":609, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest", "shortclassname":"CholesterolFactorTest", "method":"public void testAllGood() throws Exception {\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4436, "methodname":"testBadHDL()", "methodnamerefined":"testBadHDL", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.testBadHDL", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.testBadHDL()", "classid":609, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest", "shortclassname":"CholesterolFactorTest", "method":"public void testBadHDL() throws Exception {\r\n    hr.setCholesterolHDL(34);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4437, "methodname":"testBadLDL()", "methodnamerefined":"testBadLDL", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.testBadLDL", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.testBadLDL()", "classid":609, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest", "shortclassname":"CholesterolFactorTest", "method":"public void testBadLDL() throws Exception {\r\n    hr.setCholesterolLDL(241);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4438, "methodname":"testBadTri()", "methodnamerefined":"testBadTri", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.testBadTri", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest.testBadTri()", "classid":609, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactorTest", "shortclassname":"CholesterolFactorTest", "method":"public void testBadTri() throws Exception {\r\n    hr.setCholesterolTri(251);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4439, "methodname":"-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Ethnicity[])", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Ethnicity[])", "classid":610, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor", "shortclassname":"EthnicityFactor", "method":"public EthnicityFactor(PatientBean patient, Ethnicity... atRisks) {\r\n    this.atRisk = atRisks.clone();\r\n    this.patient = patient;\r\n}"},
 {"id":4440, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.getDescription()", "classid":610, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor", "shortclassname":"EthnicityFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"Patients ethnicity is \" + (patient.getEthnicity());\r\n}"},
 {"id":4441, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.hasFactor()", "classid":610, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor", "shortclassname":"EthnicityFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    for (Ethnicity ethnicity : atRisk) {\r\n        if ((patient.getEthnicity().equals(ethnicity)) && (!(Ethnicity.NotSpecified.equals(ethnicity))))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":4442, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.-init-()", "classid":611, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest", "shortclassname":"EthnicityFactorTest", "method":"EthnicityFactorTest() {\r\n}"},
 {"id":4443, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.setUp()", "classid":611, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest", "shortclassname":"EthnicityFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    p = new PatientBean();\r\n    p.setEthnicity(Ethnicity.Asian);\r\n}"},
 {"id":4444, "methodname":"testMultipleEthnicities()", "methodnamerefined":"testMultipleEthnicities", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.testMultipleEthnicities", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.testMultipleEthnicities()", "classid":611, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest", "shortclassname":"EthnicityFactorTest", "method":"public void testMultipleEthnicities() throws Exception {\r\n    factor = new EthnicityFactor(p, Ethnicity.Caucasian, Ethnicity.AfricanAmerican);\r\n    assertFalse(factor.hasRiskFactor());\r\n    factor = new EthnicityFactor(p, Ethnicity.Caucasian, Ethnicity.AfricanAmerican, Ethnicity.Asian);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4445, "methodname":"testNoEthnicities()", "methodnamerefined":"testNoEthnicities", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.testNoEthnicities", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.testNoEthnicities()", "classid":611, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest", "shortclassname":"EthnicityFactorTest", "method":"// May not make sense here, but this shows what the method does.\r\npublic void testNoEthnicities() throws Exception {\r\n    factor = new EthnicityFactor(p);// Why check for a non-existent risk?\r\n\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4446, "methodname":"testNotSpecified()", "methodnamerefined":"testNotSpecified", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.testNotSpecified", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.testNotSpecified()", "classid":611, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest", "shortclassname":"EthnicityFactorTest", "method":"public void testNotSpecified() throws Exception {\r\n    p.setEthnicity(Ethnicity.NotSpecified);\r\n    factor = new EthnicityFactor(p, Ethnicity.NotSpecified);\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4447, "methodname":"testSingleEthnicity()", "methodnamerefined":"testSingleEthnicity", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.testSingleEthnicity", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest.testSingleEthnicity()", "classid":611, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactorTest", "shortclassname":"EthnicityFactorTest", "method":"public void testSingleEthnicity() throws Exception {\r\n    factor = new EthnicityFactor(p, Ethnicity.Caucasian);\r\n    assertFalse(factor.hasRiskFactor());\r\n    factor = new EthnicityFactor(p, Ethnicity.Asian);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4448, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)", "classid":612, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor", "shortclassname":"FamilyHistoryFactor", "method":"public FamilyHistoryFactor(DAOFactory factory, long patientID, double icdLower, double icdUpper) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.icdLower = icdLower;\r\n    this.icdUpper = icdUpper;\r\n}"},
 {"id":4449, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.getDescription()", "classid":612, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor", "shortclassname":"FamilyHistoryFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"Patient has a family history of this disease\";\r\n}"},
 {"id":4450, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.hasFactor()", "classid":612, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor", "shortclassname":"FamilyHistoryFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    try {\r\n        return factory.getRiskDAO().hasFamilyHistory(patientID, icdLower, icdUpper);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n}"},
 {"id":4451, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.-init-()", "classid":613, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest", "shortclassname":"FamilyHistoryFactorTest", "method":"FamilyHistoryFactorTest() {\r\n}"},
 {"id":4452, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.setUp()", "classid":613, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest", "shortclassname":"FamilyHistoryFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    factor = new FamilyHistoryFactor(factory, 3L, 250.0, 251.0);\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hospitals();\r\n    gen.hcp0();\r\n    gen.icd9cmCodes();\r\n    gen.family();\r\n}"},
 {"id":4453, "methodname":"testDBException()", "methodnamerefined":"testDBException", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.testDBException", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.testDBException()", "classid":613, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest", "shortclassname":"FamilyHistoryFactorTest", "method":"public void testDBException() throws Exception {\r\n    this.factory = EvilDAOFactory.getEvilInstance();\r\n    factor = new FamilyHistoryFactor(factory, 5L, 250.0, 251.0);\r\n    assertFalse(factor.hasFactor());\r\n}"},
 {"id":4454, "methodname":"testJustMom()", "methodnamerefined":"testJustMom", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.testJustMom", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.testJustMom()", "classid":613, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest", "shortclassname":"FamilyHistoryFactorTest", "method":"public void testJustMom() throws Exception {\r\n    factor = new FamilyHistoryFactor(factory, 3L, 250.0, 251.0);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4455, "methodname":"testJustSibling()", "methodnamerefined":"testJustSibling", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.testJustSibling", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.testJustSibling()", "classid":613, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest", "shortclassname":"FamilyHistoryFactorTest", "method":"public void testJustSibling() throws Exception {\r\n    factor = new FamilyHistoryFactor(factory, 6L, 250.0, 251.0);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4456, "methodname":"testNobody()", "methodnamerefined":"testNobody", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.testNobody", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest.testNobody()", "classid":613, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactorTest", "shortclassname":"FamilyHistoryFactorTest", "method":"public void testNobody() throws Exception {\r\n    factor = new FamilyHistoryFactor(factory, 5L, 250.0, 251.0);\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4457, "methodname":"-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Gender)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.GenderFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.GenderFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Gender)", "classid":614, "classname":"edu.ncsu.csc.itrust.risk.factors.GenderFactor", "shortclassname":"GenderFactor", "method":"public GenderFactor(PatientBean patient, Gender gender) {\r\n    this.patient = patient;\r\n    this.gender = gender;\r\n}"},
 {"id":4458, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.GenderFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.GenderFactor.getDescription()", "classid":614, "classname":"edu.ncsu.csc.itrust.risk.factors.GenderFactor", "shortclassname":"GenderFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"Patient is \" + (patient.getGender().toString().toLowerCase());\r\n}"},
 {"id":4459, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.GenderFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.GenderFactor.hasFactor()", "classid":614, "classname":"edu.ncsu.csc.itrust.risk.factors.GenderFactor", "shortclassname":"GenderFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    return (gender.equals(patient.getGender())) && (!(gender.equals(Gender.NotSpecified)));\r\n}"},
 {"id":4460, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest.-init-()", "classid":615, "classname":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest", "shortclassname":"GenderFactorTest", "method":"GenderFactorTest() {\r\n}"},
 {"id":4461, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest.setUp()", "classid":615, "classname":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest", "shortclassname":"GenderFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    p = new PatientBean();\r\n    factor = new GenderFactor(p, Gender.Male);\r\n}"},
 {"id":4462, "methodname":"testGenderRisk()", "methodnamerefined":"testGenderRisk", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest.testGenderRisk", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest.testGenderRisk()", "classid":615, "classname":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest", "shortclassname":"GenderFactorTest", "method":"public void testGenderRisk() throws Exception {\r\n    assertFalse(factor.hasRiskFactor());\r\n    p.setGender(Gender.Female);\r\n    factor = new GenderFactor(p, Gender.Female);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4463, "methodname":"testNotSpecified()", "methodnamerefined":"testNotSpecified", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest.testNotSpecified", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest.testNotSpecified()", "classid":615, "classname":"edu.ncsu.csc.itrust.risk.factors.GenderFactorTest", "shortclassname":"GenderFactorTest", "method":"public void testNotSpecified() throws Exception {\r\n    p.setGender(Gender.NotSpecified);\r\n    factor = new GenderFactor(p, Gender.NotSpecified);\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4464, "methodname":"-init-(edu.ncsu.csc.itrust.beans.HealthRecord)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord)", "classid":616, "classname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor", "shortclassname":"HypertensionFactor", "method":"public HypertensionFactor(HealthRecord currentHealthRecord) {\r\n    this.record = currentHealthRecord;\r\n}"},
 {"id":4465, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor.getDescription()", "classid":616, "classname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor", "shortclassname":"HypertensionFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"Patient has hypertension\";\r\n}"},
 {"id":4466, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor.hasFactor()", "classid":616, "classname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor", "shortclassname":"HypertensionFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    return ((record.getBloodPressureSystolic()) > (HypertensionFactor.systolicThreshold)) || ((record.getBloodPressureDiastolic()) > (HypertensionFactor.diastolicThreshold));\r\n}"},
 {"id":4467, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.-init-()", "classid":617, "classname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest", "shortclassname":"HypertensionFactorTest", "method":"HypertensionFactorTest() {\r\n}"},
 {"id":4468, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.setUp()", "classid":617, "classname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest", "shortclassname":"HypertensionFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    hr = new HealthRecord();\r\n    factor = new HypertensionFactor(hr);\r\n    hr.setBloodPressureDiastolic(119);\r\n    hr.setBloodPressureSystolic(239);\r\n}"},
 {"id":4469, "methodname":"testAllGood()", "methodnamerefined":"testAllGood", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.testAllGood", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.testAllGood()", "classid":617, "classname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest", "shortclassname":"HypertensionFactorTest", "method":"public void testAllGood() throws Exception {\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4470, "methodname":"testBadDiastolic()", "methodnamerefined":"testBadDiastolic", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.testBadDiastolic", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.testBadDiastolic()", "classid":617, "classname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest", "shortclassname":"HypertensionFactorTest", "method":"public void testBadDiastolic() throws Exception {\r\n    hr.setBloodPressureDiastolic(121);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4471, "methodname":"testBadSystolic()", "methodnamerefined":"testBadSystolic", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.testBadSystolic", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest.testBadSystolic()", "classid":617, "classname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactorTest", "shortclassname":"HypertensionFactorTest", "method":"public void testBadSystolic() throws Exception {\r\n    hr.setBloodPressureSystolic(241);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4472, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor.-init-()", "classid":618, "classname":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor", "shortclassname":"PatientRiskFactor", "method":"PatientRiskFactor() {\r\n}"},
 {"id":4473, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor.getDescription()", "classid":618, "classname":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor", "shortclassname":"PatientRiskFactor", "method":"/**\r\n *\r\n *\r\n * @return A textual description of what the patients status is thats causing the risk.\r\n */\r\npublic abstract String getDescription();"},
 {"id":4474, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor.hasFactor()", "classid":618, "classname":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor", "shortclassname":"PatientRiskFactor", "method":"/**\r\n *\r\n *\r\n * @return A boolean indicating whether the patient has the increased risk.\r\n */\r\nprotected abstract boolean hasFactor();"},
 {"id":4475, "methodname":"hasRiskFactor()", "methodnamerefined":"hasRiskFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor.hasRiskFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor.hasRiskFactor()", "classid":618, "classname":"edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor", "shortclassname":"PatientRiskFactor", "method":"/**\r\n *\r\n *\r\n * @return A boolean indicating whether the patient has the increased risk.\r\n */\r\npublic boolean hasRiskFactor() {\r\n    if ((hasRisk) == null)\r\n        hasRisk = hasFactor();\r\n\r\n    return hasRisk;\r\n}"},
 {"id":4476, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.-init-()", "classid":619, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest", "shortclassname":"PriorDiagnosesFactorTest", "method":"PriorDiagnosesFactorTest() {\r\n}"},
 {"id":4477, "methodname":"addInfection(java.util.Date,double)", "methodnamerefined":"addInfection", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.addInfection", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.addInfection(java.util.Date,double)", "classid":619, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest", "shortclassname":"PriorDiagnosesFactorTest", "method":"private void addInfection(Date date, double icd) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits(VisitDate, hcpid, PatientID, hospitalid) VALUES(?,9000000000, 2, 1)\");\r\n        ps.setDate(1, new java.sql.Date(date.getTime()));\r\n        ps.executeUpdate();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovdiagnosis(VisitID, ICDCode) VALUES(?,?)\");\r\n        ps.setLong(1, DBUtil.getLastInsert(conn));\r\n        ps.setDouble(2, icd);\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":4478, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.setUp()", "classid":619, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest", "shortclassname":"PriorDiagnosesFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    factor = new PriorDiagnosisFactor(factory, 2L, 250.3, 487);\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.hospitals();\r\n    gen.hcp0();\r\n    gen.patient2();\r\n}"},
 {"id":4479, "methodname":"testDBException()", "methodnamerefined":"testDBException", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.testDBException", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.testDBException()", "classid":619, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest", "shortclassname":"PriorDiagnosesFactorTest", "method":"public void testDBException() throws Exception {\r\n    this.factory = EvilDAOFactory.getEvilInstance();\r\n    factor = new PriorDiagnosisFactor(factory, 2L, 250.3, 487);\r\n    assertFalse(factor.hasFactor());\r\n}"},
 {"id":4480, "methodname":"testNoInfections()", "methodnamerefined":"testNoInfections", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.testNoInfections", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.testNoInfections()", "classid":619, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest", "shortclassname":"PriorDiagnosesFactorTest", "method":"public void testNoInfections() throws Exception {\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4481, "methodname":"testOneInfection()", "methodnamerefined":"testOneInfection", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.testOneInfection", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.testOneInfection()", "classid":619, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest", "shortclassname":"PriorDiagnosesFactorTest", "method":"public void testOneInfection() throws Exception {\r\n    addInfection(new Date(), 250.3);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4482, "methodname":"testTwoInfections()", "methodnamerefined":"testTwoInfections", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.testTwoInfections", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest.testTwoInfections()", "classid":619, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosesFactorTest", "shortclassname":"PriorDiagnosesFactorTest", "method":"public void testTwoInfections() throws Exception {\r\n    addInfection(new Date(), 250.3);\r\n    addInfection(new Date(), 487);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4483, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)", "classid":620, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor", "shortclassname":"PriorDiagnosisFactor", "method":"public PriorDiagnosisFactor(DAOFactory factory, long patientID, double lowerICDCode, double upperICDCode) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.lowerICDCode = lowerICDCode;\r\n    this.upperICDCode = upperICDCode;\r\n}"},
 {"id":4484, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.getDescription()", "classid":620, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor", "shortclassname":"PriorDiagnosisFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"Patient has had related diagnoses\";\r\n}"},
 {"id":4485, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.hasFactor()", "classid":620, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor", "shortclassname":"PriorDiagnosisFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    try {\r\n        return factory.getRiskDAO().hadPriorDiagnoses(patientID, lowerICDCode, upperICDCode);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n}"},
 {"id":4486, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "classid":621, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor", "shortclassname":"SmokingFactor", "method":"public SmokingFactor(DAOFactory factory, long patientID) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n}"},
 {"id":4487, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor.getDescription()", "classid":621, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor", "shortclassname":"SmokingFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"Patient is or was a smoker\";\r\n}"},
 {"id":4488, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor.hasFactor()", "classid":621, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor", "shortclassname":"SmokingFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    try {\r\n        return factory.getRiskDAO().hasSmoked(patientID);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n}"},
 {"id":4489, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.-init-()", "classid":622, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest", "shortclassname":"SmokingFactorTest", "method":"SmokingFactorTest() {\r\n}"},
 {"id":4490, "methodname":"clearHistoryOfSmoking()", "methodnamerefined":"clearHistoryOfSmoking", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.clearHistoryOfSmoking", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.clearHistoryOfSmoking()", "classid":622, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest", "shortclassname":"SmokingFactorTest", "method":"private void clearHistoryOfSmoking() throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM personalhealthinformation WHERE PatientID=2 AND Smoker=1\");\r\n        ps.executeUpdate();\r\n    } catch (SQLException ex) {\r\n        throw ex;\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":4491, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.setUp()", "classid":622, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest", "shortclassname":"SmokingFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    factor = new SmokingFactor(factory, 2L);\r\n    gen = new TestDataGenerator();\r\n    gen.clearAllTables();\r\n    gen.patient2();\r\n}"},
 {"id":4492, "methodname":"testDBException()", "methodnamerefined":"testDBException", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.testDBException", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.testDBException()", "classid":622, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest", "shortclassname":"SmokingFactorTest", "method":"public void testDBException() throws Exception {\r\n    this.factory = EvilDAOFactory.getEvilInstance();\r\n    factor = new SmokingFactor(factory, 2L);\r\n    assertFalse(factor.hasFactor());\r\n}"},
 {"id":4493, "methodname":"testHasHistory()", "methodnamerefined":"testHasHistory", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.testHasHistory", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.testHasHistory()", "classid":622, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest", "shortclassname":"SmokingFactorTest", "method":"public void testHasHistory() throws Exception {\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4494, "methodname":"testHasNoHistory()", "methodnamerefined":"testHasNoHistory", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.testHasNoHistory", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest.testHasNoHistory()", "classid":622, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactorTest", "shortclassname":"SmokingFactorTest", "method":"public void testHasNoHistory() throws Exception {\r\n    clearHistoryOfSmoking();\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4495, "methodname":"-init-(edu.ncsu.csc.itrust.beans.HealthRecord,int)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.WeightFactor.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.WeightFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord,int)", "classid":623, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactor", "shortclassname":"WeightFactor", "method":"public WeightFactor(HealthRecord currentHealthRecord, int bmiThreshold) {\r\n    this.currentHealthRecord = currentHealthRecord;\r\n    this.bmiThreshold = bmiThreshold;\r\n}"},
 {"id":4496, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.WeightFactor.getDescription", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.WeightFactor.getDescription()", "classid":623, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactor", "shortclassname":"WeightFactor", "method":"@Override\r\npublic String getDescription() {\r\n    return \"Patients body mass index is over \" + (bmiThreshold);\r\n}"},
 {"id":4497, "methodname":"hasFactor()", "methodnamerefined":"hasFactor", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.WeightFactor.hasFactor", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.WeightFactor.hasFactor()", "classid":623, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactor", "shortclassname":"WeightFactor", "method":"@Override\r\npublic boolean hasFactor() {\r\n    double bmi = currentHealthRecord.getBodyMassIndex();\r\n    return (bmi > (bmiThreshold)) && (!(Double.isInfinite(bmi)));\r\n}"},
 {"id":4498, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.-init-()", "classid":624, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest", "shortclassname":"WeightFactorTest", "method":"WeightFactorTest() {\r\n}"},
 {"id":4499, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.setUp()", "classid":624, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest", "shortclassname":"WeightFactorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    hr = new HealthRecord();\r\n    factor = new WeightFactor(hr, 28);\r\n    hr.setHeight(71);\r\n    hr.setWeight(200);\r\n}"},
 {"id":4500, "methodname":"testAllGood()", "methodnamerefined":"testAllGood", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.testAllGood", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.testAllGood()", "classid":624, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest", "shortclassname":"WeightFactorTest", "method":"public void testAllGood() throws Exception {\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4501, "methodname":"testGainFivePounds()", "methodnamerefined":"testGainFivePounds", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.testGainFivePounds", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.testGainFivePounds()", "classid":624, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest", "shortclassname":"WeightFactorTest", "method":"public void testGainFivePounds() throws Exception {\r\n    hr.setWeight(205);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4502, "methodname":"testShrink2Inches()", "methodnamerefined":"testShrink2Inches", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.testShrink2Inches", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.testShrink2Inches()", "classid":624, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest", "shortclassname":"WeightFactorTest", "method":"public void testShrink2Inches() throws Exception {\r\n    hr.setHeight(69);\r\n    assertTrue(factor.hasRiskFactor());\r\n}"},
 {"id":4503, "methodname":"testZeroHeight()", "methodnamerefined":"testZeroHeight", "methodabbreviation":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.testZeroHeight", "fullmethod":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest.testZeroHeight()", "classid":624, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactorTest", "shortclassname":"WeightFactorTest", "method":"// Rationale: cant say they have the risk factor if the info is missing\r\npublic void testZeroHeight() throws Exception {\r\n    hr.setHeight(0);\r\n    assertFalse(factor.hasRiskFactor());\r\n}"},
 {"id":4504, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet.-init-", "fullmethod":"edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet.-init-()", "classid":625, "classname":"edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet", "shortclassname":"GroupReportGeneratorServlet", "method":"GroupReportGeneratorServlet() {\r\n}"},
 {"id":4505, "methodname":"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPost", "methodabbreviation":"edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet.doPost", "fullmethod":"edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":625, "classname":"edu.ncsu.csc.itrust.server.GroupReportGeneratorServlet", "shortclassname":"GroupReportGeneratorServlet", "method":"/**\r\n * doPost method that takes a user request and serves them a downloadable xml based on their defined search criteria.\r\n */\r\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) {\r\n    grga = new GroupReportGeneratorAction(factory, request);\r\n    try {\r\n        grga.generateReport();\r\n        doc = XmlGenerator.generateXml(grga.getReportHeaders(), grga.getReportData());\r\n        // Set the headers.\r\n        response.setContentType(\"application/x-download\");\r\n        response.setHeader(\"Content-Disposition\", ((\"attachment; filename=patientReport-\" + (Calendar.getInstance().getTimeInMillis())) + \".xml\"));\r\n        DOMSource source = new DOMSource(doc);\r\n        Transformer transformer = TransformerFactory.newInstance().newTransformer();\r\n        Writer writer = new OutputStreamWriter(response.getOutputStream());\r\n        StreamResult result = new StreamResult(writer);\r\n        transformer.transform(source, result);\r\n    } catch (Exception e) {\r\n        System.out.println(e);\r\n    }\r\n}"},
 {"id":4506, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.server.SessionTimeoutListener.-init-", "fullmethod":"edu.ncsu.csc.itrust.server.SessionTimeoutListener.-init-()", "classid":626, "classname":"edu.ncsu.csc.itrust.server.SessionTimeoutListener", "shortclassname":"SessionTimeoutListener", "method":"/**\r\n * The default constructor.\r\n */\r\npublic SessionTimeoutListener() {\r\n    this.factory = DAOFactory.getProductionInstance();\r\n}"},
 {"id":4507, "methodname":"-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.server.SessionTimeoutListener.-init-", "fullmethod":"edu.ncsu.csc.itrust.server.SessionTimeoutListener.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "classid":626, "classname":"edu.ncsu.csc.itrust.server.SessionTimeoutListener", "shortclassname":"SessionTimeoutListener", "method":"/**\r\n * The specialized constructor, which takes a particular DAOFactory to be used when checking for the pre-specified\r\n * timeout limit.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory to be used.\r\n */\r\npublic SessionTimeoutListener(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":4508, "methodname":"sessionCreated(javax.servlet.http.HttpSessionEvent)", "methodnamerefined":"sessionCreated", "methodabbreviation":"edu.ncsu.csc.itrust.server.SessionTimeoutListener.sessionCreated", "fullmethod":"edu.ncsu.csc.itrust.server.SessionTimeoutListener.sessionCreated(javax.servlet.http.HttpSessionEvent)", "classid":626, "classname":"edu.ncsu.csc.itrust.server.SessionTimeoutListener", "shortclassname":"SessionTimeoutListener", "method":"/**\r\n * Called when the HttpSession is created, this method pulls the pre-specified limit from the\r\n * database and sets it as a property of the HttpSession.\r\n *\r\n * @param arg0\r\n * \t\tThe HttpSessionEven which just occurred.\r\n */\r\npublic void sessionCreated(HttpSessionEvent arg0) {\r\n    HttpSession session = arg0.getSession();\r\n    int mins = 20;\r\n    try {\r\n        mins = factory.getAccessDAO().getSessionTimeoutMins();\r\n    } catch (DBException e) {\r\n        System.err.println(\"Unable to set session timeout, defaulting to 20 minutes\");\r\n        e.printStackTrace();\r\n    }\r\n    if (mins < 1)\r\n        mins = 1;\r\n\r\n    session.setMaxInactiveInterval((mins * 60));\r\n}"},
 {"id":4509, "methodname":"sessionDestroyed(javax.servlet.http.HttpSessionEvent)", "methodnamerefined":"sessionDestroyed", "methodabbreviation":"edu.ncsu.csc.itrust.server.SessionTimeoutListener.sessionDestroyed", "fullmethod":"edu.ncsu.csc.itrust.server.SessionTimeoutListener.sessionDestroyed(javax.servlet.http.HttpSessionEvent)", "classid":626, "classname":"edu.ncsu.csc.itrust.server.SessionTimeoutListener", "shortclassname":"SessionTimeoutListener", "method":"/**\r\n * Must be declared for compliance with the interface. Not implemented.\r\n */\r\npublic void sessionDestroyed(HttpSessionEvent arg0) {\r\n    // nothing to do here\r\n}"},
 {"id":4510, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.server.WardCRUDServlet.-init-", "fullmethod":"edu.ncsu.csc.itrust.server.WardCRUDServlet.-init-()", "classid":627, "classname":"edu.ncsu.csc.itrust.server.WardCRUDServlet", "shortclassname":"WardCRUDServlet", "method":"WardCRUDServlet() {\r\n}"},
 {"id":4511, "methodname":"doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doDelete", "methodabbreviation":"edu.ncsu.csc.itrust.server.WardCRUDServlet.doDelete", "fullmethod":"edu.ncsu.csc.itrust.server.WardCRUDServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":627, "classname":"edu.ncsu.csc.itrust.server.WardCRUDServlet", "shortclassname":"WardCRUDServlet", "method":"protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        wardDAO.removeWard(Long.parseLong(request.getParameter(\"wardID\")));\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}"},
 {"id":4512, "methodname":"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPost", "methodabbreviation":"edu.ncsu.csc.itrust.server.WardCRUDServlet.doPost", "fullmethod":"edu.ncsu.csc.itrust.server.WardCRUDServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":627, "classname":"edu.ncsu.csc.itrust.server.WardCRUDServlet", "shortclassname":"WardCRUDServlet", "method":"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardBean ward = new WardBean(0, request.getParameter(\"requiredSpecialty\"), Long.parseLong(request.getParameter(\"inHospital\")));\r\n        wardDAO.addWard(ward);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}"},
 {"id":4513, "methodname":"doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPut", "methodabbreviation":"edu.ncsu.csc.itrust.server.WardCRUDServlet.doPut", "fullmethod":"edu.ncsu.csc.itrust.server.WardCRUDServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":627, "classname":"edu.ncsu.csc.itrust.server.WardCRUDServlet", "shortclassname":"WardCRUDServlet", "method":"protected void doPut(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardBean ward = new WardBean(Long.parseLong(request.getParameter(\"wardID\")), request.getParameter(\"requiredSpecialty\"), Long.parseLong(request.getParameter(\"inHospital\")));\r\n        wardDAO.updateWard(ward);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}"},
 {"id":4514, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.-init-", "fullmethod":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.-init-()", "classid":628, "classname":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet", "shortclassname":"WardRoomCRUDServlet", "method":"WardRoomCRUDServlet() {\r\n}"},
 {"id":4515, "methodname":"doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doDelete", "methodabbreviation":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doDelete", "fullmethod":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":628, "classname":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet", "shortclassname":"WardRoomCRUDServlet", "method":"protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        wardDAO.removeWardRoom(Long.parseLong(request.getParameter(\"roomID\")));\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}"},
 {"id":4516, "methodname":"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPost", "methodabbreviation":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doPost", "fullmethod":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":628, "classname":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet", "shortclassname":"WardRoomCRUDServlet", "method":"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardRoomBean wardRoom = new WardRoomBean(0, 0, Long.parseLong(request.getParameter(\"inWard\")), request.getParameter(\"roomName\"), request.getParameter(\"status\"));\r\n        wardDAO.addWardRoom(wardRoom);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}"},
 {"id":4517, "methodname":"doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPut", "methodabbreviation":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doPut", "fullmethod":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":628, "classname":"edu.ncsu.csc.itrust.server.WardRoomCRUDServlet", "shortclassname":"WardRoomCRUDServlet", "method":"protected void doPut(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n    try {\r\n        WardRoomBean wardRoom = new WardRoomBean(0, Long.parseLong(request.getParameter(\"occupiedBy\")), Long.parseLong(request.getParameter(\"inWard\")), request.getParameter(\"roomName\"), request.getParameter(\"status\"));\r\n        wardDAO.updateWardRoom(wardRoom);\r\n    } catch (Exception e) {\r\n        // Send error parameter back to page\r\n        response.sendRedirect(\"\");\r\n        return;\r\n    }\r\n    // Redirect back to page\r\n    response.sendRedirect(\"\");\r\n}"},
 {"id":4518, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.-init-()", "classid":629, "classname":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest", "shortclassname":"CustomJSPTagsTest", "method":"CustomJSPTagsTest() {\r\n}"},
 {"id":4519, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.setUp()", "classid":629, "classname":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest", "shortclassname":"CustomJSPTagsTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    ctrl = createControl();\r\n    mockContext = ctrl.createMock(PageContext.class);\r\n    mockWriter = ctrl.createMock(JspWriter.class);\r\n    mockParent = ctrl.createMock(Tag.class);\r\n    expect(mockContext.getOut()).andReturn(mockWriter).anyTimes();\r\n}"},
 {"id":4520, "methodname":"testICD9CMLink()", "methodnamerefined":"testICD9CMLink", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testICD9CMLink", "fullmethod":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testICD9CMLink()", "classid":629, "classname":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest", "shortclassname":"CustomJSPTagsTest", "method":"public void testICD9CMLink() throws Exception {\r\n    ICD9CMLink tag = new ICD9CMLink();\r\n    tag.setPageContext(mockContext);\r\n    // were okay with any strings written here - normally you want to be more specific\r\n    mockWriter.write(((String) (anyObject())));\r\n    expectLastCall().anyTimes();\r\n    ctrl.replay();\r\n    assertEquals(Tag.SKIP_BODY, tag.doStartTag());\r\n    assertEquals(Tag.SKIP_BODY, tag.doEndTag());\r\n    tag.setParent(mockParent);\r\n    assertSame(mockParent, tag.getParent());\r\n    String code = \"100.1\";\r\n    tag.setCode(code);\r\n    assertSame(code, tag.getCode());\r\n    tag.setCode(100.1);\r\n    assertEquals(code, tag.getCode());\r\n    tag.release();\r\n    ctrl.verify();\r\n}"},
 {"id":4521, "methodname":"testICD9CMLinkException()", "methodnamerefined":"testICD9CMLinkException", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testICD9CMLinkException", "fullmethod":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testICD9CMLinkException()", "classid":629, "classname":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest", "shortclassname":"CustomJSPTagsTest", "method":"public void testICD9CMLinkException() throws Exception {\r\n    ICD9CMLink tag = new ICD9CMLink();\r\n    tag.setPageContext(mockContext);\r\n    // were okay with any strings written here - normally you want to be more specific\r\n    mockWriter.write(((String) (anyObject())));\r\n    expectLastCall().andThrow(new IOException());// nothing done but stacktrace\r\n\r\n    ctrl.replay();\r\n    assertEquals(Tag.SKIP_BODY, tag.doStartTag());\r\n    ctrl.verify();\r\n}"},
 {"id":4522, "methodname":"testPatientNavException()", "methodnamerefined":"testPatientNavException", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testPatientNavException", "fullmethod":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testPatientNavException()", "classid":629, "classname":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest", "shortclassname":"CustomJSPTagsTest", "method":"public void testPatientNavException() throws Exception {\r\n    PatientNavigation nav = new PatientNavigation();\r\n    nav.setPageContext(mockContext);\r\n    // were okay with any strings written here - normally you want to be more specific\r\n    mockWriter.write(((String) (anyObject())));\r\n    expectLastCall().andThrow(new IOException());// nothing done but stacktrace\r\n\r\n    ctrl.replay();\r\n    assertEquals(Tag.SKIP_BODY, nav.doStartTag());\r\n    ctrl.verify();\r\n}"},
 {"id":4523, "methodname":"testPatientNavHappy()", "methodnamerefined":"testPatientNavHappy", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testPatientNavHappy", "fullmethod":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testPatientNavHappy()", "classid":629, "classname":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest", "shortclassname":"CustomJSPTagsTest", "method":"public void testPatientNavHappy() throws Exception {\r\n    PatientNavigation nav = new PatientNavigation();\r\n    nav.setPageContext(mockContext);\r\n    // were okay with any strings written here - normally you want to be more specific\r\n    mockWriter.write(((String) (anyObject())));\r\n    expectLastCall().anyTimes();\r\n    ctrl.replay();\r\n    String str = \"Health Records\";\r\n    nav.setThisTitle(str);\r\n    assertSame(str, nav.getThisTitle());\r\n    assertEquals(Tag.SKIP_BODY, nav.doStartTag());\r\n    assertEquals(Tag.SKIP_BODY, nav.doEndTag());\r\n    nav.setParent(mockParent);\r\n    assertSame(mockParent, nav.getParent());\r\n    nav.release();\r\n    ctrl.verify();\r\n}"},
 {"id":4524, "methodname":"testStateSelect()", "methodnamerefined":"testStateSelect", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testStateSelect", "fullmethod":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testStateSelect()", "classid":629, "classname":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest", "shortclassname":"CustomJSPTagsTest", "method":"public void testStateSelect() throws Exception {\r\n    StateSelect tag = new StateSelect();\r\n    tag.setPageContext(mockContext);\r\n    // were okay with any strings written here - normally you want to be more specific\r\n    mockWriter.write(((String) (anyObject())));\r\n    expectLastCall().anyTimes();\r\n    ctrl.replay();\r\n    assertEquals(Tag.SKIP_BODY, tag.doStartTag());\r\n    assertEquals(Tag.SKIP_BODY, tag.doEndTag());\r\n    tag.setParent(mockParent);\r\n    assertSame(mockParent, tag.getParent());\r\n    String name = \"Something!\";\r\n    tag.setName(name);\r\n    assertSame(name, tag.getName());\r\n    String value = \"Something!!\";\r\n    tag.setValue(value);\r\n    assertSame(value, tag.getValue());\r\n    tag.setName(\"\");\r\n    assertEquals(Tag.SKIP_BODY, tag.doStartTag());\r\n    tag.setValue(\"NC\");\r\n    assertEquals(Tag.SKIP_BODY, tag.doStartTag());\r\n    tag.release();\r\n    ctrl.verify();\r\n}"},
 {"id":4525, "methodname":"testStateSelectException()", "methodnamerefined":"testStateSelectException", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testStateSelectException", "fullmethod":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest.testStateSelectException()", "classid":629, "classname":"edu.ncsu.csc.itrust.serverutils.CustomJSPTagsTest", "shortclassname":"CustomJSPTagsTest", "method":"public void testStateSelectException() throws Exception {\r\n    StateSelect tag = new StateSelect();\r\n    tag.setPageContext(mockContext);\r\n    // were okay with any strings written here - normally you want to be more specific\r\n    mockWriter.write(((String) (anyObject())));\r\n    expectLastCall().andThrow(new IOException());// nothing done but stacktrace\r\n\r\n    ctrl.replay();\r\n    assertEquals(Tag.SKIP_BODY, tag.doStartTag());\r\n    ctrl.verify();\r\n}"},
 {"id":4526, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest.-init-()", "classid":631, "classname":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest", "shortclassname":"GroupReportGeneratorTest", "method":"GroupReportGeneratorTest() {\r\n}"},
 {"id":4527, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest.setUp()", "classid":631, "classname":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest", "shortclassname":"GroupReportGeneratorTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    ctrl = createControl();\r\n    req = ctrl.createMock(HttpServletRequest.class);\r\n    resp = ctrl.createMock(HttpServletResponse.class);\r\n    grga = ctrl.createMock(GroupReportGeneratorAction.class);\r\n    xmlgen = ctrl.createMock(XmlGenerator.class);\r\n}"},
 {"id":4528, "methodname":"testGroupReportGeneratorServletPost()", "methodnamerefined":"testGroupReportGeneratorServletPost", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest.testGroupReportGeneratorServletPost", "fullmethod":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest.testGroupReportGeneratorServletPost()", "classid":631, "classname":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest", "shortclassname":"GroupReportGeneratorTest", "method":"public void testGroupReportGeneratorServletPost() throws Exception {\r\n    String demo = new String();\r\n    String med = new String();\r\n    String pers = new String();\r\n    GroupReportGeneratorTest.LittleDelegatorServlet servlet = new GroupReportGeneratorTest.LittleDelegatorServlet();\r\n    expect(grga.getReportHeaders()).andReturn(headers);\r\n    expect(grga.getReportData()).andReturn(data);\r\n    expect(req.getParameter(\"demoparams\")).andReturn(demo).anyTimes();\r\n    expect(req.getParameter(\"medparams\")).andReturn(med).anyTimes();\r\n    expect(req.getParameter(\"persparams\")).andReturn(pers).anyTimes();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    resp.setContentType(\"application/x-download\");\r\n    expectLastCall();\r\n    resp.setHeader(((String) (EasyMock.anyObject())), ((String) (EasyMock.anyObject())));\r\n    expectLastCall();\r\n    ServletOutputStream sos = ctrl.createMock(ServletOutputStream.class);\r\n    sos.write(((byte[]) (EasyMock.anyObject())), EasyMock.anyInt(), EasyMock.anyInt());\r\n    expectLastCall().anyTimes();\r\n    sos.flush();\r\n    expectLastCall().anyTimes();\r\n    expect(resp.getOutputStream()).andReturn(sos);\r\n    ctrl.replay();\r\n    servlet.setUp();\r\n    servlet.doPost(req, resp);\r\n}"},
 {"id":4529, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet.-init-()", "classid":630, "classname":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet", "shortclassname":"GroupReportGeneratorTest$LittleDelegatorServlet", "method":"LittleDelegatorServlet() {\r\n}"},
 {"id":4530, "methodname":"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPost", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet.doPost", "fullmethod":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":630, "classname":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet", "shortclassname":"GroupReportGeneratorTest$LittleDelegatorServlet", "method":"@Override\r\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) {\r\n    super.doPost(req, resp);\r\n}"},
 {"id":4531, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet.setUp", "fullmethod":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet.setUp()", "classid":630, "classname":"edu.ncsu.csc.itrust.serverutils.GroupReportGeneratorTest$LittleDelegatorServlet", "shortclassname":"GroupReportGeneratorTest$LittleDelegatorServlet", "method":"public void setUp() {\r\n    factory = TestDAOFactory.getTestInstance();\r\n}"},
 {"id":4532, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.-init-()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"MockHttpSession() {\r\n}"},
 {"id":4533, "methodname":"getAttribute(java.lang.String)", "methodnamerefined":"getAttribute", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getAttribute", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getAttribute(java.lang.String)", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public Object getAttribute(String arg0) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4534, "methodname":"getAttributeNames()", "methodnamerefined":"getAttributeNames", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getAttributeNames", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getAttributeNames()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public Enumeration getAttributeNames() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4535, "methodname":"getCreationTime()", "methodnamerefined":"getCreationTime", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getCreationTime", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getCreationTime()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public long getCreationTime() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4536, "methodname":"getId()", "methodnamerefined":"getId", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getId", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getId()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public String getId() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4537, "methodname":"getLastAccessedTime()", "methodnamerefined":"getLastAccessedTime", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getLastAccessedTime", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getLastAccessedTime()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public long getLastAccessedTime() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4538, "methodname":"getMaxInactiveInterval()", "methodnamerefined":"getMaxInactiveInterval", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getMaxInactiveInterval", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getMaxInactiveInterval()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public int getMaxInactiveInterval() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4539, "methodname":"getServletContext()", "methodnamerefined":"getServletContext", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getServletContext", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getServletContext()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public ServletContext getServletContext() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4540, "methodname":"getSessionContext()", "methodnamerefined":"getSessionContext", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getSessionContext", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getSessionContext()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"@Deprecated\r\npublic HttpSessionContext getSessionContext() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4541, "methodname":"getValue(java.lang.String)", "methodnamerefined":"getValue", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getValue", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getValue(java.lang.String)", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public Object getValue(String arg0) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4542, "methodname":"getValueNames()", "methodnamerefined":"getValueNames", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getValueNames", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.getValueNames()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public String[] getValueNames() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4543, "methodname":"invalidate()", "methodnamerefined":"invalidate", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.invalidate", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.invalidate()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public void invalidate() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4544, "methodname":"isNew()", "methodnamerefined":"isNew", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.isNew", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.isNew()", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public boolean isNew() {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4545, "methodname":"putValue(java.lang.String,java.lang.Object)", "methodnamerefined":"putValue", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.putValue", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.putValue(java.lang.String,java.lang.Object)", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public void putValue(String arg0, Object arg1) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4546, "methodname":"removeAttribute(java.lang.String)", "methodnamerefined":"removeAttribute", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.removeAttribute", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.removeAttribute(java.lang.String)", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public void removeAttribute(String arg0) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4547, "methodname":"removeValue(java.lang.String)", "methodnamerefined":"removeValue", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.removeValue", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.removeValue(java.lang.String)", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public void removeValue(String arg0) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4548, "methodname":"setAttribute(java.lang.String,java.lang.Object)", "methodnamerefined":"setAttribute", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.setAttribute", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.setAttribute(java.lang.String,java.lang.Object)", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public void setAttribute(String arg0, Object arg1) {\r\n    throw new IllegalStateException(\"should not be hit!\");\r\n}"},
 {"id":4549, "methodname":"setMaxInactiveInterval(int)", "methodnamerefined":"setMaxInactiveInterval", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.setMaxInactiveInterval", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSession.setMaxInactiveInterval(int)", "classid":632, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSession", "shortclassname":"MockHttpSession", "method":"public void setMaxInactiveInterval(int arg0) {\r\n    MockHttpSession.mins = arg0;\r\n}"},
 {"id":4550, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSessionEvent.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSessionEvent.-init-()", "classid":633, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSessionEvent", "shortclassname":"MockHttpSessionEvent", "method":"public MockHttpSessionEvent() {\r\n    super(new MockHttpSession());\r\n}"},
 {"id":4551, "methodname":"getSession()", "methodnamerefined":"getSession", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.MockHttpSessionEvent.getSession", "fullmethod":"edu.ncsu.csc.itrust.serverutils.MockHttpSessionEvent.getSession()", "classid":633, "classname":"edu.ncsu.csc.itrust.serverutils.MockHttpSessionEvent", "shortclassname":"MockHttpSessionEvent", "method":"@Override\r\npublic HttpSession getSession() {\r\n    return new MockHttpSession();\r\n}"},
 {"id":4552, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.ProductionConnectionDriverTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.ProductionConnectionDriverTest.-init-()", "classid":634, "classname":"edu.ncsu.csc.itrust.serverutils.ProductionConnectionDriverTest", "shortclassname":"ProductionConnectionDriverTest", "method":"ProductionConnectionDriverTest() {\r\n}"},
 {"id":4553, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.ProductionConnectionDriverTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.serverutils.ProductionConnectionDriverTest.setUp()", "classid":634, "classname":"edu.ncsu.csc.itrust.serverutils.ProductionConnectionDriverTest", "shortclassname":"ProductionConnectionDriverTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    ctrl = createControl();\r\n    mockContext = ctrl.createMock(InitialContext.class);\r\n    mockConnection = ctrl.createMock(Connection.class);\r\n    mockDataSource = ctrl.createMock(DataSource.class);\r\n}"},
 {"id":4554, "methodname":"testProductionConnnectionDriver()", "methodnamerefined":"testProductionConnnectionDriver", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.ProductionConnectionDriverTest.testProductionConnnectionDriver", "fullmethod":"edu.ncsu.csc.itrust.serverutils.ProductionConnectionDriverTest.testProductionConnnectionDriver()", "classid":634, "classname":"edu.ncsu.csc.itrust.serverutils.ProductionConnectionDriverTest", "shortclassname":"ProductionConnectionDriverTest", "method":"public void testProductionConnnectionDriver() throws Exception {\r\n    ProductionConnectionDriver pcd = new ProductionConnectionDriver(mockContext);\r\n    expect(mockContext.lookup(\"java:comp/env\")).andReturn(mockContext).once();\r\n    expect(mockContext.lookup(\"jdbc/itrust\")).andReturn(mockDataSource).once();\r\n    expect(mockDataSource.getConnection()).andReturn(mockConnection).once();\r\n    ctrl.replay();\r\n    assertSame(mockConnection, pcd.getConnection());\r\n    ctrl.verify();\r\n}"},
 {"id":4555, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.-init-()", "classid":635, "classname":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest", "shortclassname":"SessionTimeoutListenerTest", "method":"SessionTimeoutListenerTest() {\r\n}"},
 {"id":4556, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.setUp()", "classid":635, "classname":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest", "shortclassname":"SessionTimeoutListenerTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    gen = new TestDataGenerator();\r\n    gen.timeout();\r\n}"},
 {"id":4557, "methodname":"testDBException()", "methodnamerefined":"testDBException", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.testDBException", "fullmethod":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.testDBException()", "classid":635, "classname":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest", "shortclassname":"SessionTimeoutListenerTest", "method":"public void testDBException() throws Exception {\r\n    SessionTimeoutListener listener = new SessionTimeoutListener();\r\n    listener.sessionCreated(new MockHttpSessionEvent());\r\n    assertEquals(1200, MockHttpSession.mins);\r\n}"},
 {"id":4558, "methodname":"testListenerWorked()", "methodnamerefined":"testListenerWorked", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.testListenerWorked", "fullmethod":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.testListenerWorked()", "classid":635, "classname":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest", "shortclassname":"SessionTimeoutListenerTest", "method":"// This uses a rudimentary mock object system - where we create these objects that are\r\n// essentially stubs, except for keeping track of info passed to them.\r\npublic void testListenerWorked() throws Exception {\r\n    SessionTimeoutListener listener = new SessionTimeoutListener(TestDAOFactory.getTestInstance());\r\n    HttpSessionEvent event = new MockHttpSessionEvent();\r\n    listener.sessionCreated(event);\r\n    assertEquals(1200, MockHttpSession.mins);\r\n}"},
 {"id":4559, "methodname":"testNothingWithSessionDestroyed()", "methodnamerefined":"testNothingWithSessionDestroyed", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.testNothingWithSessionDestroyed", "fullmethod":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest.testNothingWithSessionDestroyed()", "classid":635, "classname":"edu.ncsu.csc.itrust.serverutils.SessionTimeoutListenerTest", "shortclassname":"SessionTimeoutListenerTest", "method":"public void testNothingWithSessionDestroyed() throws Exception {\r\n    SessionTimeoutListener listener = new SessionTimeoutListener(TestDAOFactory.getTestInstance());\r\n    listener.sessionDestroyed(null);\r\n}"},
 {"id":4560, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.-init-()", "classid":637, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest", "shortclassname":"WardCRUDServletTest", "method":"WardCRUDServletTest() {\r\n}"},
 {"id":4561, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.setUp()", "classid":637, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest", "shortclassname":"WardCRUDServletTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    ctrl = createControl();\r\n    req = ctrl.createMock(HttpServletRequest.class);\r\n    resp = ctrl.createMock(HttpServletResponse.class);\r\n}"},
 {"id":4562, "methodname":"testWardCRUDServletDelete()", "methodnamerefined":"testWardCRUDServletDelete", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletDelete", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletDelete()", "classid":637, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest", "shortclassname":"WardCRUDServletTest", "method":"public void testWardCRUDServletDelete() throws Exception {\r\n    WardCRUDServletTest.LittleDelegatorServlet servlet = new WardCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"wardID\")).andReturn(\"1\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doDelete(req, resp);\r\n}"},
 {"id":4563, "methodname":"testWardCRUDServletDeleteFail()", "methodnamerefined":"testWardCRUDServletDeleteFail", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletDeleteFail", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletDeleteFail()", "classid":637, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest", "shortclassname":"WardCRUDServletTest", "method":"public void testWardCRUDServletDeleteFail() throws Exception {\r\n    WardCRUDServletTest.LittleDelegatorServlet servlet = new WardCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"wardID\")).andReturn(\"\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doDelete(req, resp);\r\n}"},
 {"id":4564, "methodname":"testWardCRUDServletPost()", "methodnamerefined":"testWardCRUDServletPost", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletPost", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletPost()", "classid":637, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest", "shortclassname":"WardCRUDServletTest", "method":"public void testWardCRUDServletPost() throws Exception {\r\n    WardCRUDServletTest.LittleDelegatorServlet servlet = new WardCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"requiredSpecialty\")).andReturn(\"\").once();\r\n    expect(req.getParameter(\"inHospital\")).andReturn(\"1\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doPost(req, resp);\r\n}"},
 {"id":4565, "methodname":"testWardCRUDServletPostFail()", "methodnamerefined":"testWardCRUDServletPostFail", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletPostFail", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletPostFail()", "classid":637, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest", "shortclassname":"WardCRUDServletTest", "method":"public void testWardCRUDServletPostFail() throws Exception {\r\n    WardCRUDServletTest.LittleDelegatorServlet servlet = new WardCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"requiredSpecialty\")).andReturn(\"1\").once();\r\n    expect(req.getParameter(\"inHospital\")).andReturn(\"\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doPost(req, resp);\r\n}"},
 {"id":4566, "methodname":"testWardCRUDServletPut()", "methodnamerefined":"testWardCRUDServletPut", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletPut", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletPut()", "classid":637, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest", "shortclassname":"WardCRUDServletTest", "method":"public void testWardCRUDServletPut() throws Exception {\r\n    WardCRUDServletTest.LittleDelegatorServlet servlet = new WardCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"wardID\")).andReturn(\"1\").once();\r\n    expect(req.getParameter(\"requiredSpecialty\")).andReturn(\"\").once();\r\n    expect(req.getParameter(\"inHospital\")).andReturn(\"1\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doPut(req, resp);\r\n}"},
 {"id":4567, "methodname":"testWardCRUDServletPutFail()", "methodnamerefined":"testWardCRUDServletPutFail", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletPutFail", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest.testWardCRUDServletPutFail()", "classid":637, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest", "shortclassname":"WardCRUDServletTest", "method":"public void testWardCRUDServletPutFail() throws Exception {\r\n    WardCRUDServletTest.LittleDelegatorServlet servlet = new WardCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"wardID\")).andReturn(\"\").once();\r\n    expect(req.getParameter(\"requiredSpecialty\")).andReturn(\"\").once();\r\n    expect(req.getParameter(\"inHospital\")).andReturn(\"1\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doPut(req, resp);\r\n}"},
 {"id":4568, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.-init-()", "classid":636, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardCRUDServletTest$LittleDelegatorServlet", "method":"LittleDelegatorServlet() {\r\n}"},
 {"id":4569, "methodname":"doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doDelete", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doDelete", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":636, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardCRUDServletTest$LittleDelegatorServlet", "method":"@Override\r\nprotected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doDelete(req, resp);\r\n}"},
 {"id":4570, "methodname":"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPost", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doPost", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":636, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardCRUDServletTest$LittleDelegatorServlet", "method":"@Override\r\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPost(req, resp);\r\n}"},
 {"id":4571, "methodname":"doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPut", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doPut", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":636, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardCRUDServletTest$LittleDelegatorServlet", "method":"@Override\r\nprotected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPut(req, resp);\r\n}"},
 {"id":4572, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.setUp", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet.setUp()", "classid":636, "classname":"edu.ncsu.csc.itrust.serverutils.WardCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardCRUDServletTest$LittleDelegatorServlet", "method":"public void setUp() {\r\n    wardDAO = new WardDAO(TestDAOFactory.getTestInstance());\r\n}"},
 {"id":4573, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.-init-()", "classid":639, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest", "shortclassname":"WardRoomCRUDServletTest", "method":"WardRoomCRUDServletTest() {\r\n}"},
 {"id":4574, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.setUp()", "classid":639, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest", "shortclassname":"WardRoomCRUDServletTest", "method":"@Override\r\nprotected void setUp() throws Exception {\r\n    ctrl = createControl();\r\n    req = ctrl.createMock(HttpServletRequest.class);\r\n    resp = ctrl.createMock(HttpServletResponse.class);\r\n}"},
 {"id":4575, "methodname":"testWardRoomCRUDServletDelete()", "methodnamerefined":"testWardRoomCRUDServletDelete", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletDelete", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletDelete()", "classid":639, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest", "shortclassname":"WardRoomCRUDServletTest", "method":"public void testWardRoomCRUDServletDelete() throws Exception {\r\n    WardRoomCRUDServletTest.LittleDelegatorServlet servlet = new WardRoomCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"roomID\")).andReturn(\"1\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doDelete(req, resp);\r\n}"},
 {"id":4576, "methodname":"testWardRoomCRUDServletDeleteFail()", "methodnamerefined":"testWardRoomCRUDServletDeleteFail", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletDeleteFail", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletDeleteFail()", "classid":639, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest", "shortclassname":"WardRoomCRUDServletTest", "method":"public void testWardRoomCRUDServletDeleteFail() throws Exception {\r\n    WardRoomCRUDServletTest.LittleDelegatorServlet servlet = new WardRoomCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"roomID\")).andReturn(\"\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doDelete(req, resp);\r\n}"},
 {"id":4577, "methodname":"testWardRoomCRUDServletFail()", "methodnamerefined":"testWardRoomCRUDServletFail", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletFail", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletFail()", "classid":639, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest", "shortclassname":"WardRoomCRUDServletTest", "method":"public void testWardRoomCRUDServletFail() throws Exception {\r\n    WardRoomCRUDServletTest.LittleDelegatorServlet servlet = new WardRoomCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"inWard\")).andReturn(\"\").once();\r\n    expect(req.getParameter(\"roomName\")).andReturn(\"\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doPost(req, resp);\r\n}"},
 {"id":4578, "methodname":"testWardRoomCRUDServletPost()", "methodnamerefined":"testWardRoomCRUDServletPost", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletPost", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletPost()", "classid":639, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest", "shortclassname":"WardRoomCRUDServletTest", "method":"public void testWardRoomCRUDServletPost() throws Exception {\r\n    WardRoomCRUDServletTest.LittleDelegatorServlet servlet = new WardRoomCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"inWard\")).andReturn(\"1\").once();\r\n    expect(req.getParameter(\"roomName\")).andReturn(\"\").once();\r\n    expect(req.getParameter(\"status\")).andReturn(\"clean\").once();\r\n    expect(req.getParameter(\"occupiedBy\")).andReturn(\"1\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doPost(req, resp);\r\n}"},
 {"id":4579, "methodname":"testWardRoomCRUDServletPut()", "methodnamerefined":"testWardRoomCRUDServletPut", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletPut", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletPut()", "classid":639, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest", "shortclassname":"WardRoomCRUDServletTest", "method":"public void testWardRoomCRUDServletPut() throws Exception {\r\n    WardRoomCRUDServletTest.LittleDelegatorServlet servlet = new WardRoomCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"inWard\")).andReturn(\"1\").once();\r\n    expect(req.getParameter(\"roomName\")).andReturn(\"\").once();\r\n    expect(req.getParameter(\"status\")).andReturn(\"clean\").once();\r\n    expect(req.getParameter(\"occupiedBy\")).andReturn(\"1\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doPut(req, resp);\r\n}"},
 {"id":4580, "methodname":"testWardRoomCRUDServletPutFail()", "methodnamerefined":"testWardRoomCRUDServletPutFail", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletPutFail", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest.testWardRoomCRUDServletPutFail()", "classid":639, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest", "shortclassname":"WardRoomCRUDServletTest", "method":"public void testWardRoomCRUDServletPutFail() throws Exception {\r\n    WardRoomCRUDServletTest.LittleDelegatorServlet servlet = new WardRoomCRUDServletTest.LittleDelegatorServlet();\r\n    servlet.setUp();\r\n    expect(req.getParameter(\"inWard\")).andReturn(\"\").once();\r\n    expect(req.getParameter(\"roomName\")).andReturn(\"\").once();\r\n    expect(req.getParameter(\"status\")).andReturn(\"clean\").once();\r\n    expect(req.getParameter(\"occupiedBy\")).andReturn(\"1\").once();\r\n    resp.sendRedirect(\"\");\r\n    expectLastCall();\r\n    ctrl.replay();\r\n    servlet.doPut(req, resp);\r\n}"},
 {"id":4581, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.-init-", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.-init-()", "classid":638, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardRoomCRUDServletTest$LittleDelegatorServlet", "method":"LittleDelegatorServlet() {\r\n}"},
 {"id":4582, "methodname":"doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doDelete", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doDelete", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":638, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardRoomCRUDServletTest$LittleDelegatorServlet", "method":"@Override\r\nprotected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doDelete(req, resp);\r\n}"},
 {"id":4583, "methodname":"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPost", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doPost", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":638, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardRoomCRUDServletTest$LittleDelegatorServlet", "method":"@Override\r\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPost(req, resp);\r\n}"},
 {"id":4584, "methodname":"doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "methodnamerefined":"doPut", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doPut", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "classid":638, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardRoomCRUDServletTest$LittleDelegatorServlet", "method":"@Override\r\nprotected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {\r\n    super.doPut(req, resp);\r\n}"},
 {"id":4585, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.setUp", "fullmethod":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet.setUp()", "classid":638, "classname":"edu.ncsu.csc.itrust.serverutils.WardRoomCRUDServletTest$LittleDelegatorServlet", "shortclassname":"WardRoomCRUDServletTest$LittleDelegatorServlet", "method":"public void setUp() {\r\n    wardDAO = new WardDAO(TestDAOFactory.getTestInstance());\r\n}"},
 {"id":4586, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.-init-", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.-init-()", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public ICD9CMLink() {\r\n    super();\r\n}"},
 {"id":4587, "methodname":"doEndTag()", "methodnamerefined":"doEndTag", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.doEndTag", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.doEndTag()", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public int doEndTag() throws JspException {\r\n    return SKIP_BODY;\r\n}"},
 {"id":4588, "methodname":"doStartTag()", "methodnamerefined":"doStartTag", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.doStartTag", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.doStartTag()", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public int doStartTag() throws JspException {\r\n    try {\r\n        JspWriter out = pageContext.getOut();\r\n        out.write(((((\"<a href=\"http://icd9cm.chrisendres.com/2007/index.php?srchtype=diseases&srchtext=\" + (code)) + \"&Submit=Search&action=search\">\") + (code)) + \"</a>\"));\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return SKIP_BODY;\r\n}"},
 {"id":4589, "methodname":"getCode()", "methodnamerefined":"getCode", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.getCode", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.getCode()", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public String getCode() {\r\n    return code;\r\n}"},
 {"id":4590, "methodname":"getParent()", "methodnamerefined":"getParent", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.getParent", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.getParent()", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public Tag getParent() {\r\n    return parent;\r\n}"},
 {"id":4591, "methodname":"release()", "methodnamerefined":"release", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.release", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.release()", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public void release() {\r\n}"},
 {"id":4592, "methodname":"setCode(double)", "methodnamerefined":"setCode", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.setCode", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.setCode(double)", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public void setCode(double code) {\r\n    this.code = String.valueOf(code);\r\n}"},
 {"id":4593, "methodname":"setCode(java.lang.String)", "methodnamerefined":"setCode", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.setCode", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.setCode(java.lang.String)", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public void setCode(String code) {\r\n    this.code = code;\r\n}"},
 {"id":4594, "methodname":"setPageContext(javax.servlet.jsp.PageContext)", "methodnamerefined":"setPageContext", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.setPageContext", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.setPageContext(javax.servlet.jsp.PageContext)", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public void setPageContext(PageContext pageContext) {\r\n    this.pageContext = pageContext;\r\n}"},
 {"id":4595, "methodname":"setParent(javax.servlet.jsp.tagext.Tag)", "methodnamerefined":"setParent", "methodabbreviation":"edu.ncsu.csc.itrust.tags.ICD9CMLink.setParent", "fullmethod":"edu.ncsu.csc.itrust.tags.ICD9CMLink.setParent(javax.servlet.jsp.tagext.Tag)", "classid":640, "classname":"edu.ncsu.csc.itrust.tags.ICD9CMLink", "shortclassname":"ICD9CMLink", "method":"public void setParent(Tag parent) {\r\n    this.parent = parent;\r\n}"},
 {"id":4596, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.tags.PatientNavigation.-init-", "fullmethod":"edu.ncsu.csc.itrust.tags.PatientNavigation.-init-()", "classid":641, "classname":"edu.ncsu.csc.itrust.tags.PatientNavigation", "shortclassname":"PatientNavigation", "method":"public PatientNavigation() {\r\n}"},
 {"id":4597, "methodname":"doEndTag()", "methodnamerefined":"doEndTag", "methodabbreviation":"edu.ncsu.csc.itrust.tags.PatientNavigation.doEndTag", "fullmethod":"edu.ncsu.csc.itrust.tags.PatientNavigation.doEndTag()", "classid":641, "classname":"edu.ncsu.csc.itrust.tags.PatientNavigation", "shortclassname":"PatientNavigation", "method":"public int doEndTag() throws JspException {\r\n    return SKIP_BODY;\r\n}"},
 {"id":4598, "methodname":"doStartTag()", "methodnamerefined":"doStartTag", "methodabbreviation":"edu.ncsu.csc.itrust.tags.PatientNavigation.doStartTag", "fullmethod":"edu.ncsu.csc.itrust.tags.PatientNavigation.doStartTag()", "classid":641, "classname":"edu.ncsu.csc.itrust.tags.PatientNavigation", "shortclassname":"PatientNavigation", "method":"public int doStartTag() throws JspException {\r\n    try {\r\n        JspWriter out = pageContext.getOut();\r\n        out.write(\"<span class=\"navigation\">\");\r\n        for (int i = 0; i < (pageTitles.length); i++) {\r\n            if (pageTitles[i].equals(thisTitle)) {\r\n                out.write(pageTitles[i]);\r\n            } else\r\n                out.write(((((\"<a href=\"/iTrust/auth/hcp-uap/\" + (pageURLs[i])) + \"\">\") + (pageTitles[i])) + \"</a>\"));\r\n\r\n            out.write(\" | \");\r\n        }\r\n        out.write(\"<a href=\"/iTrust/auth/hcp-uap/editPHR.jsp?switch=true\">Switch Patient</a>\");\r\n        out.write(\"<br /></span>\");\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return SKIP_BODY;\r\n}"},
 {"id":4599, "methodname":"getParent()", "methodnamerefined":"getParent", "methodabbreviation":"edu.ncsu.csc.itrust.tags.PatientNavigation.getParent", "fullmethod":"edu.ncsu.csc.itrust.tags.PatientNavigation.getParent()", "classid":641, "classname":"edu.ncsu.csc.itrust.tags.PatientNavigation", "shortclassname":"PatientNavigation", "method":"public Tag getParent() {\r\n    return parent;\r\n}"},
 {"id":4600, "methodname":"getThisTitle()", "methodnamerefined":"getThisTitle", "methodabbreviation":"edu.ncsu.csc.itrust.tags.PatientNavigation.getThisTitle", "fullmethod":"edu.ncsu.csc.itrust.tags.PatientNavigation.getThisTitle()", "classid":641, "classname":"edu.ncsu.csc.itrust.tags.PatientNavigation", "shortclassname":"PatientNavigation", "method":"public String getThisTitle() {\r\n    return thisTitle;\r\n}"},
 {"id":4601, "methodname":"release()", "methodnamerefined":"release", "methodabbreviation":"edu.ncsu.csc.itrust.tags.PatientNavigation.release", "fullmethod":"edu.ncsu.csc.itrust.tags.PatientNavigation.release()", "classid":641, "classname":"edu.ncsu.csc.itrust.tags.PatientNavigation", "shortclassname":"PatientNavigation", "method":"public void release() {\r\n}"},
 {"id":4602, "methodname":"setPageContext(javax.servlet.jsp.PageContext)", "methodnamerefined":"setPageContext", "methodabbreviation":"edu.ncsu.csc.itrust.tags.PatientNavigation.setPageContext", "fullmethod":"edu.ncsu.csc.itrust.tags.PatientNavigation.setPageContext(javax.servlet.jsp.PageContext)", "classid":641, "classname":"edu.ncsu.csc.itrust.tags.PatientNavigation", "shortclassname":"PatientNavigation", "method":"public void setPageContext(PageContext pageContext) {\r\n    this.pageContext = pageContext;\r\n}"},
 {"id":4603, "methodname":"setParent(javax.servlet.jsp.tagext.Tag)", "methodnamerefined":"setParent", "methodabbreviation":"edu.ncsu.csc.itrust.tags.PatientNavigation.setParent", "fullmethod":"edu.ncsu.csc.itrust.tags.PatientNavigation.setParent(javax.servlet.jsp.tagext.Tag)", "classid":641, "classname":"edu.ncsu.csc.itrust.tags.PatientNavigation", "shortclassname":"PatientNavigation", "method":"public void setParent(Tag parent) {\r\n    this.parent = parent;\r\n}"},
 {"id":4604, "methodname":"setThisTitle(java.lang.String)", "methodnamerefined":"setThisTitle", "methodabbreviation":"edu.ncsu.csc.itrust.tags.PatientNavigation.setThisTitle", "fullmethod":"edu.ncsu.csc.itrust.tags.PatientNavigation.setThisTitle(java.lang.String)", "classid":641, "classname":"edu.ncsu.csc.itrust.tags.PatientNavigation", "shortclassname":"PatientNavigation", "method":"public void setThisTitle(String thisPage) {\r\n    this.thisTitle = thisPage;\r\n}"},
 {"id":4605, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.-init-", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.-init-()", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public StateSelect() {\r\n    super();\r\n}"},
 {"id":4606, "methodname":"doEndTag()", "methodnamerefined":"doEndTag", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.doEndTag", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.doEndTag()", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public int doEndTag() throws JspException {\r\n    return SKIP_BODY;\r\n}"},
 {"id":4607, "methodname":"doStartTag()", "methodnamerefined":"doStartTag", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.doStartTag", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.doStartTag()", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public int doStartTag() throws JspException {\r\n    try {\r\n        JspWriter out = pageContext.getOut();\r\n        out.write(((\"<select name=\"\" + (getName())) + \"\" >\"));\r\n        if (((name) == null) || (\"\".equals(name)))\r\n            out.write(\"<option value=\"\">Select State</option>\");\r\n\r\n        for (State state : State.values()) {\r\n            String selected = (state.toString().equals(getValue())) ? \"selected=selected\" : \"\";\r\n            out.write(((((((\"<option value=\"\" + (state.toString())) + \"\" \") + selected) + \">\") + (state.getName())) + \"</option>\"));\r\n        }\r\n        out.write(\"</select>\");\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return SKIP_BODY;\r\n}"},
 {"id":4608, "methodname":"getName()", "methodnamerefined":"getName", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.getName", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.getName()", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public String getName() {\r\n    return name;\r\n}"},
 {"id":4609, "methodname":"getParent()", "methodnamerefined":"getParent", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.getParent", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.getParent()", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public Tag getParent() {\r\n    return parent;\r\n}"},
 {"id":4610, "methodname":"getValue()", "methodnamerefined":"getValue", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.getValue", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.getValue()", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public String getValue() {\r\n    return value;\r\n}"},
 {"id":4611, "methodname":"release()", "methodnamerefined":"release", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.release", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.release()", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public void release() {\r\n}"},
 {"id":4612, "methodname":"setName(java.lang.String)", "methodnamerefined":"setName", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.setName", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.setName(java.lang.String)", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public void setName(String name) {\r\n    this.name = name;\r\n}"},
 {"id":4613, "methodname":"setPageContext(javax.servlet.jsp.PageContext)", "methodnamerefined":"setPageContext", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.setPageContext", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.setPageContext(javax.servlet.jsp.PageContext)", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public void setPageContext(PageContext pageContext) {\r\n    this.pageContext = pageContext;\r\n}"},
 {"id":4614, "methodname":"setParent(javax.servlet.jsp.tagext.Tag)", "methodnamerefined":"setParent", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.setParent", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.setParent(javax.servlet.jsp.tagext.Tag)", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public void setParent(Tag parent) {\r\n    this.parent = parent;\r\n}"},
 {"id":4615, "methodname":"setValue(java.lang.String)", "methodnamerefined":"setValue", "methodabbreviation":"edu.ncsu.csc.itrust.tags.StateSelect.setValue", "fullmethod":"edu.ncsu.csc.itrust.tags.StateSelect.setValue(java.lang.String)", "classid":642, "classname":"edu.ncsu.csc.itrust.tags.StateSelect", "shortclassname":"StateSelect", "method":"public void setValue(String value) {\r\n    this.value = value;\r\n}"},
 {"id":4616, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks.-init-()", "classid":643, "classname":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks", "shortclassname":"ActionTestWithMocks", "method":"ActionTestWithMocks() {\r\n}"},
 {"id":4617, "methodname":"createFactoryExpectations()", "methodnamerefined":"createFactoryExpectations", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks.createFactoryExpectations", "fullmethod":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks.createFactoryExpectations()", "classid":643, "classname":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks", "shortclassname":"ActionTestWithMocks", "method":"private static void createFactoryExpectations() {\r\n    expect(ActionTestWithMocks.factory.getAccessDAO()).andReturn(ActionTestWithMocks.accessDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getAllergyDAO()).andReturn(ActionTestWithMocks.allergyDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getAuthDAO()).andReturn(ActionTestWithMocks.authDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getCPTCodesDAO()).andReturn(ActionTestWithMocks.cptDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getFakeEmailDAO()).andReturn(ActionTestWithMocks.emailDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getFamilyDAO()).andReturn(ActionTestWithMocks.familyDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getHealthRecordsDAO()).andReturn(ActionTestWithMocks.healthDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getHospitalsDAO()).andReturn(ActionTestWithMocks.hospitalDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getICDCodesDAO()).andReturn(ActionTestWithMocks.icdDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getLabProcedureDAO()).andReturn(ActionTestWithMocks.labDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getLOINCDAO()).andReturn(ActionTestWithMocks.loincDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getMessageDAO()).andReturn(ActionTestWithMocks.messageDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getNDCodesDAO()).andReturn(ActionTestWithMocks.ndDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getOfficeVisitDAO()).andReturn(ActionTestWithMocks.ovDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getPatientDAO()).andReturn(ActionTestWithMocks.patientDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getPersonnelDAO()).andReturn(ActionTestWithMocks.personnelDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getReferralDAO()).andReturn(ActionTestWithMocks.referralDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getReportRequestDAO()).andReturn(ActionTestWithMocks.reportRequestDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getRiskDAO()).andReturn(ActionTestWithMocks.riskDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getSurveyDAO()).andReturn(ActionTestWithMocks.surveyDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getSurveyResultDAO()).andReturn(ActionTestWithMocks.surveyResultDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getTransactionDAO()).andReturn(ActionTestWithMocks.transDAO).anyTimes();\r\n    expect(ActionTestWithMocks.factory.getVisitRemindersDAO()).andReturn(ActionTestWithMocks.visitDAO).anyTimes();\r\n}"},
 {"id":4618, "methodname":"createMocks()", "methodnamerefined":"createMocks", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks.createMocks", "fullmethod":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks.createMocks()", "classid":643, "classname":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks", "shortclassname":"ActionTestWithMocks", "method":"private static void createMocks() {\r\n    ActionTestWithMocks.factory = ActionTestWithMocks.control.createMock(DAOFactory.class);\r\n    ActionTestWithMocks.accessDAO = ActionTestWithMocks.control.createMock(AccessDAO.class);\r\n    ActionTestWithMocks.allergyDAO = ActionTestWithMocks.control.createMock(AllergyDAO.class);\r\n    ActionTestWithMocks.authDAO = ActionTestWithMocks.control.createMock(AuthDAO.class);\r\n    ActionTestWithMocks.cptDAO = ActionTestWithMocks.control.createMock(CPTCodesDAO.class);\r\n    ActionTestWithMocks.emailDAO = ActionTestWithMocks.control.createMock(FakeEmailDAO.class);\r\n    ActionTestWithMocks.familyDAO = ActionTestWithMocks.control.createMock(FamilyDAO.class);\r\n    ActionTestWithMocks.healthDAO = ActionTestWithMocks.control.createMock(HealthRecordsDAO.class);\r\n    ActionTestWithMocks.hospitalDAO = ActionTestWithMocks.control.createMock(HospitalsDAO.class);\r\n    ActionTestWithMocks.icdDAO = ActionTestWithMocks.control.createMock(ICDCodesDAO.class);\r\n    ActionTestWithMocks.labDAO = ActionTestWithMocks.control.createMock(LabProcedureDAO.class);\r\n    ActionTestWithMocks.loincDAO = ActionTestWithMocks.control.createMock(LOINCDAO.class);\r\n    ActionTestWithMocks.messageDAO = ActionTestWithMocks.control.createMock(MessageDAO.class);\r\n    ActionTestWithMocks.ndDAO = ActionTestWithMocks.control.createMock(NDCodesDAO.class);\r\n    ActionTestWithMocks.ovDAO = ActionTestWithMocks.control.createMock(OfficeVisitDAO.class);\r\n    ActionTestWithMocks.patientDAO = ActionTestWithMocks.control.createMock(PatientDAO.class);\r\n    ActionTestWithMocks.personnelDAO = ActionTestWithMocks.control.createMock(PersonnelDAO.class);\r\n    ActionTestWithMocks.referralDAO = ActionTestWithMocks.control.createMock(ReferralDAO.class);\r\n    ActionTestWithMocks.reportRequestDAO = ActionTestWithMocks.control.createMock(ReportRequestDAO.class);\r\n    ActionTestWithMocks.riskDAO = ActionTestWithMocks.control.createMock(RiskDAO.class);\r\n    ActionTestWithMocks.surveyDAO = ActionTestWithMocks.control.createMock(SurveyDAO.class);\r\n    ActionTestWithMocks.surveyResultDAO = ActionTestWithMocks.control.createMock(SurveyResultDAO.class);\r\n    ActionTestWithMocks.transDAO = ActionTestWithMocks.control.createMock(TransactionDAO.class);\r\n    ActionTestWithMocks.visitDAO = ActionTestWithMocks.control.createMock(VisitRemindersDAO.class);\r\n}"},
 {"id":4619, "methodname":"initMocks()", "methodnamerefined":"initMocks", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks.initMocks", "fullmethod":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks.initMocks()", "classid":643, "classname":"edu.ncsu.csc.itrust.testutils.ActionTestWithMocks", "shortclassname":"ActionTestWithMocks", "method":"protected static void initMocks() {\r\n    if ((ActionTestWithMocks.control) == null)\r\n        ActionTestWithMocks.control = EasyMock.createNiceControl();\r\n    else\r\n        ActionTestWithMocks.control.reset();\r\n\r\n    ActionTestWithMocks.createMocks();\r\n    ActionTestWithMocks.createFactoryExpectations();\r\n}"},
 {"id":4620, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.BadBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.BadBean.-init-()", "classid":644, "classname":"edu.ncsu.csc.itrust.testutils.BadBean", "shortclassname":"BadBean", "method":"// To make the coverage work...\r\npublic BadBean() {\r\n    setThing(5);\r\n    setThing(\"\");\r\n}"},
 {"id":4621, "methodname":"setThing(java.lang.Integer)", "methodnamerefined":"setThing", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.BadBean.setThing", "fullmethod":"edu.ncsu.csc.itrust.testutils.BadBean.setThing(java.lang.Integer)", "classid":644, "classname":"edu.ncsu.csc.itrust.testutils.BadBean", "shortclassname":"BadBean", "method":"public void setThing(Integer str) {\r\n}"},
 {"id":4622, "methodname":"setThing(java.lang.String)", "methodnamerefined":"setThing", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.BadBean.setThing", "fullmethod":"edu.ncsu.csc.itrust.testutils.BadBean.setThing(java.lang.String)", "classid":644, "classname":"edu.ncsu.csc.itrust.testutils.BadBean", "shortclassname":"BadBean", "method":"public void setThing(String str) {\r\n}"},
 {"id":4623, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory.-init-()", "classid":645, "classname":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory", "shortclassname":"EvilDAOFactory", "method":"public EvilDAOFactory() {\r\n}"},
 {"id":4624, "methodname":"-init-(int)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory.-init-(int)", "classid":645, "classname":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory", "shortclassname":"EvilDAOFactory", "method":"// Heres how this behavior works: you can set EvilDAOFactory to count down to 0, giving correct\r\n// connections the whole way. Then, when you want it to, it starts throwing exceptions\r\npublic EvilDAOFactory(int numCorrect) {\r\n    this.driver = TestDAOFactory.getTestInstance();\r\n    this.numCorrect = numCorrect;\r\n}"},
 {"id":4625, "methodname":"getConnection()", "methodnamerefined":"getConnection", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory.getConnection", "fullmethod":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory.getConnection()", "classid":645, "classname":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory", "shortclassname":"EvilDAOFactory", "method":"@Override\r\npublic Connection getConnection() throws SQLException {\r\n    // check THEN decrement\r\n    if (((numCorrect)--) > 0)\r\n        return driver.getConnection();\r\n    else\r\n        throw new SQLException(EvilDAOFactory.MESSAGE);\r\n\r\n}"},
 {"id":4626, "methodname":"getEvilInstance()", "methodnamerefined":"getEvilInstance", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory.getEvilInstance", "fullmethod":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory.getEvilInstance()", "classid":645, "classname":"edu.ncsu.csc.itrust.testutils.EvilDAOFactory", "shortclassname":"EvilDAOFactory", "method":"public static DAOFactory getEvilInstance() {\r\n    if ((EvilDAOFactory.evilTestInstance) == null)\r\n        EvilDAOFactory.evilTestInstance = new EvilDAOFactory();\r\n\r\n    return EvilDAOFactory.evilTestInstance;\r\n}"},
 {"id":4627, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.-init-()", "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "shortclassname":"JUnitiTrustUtils", "method":"JUnitiTrustUtils() {\r\n}"},
 {"id":4628, "methodname":"assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "methodnamerefined":"assertLogged", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertLogged", "fullmethod":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "shortclassname":"JUnitiTrustUtils", "method":"public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TransactionBean lastRecordedAction = transList.get(0);\r\n    assertTrue(((lastRecordedAction.getTransactionType()) == code));\r\n    assertTrue(((lastRecordedAction.getLoggedInMID()) == loggedInMID));\r\n    assertTrue(((lastRecordedAction.getSecondaryMID()) == secondaryMID));\r\n    assertTrue(lastRecordedAction.getAddedInfo().equals(addedInfo));\r\n}"},
 {"id":4629, "methodname":"assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)", "methodnamerefined":"assertTransaction", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction", "fullmethod":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)", "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "shortclassname":"JUnitiTrustUtils", "method":"private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    assertEquals(transType, trans.getTransactionType());\r\n    assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    assertEquals(addedInfo, trans.getAddedInfo());\r\n}"},
 {"id":4630, "methodname":"assertTransactionOnly(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "methodnamerefined":"assertTransactionOnly", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionOnly", "fullmethod":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionOnly(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "shortclassname":"JUnitiTrustUtils", "method":"public static void assertTransactionOnly(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    assertEquals(\"Only one transaction should have been logged\", 1, transList.size());\r\n    JUnitiTrustUtils.assertTransaction(transType, loggedInMID, secondaryMID, addedInfo, transList.get(0));\r\n}"},
 {"id":4631, "methodname":"assertTransactionsNone()", "methodnamerefined":"assertTransactionsNone", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionsNone", "fullmethod":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionsNone()", "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "shortclassname":"JUnitiTrustUtils", "method":"public static void assertTransactionsNone() throws DBException {\r\n    assertEquals(\"No transactions should have been logged\", 0, TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions().size());\r\n}"},
 {"id":4632, "methodname":"testNull()", "methodnamerefined":"testNull", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.testNull", "fullmethod":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.testNull()", "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "shortclassname":"JUnitiTrustUtils", "method":"public void testNull() {\r\n    assert true;\r\n}"},
 {"id":4633, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.OkayBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.OkayBean.-init-()", "classid":647, "classname":"edu.ncsu.csc.itrust.testutils.OkayBean", "shortclassname":"OkayBean", "method":"public OkayBean() {\r\n    setThing(\"\");\r\n}"},
 {"id":4634, "methodname":"equals(edu.ncsu.csc.itrust.testutils.OkayBean)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.OkayBean.equals", "fullmethod":"edu.ncsu.csc.itrust.testutils.OkayBean.equals(edu.ncsu.csc.itrust.testutils.OkayBean)", "classid":647, "classname":"edu.ncsu.csc.itrust.testutils.OkayBean", "shortclassname":"OkayBean", "method":"private boolean equals(OkayBean other) {\r\n    return true;\r\n}"},
 {"id":4635, "methodname":"equals(java.lang.Object)", "methodnamerefined":"equals", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.OkayBean.equals", "fullmethod":"edu.ncsu.csc.itrust.testutils.OkayBean.equals(java.lang.Object)", "classid":647, "classname":"edu.ncsu.csc.itrust.testutils.OkayBean", "shortclassname":"OkayBean", "method":"@Override\r\npublic boolean equals(Object obj) {\r\n    return ((obj != null) && (obj.getClass().equals(this.getClass()))) && (this.equals(((OkayBean) (obj))));\r\n}"},
 {"id":4636, "methodname":"getThing()", "methodnamerefined":"getThing", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.OkayBean.getThing", "fullmethod":"edu.ncsu.csc.itrust.testutils.OkayBean.getThing()", "classid":647, "classname":"edu.ncsu.csc.itrust.testutils.OkayBean", "shortclassname":"OkayBean", "method":"public String getThing() {\r\n    return thing;\r\n}"},
 {"id":4637, "methodname":"hashCode()", "methodnamerefined":"hashCode", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.OkayBean.hashCode", "fullmethod":"edu.ncsu.csc.itrust.testutils.OkayBean.hashCode()", "classid":647, "classname":"edu.ncsu.csc.itrust.testutils.OkayBean", "shortclassname":"OkayBean", "method":"@Override\r\npublic int hashCode() {\r\n    assert false : \"hashCode not designed\";\r\n    return 42;// any arbitrary constant will do\r\n\r\n}"},
 {"id":4638, "methodname":"setThing(java.lang.String)", "methodnamerefined":"setThing", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.OkayBean.setThing", "fullmethod":"edu.ncsu.csc.itrust.testutils.OkayBean.setThing(java.lang.String)", "classid":647, "classname":"edu.ncsu.csc.itrust.testutils.OkayBean", "shortclassname":"OkayBean", "method":"public void setThing(String thing) {\r\n    this.thing = thing;\r\n}"},
 {"id":4639, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.SQLFileCache.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.SQLFileCache.-init-()", "classid":648, "classname":"edu.ncsu.csc.itrust.testutils.SQLFileCache", "shortclassname":"SQLFileCache", "method":"private SQLFileCache() {\r\n}"},
 {"id":4640, "methodname":"getInstance()", "methodnamerefined":"getInstance", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.SQLFileCache.getInstance", "fullmethod":"edu.ncsu.csc.itrust.testutils.SQLFileCache.getInstance()", "classid":648, "classname":"edu.ncsu.csc.itrust.testutils.SQLFileCache", "shortclassname":"SQLFileCache", "method":"public static SQLFileCache getInstance() {\r\n    if ((SQLFileCache.instance) == null)\r\n        SQLFileCache.instance = new SQLFileCache();\r\n\r\n    return SQLFileCache.instance;\r\n}"},
 {"id":4641, "methodname":"getQueries(java.lang.String)", "methodnamerefined":"getQueries", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.SQLFileCache.getQueries", "fullmethod":"edu.ncsu.csc.itrust.testutils.SQLFileCache.getQueries(java.lang.String)", "classid":648, "classname":"edu.ncsu.csc.itrust.testutils.SQLFileCache", "shortclassname":"SQLFileCache", "method":"public List<String> getQueries(String fileName) throws FileNotFoundException, IOException {\r\n    List<String> queries = cache.get(fileName);\r\n    if (queries != null)\r\n        return queries;\r\n    else\r\n        return parseAndCache(fileName);\r\n\r\n}"},
 {"id":4642, "methodname":"parseAndCache(java.lang.String)", "methodnamerefined":"parseAndCache", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.SQLFileCache.parseAndCache", "fullmethod":"edu.ncsu.csc.itrust.testutils.SQLFileCache.parseAndCache(java.lang.String)", "classid":648, "classname":"edu.ncsu.csc.itrust.testutils.SQLFileCache", "shortclassname":"SQLFileCache", "method":"private List<String> parseAndCache(String fileName) throws FileNotFoundException, IOException {\r\n    List<String> queries = parseSQLFile(fileName);\r\n    cache.put(fileName, queries);\r\n    return queries;\r\n}"},
 {"id":4643, "methodname":"parseSQLFile(java.lang.String)", "methodnamerefined":"parseSQLFile", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.SQLFileCache.parseSQLFile", "fullmethod":"edu.ncsu.csc.itrust.testutils.SQLFileCache.parseSQLFile(java.lang.String)", "classid":648, "classname":"edu.ncsu.csc.itrust.testutils.SQLFileCache", "shortclassname":"SQLFileCache", "method":"private List<String> parseSQLFile(String filepath) throws FileNotFoundException, IOException {\r\n    List<String> queries = new ArrayList<String>();\r\n    BufferedReader reader = new BufferedReader(new FileReader(new File(filepath)));\r\n    String line = \"\";\r\n    String currentQuery = \"\";\r\n    while ((line = reader.readLine()) != null) {\r\n        for (int i = 0; i < (line.length()); i++) {\r\n            if ((line.charAt(i)) == ;) {\r\n                queries.add(currentQuery);\r\n                currentQuery = \"\";\r\n            } else\r\n                currentQuery += line.charAt(i);\r\n\r\n        }\r\n    } \r\n    reader.close();\r\n    return queries;\r\n}"},
 {"id":4644, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.TestBean.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.TestBean.-init-()", "classid":649, "classname":"edu.ncsu.csc.itrust.testutils.TestBean", "shortclassname":"TestBean", "method":"// Empty class isnt used at all - this is just used as a test hook into testing BeanValidator.\r\npublic TestBean() {\r\n}"},
 {"id":4645, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.-init-()", "classid":650, "classname":"edu.ncsu.csc.itrust.testutils.TestDAOFactory", "shortclassname":"TestDAOFactory", "method":"private TestDAOFactory() {\r\n    try {\r\n        Document document = parseXML(new BufferedReader(new FileReader(\"WebRoot/META-INF/context.xml\")));\r\n        dataSource = new BasicDataSource();\r\n        dataSource.setDriverClassName(getAttribute(document, \"@driverClassName\"));\r\n        dataSource.setUsername(getAttribute(document, \"@username\"));\r\n        dataSource.setPassword(getAttribute(document, \"@password\"));\r\n        dataSource.setUrl(getAttribute(document, \"@url\"));\r\n        dataSource.setMaxActive(3);// only allow three connections open at a time\r\n\r\n        dataSource.setMaxWait(250);// wait 250ms until throwing an exception\r\n\r\n        dataSource.setPoolPreparedStatements(true);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":4646, "methodname":"getAttribute(org.w3c.dom.Document,java.lang.String)", "methodnamerefined":"getAttribute", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.getAttribute", "fullmethod":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.getAttribute(org.w3c.dom.Document,java.lang.String)", "classid":650, "classname":"edu.ncsu.csc.itrust.testutils.TestDAOFactory", "shortclassname":"TestDAOFactory", "method":"private String getAttribute(Document document, String attribute) throws XPathExpressionException {\r\n    return ((String) (XPathFactory.newInstance().newXPath().compile((\"/Context/Resource/\" + attribute)).evaluate(document.getDocumentElement(), XPathConstants.STRING)));\r\n}"},
 {"id":4647, "methodname":"getConnection()", "methodnamerefined":"getConnection", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.getConnection", "fullmethod":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.getConnection()", "classid":650, "classname":"edu.ncsu.csc.itrust.testutils.TestDAOFactory", "shortclassname":"TestDAOFactory", "method":"@Override\r\npublic Connection getConnection() throws SQLException {\r\n    return dataSource.getConnection();\r\n}"},
 {"id":4648, "methodname":"getTestInstance()", "methodnamerefined":"getTestInstance", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.getTestInstance", "fullmethod":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.getTestInstance()", "classid":650, "classname":"edu.ncsu.csc.itrust.testutils.TestDAOFactory", "shortclassname":"TestDAOFactory", "method":"public static DAOFactory getTestInstance() {\r\n    if ((TestDAOFactory.testInstance) == null)\r\n        TestDAOFactory.testInstance = new TestDAOFactory();\r\n\r\n    return TestDAOFactory.testInstance;\r\n}"},
 {"id":4649, "methodname":"parseXML(java.io.BufferedReader)", "methodnamerefined":"parseXML", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.parseXML", "fullmethod":"edu.ncsu.csc.itrust.testutils.TestDAOFactory.parseXML(java.io.BufferedReader)", "classid":650, "classname":"edu.ncsu.csc.itrust.testutils.TestDAOFactory", "shortclassname":"TestDAOFactory", "method":"private Document parseXML(BufferedReader reader) throws Exception {\r\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n    factory.setValidating(false);\r\n    DocumentBuilder builder = factory.newDocumentBuilder();\r\n    return builder.parse(new InputSource(reader));\r\n}"},
 {"id":4650, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.-init-", "fullmethod":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.-init-()", "classid":651, "classname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy", "shortclassname":"ValidatorProxy", "method":"ValidatorProxy() {\r\n}"},
 {"id":4651, "methodname":"checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "methodnamerefined":"checkFormat", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat", "fullmethod":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "classid":651, "classname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy", "shortclassname":"ValidatorProxy", "method":"@Override\r\npublic String checkFormat(String name, Long value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}"},
 {"id":4652, "methodname":"checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "methodnamerefined":"checkFormat", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat", "fullmethod":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "classid":651, "classname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy", "shortclassname":"ValidatorProxy", "method":"@Override\r\npublic String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}"},
 {"id":4653, "methodname":"validate(edu.ncsu.csc.itrust.testutils.TestBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.validate", "fullmethod":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.validate(edu.ncsu.csc.itrust.testutils.TestBean)", "classid":651, "classname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy", "shortclassname":"ValidatorProxy", "method":"@Override\r\npublic void validate(TestBean bean) throws FormValidationException {\r\n    throw new IllegalStateException(\"Mock object acts as a proxy to protected BeanValidator classes. Do not call this method\");\r\n}"},
 {"id":4654, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.AddPatientValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.AddPatientValidator.-init-()", "classid":652, "classname":"edu.ncsu.csc.itrust.validate.AddPatientValidator", "shortclassname":"AddPatientValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic AddPatientValidator() {\r\n}"},
 {"id":4655, "methodname":"validate(edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.AddPatientValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.AddPatientValidator.validate(edu.ncsu.csc.itrust.beans.PatientBean)", "classid":652, "classname":"edu.ncsu.csc.itrust.validate.AddPatientValidator", "shortclassname":"AddPatientValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PatientBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4656, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.AddPersonnelValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.AddPersonnelValidator.-init-()", "classid":653, "classname":"edu.ncsu.csc.itrust.validate.AddPersonnelValidator", "shortclassname":"AddPersonnelValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic AddPersonnelValidator() {\r\n}"},
 {"id":4657, "methodname":"validate(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.AddPersonnelValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.AddPersonnelValidator.validate(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":653, "classname":"edu.ncsu.csc.itrust.validate.AddPersonnelValidator", "shortclassname":"AddPersonnelValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PersonnelBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4658, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.AdverseEventValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.AdverseEventValidator.-init-()", "classid":654, "classname":"edu.ncsu.csc.itrust.validate.AdverseEventValidator", "shortclassname":"AdverseEventValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic AdverseEventValidator() {\r\n}"},
 {"id":4659, "methodname":"validate(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.AdverseEventValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.AdverseEventValidator.validate(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "classid":654, "classname":"edu.ncsu.csc.itrust.validate.AdverseEventValidator", "shortclassname":"AdverseEventValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param d\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(AdverseEventBean b) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"comment\", b.getDescription(), ValidationFormat.ADVERSE_EVENT_COMMENTS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4660, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.AllergyBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.AllergyBeanValidator.-init-()", "classid":655, "classname":"edu.ncsu.csc.itrust.validate.AllergyBeanValidator", "shortclassname":"AllergyBeanValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic AllergyBeanValidator() {\r\n}"},
 {"id":4661, "methodname":"validate(edu.ncsu.csc.itrust.beans.AllergyBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.AllergyBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.AllergyBeanValidator.validate(edu.ncsu.csc.itrust.beans.AllergyBean)", "classid":655, "classname":"edu.ncsu.csc.itrust.validate.AllergyBeanValidator", "shortclassname":"AllergyBeanValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(AllergyBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Allergy Description\", m.getDescription(), ValidationFormat.ALLERGY_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4662, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ApptBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.ApptBeanValidator.-init-()", "classid":656, "classname":"edu.ncsu.csc.itrust.validate.ApptBeanValidator", "shortclassname":"ApptBeanValidator", "method":"ApptBeanValidator() {\r\n}"},
 {"id":4663, "methodname":"validate(edu.ncsu.csc.itrust.beans.ApptBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ApptBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.ApptBeanValidator.validate(edu.ncsu.csc.itrust.beans.ApptBean)", "classid":656, "classname":"edu.ncsu.csc.itrust.validate.ApptBeanValidator", "shortclassname":"ApptBeanValidator", "method":"@Override\r\npublic void validate(ApptBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((bean.getComment()) == null)\r\n        return;\r\n\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Comment\", bean.getComment(), ValidationFormat.APPT_COMMENT, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4664, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator.-init-()", "classid":657, "classname":"edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator", "shortclassname":"ApptTypeBeanValidator", "method":"ApptTypeBeanValidator() {\r\n}"},
 {"id":4665, "methodname":"validate(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator.validate(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "classid":657, "classname":"edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator", "shortclassname":"ApptTypeBeanValidator", "method":"@Override\r\npublic void validate(ApptTypeBean a) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Type Name\", a.getName(), ValidationFormat.APPT_TYPE_NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Type Duration\", ((a.getDuration()) + \"\"), ValidationFormat.APPT_TYPE_DURATION, false));\r\n    if ((a.getDuration()) <= 0) {\r\n        errorList.addIfNotNull(\"Appointment duration must be greater than zero.\");\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4666, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.-init-()", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"BeanValidator() {\r\n}"},
 {"id":4667, "methodname":"checkBoolean(java.lang.String,java.lang.String)", "methodnamerefined":"checkBoolean", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.checkBoolean", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.checkBoolean(java.lang.String,java.lang.String)", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"/**\r\n * Check that the value fits the \"true\" or \"false\"\r\n *\r\n * @param name\r\n * \t\t\r\n * @param value\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkBoolean(String name, String value) {\r\n    if ((\"true\".equals(value)) || (\"false\".equals(value)))\r\n        return \"\";\r\n    else\r\n        return name + \" must be either true or false\";\r\n\r\n}"},
 {"id":4668, "methodname":"checkDouble(java.lang.String,java.lang.String,double,double)", "methodnamerefined":"checkDouble", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.checkDouble", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.checkDouble(java.lang.String,java.lang.String,double,double)", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"/**\r\n * Check that a double is in the proper format and is in the correct range\r\n *\r\n * @param name\r\n * \t\t\r\n * @param value\r\n * \t\t\r\n * @param lower\r\n * \t\t\r\n * @param upper\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkDouble(String name, String value, double lower, double upper) {\r\n    try {\r\n        double doubleValue = Double.valueOf(value);\r\n        if ((lower <= doubleValue) && (doubleValue < upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be a decimal in [\") + lower) + \",\") + upper) + \")\";\r\n}"},
 {"id":4669, "methodname":"checkFormat(java.lang.String,java.lang.Double,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "methodnamerefined":"checkFormat", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Double,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"/**\r\n * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an\r\n * error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * \t\t\r\n * @param doubleValue\r\n * \t\t\r\n * @param format\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Double doubleValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (doubleValue != null)\r\n        str = String.valueOf(doubleValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}"},
 {"id":4670, "methodname":"checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "methodnamerefined":"checkFormat", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"/**\r\n * Check a long value against a particular format. isNullable will check if it is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * \t\t\r\n * @param longValue\r\n * \t\t\r\n * @param format\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Long longValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (longValue != null)\r\n        str = String.valueOf(longValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}"},
 {"id":4671, "methodname":"checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "methodnamerefined":"checkFormat", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"/**\r\n * Check the format against the given enum. isNullable will check if the string is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * \t\t\r\n * @param value\r\n * \t\t\r\n * @param format\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String errorMessage = (name + \": \") + (format.getDescription());\r\n    if ((value == null) || (\"\".equals(value)))\r\n        return isNullable ? \"\" : errorMessage;\r\n    else\r\n        if (format.getRegex().matcher(value).matches())\r\n            return \"\";\r\n        else\r\n            return errorMessage;\r\n\r\n\r\n}"},
 {"id":4672, "methodname":"checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "methodnamerefined":"checkGender", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.checkGender", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"/**\r\n * Check against the proper gender\r\n *\r\n * @param name\r\n * \t\t\r\n * @param gen\r\n * \t\t\r\n * @param format\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (gen != null)\r\n        str = gen.toString();\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}"},
 {"id":4673, "methodname":"checkInt(java.lang.String,java.lang.String,int,int,boolean)", "methodnamerefined":"checkInt", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.checkInt", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.checkInt(java.lang.String,java.lang.String,int,int,boolean)", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"/**\r\n * The that an integer is the proper format, and is in the correct range\r\n *\r\n * @param name\r\n * \t\t\r\n * @param value\r\n * \t\t\r\n * @param lower\r\n * \t\t\r\n * @param upper\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkInt(String name, String value, int lower, int upper, boolean isNullable) {\r\n    if (isNullable && ((value == null) || (\"\".equals(value))))\r\n        return \"\";\r\n\r\n    try {\r\n        int intValue = Integer.valueOf(value);\r\n        if ((lower <= intValue) && (intValue <= upper))\r\n            return \"\";\r\n\r\n    } catch (NumberFormatException e) {\r\n        // just fall through to returning the error message\r\n    }\r\n    return ((((name + \" must be an integer in [\") + lower) + \",\") + upper) + \"]\";\r\n}"},
 {"id":4674, "methodname":"checkNotZero(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "methodnamerefined":"checkNotZero", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.checkNotZero", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.checkNotZero(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"protected String checkNotZero(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String s = checkFormat(name, value, format, isNullable);\r\n    if (s.equals(\"\")) {\r\n        if ((Double.valueOf(value)) < 0.1) {\r\n            return name + \" must be greater than 0\";\r\n        }\r\n    }\r\n    return s;\r\n}"},
 {"id":4675, "methodname":"validate(java.lang.Object)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidator.validate(java.lang.Object)", "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "shortclassname":"BeanValidator", "method":"public abstract void validate(T bean) throws FormValidationException;"},
 {"id":4676, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.-init-()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"BeanValidatorTest() {\r\n}"},
 {"id":4677, "methodname":"testCheckDouble()", "methodnamerefined":"testCheckDouble", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckDouble", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckDouble()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"public void testCheckDouble() {\r\n    assertEquals(\"\", validatorProxy.checkDouble(\"double\", \"1.5\", 1, 2));\r\n    assertEquals(\"double must be a decimal in [1.0,2.0)\", validatorProxy.checkDouble(\"double\", \"bad\", 1, 2));\r\n}"},
 {"id":4678, "methodname":"testCheckFormatStringStringValidationFormatBoolean()", "methodnamerefined":"testCheckFormatStringStringValidationFormatBoolean", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckFormatStringStringValidationFormatBoolean", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckFormatStringStringValidationFormatBoolean()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"/**\r\n * Test method to see if colon is accepted in notes.\r\n */\r\npublic void testCheckFormatStringStringValidationFormatBoolean() {\r\n    assertEquals(\"\", validatorProxy.checkFormat(\"Notes\", \"Updated Notes:\", ValidationFormat.NOTES, true));\r\n}"},
 {"id":4679, "methodname":"testCheckGender()", "methodnamerefined":"testCheckGender", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckGender", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckGender()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"public void testCheckGender() {\r\n    assertEquals(\"\", validatorProxy.checkGender(\"Gender\", Gender.Male, ValidationFormat.GENDERCOD, true));\r\n}"},
 {"id":4680, "methodname":"testCheckGenderNull()", "methodnamerefined":"testCheckGenderNull", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckGenderNull", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckGenderNull()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"public void testCheckGenderNull() {\r\n    assertEquals(\"\", validatorProxy.checkGender(\"Gender\", null, ValidationFormat.GENDERCOD, true));\r\n}"},
 {"id":4681, "methodname":"testCheckInt()", "methodnamerefined":"testCheckInt", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckInt", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckInt()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"public void testCheckInt() {\r\n    assertEquals(\"\", validatorProxy.checkInt(\"null\", null, 0, 1, true));\r\n}"},
 {"id":4682, "methodname":"testCheckIsNullable()", "methodnamerefined":"testCheckIsNullable", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckIsNullable", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckIsNullable()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"public void testCheckIsNullable() throws Exception {\r\n    String value = null;\r\n    String errorMessage = \"\";\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.NAME, true));\r\n}"},
 {"id":4683, "methodname":"testCheckIsNullableEmpty()", "methodnamerefined":"testCheckIsNullableEmpty", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckIsNullableEmpty", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckIsNullableEmpty()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"public void testCheckIsNullableEmpty() throws Exception {\r\n    String value = \"\";\r\n    String errorMessage = \"\";\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.NAME, true));\r\n}"},
 {"id":4684, "methodname":"testCheckLongValues()", "methodnamerefined":"testCheckLongValues", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckLongValues", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testCheckLongValues()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"public void testCheckLongValues() throws Exception {\r\n    Long value = 80L;\r\n    String errorMessage = \"\";\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.MID, true));\r\n}"},
 {"id":4685, "methodname":"testDoubleValues()", "methodnamerefined":"testDoubleValues", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testDoubleValues", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testDoubleValues()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"public void testDoubleValues() throws Exception {\r\n    assertEquals(\"Test must be a decimal in [1.0,2.0)\", validatorProxy.checkDouble(\"Test\", \"0\", 1L, 2L));\r\n}"},
 {"id":4686, "methodname":"testProxyIsOnlyProxy()", "methodnamerefined":"testProxyIsOnlyProxy", "methodabbreviation":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testProxyIsOnlyProxy", "fullmethod":"edu.ncsu.csc.itrust.validate.BeanValidatorTest.testProxyIsOnlyProxy()", "classid":659, "classname":"edu.ncsu.csc.itrust.validate.BeanValidatorTest", "shortclassname":"BeanValidatorTest", "method":"public void testProxyIsOnlyProxy() throws Exception {\r\n    try {\r\n        validatorProxy.validate(null);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (IllegalStateException e) {\r\n        assertEquals(\"Mock object acts as a proxy to protected BeanValidator classes. Do not call this method\", e.getMessage());\r\n    }\r\n}"},
 {"id":4687, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator.-init-()", "classid":660, "classname":"edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator", "shortclassname":"DiagnosisBeanValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic DiagnosisBeanValidator() {\r\n}"},
 {"id":4688, "methodname":"validate(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator.validate(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "classid":660, "classname":"edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator", "shortclassname":"DiagnosisBeanValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(DiagnosisBean d) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"ICD9CM Code\", d.getICDCode(), ValidationFormat.ICD9CM, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", d.getDescription(), ValidationFormat.ICD_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4689, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.DrugInteractionValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.DrugInteractionValidator.-init-()", "classid":661, "classname":"edu.ncsu.csc.itrust.validate.DrugInteractionValidator", "shortclassname":"DrugInteractionValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic DrugInteractionValidator() {\r\n}"},
 {"id":4690, "methodname":"validate(edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.DrugInteractionValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.DrugInteractionValidator.validate(edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "classid":661, "classname":"edu.ncsu.csc.itrust.validate.DrugInteractionValidator", "shortclassname":"DrugInteractionValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param d\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(DrugInteractionBean d) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"FirstDrug\", d.getFirstDrug(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"SecondDrug\", d.getSecondDrug(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"description\", d.getDescription(), ValidationFormat.DRUG_INT_COMMENTS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4691, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.EMailValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.EMailValidator.-init-()", "classid":662, "classname":"edu.ncsu.csc.itrust.validate.EMailValidator", "shortclassname":"EMailValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic EMailValidator() {\r\n}"},
 {"id":4692, "methodname":"validate(edu.ncsu.csc.itrust.beans.MessageBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.EMailValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.EMailValidator.validate(edu.ncsu.csc.itrust.beans.MessageBean)", "classid":662, "classname":"edu.ncsu.csc.itrust.validate.EMailValidator", "shortclassname":"EMailValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param m\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(MessageBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"body\", m.getBody(), ValidationFormat.EMAILS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4693, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator.-init-()", "classid":663, "classname":"edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator", "shortclassname":"EditOfficeVisitValidator", "method":"// private boolean validatePrescription = false;\r\n/**\r\n * The default constructor.\r\n */\r\npublic EditOfficeVisitValidator() {\r\n}"},
 {"id":4694, "methodname":"validate(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator.validate(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm)", "classid":663, "classname":"edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator", "shortclassname":"EditOfficeVisitValidator", "method":"/* public EditOfficeVisitValidator(boolean validatePrescription) {\nthis.validatePrescription = validatePrescription;\n}\n */\r\n/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(EditOfficeVisitForm form) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"HCP ID\", form.getHcpID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", form.getHospitalID(), ValidationFormat.HOSPITAL_ID, true));\r\n    errorList.addIfNotNull(checkFormat(\"Notes\", form.getNotes(), ValidationFormat.NOTES, true));\r\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", form.getPatientID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Visit Date\", form.getVisitDate(), ValidationFormat.DATE, false));\r\n    /* if (validatePrescription) {\n    errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE,\n    false));\n    errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\n    errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(),\n    ValidationFormat.NOTES, true));\n    errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\n    if ((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\"\n    && (checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\") {\n    Date sd = null;\n    Date ed = null;\n    try {\n    sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\n    ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\n    String dateError = null;\n    if (sd.after(ed)) {\n    dateError = \"The start date of the prescription must be before the end date.\";\n    }\n    errorList.addIfNotNull(dateError);\n    } catch (ParseException e) {\n    errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\n    }\n\n    }\n    }\n     */\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4695, "methodname":"-init-(java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator.-init-(java.lang.String)", "classid":664, "classname":"edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator", "shortclassname":"EditPrescriptionsValidator", "method":"public EditPrescriptionsValidator(String defaultInstructions) {\r\n    this.defaultInstructions = defaultInstructions;\r\n}"},
 {"id":4696, "methodname":"validate(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator.validate(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm)", "classid":664, "classname":"edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator", "shortclassname":"EditPrescriptionsValidator", "method":"/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)\n */\r\n@Override\r\npublic void validate(EditPrescriptionsForm form) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(), ValidationFormat.NOTES, false));\r\n    errorList.addIfNotNull((form.getInstructions().equals(defaultInstructions) ? \"Instructions: \" + (ValidationFormat.NOTES.getDescription()) : \"\"));\r\n    errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\r\n    if (((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\") && ((checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\")) {\r\n        Date sd = null;\r\n        Date ed = null;\r\n        try {\r\n            sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\r\n            ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\r\n            String dateError = null;\r\n            if (sd.after(ed)) {\r\n                dateError = \"The start date of the prescription must be before the end date.\";\r\n            }\r\n            errorList.addIfNotNull(dateError);\r\n        } catch (ParseException e) {\r\n            errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\r\n        }\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4697, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.HealthRecordFormValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.HealthRecordFormValidator.-init-()", "classid":665, "classname":"edu.ncsu.csc.itrust.validate.HealthRecordFormValidator", "shortclassname":"HealthRecordFormValidator", "method":"HealthRecordFormValidator() {\r\n}"},
 {"id":4698, "methodname":"validate(edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.HealthRecordFormValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.HealthRecordFormValidator.validate(edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "classid":665, "classname":"edu.ncsu.csc.itrust.validate.HealthRecordFormValidator", "shortclassname":"HealthRecordFormValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(HealthRecordForm bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkInt(\"Systolic blood pressure\", bean.getBloodPressureN(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Diastolic blood pressure\", bean.getBloodPressureD(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol HDL\", bean.getCholesterolHDL(), 0, 89, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol LDL\", bean.getCholesterolLDL(), 0, 600, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol Triglycerides\", bean.getCholesterolTri(), 100, 600, false));\r\n    errorList.addIfNotNull(checkNotZero(\"Height\", bean.getHeight(), ValidationFormat.Height, false));\r\n    errorList.addIfNotNull(checkNotZero(\"Weight\", bean.getWeight(), ValidationFormat.Weight, false));\r\n    errorList.addIfNotNull(checkInt(\"Smoker\", bean.getIsSmoker(), 0, 10, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4699, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.HospitalBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.HospitalBeanValidator.-init-()", "classid":666, "classname":"edu.ncsu.csc.itrust.validate.HospitalBeanValidator", "shortclassname":"HospitalBeanValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic HospitalBeanValidator() {\r\n}"},
 {"id":4700, "methodname":"validate(edu.ncsu.csc.itrust.beans.HospitalBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.HospitalBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.HospitalBeanValidator.validate(edu.ncsu.csc.itrust.beans.HospitalBean)", "classid":666, "classname":"edu.ncsu.csc.itrust.validate.HospitalBeanValidator", "shortclassname":"HospitalBeanValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(HospitalBean h) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", h.getHospitalID(), ValidationFormat.HOSPITAL_ID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Hospital Name\", h.getHospitalName(), ValidationFormat.HOSPITAL_NAME, false));\r\n    if (!(h.getHospitalAddress().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital Address\", h.getHospitalAddress(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(h.getHospitalCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital City\", h.getHospitalCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(h.getHospitalState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital State\", h.getHospitalState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(h.getHospitalZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital Zip\", h.getHospitalZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (errorList.hasErrors()) {\r\n        throw new FormValidationException(errorList);\r\n    }\r\n}"},
 {"id":4701, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.LOINCBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.LOINCBeanValidator.-init-()", "classid":667, "classname":"edu.ncsu.csc.itrust.validate.LOINCBeanValidator", "shortclassname":"LOINCBeanValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic LOINCBeanValidator() {\r\n}"},
 {"id":4702, "methodname":"validate(edu.ncsu.csc.itrust.beans.LOINCbean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.LOINCBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.LOINCBeanValidator.validate(edu.ncsu.csc.itrust.beans.LOINCbean)", "classid":667, "classname":"edu.ncsu.csc.itrust.validate.LOINCBeanValidator", "shortclassname":"LOINCBeanValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(LOINCbean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((((m.getLabProcedureCode()) == null) || ((m.getComponent()) == null)) || ((m.getKindOfProperty()) == null)) {\r\n        throw new FormValidationException(\"You must have a Lab Procedure Code, Component and Kind Of Property\");\r\n    }\r\n    errorList.addIfNotNull(checkFormat(\"LaboratoryProcedureCode\", m.getLabProcedureCode(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Component\", m.getComponent(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"KindOfProperty\", m.getKindOfProperty(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"TimeAspect\", m.getTimeAspect(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"System\", m.getSystem(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"ScaleType\", m.getScaleType(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"MethodType\", m.getMethodType(), ValidationFormat.LOINC_ITEM, true));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4703, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.LabProcedureValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.LabProcedureValidator.-init-()", "classid":668, "classname":"edu.ncsu.csc.itrust.validate.LabProcedureValidator", "shortclassname":"LabProcedureValidator", "method":"LabProcedureValidator() {\r\n}"},
 {"id":4704, "methodname":"validate(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.LabProcedureValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.LabProcedureValidator.validate(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "classid":668, "classname":"edu.ncsu.csc.itrust.validate.LabProcedureValidator", "shortclassname":"LabProcedureValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\npublic void validate(LabProcedureBean b) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"LOINC\", b.getLoinc(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Commentary\", b.getCommentary(), ValidationFormat.LABPROCEDURE_COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Results\", b.getResults(), ValidationFormat.LABPROCEDURE_COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Status\", b.getStatus(), ValidationFormat.LAB_STATUS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Rights\", b.getRights(), ValidationFormat.LAB_RIGHTS, false));\r\n    if (((b.getNumericalResult()) != null) && ((b.getNumericalResult().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Numerical Result\", b.getNumericalResult(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Numerical Result\", b.getNumericalResult(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (((b.getUpperBound()) != null) && ((b.getUpperBound().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Upper Bound\", b.getUpperBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Upper Bound\", b.getUpperBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (((b.getLowerBound()) != null) && ((b.getLowerBound().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Lower Bound\", b.getLowerBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Lower Bound\", b.getLowerBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4705, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.MailValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.MailValidator.-init-()", "classid":669, "classname":"edu.ncsu.csc.itrust.validate.MailValidator", "shortclassname":"MailValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic MailValidator() {\r\n}"},
 {"id":4706, "methodname":"validateEmail(java.lang.String)", "methodnamerefined":"validateEmail", "methodabbreviation":"edu.ncsu.csc.itrust.validate.MailValidator.validateEmail", "fullmethod":"edu.ncsu.csc.itrust.validate.MailValidator.validateEmail(java.lang.String)", "classid":669, "classname":"edu.ncsu.csc.itrust.validate.MailValidator", "shortclassname":"MailValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\npublic boolean validateEmail(String email) throws FormValidationException {\r\n    MailValidator val = new MailValidator();\r\n    return val.isValid(email);\r\n}"},
 {"id":4707, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.MedicationBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.MedicationBeanValidator.-init-()", "classid":670, "classname":"edu.ncsu.csc.itrust.validate.MedicationBeanValidator", "shortclassname":"MedicationBeanValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic MedicationBeanValidator() {\r\n}"},
 {"id":4708, "methodname":"validate(edu.ncsu.csc.itrust.beans.MedicationBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.MedicationBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.MedicationBeanValidator.validate(edu.ncsu.csc.itrust.beans.MedicationBean)", "classid":670, "classname":"edu.ncsu.csc.itrust.validate.MedicationBeanValidator", "shortclassname":"MedicationBeanValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(MedicationBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"ND Code\", m.getNDCode(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", m.getDescription(), ValidationFormat.ND_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4709, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.MessageValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.MessageValidator.-init-()", "classid":671, "classname":"edu.ncsu.csc.itrust.validate.MessageValidator", "shortclassname":"MessageValidator", "method":"public MessageValidator() {\r\n}"},
 {"id":4710, "methodname":"validate(edu.ncsu.csc.itrust.beans.MessageBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.MessageValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.MessageValidator.validate(edu.ncsu.csc.itrust.beans.MessageBean)", "classid":671, "classname":"edu.ncsu.csc.itrust.validate.MessageValidator", "shortclassname":"MessageValidator", "method":"@Override\r\npublic void validate(MessageBean mBean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"body\", mBean.getBody(), ValidationFormat.MESSAGES_BODY, false));\r\n    errorList.addIfNotNull(checkFormat(\"subject\", mBean.getSubject(), ValidationFormat.MESSAGES_SUBJECT, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4711, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator.-init-()", "classid":672, "classname":"edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator", "shortclassname":"OverrideReasonBeanValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic OverrideReasonBeanValidator() {\r\n}"},
 {"id":4712, "methodname":"validate(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator.validate(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "classid":672, "classname":"edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator", "shortclassname":"OverrideReasonBeanValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(OverrideReasonBean orc) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Reason Code\", orc.getORCode(), ValidationFormat.ORC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", orc.getDescription(), ValidationFormat.OR_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4713, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator.-init-()", "classid":673, "classname":"edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator", "shortclassname":"PatientInstructionsBeanValidator", "method":"PatientInstructionsBeanValidator() {\r\n}"},
 {"id":4714, "methodname":"validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator.validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "classid":673, "classname":"edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator", "shortclassname":"PatientInstructionsBeanValidator", "method":"/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)\n */\r\n@Override\r\npublic void validate(PatientInstructionsBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Name\", bean.getName(), ValidationFormat.PATIENT_INSTRUCTIONS_NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Comments\", bean.getComment(), ValidationFormat.PATIENT_INSTRUCTIONS_COMMENTS, false));\r\n    // The following checks URL length.\r\n    errorList.addIfNotNull(checkFormat(\"URL\", bean.getUrl(), ValidationFormat.PATIENT_INSTRUCTIONS_URL, false));\r\n    // The following checks URL format.\r\n    UrlValidator urlValidator = new UrlValidator();\r\n    if (!(urlValidator.isValid(bean.getUrl()))) {\r\n        errorList.addIfNotNull(\"URL: A valid URL is required.\");\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4715, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.PatientValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.PatientValidator.-init-()", "classid":674, "classname":"edu.ncsu.csc.itrust.validate.PatientValidator", "shortclassname":"PatientValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic PatientValidator() {\r\n}"},
 {"id":4716, "methodname":"validate(edu.ncsu.csc.itrust.beans.PatientBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.PatientValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.PatientValidator.validate(edu.ncsu.csc.itrust.beans.PatientBean)", "classid":674, "classname":"edu.ncsu.csc.itrust.validate.PatientValidator", "shortclassname":"PatientValidator", "method":"@Override\r\npublic void validate(PatientBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    // First name, last name, and email are all required\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (!(p.getDateOfBirthStr().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Date of Birth\", p.getDateOfBirthStr(), ValidationFormat.DATE, false));\r\n    }\r\n    if (!(p.getDateOfDeathStr().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Date of Death\", p.getDateOfDeathStr(), ValidationFormat.DATE, true));\r\n    }\r\n    try {\r\n        if ((\"\".equals(p.getDateOfDeathStr())) || ((p.getDateOfDeath()) == null)) {\r\n            if (!(p.getCauseOfDeath().equals(\"\"))) {\r\n                errorList.addIfNotNull(\"Cause of Death cannot be specified without Date of Death!\");\r\n            }\r\n        } else {\r\n            if (p.getDateOfDeath().before(p.getDateOfBirth()))\r\n                errorList.addIfNotNull(\"Death date cannot be before birth date!\");\r\n\r\n            if (p.getDateOfDeath().after(new Date())) {\r\n                errorList.addIfNotNull(\"Death date cannot be in the future!\");\r\n            }\r\n        }\r\n        if (p.getDateOfBirth().after(new Date())) {\r\n            errorList.addIfNotNull(\"Birth date cannot be in the future!\");\r\n        }\r\n    } catch (NullPointerException e) {\r\n        // ignore this\r\n    }\r\n    if (!(p.getCauseOfDeath().isEmpty())) {\r\n        boolean deathCauseNull = (null == (p.getDateOfDeathStr())) || (p.getDateOfDeathStr().equals(\"\"));\r\n        errorList.addIfNotNull(checkFormat(\"Cause of Death\", p.getCauseOfDeath(), ValidationFormat.ICD9CM, deathCauseNull));\r\n    }\r\n    if (!(p.getStreetAddress1().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(p.getStreetAddress2().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    }\r\n    if (!(p.getCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(p.getState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(p.getZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (!(p.getPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getEmergencyName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Emergency Contact Name\", p.getEmergencyName(), ValidationFormat.NAME, false));\r\n    }\r\n    if (!(p.getEmergencyPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Emergency Contact Phone\", p.getEmergencyPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getIcName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Name\", p.getIcName(), ValidationFormat.NAME, false));\r\n    }\r\n    if (!(p.getIcAddress1().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Address 1\", p.getIcAddress1(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(p.getIcAddress2().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Address 2\", p.getIcAddress2(), ValidationFormat.ADDRESS, true));\r\n    }\r\n    if (!(p.getIcCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company City\", p.getIcCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(p.getIcState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company State\", p.getIcState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(p.getIcZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Zip\", p.getIcZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (!(p.getIcPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Phone\", p.getIcPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getIcID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company ID\", p.getIcID(), ValidationFormat.INSURANCE_ID, false));\r\n    }\r\n    if (!(p.getMotherMID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Mother MID\", p.getMotherMID(), ValidationFormat.NPMID, true));\r\n    }\r\n    if (!(p.getFatherMID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Father MID\", p.getFatherMID(), ValidationFormat.NPMID, true));\r\n    }\r\n    if (!(p.getTopicalNotes().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Topical Notes\", p.getTopicalNotes(), ValidationFormat.NOTES, true));\r\n    }\r\n    /* This block was added for Theme 5 by Tyler Arehart */\r\n    if (!(p.getCreditCardNumber().isEmpty())) {\r\n        if (!((p.getCreditCardNumber().equals(\"\")) && (p.getCreditCardType().equals(\"\")))) {\r\n            String s = null;\r\n            CreditCardValidator c;\r\n            int type = -1;\r\n            if (p.getCreditCardType().equals(\"VISA\"))\r\n                type = CreditCardValidator.VISA;\r\n\r\n            if (p.getCreditCardType().equals(\"MASTERCARD\"))\r\n                type = CreditCardValidator.MASTERCARD;\r\n\r\n            if (p.getCreditCardType().equals(\"DISCOVER\"))\r\n                type = CreditCardValidator.DISCOVER;\r\n\r\n            if (p.getCreditCardType().equals(\"AMEX\"))\r\n                type = CreditCardValidator.AMEX;\r\n\r\n            if (type != (-1)) {\r\n                c = new CreditCardValidator(type);\r\n                if (!(c.isValid(p.getCreditCardNumber()))) {\r\n                    s = \"Credit Card Number\";\r\n                }\r\n            } else {\r\n                s = \"Credit Card Type\";\r\n            }\r\n            errorList.addIfNotNull(s);\r\n        }\r\n    }\r\n    if (!(p.getDirectionsToHome().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Directions to Home\", p.getDirectionsToHome(), ValidationFormat.COMMENTS, true));\r\n    }\r\n    if (!(p.getReligion().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Religion\", p.getReligion(), ValidationFormat.NAME, true));\r\n    }\r\n    if (!(p.getLanguage().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Language\", p.getLanguage(), ValidationFormat.NAME, true));\r\n    }\r\n    if (!(p.getSpiritualPractices().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Spiritual Practices\", p.getSpiritualPractices(), ValidationFormat.COMMENTS, true));\r\n    }\r\n    if (!(p.getAlternateName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Alternate Name\", p.getAlternateName(), ValidationFormat.NAME, true));\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4717, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.PersonnelValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.PersonnelValidator.-init-()", "classid":675, "classname":"edu.ncsu.csc.itrust.validate.PersonnelValidator", "shortclassname":"PersonnelValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic PersonnelValidator() {\r\n}"},
 {"id":4718, "methodname":"validate(edu.ncsu.csc.itrust.beans.PersonnelBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.PersonnelValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.PersonnelValidator.validate(edu.ncsu.csc.itrust.beans.PersonnelBean)", "classid":675, "classname":"edu.ncsu.csc.itrust.validate.PersonnelValidator", "shortclassname":"PersonnelValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PersonnelBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, true));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4719, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ProcedureBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.ProcedureBeanValidator.-init-()", "classid":676, "classname":"edu.ncsu.csc.itrust.validate.ProcedureBeanValidator", "shortclassname":"ProcedureBeanValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic ProcedureBeanValidator() {\r\n}"},
 {"id":4720, "methodname":"validate(edu.ncsu.csc.itrust.beans.ProcedureBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ProcedureBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.ProcedureBeanValidator.validate(edu.ncsu.csc.itrust.beans.ProcedureBean)", "classid":676, "classname":"edu.ncsu.csc.itrust.validate.ProcedureBeanValidator", "shortclassname":"ProcedureBeanValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(ProcedureBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"CPT Code\", p.getCPTCode(), ValidationFormat.CPT, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", p.getDescription(), ValidationFormat.CPT_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4721, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ReferralBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.ReferralBeanValidator.-init-()", "classid":677, "classname":"edu.ncsu.csc.itrust.validate.ReferralBeanValidator", "shortclassname":"ReferralBeanValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic ReferralBeanValidator() {\r\n}"},
 {"id":4722, "methodname":"validate(edu.ncsu.csc.itrust.beans.ReferralBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ReferralBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.ReferralBeanValidator.validate(edu.ncsu.csc.itrust.beans.ReferralBean)", "classid":677, "classname":"edu.ncsu.csc.itrust.validate.ReferralBeanValidator", "shortclassname":"ReferralBeanValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(ReferralBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Notes\", p.getReferralDetails(), ValidationFormat.REFERRAL_NOTES, false));\r\n    errorList.addIfNotNull(checkFormat(\"Priority\", Integer.toString(p.getPriority()), ValidationFormat.PRIORITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", p.getPatientID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Receiver ID\", p.getReceiverID(), ValidationFormat.MID, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4723, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator.-init-()", "classid":678, "classname":"edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator", "shortclassname":"RemoteMonitoringDataBeanValidator", "method":"/**\r\n * The default constructor.\r\n */\r\npublic RemoteMonitoringDataBeanValidator() {\r\n}"},
 {"id":4724, "methodname":"validate(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator.validate(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)", "classid":678, "classname":"edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator", "shortclassname":"RemoteMonitoringDataBeanValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(RemoteMonitoringDataBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    // Skip validation if values were not submitted (0 or -1)\r\n    if (!(((m.getSystolicBloodPressure()) == 0) || ((m.getSystolicBloodPressure()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Systolic Blood Pressure\", (\"\" + (m.getSystolicBloodPressure())), ValidationFormat.SYSTOLIC_BLOOD_PRESSURE, true));\r\n\r\n    if (!(((m.getDiastolicBloodPressure()) == 0) || ((m.getDiastolicBloodPressure()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Diastolic Blood Pressure\", (\"\" + (m.getDiastolicBloodPressure())), ValidationFormat.DIASTOLIC_BLOOD_PRESSURE, true));\r\n\r\n    if (!(((m.getGlucoseLevel()) == 0) || ((m.getGlucoseLevel()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Glucose Level\", (\"\" + (m.getGlucoseLevel())), ValidationFormat.GLUCOSE_LEVEL, true));\r\n\r\n    if (!(((m.getPedometerReading()) == 0) || ((m.getPedometerReading()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Pedometer Reading\", (\"\" + (m.getPedometerReading())), ValidationFormat.PEDOMETER_READING, true));\r\n\r\n    if (!(((m.getHeight()) == 0) || ((m.getHeight()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Height\", (\"\" + (m.getHeight())), ValidationFormat.HEIGHT, true));\r\n\r\n    if (!(((m.getWeight()) == 0) || ((m.getWeight()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Weight\", (\"\" + (m.getWeight())), ValidationFormat.WEIGHT, true));\r\n\r\n    if (errorList.hasErrors()) {\r\n        throw new FormValidationException(errorList);\r\n    }\r\n}"},
 {"id":4725, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.SecurityQAValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.SecurityQAValidator.-init-()", "classid":679, "classname":"edu.ncsu.csc.itrust.validate.SecurityQAValidator", "shortclassname":"SecurityQAValidator", "method":"SecurityQAValidator() {\r\n}"},
 {"id":4726, "methodname":"validate(edu.ncsu.csc.itrust.beans.SecurityQA)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.SecurityQAValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.SecurityQAValidator.validate(edu.ncsu.csc.itrust.beans.SecurityQA)", "classid":679, "classname":"edu.ncsu.csc.itrust.validate.SecurityQAValidator", "shortclassname":"SecurityQAValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(SecurityQA bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if (null == bean)\r\n        throw new FormValidationException(\"Null form\");\r\n\r\n    if (null == (bean.getConfirmAnswer()))\r\n        throw new FormValidationException(\"Confirm answer cannot be empty\");\r\n\r\n    if (!(bean.getAnswer().equals(bean.getConfirmAnswer())))\r\n        throw new FormValidationException(\"Security answers do not match\");\r\n\r\n    errorList.addIfNotNull(checkFormat(\"Security Question\", bean.getQuestion(), ValidationFormat.QUESTION, false));\r\n    errorList.addIfNotNull(checkFormat(\"Security Answer\", bean.getAnswer(), ValidationFormat.ANSWER, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4727, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.SurveySearchValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.SurveySearchValidator.-init-()", "classid":680, "classname":"edu.ncsu.csc.itrust.validate.SurveySearchValidator", "shortclassname":"SurveySearchValidator", "method":"SurveySearchValidator() {\r\n}"},
 {"id":4728, "methodname":"validate(edu.ncsu.csc.itrust.beans.SurveyResultBean)", "methodnamerefined":"validate", "methodabbreviation":"edu.ncsu.csc.itrust.validate.SurveySearchValidator.validate", "fullmethod":"edu.ncsu.csc.itrust.validate.SurveySearchValidator.validate(edu.ncsu.csc.itrust.beans.SurveyResultBean)", "classid":680, "classname":"edu.ncsu.csc.itrust.validate.SurveySearchValidator", "shortclassname":"SurveySearchValidator", "method":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(SurveyResultBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", bean.getHCPzip(), ValidationFormat.ZIPCODE, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":4729, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.TestMailValidator.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.TestMailValidator.-init-()", "classid":681, "classname":"edu.ncsu.csc.itrust.validate.TestMailValidator", "shortclassname":"TestMailValidator", "method":"TestMailValidator() {\r\n}"},
 {"id":4730, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.validate.TestMailValidator.setUp", "fullmethod":"edu.ncsu.csc.itrust.validate.TestMailValidator.setUp()", "classid":681, "classname":"edu.ncsu.csc.itrust.validate.TestMailValidator", "shortclassname":"TestMailValidator", "method":"@Override\r\npublic void setUp() throws Exception {\r\n}"},
 {"id":4731, "methodname":"tearDown()", "methodnamerefined":"tearDown", "methodabbreviation":"edu.ncsu.csc.itrust.validate.TestMailValidator.tearDown", "fullmethod":"edu.ncsu.csc.itrust.validate.TestMailValidator.tearDown()", "classid":681, "classname":"edu.ncsu.csc.itrust.validate.TestMailValidator", "shortclassname":"TestMailValidator", "method":"@Override\r\npublic void tearDown() throws Exception {\r\n}"},
 {"id":4732, "methodname":"testValidateEmail()", "methodnamerefined":"testValidateEmail", "methodabbreviation":"edu.ncsu.csc.itrust.validate.TestMailValidator.testValidateEmail", "fullmethod":"edu.ncsu.csc.itrust.validate.TestMailValidator.testValidateEmail()", "classid":681, "classname":"edu.ncsu.csc.itrust.validate.TestMailValidator", "shortclassname":"TestMailValidator", "method":"public void testValidateEmail() throws Exception {\r\n    String value = \"google@google.com\";\r\n    assertEquals(true, val.validateEmail(value));\r\n    String value2 = \"google   google\";\r\n    assertEquals(false, val.validateEmail(value2));\r\n    String value3 = \"google?google.com\";\r\n    assertEquals(false, val.validateEmail(value3));\r\n    String value4 = \"googlegooglegooglegoogle@google.com\";\r\n    assertEquals(true, val.validateEmail(value4));\r\n}"},
 {"id":4733, "methodname":"-init-(java.lang.String,java.lang.String)", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ValidationFormat.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.ValidationFormat.-init-(java.lang.String,java.lang.String)", "classid":682, "classname":"edu.ncsu.csc.itrust.validate.ValidationFormat", "shortclassname":"ValidationFormat", "method":"ValidationFormat(String regex, String errorMessage) {\r\n    this.regex = Pattern.compile(regex);\r\n    this.description = errorMessage;\r\n}"},
 {"id":4734, "methodname":"getDescription()", "methodnamerefined":"getDescription", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ValidationFormat.getDescription", "fullmethod":"edu.ncsu.csc.itrust.validate.ValidationFormat.getDescription()", "classid":682, "classname":"edu.ncsu.csc.itrust.validate.ValidationFormat", "shortclassname":"ValidationFormat", "method":"public String getDescription() {\r\n    return description;\r\n}"},
 {"id":4735, "methodname":"getRegex()", "methodnamerefined":"getRegex", "methodabbreviation":"edu.ncsu.csc.itrust.validate.ValidationFormat.getRegex", "fullmethod":"edu.ncsu.csc.itrust.validate.ValidationFormat.getRegex()", "classid":682, "classname":"edu.ncsu.csc.itrust.validate.ValidationFormat", "shortclassname":"ValidationFormat", "method":"public Pattern getRegex() {\r\n    return regex;\r\n}"},
 {"id":4736, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.AddPatientValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.AddPatientValidatorTest.-init-()", "classid":683, "classname":"edu.ncsu.csc.itrust.validate.bean.AddPatientValidatorTest", "shortclassname":"AddPatientValidatorTest", "method":"AddPatientValidatorTest() {\r\n}"},
 {"id":4737, "methodname":"testPatientAllCorrect()", "methodnamerefined":"testPatientAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.AddPatientValidatorTest.testPatientAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.AddPatientValidatorTest.testPatientAllCorrect()", "classid":683, "classname":"edu.ncsu.csc.itrust.validate.bean.AddPatientValidatorTest", "shortclassname":"AddPatientValidatorTest", "method":"/* protected void tearDown()\n{\ntry\n{\n(new TestDataGenerator()).clearAllTables();\n}\ncatch (Exception e)\n{\nSystem.err.println(\"ERROR: Couldnt clear tables. Everything else will fail\");\n}\n}\n */\r\npublic void testPatientAllCorrect() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Persona\");\r\n    p.setLastName(\"LastName\");\r\n    p.setEmail(\"andy.programmer@gmail.com\");\r\n    new AddPatientValidator().validate(p);\r\n}"},
 {"id":4738, "methodname":"testPatientAllErrors()", "methodnamerefined":"testPatientAllErrors", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.AddPatientValidatorTest.testPatientAllErrors", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.AddPatientValidatorTest.testPatientAllErrors()", "classid":683, "classname":"edu.ncsu.csc.itrust.validate.bean.AddPatientValidatorTest", "shortclassname":"AddPatientValidatorTest", "method":"public void testPatientAllErrors() throws Exception {\r\n    MailValidator val = new MailValidator();\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Person5\");\r\n    p.setLastName(\"LastName5\");\r\n    p.setEmail(\"andy.programmer?gmail.com\");\r\n    try {\r\n        new AddPatientValidator().validate(p);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"First name: \" + (ValidationFormat.NAME.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Last name: \" + (ValidationFormat.NAME.getDescription())), e.getErrorList().get(1));\r\n        assertEquals(false, val.validateEmail(\"andy.programmer?gmail.com\"));\r\n        assertEquals(\"number of errors\", 3, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4739, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.AddPersonnelValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.AddPersonnelValidatorTest.-init-()", "classid":684, "classname":"edu.ncsu.csc.itrust.validate.bean.AddPersonnelValidatorTest", "shortclassname":"AddPersonnelValidatorTest", "method":"AddPersonnelValidatorTest() {\r\n}"},
 {"id":4740, "methodname":"testPatientAllCorrect()", "methodnamerefined":"testPatientAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.AddPersonnelValidatorTest.testPatientAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.AddPersonnelValidatorTest.testPatientAllCorrect()", "classid":684, "classname":"edu.ncsu.csc.itrust.validate.bean.AddPersonnelValidatorTest", "shortclassname":"AddPersonnelValidatorTest", "method":"public void testPatientAllCorrect() throws Exception {\r\n    PersonnelBean p = new PersonnelBean();\r\n    p.setFirstName(\"Persona\");\r\n    p.setLastName(\"LastName\");\r\n    p.setEmail(\"andy.programmer@gmail.com\");\r\n    new AddPersonnelValidator().validate(p);\r\n}"},
 {"id":4741, "methodname":"testPatientAllErrors()", "methodnamerefined":"testPatientAllErrors", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.AddPersonnelValidatorTest.testPatientAllErrors", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.AddPersonnelValidatorTest.testPatientAllErrors()", "classid":684, "classname":"edu.ncsu.csc.itrust.validate.bean.AddPersonnelValidatorTest", "shortclassname":"AddPersonnelValidatorTest", "method":"public void testPatientAllErrors() throws Exception {\r\n    MailValidator val = new MailValidator();\r\n    PersonnelBean p = new PersonnelBean();\r\n    p.setFirstName(\"Person5\");\r\n    p.setLastName(\"LastName5\");\r\n    p.setEmail(\"andy.programmer?gmail.com\");\r\n    try {\r\n        new AddPersonnelValidator().validate(p);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"First name: \" + (ValidationFormat.NAME.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Last name: \" + (ValidationFormat.NAME.getDescription())), e.getErrorList().get(1));\r\n        assertEquals(false, val.validateEmail(\"andy.programmer?gmail.com\"));\r\n        assertEquals(\"number of errors\", 3, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4742, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.AllergyBeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.AllergyBeanValidatorTest.-init-()", "classid":685, "classname":"edu.ncsu.csc.itrust.validate.bean.AllergyBeanValidatorTest", "shortclassname":"AllergyBeanValidatorTest", "method":"AllergyBeanValidatorTest() {\r\n}"},
 {"id":4743, "methodname":"testCorrectFormat()", "methodnamerefined":"testCorrectFormat", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.AllergyBeanValidatorTest.testCorrectFormat", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.AllergyBeanValidatorTest.testCorrectFormat()", "classid":685, "classname":"edu.ncsu.csc.itrust.validate.bean.AllergyBeanValidatorTest", "shortclassname":"AllergyBeanValidatorTest", "method":"public void testCorrectFormat() throws Exception {\r\n    AllergyBean ab = new AllergyBean();\r\n    ab.setDescription(\"Correct format\");\r\n    new AllergyBeanValidator().validate(ab);\r\n}"},
 {"id":4744, "methodname":"testWrongFormat()", "methodnamerefined":"testWrongFormat", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.AllergyBeanValidatorTest.testWrongFormat", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.AllergyBeanValidatorTest.testWrongFormat()", "classid":685, "classname":"edu.ncsu.csc.itrust.validate.bean.AllergyBeanValidatorTest", "shortclassname":"AllergyBeanValidatorTest", "method":"public void testWrongFormat() throws Exception {\r\n    AllergyBean ab = new AllergyBean();\r\n    ab.setDescription(\">\");\r\n    try {\r\n        new AllergyBeanValidator().validate(ab);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals((\"Allergy Description: \" + (ValidationFormat.ALLERGY_DESCRIPTION.getDescription())), e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":4745, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest.-init-()", "classid":686, "classname":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest", "shortclassname":"DiagnosisBeanValidatorTest", "method":"DiagnosisBeanValidatorTest() {\r\n}"},
 {"id":4746, "methodname":"testAllCorrect()", "methodnamerefined":"testAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest.testAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest.testAllCorrect()", "classid":686, "classname":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest", "shortclassname":"DiagnosisBeanValidatorTest", "method":"public void testAllCorrect() throws Exception {\r\n    DiagnosisBean d = new DiagnosisBean();\r\n    d.setDescription(\"A description\");\r\n    d.setICDCode(\"8.84\");\r\n    d.setOvDiagnosisID(0L);\r\n    validator.validate(d);\r\n}"},
 {"id":4747, "methodname":"testDiagnosisNoICDCode()", "methodnamerefined":"testDiagnosisNoICDCode", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest.testDiagnosisNoICDCode", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest.testDiagnosisNoICDCode()", "classid":686, "classname":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest", "shortclassname":"DiagnosisBeanValidatorTest", "method":"public void testDiagnosisNoICDCode() throws Exception {\r\n    DiagnosisBean d = new DiagnosisBean();\r\n    d.setDescription(\"Good description\");\r\n    try {\r\n        validator.validate(d);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"ICD9CM Code: \" + (ValidationFormat.ICD9CM.getDescription())), e.getErrorList().get(0));\r\n        assertEquals(\"number of errors\", 1, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4748, "methodname":"testPatientAllErrors()", "methodnamerefined":"testPatientAllErrors", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest.testPatientAllErrors", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest.testPatientAllErrors()", "classid":686, "classname":"edu.ncsu.csc.itrust.validate.bean.DiagnosisBeanValidatorTest", "shortclassname":"DiagnosisBeanValidatorTest", "method":"public void testPatientAllErrors() throws Exception {\r\n    DiagnosisBean d = new DiagnosisBean();\r\n    d.setDescription(\"An description!\");\r\n    d.setICDCode(\"8000.84\");\r\n    try {\r\n        validator.validate(d);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"ICD9CM Code: \" + (ValidationFormat.ICD9CM.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Description: \" + (ValidationFormat.ICD_CODE_DESCRIPTION.getDescription())), e.getErrorList().get(1));\r\n        assertEquals(\"number of errors\", 2, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4749, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.EditOfficeVisitValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.EditOfficeVisitValidatorTest.-init-()", "classid":687, "classname":"edu.ncsu.csc.itrust.validate.bean.EditOfficeVisitValidatorTest", "shortclassname":"EditOfficeVisitValidatorTest", "method":"EditOfficeVisitValidatorTest() {\r\n}"},
 {"id":4750, "methodname":"testEditOfficeVisitAllCorrect()", "methodnamerefined":"testEditOfficeVisitAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.EditOfficeVisitValidatorTest.testEditOfficeVisitAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.EditOfficeVisitValidatorTest.testEditOfficeVisitAllCorrect()", "classid":687, "classname":"edu.ncsu.csc.itrust.validate.bean.EditOfficeVisitValidatorTest", "shortclassname":"EditOfficeVisitValidatorTest", "method":"public void testEditOfficeVisitAllCorrect() throws Exception {\r\n    EditOfficeVisitForm form = new EditOfficeVisitForm();\r\n    form.setHcpID(\"99\");\r\n    form.setHospitalID(\"9840\");\r\n    form.setNotes(\"\");\r\n    form.setPatientID(\"309\");\r\n    form.setVisitDate(\"09/09/1982\");\r\n    /* form.setStartDate(\"09/09/1982\");\n    form.setEndDate(\"09/09/1982\");\n    form.setInstructions(\"New instructions\");\n    form.setDosage(\"5\");\n    form.setAddDiagID(null);// Can always be null - optional, validated in the Action class\n    form.setAddMedID(null);\n    form.setAddProcID(null);\n    form.setRemoveDiagID(null);\n    form.setRemoveMedID(null);\n    form.setRemoveProcID(null);\n     */\r\n    new EditOfficeVisitValidator().validate(form);\r\n}"},
 {"id":4751, "methodname":"testPatientAllErrors()", "methodnamerefined":"testPatientAllErrors", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.EditOfficeVisitValidatorTest.testPatientAllErrors", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.EditOfficeVisitValidatorTest.testPatientAllErrors()", "classid":687, "classname":"edu.ncsu.csc.itrust.validate.bean.EditOfficeVisitValidatorTest", "shortclassname":"EditOfficeVisitValidatorTest", "method":"/**\r\n * test errors made on patients\r\n *\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void testPatientAllErrors() throws Exception {\r\n    EditOfficeVisitForm form = new EditOfficeVisitForm();\r\n    form.setHcpID(\"99L\");\r\n    form.setHospitalID(\"-9840\");\r\n    form.setNotes(\"Some fun notes**\");\r\n    form.setPatientID(\"a309\");\r\n    form.setVisitDate(\"09.09.1982\");\r\n    /* form.setStartDate(\"09/09/1982a\");\n    form.setEndDate(\"09/09/1982 \");\n    form.setInstructions(\"New instructions_)#_$@_\");\n    form.setDosage(\"5a\");\n     */\r\n    try {\r\n        new EditOfficeVisitValidator().validate(form);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"HCP ID: \" + (ValidationFormat.MID.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Hospital ID: \" + (ValidationFormat.HOSPITAL_ID.getDescription())), e.getErrorList().get(1));\r\n        assertEquals((\"Notes: \" + (ValidationFormat.NOTES.getDescription())), e.getErrorList().get(2));\r\n        assertEquals((\"Patient ID: \" + (ValidationFormat.MID.getDescription())), e.getErrorList().get(3));\r\n        assertEquals((\"Visit Date: \" + (ValidationFormat.DATE.getDescription())), e.getErrorList().get(4));\r\n        // assertEquals(\"Start Date: \" + ValidationFormat.DATE.getDescription(), e.getErrorList().get(5));\r\n        // assertEquals(\"End Date: \" + ValidationFormat.DATE.getDescription(), e.getErrorList().get(6));\r\n        // assertEquals(\"Instructions: \" + ValidationFormat.NOTES.getDescription(), e.getErrorList().get(7));\r\n        // assertEquals(\"Dosage must be an integer in [0,9999]\", e.getErrorList().get(8));\r\n        assertEquals(\"number of errors\", 5, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4752, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.-init-()", "classid":688, "classname":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest", "shortclassname":"HealthRecordBeanValidatorTest", "method":"HealthRecordBeanValidatorTest() {\r\n}"},
 {"id":4753, "methodname":"testAllCorrect()", "methodnamerefined":"testAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testAllCorrect()", "classid":688, "classname":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest", "shortclassname":"HealthRecordBeanValidatorTest", "method":"public void testAllCorrect() throws Exception {\r\n    HealthRecordForm hr = new HealthRecordForm();\r\n    hr.setBloodPressureN(\"999\");\r\n    hr.setBloodPressureD(\"999\");\r\n    hr.setCholesterolHDL(\"89\");\r\n    hr.setCholesterolLDL(\"100\");\r\n    hr.setCholesterolTri(\"100\");\r\n    hr.setHeight(\"657.2\");\r\n    hr.setWeight(\"999.9\");\r\n    hr.setIsSmoker(\"1\");\r\n    validator.validate(hr);\r\n}"},
 {"id":4754, "methodname":"testJustAboveBoundaries()", "methodnamerefined":"testJustAboveBoundaries", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testJustAboveBoundaries", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testJustAboveBoundaries()", "classid":688, "classname":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest", "shortclassname":"HealthRecordBeanValidatorTest", "method":"public void testJustAboveBoundaries() throws Exception {\r\n    try {\r\n        HealthRecordForm hr = new HealthRecordForm();\r\n        hr.setBloodPressureN(\"1000\");\r\n        hr.setBloodPressureD(\"1000\");\r\n        hr.setCholesterolHDL(\"90\");\r\n        hr.setCholesterolLDL(\"601\");\r\n        hr.setCholesterolTri(\"601\");\r\n        hr.setHeight(\"99.01\");\r\n        hr.setWeight(\"9999.01\");\r\n        hr.setIsSmoker(\"Tru\");\r\n        validator.validate(hr);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"Systolic blood pressure must be an integer in [0,999]\", e.getErrorList().get(0));\r\n        assertEquals(\"Diastolic blood pressure must be an integer in [0,999]\", e.getErrorList().get(1));\r\n        assertEquals(\"Cholesterol HDL must be an integer in [0,89]\", e.getErrorList().get(2));\r\n        assertEquals(\"Cholesterol LDL must be an integer in [0,600]\", e.getErrorList().get(3));\r\n        assertEquals(\"Cholesterol Triglycerides must be an integer in [100,600]\", e.getErrorList().get(4));\r\n        assertEquals(\"Height: Up to 3-digit number + up to 1 decimal place\", e.getErrorList().get(5));\r\n        assertEquals(\"Weight: Up to 4-digit number + up to 1 decimal place\", e.getErrorList().get(6));\r\n        assertEquals(\"Smoker must be an integer in [0,10]\", e.getErrorList().get(7));\r\n        assertEquals(8, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4755, "methodname":"testNotNumbers()", "methodnamerefined":"testNotNumbers", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testNotNumbers", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testNotNumbers()", "classid":688, "classname":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest", "shortclassname":"HealthRecordBeanValidatorTest", "method":"public void testNotNumbers() throws Exception {\r\n    try {\r\n        HealthRecordForm hr = new HealthRecordForm();\r\n        hr.setBloodPressureN(\"a\");\r\n        hr.setBloodPressureD(null);\r\n        hr.setCholesterolHDL(\"--1\");\r\n        hr.setCholesterolLDL(\"\");\r\n        hr.setCholesterolTri(\"5!\");\r\n        hr.setHeight(\"69-\");\r\n        hr.setWeight(\"-98\");\r\n        hr.setIsSmoker(\"flse\");\r\n        validator.validate(hr);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"Systolic blood pressure must be an integer in [0,999]\", e.getErrorList().get(0));\r\n        assertEquals(\"Diastolic blood pressure must be an integer in [0,999]\", e.getErrorList().get(1));\r\n        assertEquals(\"Cholesterol HDL must be an integer in [0,89]\", e.getErrorList().get(2));\r\n        assertEquals(\"Cholesterol LDL must be an integer in [0,600]\", e.getErrorList().get(3));\r\n        assertEquals(\"Cholesterol Triglycerides must be an integer in [100,600]\", e.getErrorList().get(4));\r\n        assertEquals(\"Height: Up to 3-digit number + up to 1 decimal place\", e.getErrorList().get(5));\r\n        assertEquals(\"Weight: Up to 4-digit number + up to 1 decimal place\", e.getErrorList().get(6));\r\n        assertEquals(\"Smoker must be an integer in [0,10]\", e.getErrorList().get(7));\r\n        assertEquals(8, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4756, "methodname":"testZeroHeight()", "methodnamerefined":"testZeroHeight", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testZeroHeight", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testZeroHeight()", "classid":688, "classname":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest", "shortclassname":"HealthRecordBeanValidatorTest", "method":"public void testZeroHeight() {\r\n    HealthRecordForm hr = new HealthRecordForm();\r\n    hr.setBloodPressureN(\"999\");\r\n    hr.setBloodPressureD(\"999\");\r\n    hr.setCholesterolHDL(\"89\");\r\n    hr.setCholesterolLDL(\"100\");\r\n    hr.setCholesterolTri(\"100\");\r\n    hr.setHeight(\"0\");\r\n    hr.setWeight(\"100\");\r\n    hr.setIsSmoker(\"1\");\r\n    try {\r\n        validator.validate(hr);\r\n        fail(\"Should have thrown exception\");\r\n    } catch (FormValidationException e) {\r\n        // good\r\n    }\r\n}"},
 {"id":4757, "methodname":"testZeroWeight()", "methodnamerefined":"testZeroWeight", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testZeroWeight", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest.testZeroWeight()", "classid":688, "classname":"edu.ncsu.csc.itrust.validate.bean.HealthRecordBeanValidatorTest", "shortclassname":"HealthRecordBeanValidatorTest", "method":"public void testZeroWeight() {\r\n    HealthRecordForm hr = new HealthRecordForm();\r\n    hr.setBloodPressureN(\"999\");\r\n    hr.setBloodPressureD(\"999\");\r\n    hr.setCholesterolHDL(\"89\");\r\n    hr.setCholesterolLDL(\"100\");\r\n    hr.setCholesterolTri(\"100\");\r\n    hr.setHeight(\"100\");\r\n    hr.setWeight(\"0\");\r\n    hr.setIsSmoker(\"1\");\r\n    try {\r\n        validator.validate(hr);\r\n        fail(\"Should have thrown exception\");\r\n    } catch (FormValidationException e) {\r\n        // good\r\n    }\r\n}"},
 {"id":4758, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.HospitalBeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.HospitalBeanValidatorTest.-init-()", "classid":689, "classname":"edu.ncsu.csc.itrust.validate.bean.HospitalBeanValidatorTest", "shortclassname":"HospitalBeanValidatorTest", "method":"HospitalBeanValidatorTest() {\r\n}"},
 {"id":4759, "methodname":"testAllCorrect()", "methodnamerefined":"testAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.HospitalBeanValidatorTest.testAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.HospitalBeanValidatorTest.testAllCorrect()", "classid":689, "classname":"edu.ncsu.csc.itrust.validate.bean.HospitalBeanValidatorTest", "shortclassname":"HospitalBeanValidatorTest", "method":"public void testAllCorrect() throws Exception {\r\n    HospitalBean h = new HospitalBean();\r\n    h.setHospitalName(\"Sta. Marias Children Hospital\");\r\n    h.setHospitalID(\"1234567890\");\r\n    validator.validate(h);\r\n}"},
 {"id":4760, "methodname":"testHospitalAllErrors()", "methodnamerefined":"testHospitalAllErrors", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.HospitalBeanValidatorTest.testHospitalAllErrors", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.HospitalBeanValidatorTest.testHospitalAllErrors()", "classid":689, "classname":"edu.ncsu.csc.itrust.validate.bean.HospitalBeanValidatorTest", "shortclassname":"HospitalBeanValidatorTest", "method":"public void testHospitalAllErrors() throws Exception {\r\n    HospitalBean h = new HospitalBean();\r\n    h.setHospitalName(\"A Hospital!\");\r\n    h.setHospitalID(\"-1\");\r\n    h.setHospitalAddress(\"1000 Toooooooooooooooooo Manyyyyyyyyyyyyyyyyyy Charsssssssssssssssss Streetttttttttttttttt\");\r\n    h.setHospitalCity(\"Longggggggggggggggggggggggg Nameeeeeeeeeeeeeeeeeeeeeeeee Cityyyyyyyyyyyyyyyyy\");\r\n    h.setHospitalState(\"Zx\");\r\n    h.setHospitalZip(\"2-304-22-\");\r\n    try {\r\n        validator.validate(h);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"Hospital ID: \" + (ValidationFormat.HOSPITAL_ID.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Hospital Name: \" + (ValidationFormat.HOSPITAL_NAME.getDescription())), e.getErrorList().get(1));\r\n        assertEquals((\"Hospital Address: \" + (ValidationFormat.ADDRESS.getDescription())), e.getErrorList().get(2));\r\n        assertEquals((\"Hospital City: \" + (ValidationFormat.CITY.getDescription())), e.getErrorList().get(3));\r\n        assertEquals((\"Hospital State: \" + (ValidationFormat.STATE.getDescription())), e.getErrorList().get(4));\r\n        assertEquals((\"Hospital Zip: \" + (ValidationFormat.ZIPCODE.getDescription())), e.getErrorList().get(5));\r\n        assertEquals(\"number of errors\", 6, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4761, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.-init-()", "classid":690, "classname":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest", "shortclassname":"LOINCBeanValidatorTest", "method":"LOINCBeanValidatorTest() {\r\n}"},
 {"id":4762, "methodname":"testLOINCCorrect()", "methodnamerefined":"testLOINCCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.testLOINCCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.testLOINCCorrect()", "classid":690, "classname":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest", "shortclassname":"LOINCBeanValidatorTest", "method":"public void testLOINCCorrect() throws Exception {\r\n    LOINCbean bean = new LOINCbean();\r\n    bean.setComponent(\" \");\r\n    bean.setKindOfProperty(\" \");\r\n    bean.setLabProcedureCode(\"21324-7\");\r\n    bean.setMethodType(\" \");\r\n    bean.setScaleType(\" \");\r\n    bean.setSystem(\" \");\r\n    bean.setTimeAspect(\" \");\r\n    new LOINCBeanValidator().validate(bean);\r\n}"},
 {"id":4763, "methodname":"testLOINCIncorrect()", "methodnamerefined":"testLOINCIncorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.testLOINCIncorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.testLOINCIncorrect()", "classid":690, "classname":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest", "shortclassname":"LOINCBeanValidatorTest", "method":"public void testLOINCIncorrect() throws Exception {\r\n    LOINCbean bean = new LOINCbean();\r\n    try {\r\n        new LOINCBeanValidator().validate(bean);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"You must have a Lab Procedure Code, Component and Kind Of Property\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":4764, "methodname":"testLOINCRight()", "methodnamerefined":"testLOINCRight", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.testLOINCRight", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.testLOINCRight()", "classid":690, "classname":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest", "shortclassname":"LOINCBeanValidatorTest", "method":"public void testLOINCRight() throws Exception {\r\n    LOINCbean bean = new LOINCbean();\r\n    bean.setComponent(\" \");\r\n    bean.setKindOfProperty(\" \");\r\n    bean.setLabProcedureCode(\"12323-3\");\r\n    bean.setMethodType(\"\");\r\n    bean.setScaleType(\"\");\r\n    bean.setSystem(\"\");\r\n    bean.setTimeAspect(\"\");\r\n    new LOINCBeanValidator().validate(bean);\r\n}"},
 {"id":4765, "methodname":"testLOINCcodeIncorrect()", "methodnamerefined":"testLOINCcodeIncorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.testLOINCcodeIncorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest.testLOINCcodeIncorrect()", "classid":690, "classname":"edu.ncsu.csc.itrust.validate.bean.LOINCBeanValidatorTest", "shortclassname":"LOINCBeanValidatorTest", "method":"public void testLOINCcodeIncorrect() throws Exception {\r\n    LOINCbean bean = new LOINCbean();\r\n    bean.setComponent(\" \");\r\n    bean.setKindOfProperty(\" \");\r\n    bean.setLabProcedureCode(\"1232343\");\r\n    bean.setMethodType(\" \");\r\n    bean.setScaleType(\" \");\r\n    bean.setSystem(\" \");\r\n    bean.setTimeAspect(\" \");\r\n    try {\r\n        new LOINCBeanValidator().validate(bean);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"LaboratoryProcedureCode: Must be 1-5 digits followed by a - then another digit\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":4766, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.-init-()", "classid":691, "classname":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest", "shortclassname":"LabProcedureValidatorTest", "method":"LabProcedureValidatorTest() {\r\n}"},
 {"id":4767, "methodname":"testInvalidNumericalResults()", "methodnamerefined":"testInvalidNumericalResults", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.testInvalidNumericalResults", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.testInvalidNumericalResults()", "classid":691, "classname":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest", "shortclassname":"LabProcedureValidatorTest", "method":"public void testInvalidNumericalResults() throws Exception {\r\n    LabProcedureValidator validator = new LabProcedureValidator();\r\n    LabProcedureBean bean = new LabProcedureBean();\r\n    bean.setCommentary(\"This is it\");\r\n    bean.setLoinc(\"00000-0\");\r\n    bean.setPid(1L);\r\n    bean.statusPending();\r\n    bean.allow();\r\n    bean.setNumericalResult(\"123456789012345678901\");// Too long\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected validation to fail.\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        String expect = \"Numerical Result: \" + (ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH.getDescription());\r\n        assertEquals(expect, e.getErrorList().get(0));\r\n    }\r\n    bean.setNumericalResult(\"-\");// No digits\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected validation to fail.\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        String expect = \"Numerical Result: \" + (ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT.getDescription());\r\n        assertEquals(expect, e.getErrorList().get(0));\r\n    }\r\n    bean.setNumericalResult(\"1.2.3\");// Extra decimal point\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected validation to fail.\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        String expect = \"Numerical Result: \" + (ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT.getDescription());\r\n        assertEquals(expect, e.getErrorList().get(0));\r\n    }\r\n    bean.setNumericalResult(\"1-2\");// Sign in wrong location\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected validation to fail.\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        String expect = \"Numerical Result: \" + (ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT.getDescription());\r\n        assertEquals(expect, e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":4768, "methodname":"testLabProcedureAllCorrect()", "methodnamerefined":"testLabProcedureAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.testLabProcedureAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.testLabProcedureAllCorrect()", "classid":691, "classname":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest", "shortclassname":"LabProcedureValidatorTest", "method":"public void testLabProcedureAllCorrect() throws Exception {\r\n    LabProcedureBean l = new LabProcedureBean();\r\n    l.setCommentary(\"This is it\");\r\n    l.setLoinc(\"00000-0\");\r\n    l.setPid(1L);\r\n    l.statusPending();\r\n    l.allow();\r\n    new LabProcedureValidator().validate(l);\r\n}"},
 {"id":4769, "methodname":"testLabProcedureAllErrors()", "methodnamerefined":"testLabProcedureAllErrors", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.testLabProcedureAllErrors", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.testLabProcedureAllErrors()", "classid":691, "classname":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest", "shortclassname":"LabProcedureValidatorTest", "method":"public void testLabProcedureAllErrors() throws Exception {\r\n    LabProcedureBean l = new LabProcedureBean();\r\n    l.setCommentary(\"This is it\");\r\n    l.setLoinc(\"0000-00\");\r\n    l.setPid(1L);\r\n    l.setResults(\">\");\r\n    l.setCommentary(\"<\");\r\n    l.setStatus(\"not allowed\");\r\n    l.setRights(\"DENIED\");\r\n    try {\r\n        new LabProcedureValidator().validate(l);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"LOINC: \" + (ValidationFormat.LOINC.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Commentary: \" + (ValidationFormat.LABPROCEDURE_COMMENTS.getDescription())), e.getErrorList().get(1));\r\n        assertEquals((\"Results: \" + (ValidationFormat.LABPROCEDURE_COMMENTS.getDescription())), e.getErrorList().get(2));\r\n        assertEquals((\"Status: \" + (ValidationFormat.LAB_STATUS.getDescription())), e.getErrorList().get(3));\r\n        assertEquals((\"Rights: \" + (ValidationFormat.LAB_RIGHTS.getDescription())), e.getErrorList().get(4));\r\n        assertEquals(\"number of errors\", 5, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4770, "methodname":"testValidNumericalResults()", "methodnamerefined":"testValidNumericalResults", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.testValidNumericalResults", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest.testValidNumericalResults()", "classid":691, "classname":"edu.ncsu.csc.itrust.validate.bean.LabProcedureValidatorTest", "shortclassname":"LabProcedureValidatorTest", "method":"public void testValidNumericalResults() throws Exception {\r\n    LabProcedureBean bean = new LabProcedureBean();\r\n    bean.setCommentary(\"This is it\");\r\n    bean.setLoinc(\"00000-0\");\r\n    bean.setPid(1L);\r\n    bean.statusPending();\r\n    bean.allow();\r\n    bean.setNumericalResult(\"1.0\");\r\n    bean.setUpperBound(\"-3.\");\r\n    bean.setLowerBound(\"-.5\");\r\n    new LabProcedureValidator().validate(bean);\r\n    bean.setNumericalResult(\"1\");\r\n    new LabProcedureValidator().validate(bean);\r\n}"},
 {"id":4771, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.MedicationBeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.MedicationBeanValidatorTest.-init-()", "classid":692, "classname":"edu.ncsu.csc.itrust.validate.bean.MedicationBeanValidatorTest", "shortclassname":"MedicationBeanValidatorTest", "method":"MedicationBeanValidatorTest() {\r\n}"},
 {"id":4772, "methodname":"testAllCorrect()", "methodnamerefined":"testAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.MedicationBeanValidatorTest.testAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.MedicationBeanValidatorTest.testAllCorrect()", "classid":692, "classname":"edu.ncsu.csc.itrust.validate.bean.MedicationBeanValidatorTest", "shortclassname":"MedicationBeanValidatorTest", "method":"public void testAllCorrect() throws Exception {\r\n    MedicationBean d = new MedicationBean();\r\n    d.setDescription(\"A description\");\r\n    d.setNDCode(\"52563\");\r\n    validator.validate(d);\r\n}"},
 {"id":4773, "methodname":"testPatientAllErrors()", "methodnamerefined":"testPatientAllErrors", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.MedicationBeanValidatorTest.testPatientAllErrors", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.MedicationBeanValidatorTest.testPatientAllErrors()", "classid":692, "classname":"edu.ncsu.csc.itrust.validate.bean.MedicationBeanValidatorTest", "shortclassname":"MedicationBeanValidatorTest", "method":"public void testPatientAllErrors() throws Exception {\r\n    MedicationBean d = new MedicationBean();\r\n    d.setDescription(\"An description!\");\r\n    d.setNDCode(\"-1\");\r\n    try {\r\n        validator.validate(d);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"ND Code: \" + (ValidationFormat.ND.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Description: \" + (ValidationFormat.ND_CODE_DESCRIPTION.getDescription())), e.getErrorList().get(1));\r\n        assertEquals(\"number of errors\", 2, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4774, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.-init-()", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"PatientInstructionsBeanValidatorTest() {\r\n}"},
 {"id":4775, "methodname":"longString(int)", "methodnamerefined":"longString", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.longString", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.longString(int)", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"private String longString(int n) {\r\n    StringBuilder builder = new StringBuilder();\r\n    for (int i = 0; i < n; i++) {\r\n        builder.append(x);\r\n    }\r\n    return builder.toString();\r\n}"},
 {"id":4776, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.setUp()", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"@Override\r\nprotected void setUp() {\r\n    // Initialize a bean to valid values.\r\n    bean = new PatientInstructionsBean();\r\n    bean.setName(\"name\");\r\n    bean.setComment(\"comment\");\r\n    bean.setUrl(\"http://www.example.com/\");\r\n}"},
 {"id":4777, "methodname":"testValidateBadComment()", "methodnamerefined":"testValidateBadComment", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateBadComment", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateBadComment()", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"public void testValidateBadComment() {\r\n    bean.setComment(\"\");// empty\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setComment(\"@\");// bad symbol\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setComment(\">\");// bad symbol\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setComment(longString(501));// string too long\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n}"},
 {"id":4778, "methodname":"testValidateBadName()", "methodnamerefined":"testValidateBadName", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateBadName", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateBadName()", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"public void testValidateBadName() {\r\n    bean.setName(\"\");// empty\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setName(\"@\");// bad symbol\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setName(\">\");// bad symbol\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setName(longString(101));// string too long\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n}"},
 {"id":4779, "methodname":"testValidateBadURL()", "methodnamerefined":"testValidateBadURL", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateBadURL", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateBadURL()", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"public void testValidateBadURL() {\r\n    bean.setUrl(\"\");// empty\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setUrl(\"123\");// not a url\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setUrl(\"http://www example com\");// no spaces in url\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setUrl(\"http://\");// not a url\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n}"},
 {"id":4780, "methodname":"testValidateGoodComment()", "methodnamerefined":"testValidateGoodComment", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateGoodComment", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateGoodComment()", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"public void testValidateGoodComment() {\r\n    bean.setComment(\"x\");// shortest possible entry\r\n\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n    bean.setComment(\"#;?-.:,!/ \n\");// special legal characters\r\n\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n    bean.setComment(longString(500));// longest possible entry\r\n\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n}"},
 {"id":4781, "methodname":"testValidateGoodName()", "methodnamerefined":"testValidateGoodName", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateGoodName", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateGoodName()", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"public void testValidateGoodName() {\r\n    bean.setName(\"x\");// shortest possible entry\r\n\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n    bean.setName(\"#;?-.:,!/ \n\");// special legal characters\r\n\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n    bean.setName(longString(100));// longest possible entry\r\n\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n}"},
 {"id":4782, "methodname":"testValidateGoodURL()", "methodnamerefined":"testValidateGoodURL", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateGoodURL", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateGoodURL()", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"public void testValidateGoodURL() {\r\n    bean.setUrl(\"http://www.example.com\");\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n    bean.setUrl(\"http://example.com\");\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n    bean.setUrl(\"http://www.example-example.com/page.html?arg=15\");\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n}"},
 {"id":4783, "methodname":"testValidateOk()", "methodnamerefined":"testValidateOk", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateOk", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest.testValidateOk()", "classid":693, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientInstructionsBeanValidatorTest", "shortclassname":"PatientInstructionsBeanValidatorTest", "method":"public void testValidateOk() {\r\n    // Ensure the bean used throughout this test case really is valid.\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n}"},
 {"id":4784, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.-init-()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"PatientValidatorTest() {\r\n}"},
 {"id":4785, "methodname":"testCauseOfDeathValidation()", "methodnamerefined":"testCauseOfDeathValidation", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testCauseOfDeathValidation", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testCauseOfDeathValidation()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"public void testCauseOfDeathValidation() {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Person5\");\r\n    p.setLastName(\"LastName5\");\r\n    p.setDateOfBirthStr(\"10/10/2000\");\r\n    p.setDateOfDeathStr(\"\");\r\n    p.setCauseOfDeath(\"Q150\");\r\n    p.setEmail(\"andy.programmer?gmail.com\");\r\n    p.setStreetAddress1(\"344 East < Ave.\");\r\n    p.setStreetAddress2(\"?\");\r\n    p.setCity(\"Wr0ng\");\r\n    p.setState(\"Pa\");\r\n    p.setZip(\"17534-\");\r\n    p.setPhone(\"555\");\r\n    p.setEmergencyName(\"Tow #ater\");\r\n    p.setEmergencyPhone(\"(809)\");\r\n    p.setIcName(\"Dewie Che@tum and Howe the 2nd\");\r\n    p.setIcAddress1(\"458 Ripoff Blvd?\");\r\n    p.setIcAddress2(\"Greedy Suite                        \");\r\n    p.setIcCity(\"%\");\r\n    p.setIcState(\"mI\");\r\n    p.setIcZip(\"48169-0000 \");\r\n    p.setIcPhone(\" 666-059-4023 \");\r\n    p.setIcID(\"$$\");\r\n    p.setMotherMID(\"-1\");\r\n    p.setFatherMID(\"-2\");\r\n    p.setBloodTypeStr(\"AB\");\r\n    p.setEthnicityStr(\"Caucasion\");\r\n    p.setGenderStr(\"female\");\r\n    p.setTopicalNotes(\"<script>alert(hello);</script>\");\r\n    p.setPassword(\"toooooooooooooooooooooooooo long password\");\r\n    p.setPassword(\"toooooooooooooooooooooooooo long password\");\r\n    try {\r\n        new PatientValidator().validate(p);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"Cause of Death cannot be specified without Date of Death!\", e.getErrorList().get(3));\r\n    }\r\n}"},
 {"id":4786, "methodname":"testFutureBirthError()", "methodnamerefined":"testFutureBirthError", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testFutureBirthError", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testFutureBirthError()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"public void testFutureBirthError() {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Person5\");\r\n    p.setLastName(\"LastName5\");\r\n    p.setDateOfBirthStr(\"10/10/3000\");\r\n    p.setDateOfDeathStr(\"\");\r\n    p.setCauseOfDeath(\"\");\r\n    p.setEmail(\"andy.programmer?gmail.com\");\r\n    p.setStreetAddress1(\"344 East < Ave.\");\r\n    p.setStreetAddress2(\"?\");\r\n    p.setCity(\"Wr0ng\");\r\n    p.setState(\"Pa\");\r\n    p.setZip(\"17534-\");\r\n    p.setPhone(\"555\");\r\n    p.setEmergencyName(\"Tow #ater\");\r\n    p.setEmergencyPhone(\"(809)\");\r\n    p.setIcName(\"Dewie Che@tum and Howe the 2nd\");\r\n    p.setIcAddress1(\"458 Ripoff Blvd?\");\r\n    p.setIcAddress2(\"Greedy Suite                        \");\r\n    p.setIcCity(\"%\");\r\n    p.setIcState(\"mI\");\r\n    p.setIcZip(\"48169-0000 \");\r\n    p.setIcPhone(\" 666-059-4023 \");\r\n    p.setIcID(\"$$\");\r\n    p.setMotherMID(\"-1\");\r\n    p.setFatherMID(\"-2\");\r\n    p.setBloodTypeStr(\"AB\");\r\n    p.setEthnicityStr(\"Caucasion\");\r\n    p.setGenderStr(\"female\");\r\n    p.setTopicalNotes(\"<script>alert(hello);</script>\");\r\n    p.setPassword(\"toooooooooooooooooooooooooo long password\");\r\n    p.setPassword(\"toooooooooooooooooooooooooo long password\");\r\n    try {\r\n        new PatientValidator().validate(p);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(\"Birth date cannot be in the future!\", e.getErrorList().get(3));\r\n        // assertEquals(\"Date of Death: MM/DD/YYYY\", e.getErrorList().get(3));\r\n    }\r\n}"},
 {"id":4787, "methodname":"testMFWithPersonnelMID()", "methodnamerefined":"testMFWithPersonnelMID", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testMFWithPersonnelMID", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testMFWithPersonnelMID()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"public void testMFWithPersonnelMID() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Persona\");\r\n    p.setLastName(\"LastName\");\r\n    p.setDateOfBirthStr(\"10/10/2005\");\r\n    p.setDateOfDeathStr(\"\");\r\n    p.setCauseOfDeath(\"\");\r\n    p.setEmail(\"andy.programmer@gmail.com\");\r\n    p.setSecurityQuestion(\"What is your quest?-\");\r\n    p.setSecurityAnswer(\"I s33k the holy grail\");\r\n    p.setStreetAddress1(\"344 East Random Ave.\");\r\n    p.setStreetAddress2(\"\");\r\n    p.setCity(\"Intercourse\");\r\n    p.setState(\"PA\");\r\n    p.setZip(\"17534\");\r\n    p.setPhone(\"555-542-9023\");\r\n    p.setEmergencyName(\"Tow Mater\");\r\n    p.setEmergencyPhone(\"809-940-1943\");\r\n    p.setIcName(\"Dewie Cheatum n Howe\");\r\n    p.setIcAddress1(\"458 Ripoff Blvd.\");\r\n    p.setIcAddress2(\"Greedy Suite\");\r\n    p.setIcCity(\"Hell\");\r\n    p.setIcState(\"MI\");\r\n    p.setIcZip(\"48169-0000\");\r\n    p.setIcPhone(\"666-059-4023\");\r\n    p.setIcID(\"Money\");\r\n    p.setMotherMID(\"9\");\r\n    p.setFatherMID(\"98\");\r\n    p.setBloodTypeStr(\"O-\");\r\n    p.setEthnicityStr(\"Caucasian\");\r\n    p.setGenderStr(\"Male\");\r\n    p.setTopicalNotes(\"Here are some random topical notes. Isn\t there more? Yes.\n There is.\");\r\n    p.setPassword(\"testpass1\");\r\n    p.setConfirmPassword(\"testpass1\");\r\n    try {\r\n        new PatientValidator().validate(p);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"Mother MID: \" + (ValidationFormat.NPMID.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Father MID: \" + (ValidationFormat.NPMID.getDescription())), e.getErrorList().get(1));\r\n    }\r\n}"},
 {"id":4788, "methodname":"testPatientAllCorrect()", "methodnamerefined":"testPatientAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientAllCorrect()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"public void testPatientAllCorrect() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Persona\");\r\n    p.setLastName(\"LastName\");\r\n    p.setDateOfBirthStr(\"10/10/2005\");\r\n    p.setDateOfDeathStr(\"\");\r\n    p.setCauseOfDeath(\"\");\r\n    p.setEmail(\"andy.programmer@gmail.com\");\r\n    p.setSecurityQuestion(\"What is your quest?-\");\r\n    p.setSecurityAnswer(\"I s33k the holy grail\");\r\n    p.setStreetAddress1(\"344 East Random Ave.\");\r\n    p.setStreetAddress2(\"\");\r\n    p.setCity(\"Intercourse\");\r\n    p.setState(\"PA\");\r\n    p.setZip(\"17534\");\r\n    p.setPhone(\"555-542-9023\");\r\n    p.setEmergencyName(\"Tow Mater\");\r\n    p.setEmergencyPhone(\"809-940-1943\");\r\n    p.setIcName(\"Dewie Cheatum n Howe\");\r\n    p.setIcAddress1(\"458 Ripoff Blvd.\");\r\n    p.setIcAddress2(\"Greedy Suite\");\r\n    p.setIcCity(\"Hell\");\r\n    p.setIcState(\"MI\");\r\n    p.setIcZip(\"48169-0000\");\r\n    p.setIcPhone(\"666-059-4023\");\r\n    p.setIcID(\"Money\");\r\n    p.setMotherMID(\"58\");\r\n    p.setFatherMID(\"0\");\r\n    p.setBloodTypeStr(\"O-\");\r\n    p.setEthnicityStr(\"Caucasian\");\r\n    p.setGenderStr(\"Male\");\r\n    p.setTopicalNotes(\"Here are some random topical notes. Isn\t there more? Yes.\n There is.\");\r\n    p.setPassword(\"testpass1\");\r\n    p.setConfirmPassword(\"testpass1\");\r\n    new PatientValidator().validate(p);\r\n}"},
 {"id":4789, "methodname":"testPatientAllErrors()", "methodnamerefined":"testPatientAllErrors", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientAllErrors", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientAllErrors()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"public void testPatientAllErrors() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Person5\");\r\n    p.setLastName(\"LastName5\");\r\n    p.setDateOfBirthStr(\"10/ 10/2005\");\r\n    p.setDateOfDeathStr(\"05-19-1984\");\r\n    p.setCauseOfDeath(\"Q150\");\r\n    p.setEmail(\"andy.programmer?gmail.com\");\r\n    p.setStreetAddress1(\"344 East < Ave.\");\r\n    p.setStreetAddress2(\"?\");\r\n    p.setCity(\"Wr0ng\");\r\n    p.setState(\"Pa\");\r\n    p.setZip(\"17534-\");\r\n    p.setPhone(\"555\");\r\n    p.setEmergencyName(\"Tow #ater\");\r\n    p.setEmergencyPhone(\"(809)\");\r\n    p.setIcName(\"Dewie Che@tum and Howe the 2nd\");\r\n    p.setIcAddress1(\"458 Ripoff Blvd?\");\r\n    p.setIcAddress2(\"Greedy Suite                        \");\r\n    p.setIcCity(\"%\");\r\n    p.setIcState(\"mI\");\r\n    p.setIcZip(\"48169-0000 \");\r\n    p.setIcPhone(\" 666-059-4023 \");\r\n    p.setIcID(\"$$\");\r\n    p.setMotherMID(\"-1\");\r\n    p.setFatherMID(\"-2\");\r\n    p.setBloodTypeStr(\"AB\");\r\n    p.setEthnicityStr(\"Caucasion\");\r\n    p.setGenderStr(\"female\");\r\n    p.setTopicalNotes(\"<script>alert(hello);</script>\");\r\n    p.setPassword(\"toooooooooooooooooooooooooo long password\");\r\n    p.setPassword(\"toooooooooooooooooooooooooo long password\");\r\n    try {\r\n        new PatientValidator().validate(p);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"First name: \" + (ValidationFormat.NAME.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Last name: \" + (ValidationFormat.NAME.getDescription())), e.getErrorList().get(1));\r\n        assertEquals(\"Date of Birth: MM/DD/YYYY\", e.getErrorList().get(3));\r\n        assertEquals(\"Date of Death: MM/DD/YYYY\", e.getErrorList().get(4));\r\n        assertEquals(\"Cause of Death cannot be specified without Date of Death!\", e.getErrorList().get(5));\r\n        assertEquals(\"Cause of Death: xxx.xx\", e.getErrorList().get(6));\r\n        assertEquals(false, val.validateEmail(\"andy.programmer?gmail.com\"));\r\n        assertEquals((\"Street Address 1: \" + (ValidationFormat.ADDRESS.getDescription())), e.getErrorList().get(7));\r\n        assertEquals((\"Street Address 2: \" + (ValidationFormat.ADDRESS.getDescription())), e.getErrorList().get(8));\r\n        assertEquals((\"City: \" + (ValidationFormat.CITY.getDescription())), e.getErrorList().get(9));\r\n        assertEquals((\"State: \" + (ValidationFormat.STATE.getDescription())), e.getErrorList().get(10));\r\n        assertEquals((\"Zip Code: \" + (ValidationFormat.ZIPCODE.getDescription())), e.getErrorList().get(11));\r\n        assertEquals((\"Phone Number: \" + (ValidationFormat.PHONE_NUMBER.getDescription())), e.getErrorList().get(12));\r\n        assertEquals((\"Emergency Contact Name: \" + (ValidationFormat.NAME.getDescription())), e.getErrorList().get(13));\r\n        assertEquals((\"Emergency Contact Phone: \" + (ValidationFormat.PHONE_NUMBER.getDescription())), e.getErrorList().get(14));\r\n        assertEquals((\"Insurance Company Name: \" + (ValidationFormat.NAME.getDescription())), e.getErrorList().get(15));\r\n        assertEquals((\"Insurance Company Address 1: \" + (ValidationFormat.ADDRESS.getDescription())), e.getErrorList().get(16));\r\n        assertEquals((\"Insurance Company Address 2: \" + (ValidationFormat.ADDRESS.getDescription())), e.getErrorList().get(17));\r\n        assertEquals((\"Insurance Company City: \" + (ValidationFormat.CITY.getDescription())), e.getErrorList().get(18));\r\n        assertEquals((\"Insurance Company State: \" + (ValidationFormat.STATE.getDescription())), e.getErrorList().get(19));\r\n        assertEquals((\"Insurance Company Zip: \" + (ValidationFormat.ZIPCODE.getDescription())), e.getErrorList().get(20));\r\n        assertEquals((\"Insurance Company Phone: \" + (ValidationFormat.PHONE_NUMBER.getDescription())), e.getErrorList().get(21));\r\n        assertEquals((\"Insurance Company ID: \" + (ValidationFormat.INSURANCE_ID.getDescription())), e.getErrorList().get(22));\r\n        assertEquals((\"Mother MID: \" + (ValidationFormat.NPMID.getDescription())), e.getErrorList().get(23));\r\n        assertEquals((\"Father MID: \" + (ValidationFormat.NPMID.getDescription())), e.getErrorList().get(24));\r\n        assertEquals((\"Topical Notes: \" + (ValidationFormat.NOTES.getDescription())), e.getErrorList().get(25));\r\n        assertEquals(\"number of errors\", 26, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4790, "methodname":"testPatientTopicalNoteWithQuotationMark()", "methodnamerefined":"testPatientTopicalNoteWithQuotationMark", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientTopicalNoteWithQuotationMark", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientTopicalNoteWithQuotationMark()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"/* JUnit test for bug #2 on the bug list */\r\npublic void testPatientTopicalNoteWithQuotationMark() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Persona\");\r\n    p.setLastName(\"LastName\");\r\n    p.setDateOfBirthStr(\"10/10/2005\");\r\n    p.setDateOfDeathStr(\"\");\r\n    p.setCauseOfDeath(\"\");\r\n    p.setEmail(\"andy.programmer@gmail.com\");\r\n    p.setSecurityQuestion(\"What is your quest?-\");\r\n    p.setSecurityAnswer(\"I s33k the holy grail\");\r\n    p.setStreetAddress1(\"344 East Random Ave.\");\r\n    p.setStreetAddress2(\"\");\r\n    p.setCity(\"Intercourse\");\r\n    p.setState(\"PA\");\r\n    p.setZip(\"17534\");\r\n    p.setPhone(\"555-542-9023\");\r\n    p.setEmergencyName(\"Tow Mater\");\r\n    p.setEmergencyPhone(\"809-940-1943\");\r\n    p.setIcName(\"Dewie Cheatum n Howe\");\r\n    p.setIcAddress1(\"458 Ripoff Blvd.\");\r\n    p.setIcAddress2(\"Greedy Suite\");\r\n    p.setIcCity(\"Hell\");\r\n    p.setIcState(\"MI\");\r\n    p.setIcZip(\"48169-0000\");\r\n    p.setIcPhone(\"666-059-4023\");\r\n    p.setIcID(\"Money\");\r\n    p.setMotherMID(\"58\");\r\n    p.setFatherMID(\"0\");\r\n    p.setBloodTypeStr(\"O-\");\r\n    p.setEthnicityStr(\"Caucasian\");\r\n    p.setGenderStr(\"Male\");\r\n    p.setTopicalNotes(\"Here are some random topical notes. \" Isn\t there more? Yes.\n There is.\");\r\n    p.setPassword(\"testpass1\");\r\n    p.setConfirmPassword(\"testpass1\");\r\n    new PatientValidator().validate(p);\r\n}"},
 {"id":4791, "methodname":"testPatientWithBadCardNumbers()", "methodnamerefined":"testPatientWithBadCardNumbers", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientWithBadCardNumbers", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientWithBadCardNumbers()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"public void testPatientWithBadCardNumbers() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Persona\");\r\n    p.setLastName(\"MyLastNameIsOK\");\r\n    p.setDateOfBirthStr(\"10/10/2005\");\r\n    p.setDateOfDeathStr(\"\");\r\n    p.setCauseOfDeath(\"\");\r\n    p.setEmail(\"andy.programmer@gmail.com\");\r\n    p.setSecurityQuestion(\"What is your quest?-\");\r\n    p.setSecurityAnswer(\"I s33k the holy grail\");\r\n    p.setStreetAddress1(\"344 East Random Ave.\");\r\n    p.setStreetAddress2(\"\");\r\n    p.setCity(\"Intercourse\");\r\n    p.setState(\"PA\");\r\n    p.setZip(\"17534\");\r\n    p.setPhone(\"555-542-9023\");\r\n    p.setEmergencyName(\"Tow Mater\");\r\n    p.setEmergencyPhone(\"809-940-1943\");\r\n    p.setIcName(\"Dewie Cheatum n Howe\");\r\n    p.setIcAddress1(\"458 Ripoff Blvd.\");\r\n    p.setIcAddress2(\"Greedy Suite\");\r\n    p.setIcCity(\"Hell\");\r\n    p.setIcState(\"MI\");\r\n    p.setIcZip(\"48169-0000\");\r\n    p.setIcPhone(\"666-059-4023\");\r\n    p.setIcID(\"Money\");\r\n    p.setMotherMID(\"58\");\r\n    p.setFatherMID(\"0\");\r\n    p.setBloodTypeStr(\"O-\");\r\n    p.setEthnicityStr(\"Caucasian\");\r\n    p.setGenderStr(\"Male\");\r\n    p.setTopicalNotes(\"Here are some random topical notes. \" Isn\t there more? Yes.\n There is.\");\r\n    p.setPassword(\"testpass1\");\r\n    p.setConfirmPassword(\"testpass1\");\r\n    PatientValidator pv = new PatientValidator();\r\n    try {\r\n        p.setCreditCardType(\"VISA\");\r\n        p.setCreditCardNumber(\"5593090746812380\");\r\n        pv.validate(p);\r\n        fail(\"Invalid card number should have thrown exception\");\r\n    } catch (Exception e) {\r\n    }\r\n    try {\r\n        p.setCreditCardType(\"MASTERCARD\");\r\n        p.setCreditCardNumber(\"4539592576502361\");\r\n        pv.validate(p);\r\n        fail(\"Invalid card number should have thrown exception\");\r\n    } catch (Exception e) {\r\n    }\r\n    try {\r\n        p.setCreditCardType(\"DISCOVER\");\r\n        p.setCreditCardNumber(\"344558915054011\");\r\n        pv.validate(p);\r\n        fail(\"Invalid card number should have thrown exception\");\r\n    } catch (Exception e) {\r\n    }\r\n    try {\r\n        p.setCreditCardType(\"AMEX\");\r\n        p.setCreditCardNumber(\"6011953266156193\");\r\n        pv.validate(p);\r\n        fail(\"Invalid card number should have thrown exception\");\r\n    } catch (Exception e) {\r\n    }\r\n}"},
 {"id":4792, "methodname":"testPatientWithLongLastName()", "methodnamerefined":"testPatientWithLongLastName", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientWithLongLastName", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientWithLongLastName()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"/* Test for threat model - Last name too long. */\r\npublic void testPatientWithLongLastName() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Persona\");\r\n    p.setLastName(\"MyLastNameIsReallySuperDuperLoooooooong\");\r\n    p.setDateOfBirthStr(\"10/10/2005\");\r\n    p.setDateOfDeathStr(\"\");\r\n    p.setCauseOfDeath(\"\");\r\n    p.setEmail(\"andy.programmer@gmail.com\");\r\n    p.setSecurityQuestion(\"What is your quest?-\");\r\n    p.setSecurityAnswer(\"I s33k the holy grail\");\r\n    p.setStreetAddress1(\"344 East Random Ave.\");\r\n    p.setStreetAddress2(\"\");\r\n    p.setCity(\"Intercourse\");\r\n    p.setState(\"PA\");\r\n    p.setZip(\"17534\");\r\n    p.setPhone(\"555-542-9023\");\r\n    p.setEmergencyName(\"Tow Mater\");\r\n    p.setEmergencyPhone(\"809-940-1943\");\r\n    p.setIcName(\"Dewie Cheatum n Howe\");\r\n    p.setIcAddress1(\"458 Ripoff Blvd.\");\r\n    p.setIcAddress2(\"Greedy Suite\");\r\n    p.setIcCity(\"Hell\");\r\n    p.setIcState(\"MI\");\r\n    p.setIcZip(\"48169-0000\");\r\n    p.setIcPhone(\"666-059-4023\");\r\n    p.setIcID(\"Money\");\r\n    p.setMotherMID(\"58\");\r\n    p.setFatherMID(\"0\");\r\n    p.setBloodTypeStr(\"O-\");\r\n    p.setEthnicityStr(\"Caucasian\");\r\n    p.setGenderStr(\"Male\");\r\n    p.setTopicalNotes(\"Here are some random topical notes. \" Isn\t there more? Yes.\n There is.\");\r\n    p.setPassword(\"testpass1\");\r\n    p.setConfirmPassword(\"testpass1\");\r\n    try {\r\n        new PatientValidator().validate(p);\r\n        fail();\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"This form has not been validated correctly. The following field are not \" + \"properly filled in: [Last name: Up to 20 Letters, space,  and -]\"), e.getMessage());\r\n    }\r\n}"},
 {"id":4793, "methodname":"testPatientWithValidCardNumbers()", "methodnamerefined":"testPatientWithValidCardNumbers", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientWithValidCardNumbers", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest.testPatientWithValidCardNumbers()", "classid":694, "classname":"edu.ncsu.csc.itrust.validate.bean.PatientValidatorTest", "shortclassname":"PatientValidatorTest", "method":"public void testPatientWithValidCardNumbers() throws Exception {\r\n    PatientBean p = new PatientBean();\r\n    p.setFirstName(\"Persona\");\r\n    p.setLastName(\"MyLastNameIsOK\");\r\n    p.setDateOfBirthStr(\"10/10/2005\");\r\n    p.setDateOfDeathStr(\"\");\r\n    p.setCauseOfDeath(\"\");\r\n    p.setEmail(\"andy.programmer@gmail.com\");\r\n    p.setSecurityQuestion(\"What is your quest?-\");\r\n    p.setSecurityAnswer(\"I s33k the holy grail\");\r\n    p.setStreetAddress1(\"344 East Random Ave.\");\r\n    p.setStreetAddress2(\"\");\r\n    p.setCity(\"Intercourse\");\r\n    p.setState(\"PA\");\r\n    p.setZip(\"17534\");\r\n    p.setPhone(\"555-542-9023\");\r\n    p.setEmergencyName(\"Tow Mater\");\r\n    p.setEmergencyPhone(\"809-940-1943\");\r\n    p.setIcName(\"Dewie Cheatum n Howe\");\r\n    p.setIcAddress1(\"458 Ripoff Blvd.\");\r\n    p.setIcAddress2(\"Greedy Suite\");\r\n    p.setIcCity(\"Hell\");\r\n    p.setIcState(\"MI\");\r\n    p.setIcZip(\"48169-0000\");\r\n    p.setIcPhone(\"666-059-4023\");\r\n    p.setIcID(\"Money\");\r\n    p.setMotherMID(\"58\");\r\n    p.setFatherMID(\"0\");\r\n    p.setBloodTypeStr(\"O-\");\r\n    p.setEthnicityStr(\"Caucasian\");\r\n    p.setGenderStr(\"Male\");\r\n    p.setTopicalNotes(\"Here are some random topical notes. \" Isn\t there more? Yes.\n There is.\");\r\n    p.setPassword(\"testpass1\");\r\n    p.setConfirmPassword(\"testpass1\");\r\n    PatientValidator pv = new PatientValidator();\r\n    p.setCreditCardType(\"MASTERCARD\");\r\n    p.setCreditCardNumber(\"5593090746812380\");\r\n    pv.validate(p);\r\n    p.setCreditCardType(\"VISA\");\r\n    p.setCreditCardNumber(\"4539592576502361\");\r\n    pv.validate(p);\r\n    p.setCreditCardType(\"AMEX\");\r\n    p.setCreditCardNumber(\"344558915054011\");\r\n    pv.validate(p);\r\n    p.setCreditCardType(\"DISCOVER\");\r\n    p.setCreditCardNumber(\"6011953266156193\");\r\n    pv.validate(p);\r\n}"},
 {"id":4794, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.ProcedureBeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.ProcedureBeanValidatorTest.-init-()", "classid":695, "classname":"edu.ncsu.csc.itrust.validate.bean.ProcedureBeanValidatorTest", "shortclassname":"ProcedureBeanValidatorTest", "method":"ProcedureBeanValidatorTest() {\r\n}"},
 {"id":4795, "methodname":"testAllCorrect()", "methodnamerefined":"testAllCorrect", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.ProcedureBeanValidatorTest.testAllCorrect", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.ProcedureBeanValidatorTest.testAllCorrect()", "classid":695, "classname":"edu.ncsu.csc.itrust.validate.bean.ProcedureBeanValidatorTest", "shortclassname":"ProcedureBeanValidatorTest", "method":"public void testAllCorrect() throws Exception {\r\n    ProcedureBean d = new ProcedureBean();\r\n    d.setDescription(\"A description\");\r\n    d.setCPTCode(\"52563\");\r\n    d.setOvProcedureID(0L);\r\n    validator.validate(d);\r\n}"},
 {"id":4796, "methodname":"testPatientAllErrors()", "methodnamerefined":"testPatientAllErrors", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.ProcedureBeanValidatorTest.testPatientAllErrors", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.ProcedureBeanValidatorTest.testPatientAllErrors()", "classid":695, "classname":"edu.ncsu.csc.itrust.validate.bean.ProcedureBeanValidatorTest", "shortclassname":"ProcedureBeanValidatorTest", "method":"public void testPatientAllErrors() throws Exception {\r\n    ProcedureBean d = new ProcedureBean();\r\n    d.setDescription(\"An description!\");\r\n    d.setCPTCode(\"8000.84\");\r\n    try {\r\n        validator.validate(d);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals((\"CPT Code: \" + (ValidationFormat.CPT.getDescription())), e.getErrorList().get(0));\r\n        assertEquals((\"Description: \" + (ValidationFormat.ICD_CODE_DESCRIPTION.getDescription())), e.getErrorList().get(1));\r\n        assertEquals(\"number of errors\", 2, e.getErrorList().size());\r\n    }\r\n}"},
 {"id":4797, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.-init-()", "classid":696, "classname":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest", "shortclassname":"ReferralBeanValidatorTest", "method":"ReferralBeanValidatorTest() {\r\n}"},
 {"id":4798, "methodname":"longString(int)", "methodnamerefined":"longString", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.longString", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.longString(int)", "classid":696, "classname":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest", "shortclassname":"ReferralBeanValidatorTest", "method":"private String longString(int n) {\r\n    StringBuilder builder = new StringBuilder();\r\n    for (int i = 0; i < n; i++) {\r\n        builder.append(x);\r\n    }\r\n    return builder.toString();\r\n}"},
 {"id":4799, "methodname":"setUp()", "methodnamerefined":"setUp", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.setUp", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.setUp()", "classid":696, "classname":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest", "shortclassname":"ReferralBeanValidatorTest", "method":"@Override\r\nprotected void setUp() {\r\n    // Initialize a bean to valid values.\r\n    bean = new ReferralBean();\r\n    bean.setOvid(1L);\r\n    bean.setPatientID(1L);\r\n    bean.setPriority(1);\r\n    bean.setReceiverID(1L);\r\n    bean.setSenderID(1L);\r\n    bean.setReferralDetails(\"details\");\r\n    bean.setTimeStamp(\"\");\r\n}"},
 {"id":4800, "methodname":"testValidateBadNotes()", "methodnamerefined":"testValidateBadNotes", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.testValidateBadNotes", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.testValidateBadNotes()", "classid":696, "classname":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest", "shortclassname":"ReferralBeanValidatorTest", "method":"public void testValidateBadNotes() {\r\n    bean.setReferralDetails(\"\");// empty\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setReferralDetails(\"@\");// bad symbol\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setReferralDetails(\">\");// bad symbol\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n    bean.setReferralDetails(longString(501));// string too long\r\n\r\n    try {\r\n        validator.validate(bean);\r\n        fail(\"Expected a validation failure.\");\r\n    } catch (FormValidationException e) {\r\n        // passed.\r\n    }\r\n}"},
 {"id":4801, "methodname":"testValidateGoodNotes()", "methodnamerefined":"testValidateGoodNotes", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.testValidateGoodNotes", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.testValidateGoodNotes()", "classid":696, "classname":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest", "shortclassname":"ReferralBeanValidatorTest", "method":"public void testValidateGoodNotes() {\r\n    bean.setReferralDetails(\"x\");// shortest possible entry\r\n\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n    // a-zA-Z0-9\\s\"?!:;\\-.,_\n\t()\\\\/\r\n    bean.setReferralDetails(\";?-.:,!/ \n\");// special legal characters\r\n\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n    bean.setReferralDetails(longString(500));// longest possible entry\r\n\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n}"},
 {"id":4802, "methodname":"testValidateOk()", "methodnamerefined":"testValidateOk", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.testValidateOk", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest.testValidateOk()", "classid":696, "classname":"edu.ncsu.csc.itrust.validate.bean.ReferralBeanValidatorTest", "shortclassname":"ReferralBeanValidatorTest", "method":"public void testValidateOk() {\r\n    // Ensure the bean used throughout this test case really is valid.\r\n    try {\r\n        validator.validate(bean);\r\n    } catch (FormValidationException e) {\r\n        fail(\"Validation should have passed.\");\r\n    }\r\n}"},
 {"id":4803, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.-init-()", "classid":697, "classname":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest", "shortclassname":"SecurityQuestionValidatorTest", "method":"SecurityQuestionValidatorTest() {\r\n}"},
 {"id":4804, "methodname":"testCorrectFormat()", "methodnamerefined":"testCorrectFormat", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testCorrectFormat", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testCorrectFormat()", "classid":697, "classname":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest", "shortclassname":"SecurityQuestionValidatorTest", "method":"public void testCorrectFormat() throws Exception {\r\n    qa.setAnswer(\"12345678\");\r\n    qa.setConfirmAnswer(\"12345678\");\r\n    qa.setQuestion(\"12345678\");\r\n    qav.validate(qa);\r\n}"},
 {"id":4805, "methodname":"testMatchWrongFormat()", "methodnamerefined":"testMatchWrongFormat", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testMatchWrongFormat", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testMatchWrongFormat()", "classid":697, "classname":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest", "shortclassname":"SecurityQuestionValidatorTest", "method":"public void testMatchWrongFormat() throws Exception {\r\n    qa.setAnswer(\">\");\r\n    qa.setConfirmAnswer(\">\");\r\n    qa.setQuestion(\"12345678\");\r\n    try {\r\n        qav.validate(qa);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Security Answer: Up to 30 alphanumeric characters\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":4806, "methodname":"testNoMatch()", "methodnamerefined":"testNoMatch", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testNoMatch", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testNoMatch()", "classid":697, "classname":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest", "shortclassname":"SecurityQuestionValidatorTest", "method":"public void testNoMatch() throws Exception {\r\n    qa.setAnswer(\"12345678\");\r\n    qa.setConfirmAnswer(\"123456789\");\r\n    qa.setQuestion(\"12345678\");\r\n    try {\r\n        qav.validate(qa);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Security answers do not match\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":4807, "methodname":"testNullConfirm()", "methodnamerefined":"testNullConfirm", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testNullConfirm", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testNullConfirm()", "classid":697, "classname":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest", "shortclassname":"SecurityQuestionValidatorTest", "method":"public void testNullConfirm() throws Exception {\r\n    qa.setAnswer(\"12345678\");\r\n    qa.setConfirmAnswer(null);\r\n    qa.setQuestion(\"12345678\");\r\n    try {\r\n        qav.validate(qa);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Confirm answer cannot be empty\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":4808, "methodname":"testNullForm()", "methodnamerefined":"testNullForm", "methodabbreviation":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testNullForm", "fullmethod":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest.testNullForm()", "classid":697, "classname":"edu.ncsu.csc.itrust.validate.bean.SecurityQuestionValidatorTest", "shortclassname":"SecurityQuestionValidatorTest", "method":"public void testNullForm() throws Exception {\r\n    try {\r\n        qav.validate(null);\r\n        fail(\"exception should have been thrown\");\r\n    } catch (FormValidationException e) {\r\n        assertEquals(1, e.getErrorList().size());\r\n        assertEquals(\"Null form\", e.getErrorList().get(0));\r\n    }\r\n}"},
 {"id":4809, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest.-init-()", "classid":698, "classname":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest", "shortclassname":"AnswerValidatorTest", "method":"AnswerValidatorTest() {\r\n}"},
 {"id":4810, "methodname":"testBadLength()", "methodnamerefined":"testBadLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest.testBadLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest.testBadLength()", "classid":698, "classname":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest", "shortclassname":"AnswerValidatorTest", "method":"public void testBadLength() throws Exception {\r\n    String value = \"abcabcabcabcabcabcabcabcabcabca\";\r\n    String errorMessage = AnswerValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, AnswerValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4811, "methodname":"testBadLetters()", "methodnamerefined":"testBadLetters", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest.testBadLetters", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest.testBadLetters()", "classid":698, "classname":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest", "shortclassname":"AnswerValidatorTest", "method":"public void testBadLetters() throws Exception {\r\n    String value = \"bob%\";\r\n    String errorMessage = AnswerValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, AnswerValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4812, "methodname":"testGoodAnswer()", "methodnamerefined":"testGoodAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest.testGoodAnswer", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest.testGoodAnswer()", "classid":698, "classname":"edu.ncsu.csc.itrust.validate.regex.AnswerValidatorTest", "shortclassname":"AnswerValidatorTest", "method":"public void testGoodAnswer() throws Exception {\r\n    String value = \"this is my answer5\";\r\n    String errorMessage = AnswerValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, AnswerValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4813, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.-init-()", "classid":699, "classname":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest", "shortclassname":"BloodTypeValidatorTest", "method":"BloodTypeValidatorTest() {\r\n}"},
 {"id":4814, "methodname":"testA()", "methodnamerefined":"testA", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testA", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testA()", "classid":699, "classname":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest", "shortclassname":"BloodTypeValidatorTest", "method":"public void testA() throws Exception {\r\n    String value = \"A+\";\r\n    String errorMessage = BloodTypeValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, BloodTypeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4815, "methodname":"testAB()", "methodnamerefined":"testAB", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testAB", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testAB()", "classid":699, "classname":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest", "shortclassname":"BloodTypeValidatorTest", "method":"public void testAB() throws Exception {\r\n    String value = \"AB-\";\r\n    String errorMessage = BloodTypeValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, BloodTypeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4816, "methodname":"testB()", "methodnamerefined":"testB", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testB", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testB()", "classid":699, "classname":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest", "shortclassname":"BloodTypeValidatorTest", "method":"public void testB() throws Exception {\r\n    String value = \"B+\";\r\n    String errorMessage = BloodTypeValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, BloodTypeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4817, "methodname":"testBadLetter()", "methodnamerefined":"testBadLetter", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testBadLetter", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testBadLetter()", "classid":699, "classname":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest", "shortclassname":"BloodTypeValidatorTest", "method":"public void testBadLetter() throws Exception {\r\n    String value = \"a\";\r\n    String errorMessage = BloodTypeValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, BloodTypeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4818, "methodname":"testNoNegative()", "methodnamerefined":"testNoNegative", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testNoNegative", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testNoNegative()", "classid":699, "classname":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest", "shortclassname":"BloodTypeValidatorTest", "method":"public void testNoNegative() throws Exception {\r\n    String value = \"O\";\r\n    String errorMessage = BloodTypeValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, BloodTypeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4819, "methodname":"testO()", "methodnamerefined":"testO", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testO", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest.testO()", "classid":699, "classname":"edu.ncsu.csc.itrust.validate.regex.BloodTypeValidatorTest", "shortclassname":"BloodTypeValidatorTest", "method":"public void testO() throws Exception {\r\n    String value = \"O-\";\r\n    String errorMessage = BloodTypeValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, BloodTypeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4820, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest.-init-()", "classid":700, "classname":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest", "shortclassname":"CPTCodeValidatorTest", "method":"CPTCodeValidatorTest() {\r\n}"},
 {"id":4821, "methodname":"testGood()", "methodnamerefined":"testGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest.testGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest.testGood()", "classid":700, "classname":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest", "shortclassname":"CPTCodeValidatorTest", "method":"public void testGood() throws Exception {\r\n    String value = \"12345\";\r\n    String errorMessage = CPTCodeValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, CPTCodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4822, "methodname":"testNotInt()", "methodnamerefined":"testNotInt", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest.testNotInt", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest.testNotInt()", "classid":700, "classname":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest", "shortclassname":"CPTCodeValidatorTest", "method":"public void testNotInt() throws Exception {\r\n    String value = \"123a4\";\r\n    String errorMessage = CPTCodeValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, CPTCodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4823, "methodname":"testTooLong()", "methodnamerefined":"testTooLong", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest.testTooLong", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest.testTooLong()", "classid":700, "classname":"edu.ncsu.csc.itrust.validate.regex.CPTCodeValidatorTest", "shortclassname":"CPTCodeValidatorTest", "method":"public void testTooLong() throws Exception {\r\n    String value = \"123456\";\r\n    String errorMessage = CPTCodeValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, CPTCodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4824, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest.-init-()", "classid":701, "classname":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest", "shortclassname":"CityValidatorTest", "method":"CityValidatorTest() {\r\n}"},
 {"id":4825, "methodname":"testBadLength()", "methodnamerefined":"testBadLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest.testBadLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest.testBadLength()", "classid":701, "classname":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest", "shortclassname":"CityValidatorTest", "method":"public void testBadLength() throws Exception {\r\n    String value = \"aaaabbbbccccdddd\";\r\n    String errorMessage = CityValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, CityValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4826, "methodname":"testBadLetters()", "methodnamerefined":"testBadLetters", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest.testBadLetters", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest.testBadLetters()", "classid":701, "classname":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest", "shortclassname":"CityValidatorTest", "method":"public void testBadLetters() throws Exception {\r\n    String value = \"bob%\";\r\n    String errorMessage = CityValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, CityValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4827, "methodname":"testGoodAnswer()", "methodnamerefined":"testGoodAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest.testGoodAnswer", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest.testGoodAnswer()", "classid":701, "classname":"edu.ncsu.csc.itrust.validate.regex.CityValidatorTest", "shortclassname":"CityValidatorTest", "method":"public void testGoodAnswer() throws Exception {\r\n    String value = \"City Name\";\r\n    String errorMessage = CityValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, CityValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4828, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CodeDescriptionValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CodeDescriptionValidatorTest.-init-()", "classid":702, "classname":"edu.ncsu.csc.itrust.validate.regex.CodeDescriptionValidatorTest", "shortclassname":"CodeDescriptionValidatorTest", "method":"CodeDescriptionValidatorTest() {\r\n}"},
 {"id":4829, "methodname":"testNotesGood()", "methodnamerefined":"testNotesGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CodeDescriptionValidatorTest.testNotesGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CodeDescriptionValidatorTest.testNotesGood()", "classid":702, "classname":"edu.ncsu.csc.itrust.validate.regex.CodeDescriptionValidatorTest", "shortclassname":"CodeDescriptionValidatorTest", "method":"public void testNotesGood() throws Exception {\r\n    String value = \"A description\";\r\n    String errorMessage = CodeDescriptionValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, CodeDescriptionValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4830, "methodname":"testNotesTooLong()", "methodnamerefined":"testNotesTooLong", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.CodeDescriptionValidatorTest.testNotesTooLong", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.CodeDescriptionValidatorTest.testNotesTooLong()", "classid":702, "classname":"edu.ncsu.csc.itrust.validate.regex.CodeDescriptionValidatorTest", "shortclassname":"CodeDescriptionValidatorTest", "method":"public void testNotesTooLong() throws Exception {\r\n    String value = \"1234567890123456789012345678901\";\r\n    String errorMessage = CodeDescriptionValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, CodeDescriptionValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4831, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.DateValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.DateValidatorTest.-init-()", "classid":703, "classname":"edu.ncsu.csc.itrust.validate.regex.DateValidatorTest", "shortclassname":"DateValidatorTest", "method":"DateValidatorTest() {\r\n}"},
 {"id":4832, "methodname":"testDateGood()", "methodnamerefined":"testDateGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.DateValidatorTest.testDateGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.DateValidatorTest.testDateGood()", "classid":703, "classname":"edu.ncsu.csc.itrust.validate.regex.DateValidatorTest", "shortclassname":"DateValidatorTest", "method":"public void testDateGood() throws Exception {\r\n    String value = \"05/19/1984\";\r\n    String errorMessage = DateValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.DATE, false));\r\n}"},
 {"id":4833, "methodname":"testDateWithSpace()", "methodnamerefined":"testDateWithSpace", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.DateValidatorTest.testDateWithSpace", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.DateValidatorTest.testDateWithSpace()", "classid":703, "classname":"edu.ncsu.csc.itrust.validate.regex.DateValidatorTest", "shortclassname":"DateValidatorTest", "method":"public void testDateWithSpace() throws Exception {\r\n    String value = \"05/19/1984 \";\r\n    String errorMessage = DateValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.DATE, false));\r\n}"},
 {"id":4834, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.-init-()", "classid":704, "classname":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest", "shortclassname":"EmailValidatorTest", "method":"EmailValidatorTest() {\r\n}"},
 {"id":4835, "methodname":"testBadFormat()", "methodnamerefined":"testBadFormat", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testBadFormat", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testBadFormat()", "classid":704, "classname":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest", "shortclassname":"EmailValidatorTest", "method":"public void testBadFormat() throws Exception {\r\n    String value = \"---@---.com\";\r\n    String errorMessage = EmailValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, EmailValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4836, "methodname":"testBadFormatMultipleAtSymbol()", "methodnamerefined":"testBadFormatMultipleAtSymbol", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testBadFormatMultipleAtSymbol", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testBadFormatMultipleAtSymbol()", "classid":704, "classname":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest", "shortclassname":"EmailValidatorTest", "method":"public void testBadFormatMultipleAtSymbol() throws Exception {\r\n    String value = \"A@b@c@example.com\";\r\n    String errorMessage = EmailValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, EmailValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4837, "methodname":"testBadLength()", "methodnamerefined":"testBadLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testBadLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testBadLength()", "classid":704, "classname":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest", "shortclassname":"EmailValidatorTest", "method":"public void testBadLength() throws Exception {\r\n    String value = \"1234567890123456789012345678901\";\r\n    String errorMessage = EmailValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, EmailValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4838, "methodname":"testBadLetters()", "methodnamerefined":"testBadLetters", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testBadLetters", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testBadLetters()", "classid":704, "classname":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest", "shortclassname":"EmailValidatorTest", "method":"public void testBadLetters() throws Exception {\r\n    String value = \"bob%\";\r\n    String errorMessage = EmailValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, EmailValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4839, "methodname":"testGoodEmail()", "methodnamerefined":"testGoodEmail", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testGoodEmail", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testGoodEmail()", "classid":704, "classname":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest", "shortclassname":"EmailValidatorTest", "method":"public void testGoodEmail() throws Exception {\r\n    String value = \"bob.person1@nc.rr.A.com\";\r\n    String errorMessage = EmailValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, EmailValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4840, "methodname":"testGoodEmailWithPlus()", "methodnamerefined":"testGoodEmailWithPlus", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testGoodEmailWithPlus", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest.testGoodEmailWithPlus()", "classid":704, "classname":"edu.ncsu.csc.itrust.validate.regex.EmailValidatorTest", "shortclassname":"EmailValidatorTest", "method":"public void testGoodEmailWithPlus() throws Exception {\r\n    String value = \"disposable.style.email.with+symbol@example.com\";\r\n    String errorMessage = EmailValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, EmailValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4841, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest.-init-()", "classid":705, "classname":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest", "shortclassname":"GenderValidatorTest", "method":"GenderValidatorTest() {\r\n}"},
 {"id":4842, "methodname":"testBadLength()", "methodnamerefined":"testBadLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest.testBadLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest.testBadLength()", "classid":705, "classname":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest", "shortclassname":"GenderValidatorTest", "method":"public void testBadLength() throws Exception {\r\n    String value = \"abcabcabcabcabcabcabcabcabcabca\";\r\n    String errorMessage = GenderValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, GenderValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4843, "methodname":"testBadLetters()", "methodnamerefined":"testBadLetters", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest.testBadLetters", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest.testBadLetters()", "classid":705, "classname":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest", "shortclassname":"GenderValidatorTest", "method":"public void testBadLetters() throws Exception {\r\n    String value = \"bob%\";\r\n    String errorMessage = GenderValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, GenderValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4844, "methodname":"testGoodAnswer()", "methodnamerefined":"testGoodAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest.testGoodAnswer", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest.testGoodAnswer()", "classid":705, "classname":"edu.ncsu.csc.itrust.validate.regex.GenderValidatorTest", "shortclassname":"GenderValidatorTest", "method":"public void testGoodAnswer() throws Exception {\r\n    String value = \"356 Some place blvd\";\r\n    String errorMessage = GenderValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, GenderValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4845, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.-init-()", "classid":706, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest", "shortclassname":"HospitalIDValidatorTest", "method":"HospitalIDValidatorTest() {\r\n}"},
 {"id":4846, "methodname":"testHospitalIDGood()", "methodnamerefined":"testHospitalIDGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDGood()", "classid":706, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest", "shortclassname":"HospitalIDValidatorTest", "method":"public void testHospitalIDGood() throws Exception {\r\n    String value = \"0000000000\";\r\n    String errorMessage = HospitalIDValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Hospital ID\", value, ValidationFormat.HOSPITAL_ID, false));\r\n}"},
 {"id":4847, "methodname":"testHospitalIDLength()", "methodnamerefined":"testHospitalIDLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDLength()", "classid":706, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest", "shortclassname":"HospitalIDValidatorTest", "method":"public void testHospitalIDLength() throws Exception {\r\n    String value = \"12345678901\";\r\n    String errorMessage = HospitalIDValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Hospital ID\", value, ValidationFormat.HOSPITAL_ID, false));\r\n}"},
 {"id":4848, "methodname":"testHospitalIDLetter()", "methodnamerefined":"testHospitalIDLetter", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDLetter", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDLetter()", "classid":706, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest", "shortclassname":"HospitalIDValidatorTest", "method":"public void testHospitalIDLetter() throws Exception {\r\n    String value = \"a\";\r\n    String errorMessage = HospitalIDValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Hospital ID\", value, ValidationFormat.HOSPITAL_ID, false));\r\n}"},
 {"id":4849, "methodname":"testHospitalIDNegative()", "methodnamerefined":"testHospitalIDNegative", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDNegative", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDNegative()", "classid":706, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest", "shortclassname":"HospitalIDValidatorTest", "method":"public void testHospitalIDNegative() throws Exception {\r\n    Long value = -1L;\r\n    String errorMessage = HospitalIDValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Hospital ID\", value, ValidationFormat.HOSPITAL_ID, false));\r\n}"},
 {"id":4850, "methodname":"testHospitalIDPunct()", "methodnamerefined":"testHospitalIDPunct", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDPunct", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest.testHospitalIDPunct()", "classid":706, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalIDValidatorTest", "shortclassname":"HospitalIDValidatorTest", "method":"public void testHospitalIDPunct() throws Exception {\r\n    String value = \".\";\r\n    String errorMessage = HospitalIDValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Hospital ID\", value, ValidationFormat.HOSPITAL_ID, false));\r\n}"},
 {"id":4851, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.-init-()", "classid":707, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest", "shortclassname":"HospitalNameValidatorTest", "method":"HospitalNameValidatorTest() {\r\n}"},
 {"id":4852, "methodname":"testHospitalNameBadChars()", "methodnamerefined":"testHospitalNameBadChars", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.testHospitalNameBadChars", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.testHospitalNameBadChars()", "classid":707, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest", "shortclassname":"HospitalNameValidatorTest", "method":"public void testHospitalNameBadChars() {\r\n    String hName = \"9 A very long Hospital Names!\";\r\n    assertEquals(HospitalNameValidatorTest.FAILED, validatorProxy.checkFormat(\"Hospital Name\", hName, HospitalNameValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4853, "methodname":"testHospitalNameGood()", "methodnamerefined":"testHospitalNameGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.testHospitalNameGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.testHospitalNameGood()", "classid":707, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest", "shortclassname":"HospitalNameValidatorTest", "method":"public void testHospitalNameGood() throws Exception {\r\n    String value = \"90A very long Hospital Names.\";\r\n    String errorMessage = HospitalNameValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Hospital Name\", value, HospitalNameValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4854, "methodname":"testHospitalNameTooLong()", "methodnamerefined":"testHospitalNameTooLong", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.testHospitalNameTooLong", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.testHospitalNameTooLong()", "classid":707, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest", "shortclassname":"HospitalNameValidatorTest", "method":"public void testHospitalNameTooLong() throws Exception {\r\n    String chunkOfTen = \"1234567890\";\r\n    String value = \"a\";\r\n    for (int i = 0; i < 3; i++) {\r\n        value += chunkOfTen;// shamelessly borrowed from Notes Test\r\n\r\n    }\r\n    String errorMessage = HospitalNameValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Hospital Name\", value, HospitalNameValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4855, "methodname":"testHospitalNameTooShort()", "methodnamerefined":"testHospitalNameTooShort", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.testHospitalNameTooShort", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest.testHospitalNameTooShort()", "classid":707, "classname":"edu.ncsu.csc.itrust.validate.regex.HospitalNameValidatorTest", "shortclassname":"HospitalNameValidatorTest", "method":"public void testHospitalNameTooShort() {\r\n    String hName = \"\";\r\n    assertEquals(HospitalNameValidatorTest.FAILED, validatorProxy.checkFormat(\"Hospital Name\", hName, HospitalNameValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4856, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.-init-()", "classid":708, "classname":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest", "shortclassname":"ICD9CMValidatorTest", "method":"ICD9CMValidatorTest() {\r\n}"},
 {"id":4857, "methodname":"testBadICDLengthFirst()", "methodnamerefined":"testBadICDLengthFirst", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testBadICDLengthFirst", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testBadICDLengthFirst()", "classid":708, "classname":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest", "shortclassname":"ICD9CMValidatorTest", "method":"public void testBadICDLengthFirst() throws Exception {\r\n    String value = \"0159.02\";\r\n    String errorMessage = ICD9CMValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ICD9CMValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4858, "methodname":"testBadICDLengthSecond()", "methodnamerefined":"testBadICDLengthSecond", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testBadICDLengthSecond", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testBadICDLengthSecond()", "classid":708, "classname":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest", "shortclassname":"ICD9CMValidatorTest", "method":"public void testBadICDLengthSecond() throws Exception {\r\n    String value = \"159.022\";\r\n    String errorMessage = ICD9CMValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ICD9CMValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4859, "methodname":"testBadICDLetters()", "methodnamerefined":"testBadICDLetters", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testBadICDLetters", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testBadICDLetters()", "classid":708, "classname":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest", "shortclassname":"ICD9CMValidatorTest", "method":"public void testBadICDLetters() throws Exception {\r\n    String value = \"159@022\";\r\n    String errorMessage = ICD9CMValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ICD9CMValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4860, "methodname":"testGoodICD()", "methodnamerefined":"testGoodICD", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testGoodICD", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testGoodICD()", "classid":708, "classname":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest", "shortclassname":"ICD9CMValidatorTest", "method":"public void testGoodICD() throws Exception {\r\n    String value = \"1.0\";\r\n    String errorMessage = ICD9CMValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ICD9CMValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4861, "methodname":"testGoodICDAnotherInt()", "methodnamerefined":"testGoodICDAnotherInt", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testGoodICDAnotherInt", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testGoodICDAnotherInt()", "classid":708, "classname":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest", "shortclassname":"ICD9CMValidatorTest", "method":"public void testGoodICDAnotherInt() throws Exception {\r\n    String value = \"159.\";\r\n    String errorMessage = ICD9CMValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ICD9CMValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4862, "methodname":"testGoodICDInt()", "methodnamerefined":"testGoodICDInt", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testGoodICDInt", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testGoodICDInt()", "classid":708, "classname":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest", "shortclassname":"ICD9CMValidatorTest", "method":"public void testGoodICDInt() throws Exception {\r\n    String value = \"159\";\r\n    String errorMessage = ICD9CMValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ICD9CMValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4863, "methodname":"testGoodICDMore()", "methodnamerefined":"testGoodICDMore", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testGoodICDMore", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest.testGoodICDMore()", "classid":708, "classname":"edu.ncsu.csc.itrust.validate.regex.ICD9CMValidatorTest", "shortclassname":"ICD9CMValidatorTest", "method":"public void testGoodICDMore() throws Exception {\r\n    String value = \"159.02\";\r\n    String errorMessage = ICD9CMValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ICD9CMValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4864, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.-init-()", "classid":709, "classname":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest", "shortclassname":"InsuranceIDValidatorTest", "method":"InsuranceIDValidatorTest() {\r\n}"},
 {"id":4865, "methodname":"testIDWithNumber()", "methodnamerefined":"testIDWithNumber", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.testIDWithNumber", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.testIDWithNumber()", "classid":709, "classname":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest", "shortclassname":"InsuranceIDValidatorTest", "method":"public void testIDWithNumber() throws Exception {\r\n    String value = \"NameIs1337\";\r\n    String errorMessage = InsuranceIDValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.INSURANCE_ID, false));\r\n}"},
 {"id":4866, "methodname":"testNameCheckTooLong()", "methodnamerefined":"testNameCheckTooLong", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.testNameCheckTooLong", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.testNameCheckTooLong()", "classid":709, "classname":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest", "shortclassname":"InsuranceIDValidatorTest", "method":"public void testNameCheckTooLong() throws Exception {\r\n    String value = \"This-Name-Is-Too-Long \";\r\n    String errorMessage = InsuranceIDValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.INSURANCE_ID, false));\r\n}"},
 {"id":4867, "methodname":"testNameGood()", "methodnamerefined":"testNameGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.testNameGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.testNameGood()", "classid":709, "classname":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest", "shortclassname":"InsuranceIDValidatorTest", "method":"public void testNameGood() throws Exception {\r\n    String value = \"NameIsGood-\";\r\n    String errorMessage = InsuranceIDValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.INSURANCE_ID, false));\r\n}"},
 {"id":4868, "methodname":"testNameLotsOfBadStuff()", "methodnamerefined":"testNameLotsOfBadStuff", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.testNameLotsOfBadStuff", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest.testNameLotsOfBadStuff()", "classid":709, "classname":"edu.ncsu.csc.itrust.validate.regex.InsuranceIDValidatorTest", "shortclassname":"InsuranceIDValidatorTest", "method":"public void testNameLotsOfBadStuff() throws Exception {\r\n    String value = \"Bad!@#$%^&*()?.:;\";\r\n    String errorMessage = InsuranceIDValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.INSURANCE_ID, false));\r\n}"},
 {"id":4869, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.-init-()", "classid":710, "classname":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest", "shortclassname":"MIDValidatorTest", "method":"MIDValidatorTest() {\r\n}"},
 {"id":4870, "methodname":"testMIDGood()", "methodnamerefined":"testMIDGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.testMIDGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.testMIDGood()", "classid":710, "classname":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest", "shortclassname":"MIDValidatorTest", "method":"public void testMIDGood() throws Exception {\r\n    String value = \"9000000000\";\r\n    String errorMessage = MIDValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.MID, false));\r\n}"},
 {"id":4871, "methodname":"testMIDLength()", "methodnamerefined":"testMIDLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.testMIDLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.testMIDLength()", "classid":710, "classname":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest", "shortclassname":"MIDValidatorTest", "method":"public void testMIDLength() throws Exception {\r\n    String value = \"12345678901\";\r\n    String errorMessage = MIDValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.MID, false));\r\n}"},
 {"id":4872, "methodname":"testMIDLetter()", "methodnamerefined":"testMIDLetter", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.testMIDLetter", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.testMIDLetter()", "classid":710, "classname":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest", "shortclassname":"MIDValidatorTest", "method":"public void testMIDLetter() throws Exception {\r\n    String value = \"a\";\r\n    String errorMessage = MIDValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.MID, false));\r\n}"},
 {"id":4873, "methodname":"testMIDNegative()", "methodnamerefined":"testMIDNegative", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.testMIDNegative", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest.testMIDNegative()", "classid":710, "classname":"edu.ncsu.csc.itrust.validate.regex.MIDValidatorTest", "shortclassname":"MIDValidatorTest", "method":"public void testMIDNegative() throws Exception {\r\n    Long value = -1L;\r\n    String errorMessage = MIDValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.MID, false));\r\n}"},
 {"id":4874, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest.-init-()", "classid":711, "classname":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest", "shortclassname":"NDCodeValidatorTest", "method":"NDCodeValidatorTest() {\r\n}"},
 {"id":4875, "methodname":"testGood()", "methodnamerefined":"testGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest.testGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest.testGood()", "classid":711, "classname":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest", "shortclassname":"NDCodeValidatorTest", "method":"public void testGood() throws Exception {\r\n    String value = \"123456789\";\r\n    String errorMessage = NDCodeValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, NDCodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4876, "methodname":"testNotInt()", "methodnamerefined":"testNotInt", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest.testNotInt", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest.testNotInt()", "classid":711, "classname":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest", "shortclassname":"NDCodeValidatorTest", "method":"public void testNotInt() throws Exception {\r\n    String value = \"1234a\";\r\n    String errorMessage = NDCodeValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, NDCodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4877, "methodname":"testTooLong()", "methodnamerefined":"testTooLong", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest.testTooLong", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest.testTooLong()", "classid":711, "classname":"edu.ncsu.csc.itrust.validate.regex.NDCodeValidatorTest", "shortclassname":"NDCodeValidatorTest", "method":"public void testTooLong() throws Exception {\r\n    String value = \"1234567890\";\r\n    String errorMessage = NDCodeValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, NDCodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4878, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.-init-()", "classid":712, "classname":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest", "shortclassname":"NameValidatorTest", "method":"NameValidatorTest() {\r\n}"},
 {"id":4879, "methodname":"testNameCheckTooLong()", "methodnamerefined":"testNameCheckTooLong", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.testNameCheckTooLong", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.testNameCheckTooLong()", "classid":712, "classname":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest", "shortclassname":"NameValidatorTest", "method":"public void testNameCheckTooLong() throws Exception {\r\n    String value = \"This-Name-Is-Too-Long \";\r\n    String errorMessage = NameValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.NAME, false));\r\n}"},
 {"id":4880, "methodname":"testNameGood()", "methodnamerefined":"testNameGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.testNameGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.testNameGood()", "classid":712, "classname":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest", "shortclassname":"NameValidatorTest", "method":"public void testNameGood() throws Exception {\r\n    String value = \"NameIsGood-\";\r\n    String errorMessage = NameValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.NAME, false));\r\n}"},
 {"id":4881, "methodname":"testNameLotsOfBadStuff()", "methodnamerefined":"testNameLotsOfBadStuff", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.testNameLotsOfBadStuff", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.testNameLotsOfBadStuff()", "classid":712, "classname":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest", "shortclassname":"NameValidatorTest", "method":"public void testNameLotsOfBadStuff() throws Exception {\r\n    String value = \"Bad!@#$%^&*()?.:;\";\r\n    String errorMessage = NameValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.NAME, false));\r\n}"},
 {"id":4882, "methodname":"testNameNoLetters()", "methodnamerefined":"testNameNoLetters", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.testNameNoLetters", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest.testNameNoLetters()", "classid":712, "classname":"edu.ncsu.csc.itrust.validate.regex.NameValidatorTest", "shortclassname":"NameValidatorTest", "method":"public void testNameNoLetters() throws Exception {\r\n    String value = \"----\";\r\n    String errorMessage = NameValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.NAME, false));\r\n}"},
 {"id":4883, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NotesValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NotesValidatorTest.-init-()", "classid":713, "classname":"edu.ncsu.csc.itrust.validate.regex.NotesValidatorTest", "shortclassname":"NotesValidatorTest", "method":"NotesValidatorTest() {\r\n}"},
 {"id":4884, "methodname":"testNotesGood()", "methodnamerefined":"testNotesGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NotesValidatorTest.testNotesGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NotesValidatorTest.testNotesGood()", "classid":713, "classname":"edu.ncsu.csc.itrust.validate.regex.NotesValidatorTest", "shortclassname":"NotesValidatorTest", "method":"public void testNotesGood() throws Exception {\r\n    String value = \"This is a very long set of notes?!_.\";\r\n    String errorMessage = NotesValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, NotesValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4885, "methodname":"testNotesTooLong()", "methodnamerefined":"testNotesTooLong", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.NotesValidatorTest.testNotesTooLong", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.NotesValidatorTest.testNotesTooLong()", "classid":713, "classname":"edu.ncsu.csc.itrust.validate.regex.NotesValidatorTest", "shortclassname":"NotesValidatorTest", "method":"public void testNotesTooLong() throws Exception {\r\n    String chunkOfTen = \"1234567890\";\r\n    String value = \"a\";\r\n    for (int i = 0; i < 30; i++) {\r\n        value += chunkOfTen;// make 301 - BVA baby!\r\n\r\n    }\r\n    String errorMessage = NotesValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, NotesValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4886, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest.-init-()", "classid":714, "classname":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest", "shortclassname":"PasswordValidatorTest", "method":"PasswordValidatorTest() {\r\n}"},
 {"id":4887, "methodname":"testGood()", "methodnamerefined":"testGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest.testGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest.testGood()", "classid":714, "classname":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest", "shortclassname":"PasswordValidatorTest", "method":"public void testGood() throws Exception {\r\n    String value = \"12345678901234567890\";\r\n    String errorMessage = PasswordValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, PasswordValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4888, "methodname":"testTooLong()", "methodnamerefined":"testTooLong", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest.testTooLong", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest.testTooLong()", "classid":714, "classname":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest", "shortclassname":"PasswordValidatorTest", "method":"public void testTooLong() throws Exception {\r\n    String value = \"123456789012345678901\";\r\n    String errorMessage = PasswordValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, PasswordValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4889, "methodname":"testWithSpace()", "methodnamerefined":"testWithSpace", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest.testWithSpace", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest.testWithSpace()", "classid":714, "classname":"edu.ncsu.csc.itrust.validate.regex.PasswordValidatorTest", "shortclassname":"PasswordValidatorTest", "method":"public void testWithSpace() throws Exception {\r\n    String value = \"12345678 \";\r\n    String errorMessage = PasswordValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, PasswordValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4890, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest.-init-()", "classid":715, "classname":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest", "shortclassname":"PhoneValidatorTest", "method":"PhoneValidatorTest() {\r\n}"},
 {"id":4891, "methodname":"testPhoneBadLength()", "methodnamerefined":"testPhoneBadLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest.testPhoneBadLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest.testPhoneBadLength()", "classid":715, "classname":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest", "shortclassname":"PhoneValidatorTest", "method":"public void testPhoneBadLength() throws Exception {\r\n    String value = \"012-345-67890\";\r\n    String errorMessage = PhoneValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.PHONE_NUMBER, false));\r\n}"},
 {"id":4892, "methodname":"testPhoneGood()", "methodnamerefined":"testPhoneGood", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest.testPhoneGood", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest.testPhoneGood()", "classid":715, "classname":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest", "shortclassname":"PhoneValidatorTest", "method":"public void testPhoneGood() throws Exception {\r\n    String value = \"012-345-6789\";\r\n    String errorMessage = PhoneValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.PHONE_NUMBER, false));\r\n}"},
 {"id":4893, "methodname":"testPhoneWithLetter()", "methodnamerefined":"testPhoneWithLetter", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest.testPhoneWithLetter", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest.testPhoneWithLetter()", "classid":715, "classname":"edu.ncsu.csc.itrust.validate.regex.PhoneValidatorTest", "shortclassname":"PhoneValidatorTest", "method":"public void testPhoneWithLetter() throws Exception {\r\n    String value = \"O12-345-6789\";\r\n    String errorMessage = PhoneValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ValidationFormat.PHONE_NUMBER, false));\r\n}"},
 {"id":4894, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest.-init-()", "classid":716, "classname":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest", "shortclassname":"QuestionValidatorTest", "method":"QuestionValidatorTest() {\r\n}"},
 {"id":4895, "methodname":"testBadLength()", "methodnamerefined":"testBadLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest.testBadLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest.testBadLength()", "classid":716, "classname":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest", "shortclassname":"QuestionValidatorTest", "method":"public void testBadLength() throws Exception {\r\n    String value = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\";\r\n    String errorMessage = QuestionValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, QuestionValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4896, "methodname":"testBadLetters()", "methodnamerefined":"testBadLetters", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest.testBadLetters", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest.testBadLetters()", "classid":716, "classname":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest", "shortclassname":"QuestionValidatorTest", "method":"public void testBadLetters() throws Exception {\r\n    String value = \"bob%\";\r\n    String errorMessage = QuestionValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, QuestionValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4897, "methodname":"testGoodQuestion()", "methodnamerefined":"testGoodQuestion", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest.testGoodQuestion", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest.testGoodQuestion()", "classid":716, "classname":"edu.ncsu.csc.itrust.validate.regex.QuestionValidatorTest", "shortclassname":"QuestionValidatorTest", "method":"public void testGoodQuestion() throws Exception {\r\n    String value = \"what is your name?-.\";\r\n    String errorMessage = QuestionValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, QuestionValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4898, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.-init-()", "classid":717, "classname":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest", "shortclassname":"StateValidatorTest", "method":"StateValidatorTest() {\r\n}"},
 {"id":4899, "methodname":"testBadCapital()", "methodnamerefined":"testBadCapital", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.testBadCapital", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.testBadCapital()", "classid":717, "classname":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest", "shortclassname":"StateValidatorTest", "method":"public void testBadCapital() throws Exception {\r\n    String value = \"mI\";\r\n    String errorMessage = StateValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, StateValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4900, "methodname":"testBadLength()", "methodnamerefined":"testBadLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.testBadLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.testBadLength()", "classid":717, "classname":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest", "shortclassname":"StateValidatorTest", "method":"public void testBadLength() throws Exception {\r\n    String value = \"MI \";\r\n    String errorMessage = StateValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, StateValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4901, "methodname":"testBadLetters()", "methodnamerefined":"testBadLetters", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.testBadLetters", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.testBadLetters()", "classid":717, "classname":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest", "shortclassname":"StateValidatorTest", "method":"public void testBadLetters() throws Exception {\r\n    String value = \"Mi\";\r\n    String errorMessage = StateValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, StateValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4902, "methodname":"testGoodAnswer()", "methodnamerefined":"testGoodAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.testGoodAnswer", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest.testGoodAnswer()", "classid":717, "classname":"edu.ncsu.csc.itrust.validate.regex.StateValidatorTest", "shortclassname":"StateValidatorTest", "method":"public void testGoodAnswer() throws Exception {\r\n    String value = \"MI\";\r\n    String errorMessage = StateValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, StateValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4903, "methodname":"-init-()", "methodnamerefined":"-init-", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.-init-", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.-init-()", "classid":718, "classname":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest", "shortclassname":"ZipcodeValidatorTest", "method":"ZipcodeValidatorTest() {\r\n}"},
 {"id":4904, "methodname":"testBadLength()", "methodnamerefined":"testBadLength", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.testBadLength", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.testBadLength()", "classid":718, "classname":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest", "shortclassname":"ZipcodeValidatorTest", "method":"public void testBadLength() throws Exception {\r\n    String value = \"27607-\";\r\n    String errorMessage = ZipcodeValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ZipcodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4905, "methodname":"testBadLetters()", "methodnamerefined":"testBadLetters", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.testBadLetters", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.testBadLetters()", "classid":718, "classname":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest", "shortclassname":"ZipcodeValidatorTest", "method":"public void testBadLetters() throws Exception {\r\n    String value = \"xxxxx-xxxx\";\r\n    String errorMessage = ZipcodeValidatorTest.FAILED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ZipcodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4906, "methodname":"testGoodAnswer()", "methodnamerefined":"testGoodAnswer", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.testGoodAnswer", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.testGoodAnswer()", "classid":718, "classname":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest", "shortclassname":"ZipcodeValidatorTest", "method":"public void testGoodAnswer() throws Exception {\r\n    String value = \"27607\";\r\n    String errorMessage = ZipcodeValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ZipcodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"},
 {"id":4907, "methodname":"testGoodAnswerTwoParts()", "methodnamerefined":"testGoodAnswerTwoParts", "methodabbreviation":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.testGoodAnswerTwoParts", "fullmethod":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest.testGoodAnswerTwoParts()", "classid":718, "classname":"edu.ncsu.csc.itrust.validate.regex.ZipcodeValidatorTest", "shortclassname":"ZipcodeValidatorTest", "method":"public void testGoodAnswerTwoParts() throws Exception {\r\n    String value = \"27607-0901\";\r\n    String errorMessage = ZipcodeValidatorTest.PASSED;\r\n    assertEquals(errorMessage, validatorProxy.checkFormat(\"Name\", value, ZipcodeValidatorTest.VALIDATION_FORMAT, false));\r\n}"}]